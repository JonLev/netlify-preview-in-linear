var Xh = Object.defineProperty;
var $h = (n, e, i) => e in n ? Xh(n, e, { enumerable: !0, configurable: !0, writable: !0, value: i }) : n[e] = i;
var QA = (n, e, i) => ($h(n, typeof e != "symbol" ? e + "" : e, i), i), ss = (n, e, i) => {
  if (!e.has(n))
    throw TypeError("Cannot " + i);
};
var Y = (n, e, i) => (ss(n, e, "read from private field"), i ? i.call(n) : e.get(n)), pi = (n, e, i) => {
  if (e.has(n))
    throw TypeError("Cannot add the same private member more than once");
  e instanceof WeakSet ? e.add(n) : e.set(n, i);
}, Ve = (n, e, i, a) => (ss(n, e, "write to private field"), a ? a.call(n, i) : e.set(n, i), i);
var on = (n, e, i) => (ss(n, e, "access private method"), i);
var me = typeof globalThis < "u" ? globalThis : typeof window < "u" ? window : typeof global < "u" ? global : typeof self < "u" ? self : {};
function e2(n) {
  return n && n.__esModule && Object.prototype.hasOwnProperty.call(n, "default") ? n.default : n;
}
function cd(n) {
  if (n.__esModule)
    return n;
  var e = n.default;
  if (typeof e == "function") {
    var i = function a() {
      return this instanceof a ? Reflect.construct(e, arguments, this.constructor) : e.apply(this, arguments);
    };
    i.prototype = e.prototype;
  } else
    i = {};
  return Object.defineProperty(i, "__esModule", { value: !0 }), Object.keys(n).forEach(function(a) {
    var t = Object.getOwnPropertyDescriptor(n, a);
    Object.defineProperty(i, a, t.get ? t : {
      enumerable: !0,
      get: function() {
        return n[a];
      }
    });
  }), i;
}
var os = {}, ht = {};
const Ue = {}, i2 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: Ue
}, Symbol.toStringTag, { value: "Module" })), J = /* @__PURE__ */ cd(i2);
var Ea = {};
Object.defineProperty(Ea, "__esModule", { value: !0 });
Ea.toCommandProperties = Ea.toCommandValue = void 0;
function n2(n) {
  return n == null ? "" : typeof n == "string" || n instanceof String ? n : JSON.stringify(n);
}
Ea.toCommandValue = n2;
function a2(n) {
  return Object.keys(n).length ? {
    title: n.title,
    file: n.file,
    line: n.startLine,
    endLine: n.endLine,
    col: n.startColumn,
    endColumn: n.endColumn
  } : {};
}
Ea.toCommandProperties = a2;
var t2 = me && me.__createBinding || (Object.create ? function(n, e, i, a) {
  a === void 0 && (a = i), Object.defineProperty(n, a, { enumerable: !0, get: function() {
    return e[i];
  } });
} : function(n, e, i, a) {
  a === void 0 && (a = i), n[a] = e[i];
}), d2 = me && me.__setModuleDefault || (Object.create ? function(n, e) {
  Object.defineProperty(n, "default", { enumerable: !0, value: e });
} : function(n, e) {
  n.default = e;
}), r2 = me && me.__importStar || function(n) {
  if (n && n.__esModule)
    return n;
  var e = {};
  if (n != null)
    for (var i in n)
      i !== "default" && Object.hasOwnProperty.call(n, i) && t2(e, n, i);
  return d2(e, n), e;
};
Object.defineProperty(ht, "__esModule", { value: !0 });
ht.issue = ht.issueCommand = void 0;
const s2 = r2(J), Zp = Ea;
function Kp(n, e, i) {
  const a = new l2(n, e, i);
  process.stdout.write(a.toString() + s2.EOL);
}
ht.issueCommand = Kp;
function o2(n, e = "") {
  Kp(n, {}, e);
}
ht.issue = o2;
const SA = "::";
class l2 {
  constructor(e, i, a) {
    e || (e = "missing.command"), this.command = e, this.properties = i, this.message = a;
  }
  toString() {
    let e = SA + this.command;
    if (this.properties && Object.keys(this.properties).length > 0) {
      e += " ";
      let i = !0;
      for (const a in this.properties)
        if (this.properties.hasOwnProperty(a)) {
          const t = this.properties[a];
          t && (i ? i = !1 : e += ",", e += `${a}=${m2(t)}`);
        }
    }
    return e += `${SA}${A2(this.message)}`, e;
  }
}
function A2(n) {
  return Zp.toCommandValue(n).replace(/%/g, "%25").replace(/\r/g, "%0D").replace(/\n/g, "%0A");
}
function m2(n) {
  return Zp.toCommandValue(n).replace(/%/g, "%25").replace(/\r/g, "%0D").replace(/\n/g, "%0A").replace(/:/g, "%3A").replace(/,/g, "%2C");
}
var ft = {}, Gd, u2 = new Uint8Array(16);
function Xp() {
  if (!Gd && (Gd = typeof crypto < "u" && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto < "u" && typeof msCrypto.getRandomValues == "function" && msCrypto.getRandomValues.bind(msCrypto), !Gd))
    throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");
  return Gd(u2);
}
const p2 = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;
function wr(n) {
  return typeof n == "string" && p2.test(n);
}
var fi = [];
for (var ls = 0; ls < 256; ++ls)
  fi.push((ls + 256).toString(16).substr(1));
function Fr(n) {
  var e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0, i = (fi[n[e + 0]] + fi[n[e + 1]] + fi[n[e + 2]] + fi[n[e + 3]] + "-" + fi[n[e + 4]] + fi[n[e + 5]] + "-" + fi[n[e + 6]] + fi[n[e + 7]] + "-" + fi[n[e + 8]] + fi[n[e + 9]] + "-" + fi[n[e + 10]] + fi[n[e + 11]] + fi[n[e + 12]] + fi[n[e + 13]] + fi[n[e + 14]] + fi[n[e + 15]]).toLowerCase();
  if (!wr(i))
    throw TypeError("Stringified UUID is invalid");
  return i;
}
var DA, As, ms = 0, us = 0;
function c2(n, e, i) {
  var a = e && i || 0, t = e || new Array(16);
  n = n || {};
  var d = n.node || DA, r = n.clockseq !== void 0 ? n.clockseq : As;
  if (d == null || r == null) {
    var o = n.random || (n.rng || Xp)();
    d == null && (d = DA = [o[0] | 1, o[1], o[2], o[3], o[4], o[5]]), r == null && (r = As = (o[6] << 8 | o[7]) & 16383);
  }
  var s = n.msecs !== void 0 ? n.msecs : Date.now(), A = n.nsecs !== void 0 ? n.nsecs : us + 1, l = s - ms + (A - us) / 1e4;
  if (l < 0 && n.clockseq === void 0 && (r = r + 1 & 16383), (l < 0 || s > ms) && n.nsecs === void 0 && (A = 0), A >= 1e4)
    throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");
  ms = s, us = A, As = r, s += 122192928e5;
  var m = ((s & 268435455) * 1e4 + A) % 4294967296;
  t[a++] = m >>> 24 & 255, t[a++] = m >>> 16 & 255, t[a++] = m >>> 8 & 255, t[a++] = m & 255;
  var u = s / 4294967296 * 1e4 & 268435455;
  t[a++] = u >>> 8 & 255, t[a++] = u & 255, t[a++] = u >>> 24 & 15 | 16, t[a++] = u >>> 16 & 255, t[a++] = r >>> 8 | 128, t[a++] = r & 255;
  for (var c = 0; c < 6; ++c)
    t[a + c] = d[c];
  return e || Fr(t);
}
function $p(n) {
  if (!wr(n))
    throw TypeError("Invalid UUID");
  var e, i = new Uint8Array(16);
  return i[0] = (e = parseInt(n.slice(0, 8), 16)) >>> 24, i[1] = e >>> 16 & 255, i[2] = e >>> 8 & 255, i[3] = e & 255, i[4] = (e = parseInt(n.slice(9, 13), 16)) >>> 8, i[5] = e & 255, i[6] = (e = parseInt(n.slice(14, 18), 16)) >>> 8, i[7] = e & 255, i[8] = (e = parseInt(n.slice(19, 23), 16)) >>> 8, i[9] = e & 255, i[10] = (e = parseInt(n.slice(24, 36), 16)) / 1099511627776 & 255, i[11] = e / 4294967296 & 255, i[12] = e >>> 24 & 255, i[13] = e >>> 16 & 255, i[14] = e >>> 8 & 255, i[15] = e & 255, i;
}
function k2(n) {
  n = unescape(encodeURIComponent(n));
  for (var e = [], i = 0; i < n.length; ++i)
    e.push(n.charCodeAt(i));
  return e;
}
var v2 = "6ba7b810-9dad-11d1-80b4-00c04fd430c8", g2 = "6ba7b811-9dad-11d1-80b4-00c04fd430c8";
function ec(n, e, i) {
  function a(t, d, r, o) {
    if (typeof t == "string" && (t = k2(t)), typeof d == "string" && (d = $p(d)), d.length !== 16)
      throw TypeError("Namespace must be array-like (16 iterable integer values, 0-255)");
    var s = new Uint8Array(16 + t.length);
    if (s.set(d), s.set(t, d.length), s = i(s), s[6] = s[6] & 15 | e, s[8] = s[8] & 63 | 128, r) {
      o = o || 0;
      for (var A = 0; A < 16; ++A)
        r[o + A] = s[A];
      return r;
    }
    return Fr(s);
  }
  try {
    a.name = n;
  } catch {
  }
  return a.DNS = v2, a.URL = g2, a;
}
function h2(n) {
  if (typeof n == "string") {
    var e = unescape(encodeURIComponent(n));
    n = new Uint8Array(e.length);
    for (var i = 0; i < e.length; ++i)
      n[i] = e.charCodeAt(i);
  }
  return f2(N2(E2(n), n.length * 8));
}
function f2(n) {
  for (var e = [], i = n.length * 32, a = "0123456789abcdef", t = 0; t < i; t += 8) {
    var d = n[t >> 5] >>> t % 32 & 255, r = parseInt(a.charAt(d >>> 4 & 15) + a.charAt(d & 15), 16);
    e.push(r);
  }
  return e;
}
function ic(n) {
  return (n + 64 >>> 9 << 4) + 14 + 1;
}
function N2(n, e) {
  n[e >> 5] |= 128 << e % 32, n[ic(e) - 1] = e;
  for (var i = 1732584193, a = -271733879, t = -1732584194, d = 271733878, r = 0; r < n.length; r += 16) {
    var o = i, s = a, A = t, l = d;
    i = Bi(i, a, t, d, n[r], 7, -680876936), d = Bi(d, i, a, t, n[r + 1], 12, -389564586), t = Bi(t, d, i, a, n[r + 2], 17, 606105819), a = Bi(a, t, d, i, n[r + 3], 22, -1044525330), i = Bi(i, a, t, d, n[r + 4], 7, -176418897), d = Bi(d, i, a, t, n[r + 5], 12, 1200080426), t = Bi(t, d, i, a, n[r + 6], 17, -1473231341), a = Bi(a, t, d, i, n[r + 7], 22, -45705983), i = Bi(i, a, t, d, n[r + 8], 7, 1770035416), d = Bi(d, i, a, t, n[r + 9], 12, -1958414417), t = Bi(t, d, i, a, n[r + 10], 17, -42063), a = Bi(a, t, d, i, n[r + 11], 22, -1990404162), i = Bi(i, a, t, d, n[r + 12], 7, 1804603682), d = Bi(d, i, a, t, n[r + 13], 12, -40341101), t = Bi(t, d, i, a, n[r + 14], 17, -1502002290), a = Bi(a, t, d, i, n[r + 15], 22, 1236535329), i = Qi(i, a, t, d, n[r + 1], 5, -165796510), d = Qi(d, i, a, t, n[r + 6], 9, -1069501632), t = Qi(t, d, i, a, n[r + 11], 14, 643717713), a = Qi(a, t, d, i, n[r], 20, -373897302), i = Qi(i, a, t, d, n[r + 5], 5, -701558691), d = Qi(d, i, a, t, n[r + 10], 9, 38016083), t = Qi(t, d, i, a, n[r + 15], 14, -660478335), a = Qi(a, t, d, i, n[r + 4], 20, -405537848), i = Qi(i, a, t, d, n[r + 9], 5, 568446438), d = Qi(d, i, a, t, n[r + 14], 9, -1019803690), t = Qi(t, d, i, a, n[r + 3], 14, -187363961), a = Qi(a, t, d, i, n[r + 8], 20, 1163531501), i = Qi(i, a, t, d, n[r + 13], 5, -1444681467), d = Qi(d, i, a, t, n[r + 2], 9, -51403784), t = Qi(t, d, i, a, n[r + 7], 14, 1735328473), a = Qi(a, t, d, i, n[r + 12], 20, -1926607734), i = Si(i, a, t, d, n[r + 5], 4, -378558), d = Si(d, i, a, t, n[r + 8], 11, -2022574463), t = Si(t, d, i, a, n[r + 11], 16, 1839030562), a = Si(a, t, d, i, n[r + 14], 23, -35309556), i = Si(i, a, t, d, n[r + 1], 4, -1530992060), d = Si(d, i, a, t, n[r + 4], 11, 1272893353), t = Si(t, d, i, a, n[r + 7], 16, -155497632), a = Si(a, t, d, i, n[r + 10], 23, -1094730640), i = Si(i, a, t, d, n[r + 13], 4, 681279174), d = Si(d, i, a, t, n[r], 11, -358537222), t = Si(t, d, i, a, n[r + 3], 16, -722521979), a = Si(a, t, d, i, n[r + 6], 23, 76029189), i = Si(i, a, t, d, n[r + 9], 4, -640364487), d = Si(d, i, a, t, n[r + 12], 11, -421815835), t = Si(t, d, i, a, n[r + 15], 16, 530742520), a = Si(a, t, d, i, n[r + 2], 23, -995338651), i = Di(i, a, t, d, n[r], 6, -198630844), d = Di(d, i, a, t, n[r + 7], 10, 1126891415), t = Di(t, d, i, a, n[r + 14], 15, -1416354905), a = Di(a, t, d, i, n[r + 5], 21, -57434055), i = Di(i, a, t, d, n[r + 12], 6, 1700485571), d = Di(d, i, a, t, n[r + 3], 10, -1894986606), t = Di(t, d, i, a, n[r + 10], 15, -1051523), a = Di(a, t, d, i, n[r + 1], 21, -2054922799), i = Di(i, a, t, d, n[r + 8], 6, 1873313359), d = Di(d, i, a, t, n[r + 15], 10, -30611744), t = Di(t, d, i, a, n[r + 6], 15, -1560198380), a = Di(a, t, d, i, n[r + 13], 21, 1309151649), i = Di(i, a, t, d, n[r + 4], 6, -145523070), d = Di(d, i, a, t, n[r + 11], 10, -1120210379), t = Di(t, d, i, a, n[r + 2], 15, 718787259), a = Di(a, t, d, i, n[r + 9], 21, -343485551), i = va(i, o), a = va(a, s), t = va(t, A), d = va(d, l);
  }
  return [i, a, t, d];
}
function E2(n) {
  if (n.length === 0)
    return [];
  for (var e = n.length * 8, i = new Uint32Array(ic(e)), a = 0; a < e; a += 8)
    i[a >> 5] |= (n[a / 8] & 255) << a % 32;
  return i;
}
function va(n, e) {
  var i = (n & 65535) + (e & 65535), a = (n >> 16) + (e >> 16) + (i >> 16);
  return a << 16 | i & 65535;
}
function y2(n, e) {
  return n << e | n >>> 32 - e;
}
function Vr(n, e, i, a, t, d) {
  return va(y2(va(va(e, n), va(a, d)), t), i);
}
function Bi(n, e, i, a, t, d, r) {
  return Vr(e & i | ~e & a, n, e, t, d, r);
}
function Qi(n, e, i, a, t, d, r) {
  return Vr(e & a | i & ~a, n, e, t, d, r);
}
function Si(n, e, i, a, t, d, r) {
  return Vr(e ^ i ^ a, n, e, t, d, r);
}
function Di(n, e, i, a, t, d, r) {
  return Vr(i ^ (e | ~a), n, e, t, d, r);
}
var b2 = ec("v3", 48, h2);
const I2 = b2;
function C2(n, e, i) {
  n = n || {};
  var a = n.random || (n.rng || Xp)();
  if (a[6] = a[6] & 15 | 64, a[8] = a[8] & 63 | 128, e) {
    i = i || 0;
    for (var t = 0; t < 16; ++t)
      e[i + t] = a[t];
    return e;
  }
  return Fr(a);
}
function B2(n, e, i, a) {
  switch (n) {
    case 0:
      return e & i ^ ~e & a;
    case 1:
      return e ^ i ^ a;
    case 2:
      return e & i ^ e & a ^ i & a;
    case 3:
      return e ^ i ^ a;
  }
}
function ps(n, e) {
  return n << e | n >>> 32 - e;
}
function Q2(n) {
  var e = [1518500249, 1859775393, 2400959708, 3395469782], i = [1732584193, 4023233417, 2562383102, 271733878, 3285377520];
  if (typeof n == "string") {
    var a = unescape(encodeURIComponent(n));
    n = [];
    for (var t = 0; t < a.length; ++t)
      n.push(a.charCodeAt(t));
  } else
    Array.isArray(n) || (n = Array.prototype.slice.call(n));
  n.push(128);
  for (var d = n.length / 4 + 2, r = Math.ceil(d / 16), o = new Array(r), s = 0; s < r; ++s) {
    for (var A = new Uint32Array(16), l = 0; l < 16; ++l)
      A[l] = n[s * 64 + l * 4] << 24 | n[s * 64 + l * 4 + 1] << 16 | n[s * 64 + l * 4 + 2] << 8 | n[s * 64 + l * 4 + 3];
    o[s] = A;
  }
  o[r - 1][14] = (n.length - 1) * 8 / Math.pow(2, 32), o[r - 1][14] = Math.floor(o[r - 1][14]), o[r - 1][15] = (n.length - 1) * 8 & 4294967295;
  for (var m = 0; m < r; ++m) {
    for (var u = new Uint32Array(80), c = 0; c < 16; ++c)
      u[c] = o[m][c];
    for (var k = 16; k < 80; ++k)
      u[k] = ps(u[k - 3] ^ u[k - 8] ^ u[k - 14] ^ u[k - 16], 1);
    for (var g = i[0], N = i[1], y = i[2], h = i[3], E = i[4], S = 0; S < 80; ++S) {
      var b = Math.floor(S / 20), I = ps(g, 5) + B2(b, N, y, h) + E + e[b] + u[S] >>> 0;
      E = h, h = y, y = ps(N, 30) >>> 0, N = g, g = I;
    }
    i[0] = i[0] + g >>> 0, i[1] = i[1] + N >>> 0, i[2] = i[2] + y >>> 0, i[3] = i[3] + h >>> 0, i[4] = i[4] + E >>> 0;
  }
  return [i[0] >> 24 & 255, i[0] >> 16 & 255, i[0] >> 8 & 255, i[0] & 255, i[1] >> 24 & 255, i[1] >> 16 & 255, i[1] >> 8 & 255, i[1] & 255, i[2] >> 24 & 255, i[2] >> 16 & 255, i[2] >> 8 & 255, i[2] & 255, i[3] >> 24 & 255, i[3] >> 16 & 255, i[3] >> 8 & 255, i[3] & 255, i[4] >> 24 & 255, i[4] >> 16 & 255, i[4] >> 8 & 255, i[4] & 255];
}
var S2 = ec("v5", 80, Q2);
const D2 = S2, w2 = "00000000-0000-0000-0000-000000000000";
function F2(n) {
  if (!wr(n))
    throw TypeError("Invalid UUID");
  return parseInt(n.substr(14, 1), 16);
}
const V2 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  NIL: w2,
  parse: $p,
  stringify: Fr,
  v1: c2,
  v3: I2,
  v4: C2,
  v5: D2,
  validate: wr,
  version: F2
}, Symbol.toStringTag, { value: "Module" })), T2 = /* @__PURE__ */ cd(V2);
var _2 = me && me.__createBinding || (Object.create ? function(n, e, i, a) {
  a === void 0 && (a = i), Object.defineProperty(n, a, { enumerable: !0, get: function() {
    return e[i];
  } });
} : function(n, e, i, a) {
  a === void 0 && (a = i), n[a] = e[i];
}), R2 = me && me.__setModuleDefault || (Object.create ? function(n, e) {
  Object.defineProperty(n, "default", { enumerable: !0, value: e });
} : function(n, e) {
  n.default = e;
}), nc = me && me.__importStar || function(n) {
  if (n && n.__esModule)
    return n;
  var e = {};
  if (n != null)
    for (var i in n)
      i !== "default" && Object.hasOwnProperty.call(n, i) && _2(e, n, i);
  return R2(e, n), e;
};
Object.defineProperty(ft, "__esModule", { value: !0 });
ft.prepareKeyValueMessage = ft.issueFileCommand = void 0;
const wA = nc(J), Wo = nc(J), U2 = T2, ac = Ea;
function L2(n, e) {
  const i = process.env[`GITHUB_${n}`];
  if (!i)
    throw new Error(`Unable to find environment variable for file command ${n}`);
  if (!wA.existsSync(i))
    throw new Error(`Missing file at path: ${i}`);
  wA.appendFileSync(i, `${ac.toCommandValue(e)}${Wo.EOL}`, {
    encoding: "utf8"
  });
}
ft.issueFileCommand = L2;
function q2(n, e) {
  const i = `ghadelimiter_${U2.v4()}`, a = ac.toCommandValue(e);
  if (n.includes(i))
    throw new Error(`Unexpected input: name should not contain the delimiter "${i}"`);
  if (a.includes(i))
    throw new Error(`Unexpected input: value should not contain the delimiter "${i}"`);
  return `${n}<<${i}${Wo.EOL}${a}${Wo.EOL}${i}`;
}
ft.prepareKeyValueMessage = q2;
var Mt = {}, ki = {}, Nt = {};
Object.defineProperty(Nt, "__esModule", { value: !0 });
Nt.checkBypass = Nt.getProxyUrl = void 0;
function P2(n) {
  const e = n.protocol === "https:";
  if (tc(n))
    return;
  const i = e ? process.env.https_proxy || process.env.HTTPS_PROXY : process.env.http_proxy || process.env.HTTP_PROXY;
  if (i)
    try {
      return new URL(i);
    } catch {
      if (!i.startsWith("http://") && !i.startsWith("https://"))
        return new URL(`http://${i}`);
    }
  else
    return;
}
Nt.getProxyUrl = P2;
function tc(n) {
  if (!n.hostname)
    return !1;
  const e = n.hostname;
  if (O2(e))
    return !0;
  const i = process.env.no_proxy || process.env.NO_PROXY || "";
  if (!i)
    return !1;
  let a;
  n.port ? a = Number(n.port) : n.protocol === "http:" ? a = 80 : n.protocol === "https:" && (a = 443);
  const t = [n.hostname.toUpperCase()];
  typeof a == "number" && t.push(`${t[0]}:${a}`);
  for (const d of i.split(",").map((r) => r.trim().toUpperCase()).filter((r) => r))
    if (d === "*" || t.some((r) => r === d || r.endsWith(`.${d}`) || d.startsWith(".") && r.endsWith(`${d}`)))
      return !0;
  return !1;
}
Nt.checkBypass = tc;
function O2(n) {
  const e = n.toLowerCase();
  return e === "localhost" || e.startsWith("127.") || e.startsWith("[::1]") || e.startsWith("[0:0:0:0:0:0:0:1]");
}
var Qt = {}, G2 = J, fl = J, dc = J, M2 = J, x2 = J;
Qt.httpOverHttp = Y2;
Qt.httpsOverHttp = J2;
Qt.httpOverHttps = H2;
Qt.httpsOverHttps = j2;
function Y2(n) {
  var e = new Kn(n);
  return e.request = fl.request, e;
}
function J2(n) {
  var e = new Kn(n);
  return e.request = fl.request, e.createSocket = rc, e.defaultPort = 443, e;
}
function H2(n) {
  var e = new Kn(n);
  return e.request = dc.request, e;
}
function j2(n) {
  var e = new Kn(n);
  return e.request = dc.request, e.createSocket = rc, e.defaultPort = 443, e;
}
function Kn(n) {
  var e = this;
  e.options = n || {}, e.proxyOptions = e.options.proxy || {}, e.maxSockets = e.options.maxSockets || fl.Agent.defaultMaxSockets, e.requests = [], e.sockets = [], e.on("free", function(a, t, d, r) {
    for (var o = sc(t, d, r), s = 0, A = e.requests.length; s < A; ++s) {
      var l = e.requests[s];
      if (l.host === o.host && l.port === o.port) {
        e.requests.splice(s, 1), l.request.onSocket(a);
        return;
      }
    }
    a.destroy(), e.removeSocket(a);
  });
}
x2.inherits(Kn, M2.EventEmitter);
Kn.prototype.addRequest = function(e, i, a, t) {
  var d = this, r = Nl({ request: e }, d.options, sc(i, a, t));
  if (d.sockets.length >= this.maxSockets) {
    d.requests.push(r);
    return;
  }
  d.createSocket(r, function(o) {
    o.on("free", s), o.on("close", A), o.on("agentRemove", A), e.onSocket(o);
    function s() {
      d.emit("free", o, r);
    }
    function A(l) {
      d.removeSocket(o), o.removeListener("free", s), o.removeListener("close", A), o.removeListener("agentRemove", A);
    }
  });
};
Kn.prototype.createSocket = function(e, i) {
  var a = this, t = {};
  a.sockets.push(t);
  var d = Nl({}, a.proxyOptions, {
    method: "CONNECT",
    path: e.host + ":" + e.port,
    agent: !1,
    headers: {
      host: e.host + ":" + e.port
    }
  });
  e.localAddress && (d.localAddress = e.localAddress), d.proxyAuth && (d.headers = d.headers || {}, d.headers["Proxy-Authorization"] = "Basic " + new Buffer(d.proxyAuth).toString("base64")), ma("making CONNECT request");
  var r = a.request(d);
  r.useChunkedEncodingByDefault = !1, r.once("response", o), r.once("upgrade", s), r.once("connect", A), r.once("error", l), r.end();
  function o(m) {
    m.upgrade = !0;
  }
  function s(m, u, c) {
    process.nextTick(function() {
      A(m, u, c);
    });
  }
  function A(m, u, c) {
    if (r.removeAllListeners(), u.removeAllListeners(), m.statusCode !== 200) {
      ma(
        "tunneling socket could not be established, statusCode=%d",
        m.statusCode
      ), u.destroy();
      var k = new Error("tunneling socket could not be established, statusCode=" + m.statusCode);
      k.code = "ECONNRESET", e.request.emit("error", k), a.removeSocket(t);
      return;
    }
    if (c.length > 0) {
      ma("got illegal response body from proxy"), u.destroy();
      var k = new Error("got illegal response body from proxy");
      k.code = "ECONNRESET", e.request.emit("error", k), a.removeSocket(t);
      return;
    }
    return ma("tunneling connection has established"), a.sockets[a.sockets.indexOf(t)] = u, i(u);
  }
  function l(m) {
    r.removeAllListeners(), ma(
      `tunneling socket could not be established, cause=%s
`,
      m.message,
      m.stack
    );
    var u = new Error("tunneling socket could not be established, cause=" + m.message);
    u.code = "ECONNRESET", e.request.emit("error", u), a.removeSocket(t);
  }
};
Kn.prototype.removeSocket = function(e) {
  var i = this.sockets.indexOf(e);
  if (i !== -1) {
    this.sockets.splice(i, 1);
    var a = this.requests.shift();
    a && this.createSocket(a, function(t) {
      a.request.onSocket(t);
    });
  }
};
function rc(n, e) {
  var i = this;
  Kn.prototype.createSocket.call(i, n, function(a) {
    var t = n.request.getHeader("host"), d = Nl({}, i.options, {
      socket: a,
      servername: t ? t.replace(/:.*$/, "") : n.host
    }), r = G2.connect(0, d);
    i.sockets[i.sockets.indexOf(a)] = r, e(r);
  });
}
function sc(n, e, i) {
  return typeof n == "string" ? {
    host: n,
    port: e,
    localAddress: i
  } : n;
}
function Nl(n) {
  for (var e = 1, i = arguments.length; e < i; ++e) {
    var a = arguments[e];
    if (typeof a == "object")
      for (var t = Object.keys(a), d = 0, r = t.length; d < r; ++d) {
        var o = t[d];
        a[o] !== void 0 && (n[o] = a[o]);
      }
  }
  return n;
}
var ma;
process.env.NODE_DEBUG && /\btunnel\b/.test(process.env.NODE_DEBUG) ? ma = function() {
  var n = Array.prototype.slice.call(arguments);
  typeof n[0] == "string" ? n[0] = "TUNNEL: " + n[0] : n.unshift("TUNNEL:"), console.error.apply(console, n);
} : ma = function() {
};
Qt.debug = ma;
var W2 = Qt, he = {}, Ye = {
  kClose: Symbol("close"),
  kDestroy: Symbol("destroy"),
  kDispatch: Symbol("dispatch"),
  kUrl: Symbol("url"),
  kWriting: Symbol("writing"),
  kResuming: Symbol("resuming"),
  kQueue: Symbol("queue"),
  kConnect: Symbol("connect"),
  kConnecting: Symbol("connecting"),
  kHeadersList: Symbol("headers list"),
  kKeepAliveDefaultTimeout: Symbol("default keep alive timeout"),
  kKeepAliveMaxTimeout: Symbol("max keep alive timeout"),
  kKeepAliveTimeoutThreshold: Symbol("keep alive timeout threshold"),
  kKeepAliveTimeoutValue: Symbol("keep alive timeout"),
  kKeepAlive: Symbol("keep alive"),
  kHeadersTimeout: Symbol("headers timeout"),
  kBodyTimeout: Symbol("body timeout"),
  kServerName: Symbol("server name"),
  kLocalAddress: Symbol("local address"),
  kHost: Symbol("host"),
  kNoRef: Symbol("no ref"),
  kBodyUsed: Symbol("used"),
  kRunning: Symbol("running"),
  kBlocking: Symbol("blocking"),
  kPending: Symbol("pending"),
  kSize: Symbol("size"),
  kBusy: Symbol("busy"),
  kQueued: Symbol("queued"),
  kFree: Symbol("free"),
  kConnected: Symbol("connected"),
  kClosed: Symbol("closed"),
  kNeedDrain: Symbol("need drain"),
  kReset: Symbol("reset"),
  kDestroyed: Symbol.for("nodejs.stream.destroyed"),
  kMaxHeadersSize: Symbol("max headers size"),
  kRunningIdx: Symbol("running index"),
  kPendingIdx: Symbol("pending index"),
  kError: Symbol("error"),
  kClients: Symbol("clients"),
  kClient: Symbol("client"),
  kParser: Symbol("parser"),
  kOnDestroyed: Symbol("destroy callbacks"),
  kPipelining: Symbol("pipelining"),
  kSocket: Symbol("socket"),
  kHostHeader: Symbol("host header"),
  kConnector: Symbol("connector"),
  kStrictContentLength: Symbol("strict content length"),
  kMaxRedirections: Symbol("maxRedirections"),
  kMaxRequests: Symbol("maxRequestsPerClient"),
  kProxy: Symbol("proxy agent options"),
  kCounter: Symbol("socket request counter"),
  kInterceptors: Symbol("dispatch interceptors"),
  kMaxResponseSize: Symbol("max response size"),
  kHTTP2Session: Symbol("http2Session"),
  kHTTP2SessionState: Symbol("http2Session state"),
  kHTTP2BuildRequest: Symbol("http2 build request"),
  kHTTP1BuildRequest: Symbol("http1 build request"),
  kHTTP2CopyHeaders: Symbol("http2 copy headers"),
  kHTTPConnVersion: Symbol("http connection version"),
  kRetryHandlerDefaultRetry: Symbol("retry agent default retry"),
  kConstruct: Symbol("constructable")
};
let vi = class extends Error {
  constructor(e) {
    super(e), this.name = "UndiciError", this.code = "UND_ERR";
  }
}, z2 = class oc extends vi {
  constructor(e) {
    super(e), Error.captureStackTrace(this, oc), this.name = "ConnectTimeoutError", this.message = e || "Connect Timeout Error", this.code = "UND_ERR_CONNECT_TIMEOUT";
  }
}, Z2 = class lc extends vi {
  constructor(e) {
    super(e), Error.captureStackTrace(this, lc), this.name = "HeadersTimeoutError", this.message = e || "Headers Timeout Error", this.code = "UND_ERR_HEADERS_TIMEOUT";
  }
}, K2 = class Ac extends vi {
  constructor(e) {
    super(e), Error.captureStackTrace(this, Ac), this.name = "HeadersOverflowError", this.message = e || "Headers Overflow Error", this.code = "UND_ERR_HEADERS_OVERFLOW";
  }
}, X2 = class mc extends vi {
  constructor(e) {
    super(e), Error.captureStackTrace(this, mc), this.name = "BodyTimeoutError", this.message = e || "Body Timeout Error", this.code = "UND_ERR_BODY_TIMEOUT";
  }
}, $2 = class uc extends vi {
  constructor(e, i, a, t) {
    super(e), Error.captureStackTrace(this, uc), this.name = "ResponseStatusCodeError", this.message = e || "Response Status Code Error", this.code = "UND_ERR_RESPONSE_STATUS_CODE", this.body = t, this.status = i, this.statusCode = i, this.headers = a;
  }
}, ef = class pc extends vi {
  constructor(e) {
    super(e), Error.captureStackTrace(this, pc), this.name = "InvalidArgumentError", this.message = e || "Invalid Argument Error", this.code = "UND_ERR_INVALID_ARG";
  }
}, nf = class cc extends vi {
  constructor(e) {
    super(e), Error.captureStackTrace(this, cc), this.name = "InvalidReturnValueError", this.message = e || "Invalid Return Value Error", this.code = "UND_ERR_INVALID_RETURN_VALUE";
  }
}, af = class kc extends vi {
  constructor(e) {
    super(e), Error.captureStackTrace(this, kc), this.name = "AbortError", this.message = e || "Request aborted", this.code = "UND_ERR_ABORTED";
  }
}, tf = class vc extends vi {
  constructor(e) {
    super(e), Error.captureStackTrace(this, vc), this.name = "InformationalError", this.message = e || "Request information", this.code = "UND_ERR_INFO";
  }
}, df = class gc extends vi {
  constructor(e) {
    super(e), Error.captureStackTrace(this, gc), this.name = "RequestContentLengthMismatchError", this.message = e || "Request body length does not match content-length header", this.code = "UND_ERR_REQ_CONTENT_LENGTH_MISMATCH";
  }
}, rf = class hc extends vi {
  constructor(e) {
    super(e), Error.captureStackTrace(this, hc), this.name = "ResponseContentLengthMismatchError", this.message = e || "Response body length does not match content-length header", this.code = "UND_ERR_RES_CONTENT_LENGTH_MISMATCH";
  }
}, sf = class fc extends vi {
  constructor(e) {
    super(e), Error.captureStackTrace(this, fc), this.name = "ClientDestroyedError", this.message = e || "The client is destroyed", this.code = "UND_ERR_DESTROYED";
  }
}, of = class Nc extends vi {
  constructor(e) {
    super(e), Error.captureStackTrace(this, Nc), this.name = "ClientClosedError", this.message = e || "The client is closed", this.code = "UND_ERR_CLOSED";
  }
}, lf = class Ec extends vi {
  constructor(e, i) {
    super(e), Error.captureStackTrace(this, Ec), this.name = "SocketError", this.message = e || "Socket error", this.code = "UND_ERR_SOCKET", this.socket = i;
  }
}, yc = class bc extends vi {
  constructor(e) {
    super(e), Error.captureStackTrace(this, bc), this.name = "NotSupportedError", this.message = e || "Not supported error", this.code = "UND_ERR_NOT_SUPPORTED";
  }
}, Af = class extends vi {
  constructor(e) {
    super(e), Error.captureStackTrace(this, yc), this.name = "MissingUpstreamError", this.message = e || "No upstream has been added to the BalancedPool", this.code = "UND_ERR_BPL_MISSING_UPSTREAM";
  }
}, mf = class Ic extends Error {
  constructor(e, i, a) {
    super(e), Error.captureStackTrace(this, Ic), this.name = "HTTPParserError", this.code = i ? `HPE_${i}` : void 0, this.data = a ? a.toString() : void 0;
  }
}, uf = class Cc extends vi {
  constructor(e) {
    super(e), Error.captureStackTrace(this, Cc), this.name = "ResponseExceededMaxSizeError", this.message = e || "Response content exceeded max size", this.code = "UND_ERR_RES_EXCEEDED_MAX_SIZE";
  }
}, pf = class Bc extends vi {
  constructor(e, i, { headers: a, data: t }) {
    super(e), Error.captureStackTrace(this, Bc), this.name = "RequestRetryError", this.message = e || "Request retry error", this.code = "UND_ERR_REQ_RETRY", this.statusCode = i, this.data = t, this.headers = a;
  }
};
var Le = {
  HTTPParserError: mf,
  UndiciError: vi,
  HeadersTimeoutError: Z2,
  HeadersOverflowError: K2,
  BodyTimeoutError: X2,
  RequestContentLengthMismatchError: df,
  ConnectTimeoutError: z2,
  ResponseStatusCodeError: $2,
  InvalidArgumentError: ef,
  InvalidReturnValueError: nf,
  RequestAbortedError: af,
  ClientDestroyedError: sf,
  ClientClosedError: of,
  InformationalError: tf,
  SocketError: lf,
  NotSupportedError: yc,
  ResponseContentLengthMismatchError: rf,
  BalancedPoolMissingUpstreamError: Af,
  ResponseExceededMaxSizeError: uf,
  RequestRetryError: pf
};
const Qc = J, { kDestroyed: Sc, kBodyUsed: FA } = Ye, { IncomingMessage: cf } = J, Et = J, kf = J, { InvalidArgumentError: Ni } = Le, { Blob: VA } = J, br = J, { stringify: vf } = J, [cs, TA] = process.versions.node.split(".").map((n) => Number(n));
function gf() {
}
function El(n) {
  return n && typeof n == "object" && typeof n.pipe == "function" && typeof n.on == "function";
}
function Dc(n) {
  return VA && n instanceof VA || n && typeof n == "object" && (typeof n.stream == "function" || typeof n.arrayBuffer == "function") && /^(Blob|File)$/.test(n[Symbol.toStringTag]);
}
function hf(n, e) {
  if (n.includes("?") || n.includes("#"))
    throw new Error('Query params cannot be passed when url already contains "?" or "#".');
  const i = vf(e);
  return i && (n += "?" + i), n;
}
function wc(n) {
  if (typeof n == "string") {
    if (n = new URL(n), !/^https?:/.test(n.origin || n.protocol))
      throw new Ni("Invalid URL protocol: the URL must start with `http:` or `https:`.");
    return n;
  }
  if (!n || typeof n != "object")
    throw new Ni("Invalid URL: The URL argument must be a non-null object.");
  if (!/^https?:/.test(n.origin || n.protocol))
    throw new Ni("Invalid URL protocol: the URL must start with `http:` or `https:`.");
  if (!(n instanceof URL)) {
    if (n.port != null && n.port !== "" && !Number.isFinite(parseInt(n.port)))
      throw new Ni("Invalid URL: port must be a valid integer or a string representation of an integer.");
    if (n.path != null && typeof n.path != "string")
      throw new Ni("Invalid URL path: the path must be a string or null/undefined.");
    if (n.pathname != null && typeof n.pathname != "string")
      throw new Ni("Invalid URL pathname: the pathname must be a string or null/undefined.");
    if (n.hostname != null && typeof n.hostname != "string")
      throw new Ni("Invalid URL hostname: the hostname must be a string or null/undefined.");
    if (n.origin != null && typeof n.origin != "string")
      throw new Ni("Invalid URL origin: the origin must be a string or null/undefined.");
    const e = n.port != null ? n.port : n.protocol === "https:" ? 443 : 80;
    let i = n.origin != null ? n.origin : `${n.protocol}//${n.hostname}:${e}`, a = n.path != null ? n.path : `${n.pathname || ""}${n.search || ""}`;
    i.endsWith("/") && (i = i.substring(0, i.length - 1)), a && !a.startsWith("/") && (a = `/${a}`), n = new URL(i + a);
  }
  return n;
}
function ff(n) {
  if (n = wc(n), n.pathname !== "/" || n.search || n.hash)
    throw new Ni("invalid url");
  return n;
}
function Nf(n) {
  if (n[0] === "[") {
    const i = n.indexOf("]");
    return Qc(i !== -1), n.substring(1, i);
  }
  const e = n.indexOf(":");
  return e === -1 ? n : n.substring(0, e);
}
function Ef(n) {
  if (!n)
    return null;
  Qc.strictEqual(typeof n, "string");
  const e = Nf(n);
  return kf.isIP(e) ? "" : e;
}
function yf(n) {
  return JSON.parse(JSON.stringify(n));
}
function bf(n) {
  return n != null && typeof n[Symbol.asyncIterator] == "function";
}
function If(n) {
  return n != null && (typeof n[Symbol.iterator] == "function" || typeof n[Symbol.asyncIterator] == "function");
}
function Cf(n) {
  if (n == null)
    return 0;
  if (El(n)) {
    const e = n._readableState;
    return e && e.objectMode === !1 && e.ended === !0 && Number.isFinite(e.length) ? e.length : null;
  } else {
    if (Dc(n))
      return n.size != null ? n.size : null;
    if (Vc(n))
      return n.byteLength;
  }
  return null;
}
function yl(n) {
  return !n || !!(n.destroyed || n[Sc]);
}
function Fc(n) {
  const e = n && n._readableState;
  return yl(n) && e && !e.endEmitted;
}
function Bf(n, e) {
  n == null || !El(n) || yl(n) || (typeof n.destroy == "function" ? (Object.getPrototypeOf(n).constructor === cf && (n.socket = null), n.destroy(e)) : e && process.nextTick((i, a) => {
    i.emit("error", a);
  }, n, e), n.destroyed !== !0 && (n[Sc] = !0));
}
const Qf = /timeout=(\d+)/;
function Sf(n) {
  const e = n.toString().match(Qf);
  return e ? parseInt(e[1], 10) * 1e3 : null;
}
function Df(n, e = {}) {
  if (!Array.isArray(n))
    return n;
  for (let i = 0; i < n.length; i += 2) {
    const a = n[i].toString().toLowerCase();
    let t = e[a];
    t ? (Array.isArray(t) || (t = [t], e[a] = t), t.push(n[i + 1].toString("utf8"))) : Array.isArray(n[i + 1]) ? e[a] = n[i + 1].map((d) => d.toString("utf8")) : e[a] = n[i + 1].toString("utf8");
  }
  return "content-length" in e && "content-disposition" in e && (e["content-disposition"] = Buffer.from(e["content-disposition"]).toString("latin1")), e;
}
function wf(n) {
  const e = [];
  let i = !1, a = -1;
  for (let t = 0; t < n.length; t += 2) {
    const d = n[t + 0].toString(), r = n[t + 1].toString("utf8");
    d.length === 14 && (d === "content-length" || d.toLowerCase() === "content-length") ? (e.push(d, r), i = !0) : d.length === 19 && (d === "content-disposition" || d.toLowerCase() === "content-disposition") ? a = e.push(d, r) - 1 : e.push(d, r);
  }
  return i && a !== -1 && (e[a] = Buffer.from(e[a]).toString("latin1")), e;
}
function Vc(n) {
  return n instanceof Uint8Array || Buffer.isBuffer(n);
}
function Ff(n, e, i) {
  if (!n || typeof n != "object")
    throw new Ni("handler must be an object");
  if (typeof n.onConnect != "function")
    throw new Ni("invalid onConnect method");
  if (typeof n.onError != "function")
    throw new Ni("invalid onError method");
  if (typeof n.onBodySent != "function" && n.onBodySent !== void 0)
    throw new Ni("invalid onBodySent method");
  if (i || e === "CONNECT") {
    if (typeof n.onUpgrade != "function")
      throw new Ni("invalid onUpgrade method");
  } else {
    if (typeof n.onHeaders != "function")
      throw new Ni("invalid onHeaders method");
    if (typeof n.onData != "function")
      throw new Ni("invalid onData method");
    if (typeof n.onComplete != "function")
      throw new Ni("invalid onComplete method");
  }
}
function Vf(n) {
  return !!(n && (Et.isDisturbed ? Et.isDisturbed(n) || n[FA] : n[FA] || n.readableDidRead || n._readableState && n._readableState.dataEmitted || Fc(n)));
}
function Tf(n) {
  return !!(n && (Et.isErrored ? Et.isErrored(n) : /state: 'errored'/.test(
    br.inspect(n)
  )));
}
function _f(n) {
  return !!(n && (Et.isReadable ? Et.isReadable(n) : /state: 'readable'/.test(
    br.inspect(n)
  )));
}
function Rf(n) {
  return {
    localAddress: n.localAddress,
    localPort: n.localPort,
    remoteAddress: n.remoteAddress,
    remotePort: n.remotePort,
    remoteFamily: n.remoteFamily,
    timeout: n.timeout,
    bytesWritten: n.bytesWritten,
    bytesRead: n.bytesRead
  };
}
async function* Uf(n) {
  for await (const e of n)
    yield Buffer.isBuffer(e) ? e : Buffer.from(e);
}
let xt;
function Lf(n) {
  if (xt || (xt = J.ReadableStream), xt.from)
    return xt.from(Uf(n));
  let e;
  return new xt(
    {
      async start() {
        e = n[Symbol.asyncIterator]();
      },
      async pull(i) {
        const { done: a, value: t } = await e.next();
        if (a)
          queueMicrotask(() => {
            i.close();
          });
        else {
          const d = Buffer.isBuffer(t) ? t : Buffer.from(t);
          i.enqueue(new Uint8Array(d));
        }
        return i.desiredSize > 0;
      },
      async cancel(i) {
        await e.return();
      }
    },
    0
  );
}
function qf(n) {
  return n && typeof n == "object" && typeof n.append == "function" && typeof n.delete == "function" && typeof n.get == "function" && typeof n.getAll == "function" && typeof n.has == "function" && typeof n.set == "function" && n[Symbol.toStringTag] === "FormData";
}
function Pf(n) {
  if (n) {
    if (typeof n.throwIfAborted == "function")
      n.throwIfAborted();
    else if (n.aborted) {
      const e = new Error("The operation was aborted");
      throw e.name = "AbortError", e;
    }
  }
}
function Of(n, e) {
  return "addEventListener" in n ? (n.addEventListener("abort", e, { once: !0 }), () => n.removeEventListener("abort", e)) : (n.addListener("abort", e), () => n.removeListener("abort", e));
}
const Gf = !!String.prototype.toWellFormed;
function Mf(n) {
  return Gf ? `${n}`.toWellFormed() : br.toUSVString ? br.toUSVString(n) : `${n}`;
}
function xf(n) {
  if (n == null || n === "")
    return { start: 0, end: null, size: null };
  const e = n ? n.match(/^bytes (\d+)-(\d+)\/(\d+)?$/) : null;
  return e ? {
    start: parseInt(e[1]),
    end: e[2] ? parseInt(e[2]) : null,
    size: e[3] ? parseInt(e[3]) : null
  } : null;
}
const Tc = /* @__PURE__ */ Object.create(null);
Tc.enumerable = !0;
var Ie = {
  kEnumerableProperty: Tc,
  nop: gf,
  isDisturbed: Vf,
  isErrored: Tf,
  isReadable: _f,
  toUSVString: Mf,
  isReadableAborted: Fc,
  isBlobLike: Dc,
  parseOrigin: ff,
  parseURL: wc,
  getServerName: Ef,
  isStream: El,
  isIterable: If,
  isAsyncIterable: bf,
  isDestroyed: yl,
  parseRawHeaders: wf,
  parseHeaders: Df,
  parseKeepAliveTimeout: Sf,
  destroy: Bf,
  bodyLength: Cf,
  deepClone: yf,
  ReadableStreamFrom: Lf,
  isBuffer: Vc,
  validateHandler: Ff,
  getSocketInfo: Rf,
  isFormDataLike: qf,
  buildURL: hf,
  throwIfAborted: Pf,
  addAbortListener: Of,
  parseRangeHeader: xf,
  nodeMajor: cs,
  nodeMinor: TA,
  nodeHasAutoSelectFamily: cs > 18 || cs === 18 && TA >= 13,
  safeHTTPMethods: ["GET", "HEAD", "OPTIONS", "TRACE"]
};
let ks = Date.now(), ra;
const sa = [];
function Yf() {
  ks = Date.now();
  let n = sa.length, e = 0;
  for (; e < n; ) {
    const i = sa[e];
    i.state === 0 ? i.state = ks + i.delay : i.state > 0 && ks >= i.state && (i.state = -1, i.callback(i.opaque)), i.state === -1 ? (i.state = -2, e !== n - 1 ? sa[e] = sa.pop() : sa.pop(), n -= 1) : e += 1;
  }
  sa.length > 0 && _c();
}
function _c() {
  ra && ra.refresh ? ra.refresh() : (clearTimeout(ra), ra = setTimeout(Yf, 1e3), ra.unref && ra.unref());
}
class _A {
  constructor(e, i, a) {
    this.callback = e, this.delay = i, this.opaque = a, this.state = -2, this.refresh();
  }
  refresh() {
    this.state === -2 && (sa.push(this), (!ra || sa.length === 1) && _c()), this.state = 0;
  }
  clear() {
    this.state = -1;
  }
}
var Jf = {
  setTimeout(n, e, i) {
    return e < 1e3 ? setTimeout(n, e, i) : new _A(n, e, i);
  },
  clearTimeout(n) {
    n instanceof _A ? n.clear() : clearTimeout(n);
  }
}, et = { exports: {} }, vs, RA;
function Rc() {
  if (RA)
    return vs;
  RA = 1;
  const n = J.EventEmitter, e = J.inherits;
  function i(a) {
    if (typeof a == "string" && (a = Buffer.from(a)), !Buffer.isBuffer(a))
      throw new TypeError("The needle has to be a String or a Buffer.");
    const t = a.length;
    if (t === 0)
      throw new Error("The needle cannot be an empty String/Buffer.");
    if (t > 256)
      throw new Error("The needle cannot have a length bigger than 256.");
    this.maxMatches = 1 / 0, this.matches = 0, this._occ = new Array(256).fill(t), this._lookbehind_size = 0, this._needle = a, this._bufpos = 0, this._lookbehind = Buffer.alloc(t);
    for (var d = 0; d < t - 1; ++d)
      this._occ[a[d]] = t - 1 - d;
  }
  return e(i, n), i.prototype.reset = function() {
    this._lookbehind_size = 0, this.matches = 0, this._bufpos = 0;
  }, i.prototype.push = function(a, t) {
    Buffer.isBuffer(a) || (a = Buffer.from(a, "binary"));
    const d = a.length;
    this._bufpos = t || 0;
    let r;
    for (; r !== d && this.matches < this.maxMatches; )
      r = this._sbmh_feed(a);
    return r;
  }, i.prototype._sbmh_feed = function(a) {
    const t = a.length, d = this._needle, r = d.length, o = d[r - 1];
    let s = -this._lookbehind_size, A;
    if (s < 0) {
      for (; s < 0 && s <= t - r; ) {
        if (A = this._sbmh_lookup_char(a, s + r - 1), A === o && this._sbmh_memcmp(a, s, r - 1))
          return this._lookbehind_size = 0, ++this.matches, this.emit("info", !0), this._bufpos = s + r;
        s += this._occ[A];
      }
      if (s < 0)
        for (; s < 0 && !this._sbmh_memcmp(a, s, t - s); )
          ++s;
      if (s >= 0)
        this.emit("info", !1, this._lookbehind, 0, this._lookbehind_size), this._lookbehind_size = 0;
      else {
        const l = this._lookbehind_size + s;
        return l > 0 && this.emit("info", !1, this._lookbehind, 0, l), this._lookbehind.copy(
          this._lookbehind,
          0,
          l,
          this._lookbehind_size - l
        ), this._lookbehind_size -= l, a.copy(this._lookbehind, this._lookbehind_size), this._lookbehind_size += t, this._bufpos = t, t;
      }
    }
    if (s += (s >= 0) * this._bufpos, a.indexOf(d, s) !== -1)
      return s = a.indexOf(d, s), ++this.matches, s > 0 ? this.emit("info", !0, a, this._bufpos, s) : this.emit("info", !0), this._bufpos = s + r;
    for (s = t - r; s < t && (a[s] !== d[0] || Buffer.compare(
      a.subarray(s, s + t - s),
      d.subarray(0, t - s)
    ) !== 0); )
      ++s;
    return s < t && (a.copy(this._lookbehind, 0, s, s + (t - s)), this._lookbehind_size = t - s), s > 0 && this.emit("info", !1, a, this._bufpos, s < t ? s : t), this._bufpos = t, t;
  }, i.prototype._sbmh_lookup_char = function(a, t) {
    return t < 0 ? this._lookbehind[this._lookbehind_size + t] : a[t];
  }, i.prototype._sbmh_memcmp = function(a, t, d) {
    for (var r = 0; r < d; ++r)
      if (this._sbmh_lookup_char(a, t + r) !== this._needle[r])
        return !1;
    return !0;
  }, vs = i, vs;
}
var gs, UA;
function Hf() {
  if (UA)
    return gs;
  UA = 1;
  const n = J.inherits, e = J.Readable;
  function i(a) {
    e.call(this, a);
  }
  return n(i, e), i.prototype._read = function(a) {
  }, gs = i, gs;
}
var hs, LA;
function bl() {
  return LA || (LA = 1, hs = function(e, i, a) {
    if (!e || e[i] === void 0 || e[i] === null)
      return a;
    if (typeof e[i] != "number" || isNaN(e[i]))
      throw new TypeError("Limit " + i + " is not a valid number");
    return e[i];
  }), hs;
}
var fs, qA;
function jf() {
  if (qA)
    return fs;
  qA = 1;
  const n = J.EventEmitter, e = J.inherits, i = bl(), a = Rc(), t = Buffer.from(`\r
\r
`), d = /\r\n/g, r = /^([^:]+):[ \t]?([\x00-\xFF]+)?$/;
  function o(s) {
    n.call(this), s = s || {};
    const A = this;
    this.nread = 0, this.maxed = !1, this.npairs = 0, this.maxHeaderPairs = i(s, "maxHeaderPairs", 2e3), this.maxHeaderSize = i(s, "maxHeaderSize", 80 * 1024), this.buffer = "", this.header = {}, this.finished = !1, this.ss = new a(t), this.ss.on("info", function(l, m, u, c) {
      m && !A.maxed && (A.nread + c - u >= A.maxHeaderSize ? (c = A.maxHeaderSize - A.nread + u, A.nread = A.maxHeaderSize, A.maxed = !0) : A.nread += c - u, A.buffer += m.toString("binary", u, c)), l && A._finish();
    });
  }
  return e(o, n), o.prototype.push = function(s) {
    const A = this.ss.push(s);
    if (this.finished)
      return A;
  }, o.prototype.reset = function() {
    this.finished = !1, this.buffer = "", this.header = {}, this.ss.reset();
  }, o.prototype._finish = function() {
    this.buffer && this._parseHeader(), this.ss.matches = this.ss.maxMatches;
    const s = this.header;
    this.header = {}, this.buffer = "", this.finished = !0, this.nread = this.npairs = 0, this.maxed = !1, this.emit("header", s);
  }, o.prototype._parseHeader = function() {
    if (this.npairs === this.maxHeaderPairs)
      return;
    const s = this.buffer.split(d), A = s.length;
    let l, m;
    for (var u = 0; u < A; ++u) {
      if (s[u].length === 0)
        continue;
      if ((s[u][0] === "	" || s[u][0] === " ") && m) {
        this.header[m][this.header[m].length - 1] += s[u];
        continue;
      }
      const c = s[u].indexOf(":");
      if (c === -1 || c === 0)
        return;
      if (l = r.exec(s[u]), m = l[1].toLowerCase(), this.header[m] = this.header[m] || [], this.header[m].push(l[2] || ""), ++this.npairs === this.maxHeaderPairs)
        break;
    }
  }, fs = o, fs;
}
var Ns, PA;
function Uc() {
  if (PA)
    return Ns;
  PA = 1;
  const n = J.Writable, e = J.inherits, i = Rc(), a = Hf(), t = jf(), d = 45, r = Buffer.from("-"), o = Buffer.from(`\r
`), s = function() {
  };
  function A(l) {
    if (!(this instanceof A))
      return new A(l);
    if (n.call(this, l), !l || !l.headerFirst && typeof l.boundary != "string")
      throw new TypeError("Boundary required");
    typeof l.boundary == "string" ? this.setBoundary(l.boundary) : this._bparser = void 0, this._headerFirst = l.headerFirst, this._dashes = 0, this._parts = 0, this._finished = !1, this._realFinish = !1, this._isPreamble = !0, this._justMatched = !1, this._firstWrite = !0, this._inHeader = !0, this._part = void 0, this._cb = void 0, this._ignoreData = !1, this._partOpts = { highWaterMark: l.partHwm }, this._pause = !1;
    const m = this;
    this._hparser = new t(l), this._hparser.on("header", function(u) {
      m._inHeader = !1, m._part.emit("header", u);
    });
  }
  return e(A, n), A.prototype.emit = function(l) {
    if (l === "finish" && !this._realFinish) {
      if (!this._finished) {
        const m = this;
        process.nextTick(function() {
          if (m.emit("error", new Error("Unexpected end of multipart data")), m._part && !m._ignoreData) {
            const u = m._isPreamble ? "Preamble" : "Part";
            m._part.emit("error", new Error(u + " terminated early due to unexpected end of multipart data")), m._part.push(null), process.nextTick(function() {
              m._realFinish = !0, m.emit("finish"), m._realFinish = !1;
            });
            return;
          }
          m._realFinish = !0, m.emit("finish"), m._realFinish = !1;
        });
      }
    } else
      n.prototype.emit.apply(this, arguments);
  }, A.prototype._write = function(l, m, u) {
    if (!this._hparser && !this._bparser)
      return u();
    if (this._headerFirst && this._isPreamble) {
      this._part || (this._part = new a(this._partOpts), this._events.preamble ? this.emit("preamble", this._part) : this._ignore());
      const c = this._hparser.push(l);
      if (!this._inHeader && c !== void 0 && c < l.length)
        l = l.slice(c);
      else
        return u();
    }
    this._firstWrite && (this._bparser.push(o), this._firstWrite = !1), this._bparser.push(l), this._pause ? this._cb = u : u();
  }, A.prototype.reset = function() {
    this._part = void 0, this._bparser = void 0, this._hparser = void 0;
  }, A.prototype.setBoundary = function(l) {
    const m = this;
    this._bparser = new i(`\r
--` + l), this._bparser.on("info", function(u, c, k, g) {
      m._oninfo(u, c, k, g);
    });
  }, A.prototype._ignore = function() {
    this._part && !this._ignoreData && (this._ignoreData = !0, this._part.on("error", s), this._part.resume());
  }, A.prototype._oninfo = function(l, m, u, c) {
    let k;
    const g = this;
    let N = 0, y, h = !0;
    if (!this._part && this._justMatched && m) {
      for (; this._dashes < 2 && u + N < c; )
        if (m[u + N] === d)
          ++N, ++this._dashes;
        else {
          this._dashes && (k = r), this._dashes = 0;
          break;
        }
      if (this._dashes === 2 && (u + N < c && this._events.trailer && this.emit("trailer", m.slice(u + N, c)), this.reset(), this._finished = !0, g._parts === 0 && (g._realFinish = !0, g.emit("finish"), g._realFinish = !1)), this._dashes)
        return;
    }
    this._justMatched && (this._justMatched = !1), this._part || (this._part = new a(this._partOpts), this._part._read = function(E) {
      g._unpause();
    }, this._isPreamble && this._events.preamble ? this.emit("preamble", this._part) : this._isPreamble !== !0 && this._events.part ? this.emit("part", this._part) : this._ignore(), this._isPreamble || (this._inHeader = !0)), m && u < c && !this._ignoreData && (this._isPreamble || !this._inHeader ? (k && (h = this._part.push(k)), h = this._part.push(m.slice(u, c)), h || (this._pause = !0)) : !this._isPreamble && this._inHeader && (k && this._hparser.push(k), y = this._hparser.push(m.slice(u, c)), !this._inHeader && y !== void 0 && y < c && this._oninfo(!1, m, u + y, c))), l && (this._hparser.reset(), this._isPreamble ? this._isPreamble = !1 : u !== c && (++this._parts, this._part.on("end", function() {
      --g._parts === 0 && (g._finished ? (g._realFinish = !0, g.emit("finish"), g._realFinish = !1) : g._unpause());
    })), this._part.push(null), this._part = void 0, this._ignoreData = !1, this._justMatched = !0, this._dashes = 0);
  }, A.prototype._unpause = function() {
    if (this._pause && (this._pause = !1, this._cb)) {
      const l = this._cb;
      this._cb = void 0, l();
    }
  }, Ns = A, Ns;
}
var Es, OA;
function Il() {
  if (OA)
    return Es;
  OA = 1;
  const n = new TextDecoder("utf-8"), e = /* @__PURE__ */ new Map([
    ["utf-8", n],
    ["utf8", n]
  ]);
  function i(d) {
    let r;
    for (; ; )
      switch (d) {
        case "utf-8":
        case "utf8":
          return a.utf8;
        case "latin1":
        case "ascii":
        case "us-ascii":
        case "iso-8859-1":
        case "iso8859-1":
        case "iso88591":
        case "iso_8859-1":
        case "windows-1252":
        case "iso_8859-1:1987":
        case "cp1252":
        case "x-cp1252":
          return a.latin1;
        case "utf16le":
        case "utf-16le":
        case "ucs2":
        case "ucs-2":
          return a.utf16le;
        case "base64":
          return a.base64;
        default:
          if (r === void 0) {
            r = !0, d = d.toLowerCase();
            continue;
          }
          return a.other.bind(d);
      }
  }
  const a = {
    utf8: (d, r) => d.length === 0 ? "" : (typeof d == "string" && (d = Buffer.from(d, r)), d.utf8Slice(0, d.length)),
    latin1: (d, r) => d.length === 0 ? "" : typeof d == "string" ? d : d.latin1Slice(0, d.length),
    utf16le: (d, r) => d.length === 0 ? "" : (typeof d == "string" && (d = Buffer.from(d, r)), d.ucs2Slice(0, d.length)),
    base64: (d, r) => d.length === 0 ? "" : (typeof d == "string" && (d = Buffer.from(d, r)), d.base64Slice(0, d.length)),
    other: (d, r) => {
      if (d.length === 0)
        return "";
      if (typeof d == "string" && (d = Buffer.from(d, r)), e.has(this.toString()))
        try {
          return e.get(this).decode(d);
        } catch {
        }
      return typeof d == "string" ? d : d.toString();
    }
  };
  function t(d, r, o) {
    return d && i(o)(d, r);
  }
  return Es = t, Es;
}
var ys, GA;
function Lc() {
  if (GA)
    return ys;
  GA = 1;
  const n = Il(), e = /%[a-fA-F0-9][a-fA-F0-9]/g, i = {
    "%00": "\0",
    "%01": "",
    "%02": "",
    "%03": "",
    "%04": "",
    "%05": "",
    "%06": "",
    "%07": "\x07",
    "%08": "\b",
    "%09": "	",
    "%0a": `
`,
    "%0A": `
`,
    "%0b": "\v",
    "%0B": "\v",
    "%0c": "\f",
    "%0C": "\f",
    "%0d": "\r",
    "%0D": "\r",
    "%0e": "",
    "%0E": "",
    "%0f": "",
    "%0F": "",
    "%10": "",
    "%11": "",
    "%12": "",
    "%13": "",
    "%14": "",
    "%15": "",
    "%16": "",
    "%17": "",
    "%18": "",
    "%19": "",
    "%1a": "",
    "%1A": "",
    "%1b": "\x1B",
    "%1B": "\x1B",
    "%1c": "",
    "%1C": "",
    "%1d": "",
    "%1D": "",
    "%1e": "",
    "%1E": "",
    "%1f": "",
    "%1F": "",
    "%20": " ",
    "%21": "!",
    "%22": '"',
    "%23": "#",
    "%24": "$",
    "%25": "%",
    "%26": "&",
    "%27": "'",
    "%28": "(",
    "%29": ")",
    "%2a": "*",
    "%2A": "*",
    "%2b": "+",
    "%2B": "+",
    "%2c": ",",
    "%2C": ",",
    "%2d": "-",
    "%2D": "-",
    "%2e": ".",
    "%2E": ".",
    "%2f": "/",
    "%2F": "/",
    "%30": "0",
    "%31": "1",
    "%32": "2",
    "%33": "3",
    "%34": "4",
    "%35": "5",
    "%36": "6",
    "%37": "7",
    "%38": "8",
    "%39": "9",
    "%3a": ":",
    "%3A": ":",
    "%3b": ";",
    "%3B": ";",
    "%3c": "<",
    "%3C": "<",
    "%3d": "=",
    "%3D": "=",
    "%3e": ">",
    "%3E": ">",
    "%3f": "?",
    "%3F": "?",
    "%40": "@",
    "%41": "A",
    "%42": "B",
    "%43": "C",
    "%44": "D",
    "%45": "E",
    "%46": "F",
    "%47": "G",
    "%48": "H",
    "%49": "I",
    "%4a": "J",
    "%4A": "J",
    "%4b": "K",
    "%4B": "K",
    "%4c": "L",
    "%4C": "L",
    "%4d": "M",
    "%4D": "M",
    "%4e": "N",
    "%4E": "N",
    "%4f": "O",
    "%4F": "O",
    "%50": "P",
    "%51": "Q",
    "%52": "R",
    "%53": "S",
    "%54": "T",
    "%55": "U",
    "%56": "V",
    "%57": "W",
    "%58": "X",
    "%59": "Y",
    "%5a": "Z",
    "%5A": "Z",
    "%5b": "[",
    "%5B": "[",
    "%5c": "\\",
    "%5C": "\\",
    "%5d": "]",
    "%5D": "]",
    "%5e": "^",
    "%5E": "^",
    "%5f": "_",
    "%5F": "_",
    "%60": "`",
    "%61": "a",
    "%62": "b",
    "%63": "c",
    "%64": "d",
    "%65": "e",
    "%66": "f",
    "%67": "g",
    "%68": "h",
    "%69": "i",
    "%6a": "j",
    "%6A": "j",
    "%6b": "k",
    "%6B": "k",
    "%6c": "l",
    "%6C": "l",
    "%6d": "m",
    "%6D": "m",
    "%6e": "n",
    "%6E": "n",
    "%6f": "o",
    "%6F": "o",
    "%70": "p",
    "%71": "q",
    "%72": "r",
    "%73": "s",
    "%74": "t",
    "%75": "u",
    "%76": "v",
    "%77": "w",
    "%78": "x",
    "%79": "y",
    "%7a": "z",
    "%7A": "z",
    "%7b": "{",
    "%7B": "{",
    "%7c": "|",
    "%7C": "|",
    "%7d": "}",
    "%7D": "}",
    "%7e": "~",
    "%7E": "~",
    "%7f": "",
    "%7F": "",
    "%80": "",
    "%81": "",
    "%82": "",
    "%83": "",
    "%84": "",
    "%85": "",
    "%86": "",
    "%87": "",
    "%88": "",
    "%89": "",
    "%8a": "",
    "%8A": "",
    "%8b": "",
    "%8B": "",
    "%8c": "",
    "%8C": "",
    "%8d": "",
    "%8D": "",
    "%8e": "",
    "%8E": "",
    "%8f": "",
    "%8F": "",
    "%90": "",
    "%91": "",
    "%92": "",
    "%93": "",
    "%94": "",
    "%95": "",
    "%96": "",
    "%97": "",
    "%98": "",
    "%99": "",
    "%9a": "",
    "%9A": "",
    "%9b": "",
    "%9B": "",
    "%9c": "",
    "%9C": "",
    "%9d": "",
    "%9D": "",
    "%9e": "",
    "%9E": "",
    "%9f": "",
    "%9F": "",
    "%a0": " ",
    "%A0": " ",
    "%a1": "¡",
    "%A1": "¡",
    "%a2": "¢",
    "%A2": "¢",
    "%a3": "£",
    "%A3": "£",
    "%a4": "¤",
    "%A4": "¤",
    "%a5": "¥",
    "%A5": "¥",
    "%a6": "¦",
    "%A6": "¦",
    "%a7": "§",
    "%A7": "§",
    "%a8": "¨",
    "%A8": "¨",
    "%a9": "©",
    "%A9": "©",
    "%aa": "ª",
    "%Aa": "ª",
    "%aA": "ª",
    "%AA": "ª",
    "%ab": "«",
    "%Ab": "«",
    "%aB": "«",
    "%AB": "«",
    "%ac": "¬",
    "%Ac": "¬",
    "%aC": "¬",
    "%AC": "¬",
    "%ad": "­",
    "%Ad": "­",
    "%aD": "­",
    "%AD": "­",
    "%ae": "®",
    "%Ae": "®",
    "%aE": "®",
    "%AE": "®",
    "%af": "¯",
    "%Af": "¯",
    "%aF": "¯",
    "%AF": "¯",
    "%b0": "°",
    "%B0": "°",
    "%b1": "±",
    "%B1": "±",
    "%b2": "²",
    "%B2": "²",
    "%b3": "³",
    "%B3": "³",
    "%b4": "´",
    "%B4": "´",
    "%b5": "µ",
    "%B5": "µ",
    "%b6": "¶",
    "%B6": "¶",
    "%b7": "·",
    "%B7": "·",
    "%b8": "¸",
    "%B8": "¸",
    "%b9": "¹",
    "%B9": "¹",
    "%ba": "º",
    "%Ba": "º",
    "%bA": "º",
    "%BA": "º",
    "%bb": "»",
    "%Bb": "»",
    "%bB": "»",
    "%BB": "»",
    "%bc": "¼",
    "%Bc": "¼",
    "%bC": "¼",
    "%BC": "¼",
    "%bd": "½",
    "%Bd": "½",
    "%bD": "½",
    "%BD": "½",
    "%be": "¾",
    "%Be": "¾",
    "%bE": "¾",
    "%BE": "¾",
    "%bf": "¿",
    "%Bf": "¿",
    "%bF": "¿",
    "%BF": "¿",
    "%c0": "À",
    "%C0": "À",
    "%c1": "Á",
    "%C1": "Á",
    "%c2": "Â",
    "%C2": "Â",
    "%c3": "Ã",
    "%C3": "Ã",
    "%c4": "Ä",
    "%C4": "Ä",
    "%c5": "Å",
    "%C5": "Å",
    "%c6": "Æ",
    "%C6": "Æ",
    "%c7": "Ç",
    "%C7": "Ç",
    "%c8": "È",
    "%C8": "È",
    "%c9": "É",
    "%C9": "É",
    "%ca": "Ê",
    "%Ca": "Ê",
    "%cA": "Ê",
    "%CA": "Ê",
    "%cb": "Ë",
    "%Cb": "Ë",
    "%cB": "Ë",
    "%CB": "Ë",
    "%cc": "Ì",
    "%Cc": "Ì",
    "%cC": "Ì",
    "%CC": "Ì",
    "%cd": "Í",
    "%Cd": "Í",
    "%cD": "Í",
    "%CD": "Í",
    "%ce": "Î",
    "%Ce": "Î",
    "%cE": "Î",
    "%CE": "Î",
    "%cf": "Ï",
    "%Cf": "Ï",
    "%cF": "Ï",
    "%CF": "Ï",
    "%d0": "Ð",
    "%D0": "Ð",
    "%d1": "Ñ",
    "%D1": "Ñ",
    "%d2": "Ò",
    "%D2": "Ò",
    "%d3": "Ó",
    "%D3": "Ó",
    "%d4": "Ô",
    "%D4": "Ô",
    "%d5": "Õ",
    "%D5": "Õ",
    "%d6": "Ö",
    "%D6": "Ö",
    "%d7": "×",
    "%D7": "×",
    "%d8": "Ø",
    "%D8": "Ø",
    "%d9": "Ù",
    "%D9": "Ù",
    "%da": "Ú",
    "%Da": "Ú",
    "%dA": "Ú",
    "%DA": "Ú",
    "%db": "Û",
    "%Db": "Û",
    "%dB": "Û",
    "%DB": "Û",
    "%dc": "Ü",
    "%Dc": "Ü",
    "%dC": "Ü",
    "%DC": "Ü",
    "%dd": "Ý",
    "%Dd": "Ý",
    "%dD": "Ý",
    "%DD": "Ý",
    "%de": "Þ",
    "%De": "Þ",
    "%dE": "Þ",
    "%DE": "Þ",
    "%df": "ß",
    "%Df": "ß",
    "%dF": "ß",
    "%DF": "ß",
    "%e0": "à",
    "%E0": "à",
    "%e1": "á",
    "%E1": "á",
    "%e2": "â",
    "%E2": "â",
    "%e3": "ã",
    "%E3": "ã",
    "%e4": "ä",
    "%E4": "ä",
    "%e5": "å",
    "%E5": "å",
    "%e6": "æ",
    "%E6": "æ",
    "%e7": "ç",
    "%E7": "ç",
    "%e8": "è",
    "%E8": "è",
    "%e9": "é",
    "%E9": "é",
    "%ea": "ê",
    "%Ea": "ê",
    "%eA": "ê",
    "%EA": "ê",
    "%eb": "ë",
    "%Eb": "ë",
    "%eB": "ë",
    "%EB": "ë",
    "%ec": "ì",
    "%Ec": "ì",
    "%eC": "ì",
    "%EC": "ì",
    "%ed": "í",
    "%Ed": "í",
    "%eD": "í",
    "%ED": "í",
    "%ee": "î",
    "%Ee": "î",
    "%eE": "î",
    "%EE": "î",
    "%ef": "ï",
    "%Ef": "ï",
    "%eF": "ï",
    "%EF": "ï",
    "%f0": "ð",
    "%F0": "ð",
    "%f1": "ñ",
    "%F1": "ñ",
    "%f2": "ò",
    "%F2": "ò",
    "%f3": "ó",
    "%F3": "ó",
    "%f4": "ô",
    "%F4": "ô",
    "%f5": "õ",
    "%F5": "õ",
    "%f6": "ö",
    "%F6": "ö",
    "%f7": "÷",
    "%F7": "÷",
    "%f8": "ø",
    "%F8": "ø",
    "%f9": "ù",
    "%F9": "ù",
    "%fa": "ú",
    "%Fa": "ú",
    "%fA": "ú",
    "%FA": "ú",
    "%fb": "û",
    "%Fb": "û",
    "%fB": "û",
    "%FB": "û",
    "%fc": "ü",
    "%Fc": "ü",
    "%fC": "ü",
    "%FC": "ü",
    "%fd": "ý",
    "%Fd": "ý",
    "%fD": "ý",
    "%FD": "ý",
    "%fe": "þ",
    "%Fe": "þ",
    "%fE": "þ",
    "%FE": "þ",
    "%ff": "ÿ",
    "%Ff": "ÿ",
    "%fF": "ÿ",
    "%FF": "ÿ"
  };
  function a(A) {
    return i[A];
  }
  const t = 0, d = 1, r = 2, o = 3;
  function s(A) {
    const l = [];
    let m = t, u = "", c = !1, k = !1, g = 0, N = "";
    const y = A.length;
    for (var h = 0; h < y; ++h) {
      const E = A[h];
      if (E === "\\" && c)
        if (k)
          k = !1;
        else {
          k = !0;
          continue;
        }
      else if (E === '"')
        if (k)
          k = !1;
        else {
          c ? (c = !1, m = t) : c = !0;
          continue;
        }
      else if (k && c && (N += "\\"), k = !1, (m === r || m === o) && E === "'") {
        m === r ? (m = o, u = N.substring(1)) : m = d, N = "";
        continue;
      } else if (m === t && (E === "*" || E === "=") && l.length) {
        m = E === "*" ? r : d, l[g] = [N, void 0], N = "";
        continue;
      } else if (!c && E === ";") {
        m = t, u ? (N.length && (N = n(
          N.replace(e, a),
          "binary",
          u
        )), u = "") : N.length && (N = n(N, "binary", "utf8")), l[g] === void 0 ? l[g] = N : l[g][1] = N, N = "", ++g;
        continue;
      } else if (!c && (E === " " || E === "	"))
        continue;
      N += E;
    }
    return u && N.length ? N = n(
      N.replace(e, a),
      "binary",
      u
    ) : N && (N = n(N, "binary", "utf8")), l[g] === void 0 ? N && (l[g] = N) : l[g][1] = N, l;
  }
  return ys = s, ys;
}
var bs, MA;
function Wf() {
  return MA || (MA = 1, bs = function(e) {
    if (typeof e != "string")
      return "";
    for (var i = e.length - 1; i >= 0; --i)
      switch (e.charCodeAt(i)) {
        case 47:
        case 92:
          return e = e.slice(i + 1), e === ".." || e === "." ? "" : e;
      }
    return e === ".." || e === "." ? "" : e;
  }), bs;
}
var Is, xA;
function zf() {
  if (xA)
    return Is;
  xA = 1;
  const { Readable: n } = J, { inherits: e } = J, i = Uc(), a = Lc(), t = Il(), d = Wf(), r = bl(), o = /^boundary$/i, s = /^form-data$/i, A = /^charset$/i, l = /^filename$/i, m = /^name$/i;
  u.detect = /^multipart\/form-data/i;
  function u(g, N) {
    let y, h;
    const E = this;
    let S;
    const b = N.limits, I = N.isPartAFile || ((O, Z, ie) => Z === "application/octet-stream" || ie !== void 0), D = N.parsedConType || [], B = N.defCharset || "utf8", q = N.preservePath, v = { highWaterMark: N.fileHwm };
    for (y = 0, h = D.length; y < h; ++y)
      if (Array.isArray(D[y]) && o.test(D[y][0])) {
        S = D[y][1];
        break;
      }
    function Q() {
      j === 0 && V && !g._done && (V = !1, E.end());
    }
    if (typeof S != "string")
      throw new Error("Multipart: Boundary not found");
    const _ = r(b, "fieldSize", 1 * 1024 * 1024), M = r(b, "fileSize", 1 / 0), se = r(b, "files", 1 / 0), U = r(b, "fields", 1 / 0), G = r(b, "parts", 1 / 0), H = r(b, "headerPairs", 2e3), $ = r(b, "headerSize", 80 * 1024);
    let W = 0, w = 0, j = 0, R, F, V = !1;
    this._needDrain = !1, this._pause = !1, this._cb = void 0, this._nparts = 0, this._boy = g;
    const P = {
      boundary: S,
      maxHeaderPairs: H,
      maxHeaderSize: $,
      partHwm: v.highWaterMark,
      highWaterMark: N.highWaterMark
    };
    this.parser = new i(P), this.parser.on("drain", function() {
      if (E._needDrain = !1, E._cb && !E._pause) {
        const O = E._cb;
        E._cb = void 0, O();
      }
    }).on("part", function O(Z) {
      if (++E._nparts > G)
        return E.parser.removeListener("part", O), E.parser.on("part", c), g.hitPartsLimit = !0, g.emit("partsLimit"), c(Z);
      if (F) {
        const ie = F;
        ie.emit("end"), ie.removeAllListeners("end");
      }
      Z.on("header", function(ie) {
        let ne, z, pe, Be, ve, qe, Qe = 0;
        if (ie["content-type"] && (pe = a(ie["content-type"][0]), pe[0])) {
          for (ne = pe[0].toLowerCase(), y = 0, h = pe.length; y < h; ++y)
            if (A.test(pe[y][0])) {
              Be = pe[y][1].toLowerCase();
              break;
            }
        }
        if (ne === void 0 && (ne = "text/plain"), Be === void 0 && (Be = B), ie["content-disposition"]) {
          if (pe = a(ie["content-disposition"][0]), !s.test(pe[0]))
            return c(Z);
          for (y = 0, h = pe.length; y < h; ++y)
            m.test(pe[y][0]) ? z = pe[y][1] : l.test(pe[y][0]) && (qe = pe[y][1], q || (qe = d(qe)));
        } else
          return c(Z);
        ie["content-transfer-encoding"] ? ve = ie["content-transfer-encoding"][0].toLowerCase() : ve = "7bit";
        let ze, mi;
        if (I(z, ne, qe)) {
          if (W === se)
            return g.hitFilesLimit || (g.hitFilesLimit = !0, g.emit("filesLimit")), c(Z);
          if (++W, !g._events.file) {
            E.parser._ignore();
            return;
          }
          ++j;
          const be = new k(v);
          R = be, be.on("end", function() {
            if (--j, E._pause = !1, Q(), E._cb && !E._needDrain) {
              const fe = E._cb;
              E._cb = void 0, fe();
            }
          }), be._read = function(fe) {
            if (E._pause && (E._pause = !1, E._cb && !E._needDrain)) {
              const we = E._cb;
              E._cb = void 0, we();
            }
          }, g.emit("file", z, be, qe, ve, ne), ze = function(fe) {
            if ((Qe += fe.length) > M) {
              const we = M - Qe + fe.length;
              we > 0 && be.push(fe.slice(0, we)), be.truncated = !0, be.bytesRead = M, Z.removeAllListeners("data"), be.emit("limit");
              return;
            } else
              be.push(fe) || (E._pause = !0);
            be.bytesRead = Qe;
          }, mi = function() {
            R = void 0, be.push(null);
          };
        } else {
          if (w === U)
            return g.hitFieldsLimit || (g.hitFieldsLimit = !0, g.emit("fieldsLimit")), c(Z);
          ++w, ++j;
          let be = "", fe = !1;
          F = Z, ze = function(we) {
            if ((Qe += we.length) > _) {
              const hi = _ - (Qe - we.length);
              be += we.toString("binary", 0, hi), fe = !0, Z.removeAllListeners("data");
            } else
              be += we.toString("binary");
          }, mi = function() {
            F = void 0, be.length && (be = t(be, "binary", Be)), g.emit("field", z, be, !1, fe, ve, ne), --j, Q();
          };
        }
        Z._readableState.sync = !1, Z.on("data", ze), Z.on("end", mi);
      }).on("error", function(ie) {
        R && R.emit("error", ie);
      });
    }).on("error", function(O) {
      g.emit("error", O);
    }).on("finish", function() {
      V = !0, Q();
    });
  }
  u.prototype.write = function(g, N) {
    const y = this.parser.write(g);
    y && !this._pause ? N() : (this._needDrain = !y, this._cb = N);
  }, u.prototype.end = function() {
    const g = this;
    g.parser.writable ? g.parser.end() : g._boy._done || process.nextTick(function() {
      g._boy._done = !0, g._boy.emit("finish");
    });
  };
  function c(g) {
    g.resume();
  }
  function k(g) {
    n.call(this, g), this.bytesRead = 0, this.truncated = !1;
  }
  return e(k, n), k.prototype._read = function(g) {
  }, Is = u, Is;
}
var Cs, YA;
function Zf() {
  if (YA)
    return Cs;
  YA = 1;
  const n = /\+/g, e = [
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    1,
    1,
    1,
    1,
    1,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    1,
    1,
    1,
    1,
    1,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0
  ];
  function i() {
    this.buffer = void 0;
  }
  return i.prototype.write = function(a) {
    a = a.replace(n, " ");
    let t = "", d = 0, r = 0;
    const o = a.length;
    for (; d < o; ++d)
      this.buffer !== void 0 ? e[a.charCodeAt(d)] ? (this.buffer += a[d], ++r, this.buffer.length === 2 && (t += String.fromCharCode(parseInt(this.buffer, 16)), this.buffer = void 0)) : (t += "%" + this.buffer, this.buffer = void 0, --d) : a[d] === "%" && (d > r && (t += a.substring(r, d), r = d), this.buffer = "", ++r);
    return r < o && this.buffer === void 0 && (t += a.substring(r)), t;
  }, i.prototype.reset = function() {
    this.buffer = void 0;
  }, Cs = i, Cs;
}
var Bs, JA;
function Kf() {
  if (JA)
    return Bs;
  JA = 1;
  const n = Zf(), e = Il(), i = bl(), a = /^charset$/i;
  t.detect = /^application\/x-www-form-urlencoded/i;
  function t(d, r) {
    const o = r.limits, s = r.parsedConType;
    this.boy = d, this.fieldSizeLimit = i(o, "fieldSize", 1 * 1024 * 1024), this.fieldNameSizeLimit = i(o, "fieldNameSize", 100), this.fieldsLimit = i(o, "fields", 1 / 0);
    let A;
    for (var l = 0, m = s.length; l < m; ++l)
      if (Array.isArray(s[l]) && a.test(s[l][0])) {
        A = s[l][1].toLowerCase();
        break;
      }
    A === void 0 && (A = r.defCharset || "utf8"), this.decoder = new n(), this.charset = A, this._fields = 0, this._state = "key", this._checkingBytes = !0, this._bytesKey = 0, this._bytesVal = 0, this._key = "", this._val = "", this._keyTrunc = !1, this._valTrunc = !1, this._hitLimit = !1;
  }
  return t.prototype.write = function(d, r) {
    if (this._fields === this.fieldsLimit)
      return this.boy.hitFieldsLimit || (this.boy.hitFieldsLimit = !0, this.boy.emit("fieldsLimit")), r();
    let o, s, A, l = 0;
    const m = d.length;
    for (; l < m; )
      if (this._state === "key") {
        for (o = s = void 0, A = l; A < m; ++A) {
          if (this._checkingBytes || ++l, d[A] === 61) {
            o = A;
            break;
          } else if (d[A] === 38) {
            s = A;
            break;
          }
          if (this._checkingBytes && this._bytesKey === this.fieldNameSizeLimit) {
            this._hitLimit = !0;
            break;
          } else
            this._checkingBytes && ++this._bytesKey;
        }
        if (o !== void 0)
          o > l && (this._key += this.decoder.write(d.toString("binary", l, o))), this._state = "val", this._hitLimit = !1, this._checkingBytes = !0, this._val = "", this._bytesVal = 0, this._valTrunc = !1, this.decoder.reset(), l = o + 1;
        else if (s !== void 0) {
          ++this._fields;
          let u;
          const c = this._keyTrunc;
          if (s > l ? u = this._key += this.decoder.write(d.toString("binary", l, s)) : u = this._key, this._hitLimit = !1, this._checkingBytes = !0, this._key = "", this._bytesKey = 0, this._keyTrunc = !1, this.decoder.reset(), u.length && this.boy.emit(
            "field",
            e(u, "binary", this.charset),
            "",
            c,
            !1
          ), l = s + 1, this._fields === this.fieldsLimit)
            return r();
        } else
          this._hitLimit ? (A > l && (this._key += this.decoder.write(d.toString("binary", l, A))), l = A, (this._bytesKey = this._key.length) === this.fieldNameSizeLimit && (this._checkingBytes = !1, this._keyTrunc = !0)) : (l < m && (this._key += this.decoder.write(d.toString("binary", l))), l = m);
      } else {
        for (s = void 0, A = l; A < m; ++A) {
          if (this._checkingBytes || ++l, d[A] === 38) {
            s = A;
            break;
          }
          if (this._checkingBytes && this._bytesVal === this.fieldSizeLimit) {
            this._hitLimit = !0;
            break;
          } else
            this._checkingBytes && ++this._bytesVal;
        }
        if (s !== void 0) {
          if (++this._fields, s > l && (this._val += this.decoder.write(d.toString("binary", l, s))), this.boy.emit(
            "field",
            e(this._key, "binary", this.charset),
            e(this._val, "binary", this.charset),
            this._keyTrunc,
            this._valTrunc
          ), this._state = "key", this._hitLimit = !1, this._checkingBytes = !0, this._key = "", this._bytesKey = 0, this._keyTrunc = !1, this.decoder.reset(), l = s + 1, this._fields === this.fieldsLimit)
            return r();
        } else
          this._hitLimit ? (A > l && (this._val += this.decoder.write(d.toString("binary", l, A))), l = A, (this._val === "" && this.fieldSizeLimit === 0 || (this._bytesVal = this._val.length) === this.fieldSizeLimit) && (this._checkingBytes = !1, this._valTrunc = !0)) : (l < m && (this._val += this.decoder.write(d.toString("binary", l))), l = m);
      }
    r();
  }, t.prototype.end = function() {
    this.boy._done || (this._state === "key" && this._key.length > 0 ? this.boy.emit(
      "field",
      e(this._key, "binary", this.charset),
      "",
      this._keyTrunc,
      !1
    ) : this._state === "val" && this.boy.emit(
      "field",
      e(this._key, "binary", this.charset),
      e(this._val, "binary", this.charset),
      this._keyTrunc,
      this._valTrunc
    ), this.boy._done = !0, this.boy.emit("finish"));
  }, Bs = t, Bs;
}
var HA;
function Xf() {
  if (HA)
    return et.exports;
  HA = 1;
  const n = J.Writable, { inherits: e } = J, i = Uc(), a = zf(), t = Kf(), d = Lc();
  function r(o) {
    if (!(this instanceof r))
      return new r(o);
    if (typeof o != "object")
      throw new TypeError("Busboy expected an options-Object.");
    if (typeof o.headers != "object")
      throw new TypeError("Busboy expected an options-Object with headers-attribute.");
    if (typeof o.headers["content-type"] != "string")
      throw new TypeError("Missing Content-Type-header.");
    const {
      headers: s,
      ...A
    } = o;
    this.opts = {
      autoDestroy: !1,
      ...A
    }, n.call(this, this.opts), this._done = !1, this._parser = this.getParserByHeaders(s), this._finished = !1;
  }
  return e(r, n), r.prototype.emit = function(o) {
    var s;
    if (o === "finish") {
      if (this._done) {
        if (this._finished)
          return;
      } else {
        (s = this._parser) == null || s.end();
        return;
      }
      this._finished = !0;
    }
    n.prototype.emit.apply(this, arguments);
  }, r.prototype.getParserByHeaders = function(o) {
    const s = d(o["content-type"]), A = {
      defCharset: this.opts.defCharset,
      fileHwm: this.opts.fileHwm,
      headers: o,
      highWaterMark: this.opts.highWaterMark,
      isPartAFile: this.opts.isPartAFile,
      limits: this.opts.limits,
      parsedConType: s,
      preservePath: this.opts.preservePath
    };
    if (a.detect.test(s[0]))
      return new a(this, A);
    if (t.detect.test(s[0]))
      return new t(this, A);
    throw new Error("Unsupported Content-Type.");
  }, r.prototype._write = function(o, s, A) {
    this._parser.write(o, A);
  }, et.exports = r, et.exports.default = r, et.exports.Busboy = r, et.exports.Dicer = i, et.exports;
}
var Qs, jA;
function Oa() {
  if (jA)
    return Qs;
  jA = 1;
  const { MessageChannel: n, receiveMessageOnPort: e } = J, i = ["GET", "HEAD", "POST"], a = new Set(i), t = [101, 204, 205, 304], d = [301, 302, 303, 307, 308], r = new Set(d), o = [
    "1",
    "7",
    "9",
    "11",
    "13",
    "15",
    "17",
    "19",
    "20",
    "21",
    "22",
    "23",
    "25",
    "37",
    "42",
    "43",
    "53",
    "69",
    "77",
    "79",
    "87",
    "95",
    "101",
    "102",
    "103",
    "104",
    "109",
    "110",
    "111",
    "113",
    "115",
    "117",
    "119",
    "123",
    "135",
    "137",
    "139",
    "143",
    "161",
    "179",
    "389",
    "427",
    "465",
    "512",
    "513",
    "514",
    "515",
    "526",
    "530",
    "531",
    "532",
    "540",
    "548",
    "554",
    "556",
    "563",
    "587",
    "601",
    "636",
    "989",
    "990",
    "993",
    "995",
    "1719",
    "1720",
    "1723",
    "2049",
    "3659",
    "4045",
    "5060",
    "5061",
    "6000",
    "6566",
    "6665",
    "6666",
    "6667",
    "6668",
    "6669",
    "6697",
    "10080"
  ], s = new Set(o), A = [
    "",
    "no-referrer",
    "no-referrer-when-downgrade",
    "same-origin",
    "origin",
    "strict-origin",
    "origin-when-cross-origin",
    "strict-origin-when-cross-origin",
    "unsafe-url"
  ], l = new Set(A), m = ["follow", "manual", "error"], u = ["GET", "HEAD", "OPTIONS", "TRACE"], c = new Set(u), k = ["navigate", "same-origin", "no-cors", "cors"], g = ["omit", "same-origin", "include"], N = [
    "default",
    "no-store",
    "reload",
    "no-cache",
    "force-cache",
    "only-if-cached"
  ], y = [
    "content-encoding",
    "content-language",
    "content-location",
    "content-type",
    // See https://github.com/nodejs/undici/issues/2021
    // 'Content-Length' is a forbidden header name, which is typically
    // removed in the Headers implementation. However, undici doesn't
    // filter out headers, so we add it here.
    "content-length"
  ], h = [
    "half"
  ], E = ["CONNECT", "TRACE", "TRACK"], S = new Set(E), b = [
    "audio",
    "audioworklet",
    "font",
    "image",
    "manifest",
    "paintworklet",
    "script",
    "style",
    "track",
    "video",
    "xslt",
    ""
  ], I = new Set(b), D = globalThis.DOMException ?? (() => {
    try {
      atob("~");
    } catch (v) {
      return Object.getPrototypeOf(v).constructor;
    }
  })();
  let B;
  const q = globalThis.structuredClone ?? // https://github.com/nodejs/node/blob/b27ae24dcc4251bad726d9d84baf678d1f707fed/lib/internal/structured_clone.js
  // structuredClone was added in v17.0.0, but fetch supports v16.8
  function(Q, _ = void 0) {
    if (arguments.length === 0)
      throw new TypeError("missing argument");
    return B || (B = new n()), B.port1.unref(), B.port2.unref(), B.port1.postMessage(Q, _ == null ? void 0 : _.transfer), e(B.port2).message;
  };
  return Qs = {
    DOMException: D,
    structuredClone: q,
    subresource: b,
    forbiddenMethods: E,
    requestBodyHeader: y,
    referrerPolicy: A,
    requestRedirect: m,
    requestMode: k,
    requestCredentials: g,
    requestCache: N,
    redirectStatus: d,
    corsSafeListedMethods: i,
    nullBodyStatus: t,
    safeMethods: u,
    badPorts: o,
    requestDuplex: h,
    subresourceSet: I,
    badPortsSet: s,
    redirectStatusSet: r,
    corsSafeListedMethodsSet: a,
    safeMethodsSet: c,
    forbiddenMethodsSet: S,
    referrerPolicySet: l
  }, Qs;
}
var Ss, WA;
function kd() {
  if (WA)
    return Ss;
  WA = 1;
  const n = Symbol.for("undici.globalOrigin.1");
  function e() {
    return globalThis[n];
  }
  function i(a) {
    if (a === void 0) {
      Object.defineProperty(globalThis, n, {
        value: void 0,
        writable: !0,
        enumerable: !1,
        configurable: !1
      });
      return;
    }
    const t = new URL(a);
    if (t.protocol !== "http:" && t.protocol !== "https:")
      throw new TypeError(`Only http & https urls are allowed, received ${t.protocol}`);
    Object.defineProperty(globalThis, n, {
      value: t,
      writable: !0,
      enumerable: !1,
      configurable: !1
    });
  }
  return Ss = {
    getGlobalOrigin: e,
    setGlobalOrigin: i
  }, Ss;
}
var Ds, zA;
function kn() {
  if (zA)
    return Ds;
  zA = 1;
  const { redirectStatusSet: n, referrerPolicySet: e, badPortsSet: i } = Oa(), { getGlobalOrigin: a } = kd(), { performance: t } = J, { isBlobLike: d, toUSVString: r, ReadableStreamFrom: o } = Ie, s = J, { isUint8Array: A } = J;
  let l;
  try {
    l = J;
  } catch {
  }
  function m(T) {
    const x = T.urlList, te = x.length;
    return te === 0 ? null : x[te - 1].toString();
  }
  function u(T, x) {
    if (!n.has(T.status))
      return null;
    let te = T.headersList.get("location");
    return te !== null && S(te) && (te = new URL(te, m(T))), te && !te.hash && (te.hash = x), te;
  }
  function c(T) {
    return T.urlList[T.urlList.length - 1];
  }
  function k(T) {
    const x = c(T);
    return Ia(x) && i.has(x.port) ? "blocked" : "allowed";
  }
  function g(T) {
    var x, te;
    return T instanceof Error || ((x = T == null ? void 0 : T.constructor) == null ? void 0 : x.name) === "Error" || ((te = T == null ? void 0 : T.constructor) == null ? void 0 : te.name) === "DOMException";
  }
  function N(T) {
    for (let x = 0; x < T.length; ++x) {
      const te = T.charCodeAt(x);
      if (!(te === 9 || // HTAB
      te >= 32 && te <= 126 || // SP / VCHAR
      te >= 128 && te <= 255))
        return !1;
    }
    return !0;
  }
  function y(T) {
    switch (T) {
      case 34:
      case 40:
      case 41:
      case 44:
      case 47:
      case 58:
      case 59:
      case 60:
      case 61:
      case 62:
      case 63:
      case 64:
      case 91:
      case 92:
      case 93:
      case 123:
      case 125:
        return !1;
      default:
        return T >= 33 && T <= 126;
    }
  }
  function h(T) {
    if (T.length === 0)
      return !1;
    for (let x = 0; x < T.length; ++x)
      if (!y(T.charCodeAt(x)))
        return !1;
    return !0;
  }
  function E(T) {
    return h(T);
  }
  function S(T) {
    return !(T.startsWith("	") || T.startsWith(" ") || T.endsWith("	") || T.endsWith(" ") || T.includes("\0") || T.includes("\r") || T.includes(`
`));
  }
  function b(T, x) {
    const { headersList: te } = x, ge = (te.get("referrer-policy") ?? "").split(",");
    let Ce = "";
    if (ge.length > 0)
      for (let je = ge.length; je !== 0; je--) {
        const Pe = ge[je - 1].trim();
        if (e.has(Pe)) {
          Ce = Pe;
          break;
        }
      }
    Ce !== "" && (T.referrerPolicy = Ce);
  }
  function I() {
    return "allowed";
  }
  function D() {
    return "success";
  }
  function B() {
    return "success";
  }
  function q(T) {
    let x = null;
    x = T.mode, T.headersList.set("sec-fetch-mode", x);
  }
  function v(T) {
    let x = T.origin;
    if (T.responseTainting === "cors" || T.mode === "websocket")
      x && T.headersList.append("origin", x);
    else if (T.method !== "GET" && T.method !== "HEAD") {
      switch (T.referrerPolicy) {
        case "no-referrer":
          x = null;
          break;
        case "no-referrer-when-downgrade":
        case "strict-origin":
        case "strict-origin-when-cross-origin":
          T.origin && hi(T.origin) && !hi(c(T)) && (x = null);
          break;
        case "same-origin":
          R(T, c(T)) || (x = null);
          break;
      }
      x && T.headersList.append("origin", x);
    }
  }
  function Q(T) {
    return t.now();
  }
  function _(T) {
    return {
      startTime: T.startTime ?? 0,
      redirectStartTime: 0,
      redirectEndTime: 0,
      postRedirectStartTime: T.startTime ?? 0,
      finalServiceWorkerStartTime: 0,
      finalNetworkResponseStartTime: 0,
      finalNetworkRequestStartTime: 0,
      endTime: 0,
      encodedBodySize: 0,
      decodedBodySize: 0,
      finalConnectionTimingInfo: null
    };
  }
  function M() {
    return {
      referrerPolicy: "strict-origin-when-cross-origin"
    };
  }
  function se(T) {
    return {
      referrerPolicy: T.referrerPolicy
    };
  }
  function U(T) {
    const x = T.referrerPolicy;
    s(x);
    let te = null;
    if (T.referrer === "client") {
      const Ci = a();
      if (!Ci || Ci.origin === "null")
        return "no-referrer";
      te = new URL(Ci);
    } else
      T.referrer instanceof URL && (te = T.referrer);
    let ge = G(te);
    const Ce = G(te, !0);
    ge.toString().length > 4096 && (ge = Ce);
    const je = R(T, ge), Pe = H(ge) && !H(T.url);
    switch (x) {
      case "origin":
        return Ce ?? G(te, !0);
      case "unsafe-url":
        return ge;
      case "same-origin":
        return je ? Ce : "no-referrer";
      case "origin-when-cross-origin":
        return je ? ge : Ce;
      case "strict-origin-when-cross-origin": {
        const Ci = c(T);
        return R(ge, Ci) ? ge : H(ge) && !H(Ci) ? "no-referrer" : Ce;
      }
      case "strict-origin":
      case "no-referrer-when-downgrade":
      default:
        return Pe ? "no-referrer" : Ce;
    }
  }
  function G(T, x) {
    return s(T instanceof URL), T.protocol === "file:" || T.protocol === "about:" || T.protocol === "blank:" ? "no-referrer" : (T.username = "", T.password = "", T.hash = "", x && (T.pathname = "", T.search = ""), T);
  }
  function H(T) {
    if (!(T instanceof URL))
      return !1;
    if (T.href === "about:blank" || T.href === "about:srcdoc" || T.protocol === "data:" || T.protocol === "file:")
      return !0;
    return x(T.origin);
    function x(te) {
      if (te == null || te === "null")
        return !1;
      const ge = new URL(te);
      return !!(ge.protocol === "https:" || ge.protocol === "wss:" || /^127(?:\.[0-9]+){0,2}\.[0-9]+$|^\[(?:0*:)*?:?0*1\]$/.test(ge.hostname) || ge.hostname === "localhost" || ge.hostname.includes("localhost.") || ge.hostname.endsWith(".localhost"));
    }
  }
  function $(T, x) {
    if (l === void 0)
      return !0;
    const te = w(x);
    if (te === "no metadata" || te.length === 0)
      return !0;
    const ge = te.sort((Pe, Ci) => Ci.algo.localeCompare(Pe.algo)), Ce = ge[0].algo, je = ge.filter((Pe) => Pe.algo === Ce);
    for (const Pe of je) {
      const Ci = Pe.algo;
      let En = Pe.hash;
      En.endsWith("==") && (En = En.slice(0, -2));
      let qn = l.createHash(Ci).update(T).digest("base64");
      if (qn.endsWith("==") && (qn = qn.slice(0, -2)), qn === En)
        return !0;
      let $n = l.createHash(Ci).update(T).digest("base64url");
      if ($n.endsWith("==") && ($n = $n.slice(0, -2)), $n === En)
        return !0;
    }
    return !1;
  }
  const W = /((?<algo>sha256|sha384|sha512)-(?<hash>[A-z0-9+/]{1}.*={0,2}))( +[\x21-\x7e]?)?/i;
  function w(T) {
    const x = [];
    let te = !0;
    const ge = l.getHashes();
    for (const Ce of T.split(" ")) {
      te = !1;
      const je = W.exec(Ce);
      if (je === null || je.groups === void 0)
        continue;
      const Pe = je.groups.algo;
      ge.includes(Pe.toLowerCase()) && x.push(je.groups);
    }
    return te === !0 ? "no metadata" : x;
  }
  function j(T) {
  }
  function R(T, x) {
    return T.origin === x.origin && T.origin === "null" || T.protocol === x.protocol && T.hostname === x.hostname && T.port === x.port;
  }
  function F() {
    let T, x;
    return { promise: new Promise((ge, Ce) => {
      T = ge, x = Ce;
    }), resolve: T, reject: x };
  }
  function V(T) {
    return T.controller.state === "aborted";
  }
  function P(T) {
    return T.controller.state === "aborted" || T.controller.state === "terminated";
  }
  const O = {
    delete: "DELETE",
    DELETE: "DELETE",
    get: "GET",
    GET: "GET",
    head: "HEAD",
    HEAD: "HEAD",
    options: "OPTIONS",
    OPTIONS: "OPTIONS",
    post: "POST",
    POST: "POST",
    put: "PUT",
    PUT: "PUT"
  };
  Object.setPrototypeOf(O, null);
  function Z(T) {
    return O[T.toLowerCase()] ?? T;
  }
  function ie(T) {
    const x = JSON.stringify(T);
    if (x === void 0)
      throw new TypeError("Value is not JSON serializable");
    return s(typeof x == "string"), x;
  }
  const ne = Object.getPrototypeOf(Object.getPrototypeOf([][Symbol.iterator]()));
  function z(T, x, te) {
    const ge = {
      index: 0,
      kind: te,
      target: T
    }, Ce = {
      next() {
        if (Object.getPrototypeOf(this) !== Ce)
          throw new TypeError(
            `'next' called on an object that does not implement interface ${x} Iterator.`
          );
        const { index: je, kind: Pe, target: Ci } = ge, En = Ci(), qn = En.length;
        if (je >= qn)
          return { value: void 0, done: !0 };
        const $n = En[je];
        return ge.index = je + 1, pe($n, Pe);
      },
      // The class string of an iterator prototype object for a given interface is the
      // result of concatenating the identifier of the interface and the string " Iterator".
      [Symbol.toStringTag]: `${x} Iterator`
    };
    return Object.setPrototypeOf(Ce, ne), Object.setPrototypeOf({}, Ce);
  }
  function pe(T, x) {
    let te;
    switch (x) {
      case "key": {
        te = T[0];
        break;
      }
      case "value": {
        te = T[1];
        break;
      }
      case "key+value": {
        te = T;
        break;
      }
    }
    return { value: te, done: !1 };
  }
  async function Be(T, x, te) {
    const ge = x, Ce = te;
    let je;
    try {
      je = T.stream.getReader();
    } catch (Pe) {
      Ce(Pe);
      return;
    }
    try {
      const Pe = await fe(je);
      ge(Pe);
    } catch (Pe) {
      Ce(Pe);
    }
  }
  let ve = globalThis.ReadableStream;
  function qe(T) {
    return ve || (ve = J.ReadableStream), T instanceof ve || T[Symbol.toStringTag] === "ReadableStream" && typeof T.tee == "function";
  }
  const Qe = 65535;
  function ze(T) {
    return T.length < Qe ? String.fromCharCode(...T) : T.reduce((x, te) => x + String.fromCharCode(te), "");
  }
  function mi(T) {
    try {
      T.close();
    } catch (x) {
      if (!x.message.includes("Controller is already closed"))
        throw x;
    }
  }
  function be(T) {
    for (let x = 0; x < T.length; x++)
      s(T.charCodeAt(x) <= 255);
    return T;
  }
  async function fe(T) {
    const x = [];
    let te = 0;
    for (; ; ) {
      const { done: ge, value: Ce } = await T.read();
      if (ge)
        return Buffer.concat(x, te);
      if (!A(Ce))
        throw new TypeError("Received non-Uint8Array chunk");
      x.push(Ce), te += Ce.length;
    }
  }
  function we(T) {
    s("protocol" in T);
    const x = T.protocol;
    return x === "about:" || x === "blob:" || x === "data:";
  }
  function hi(T) {
    return typeof T == "string" ? T.startsWith("https:") : T.protocol === "https:";
  }
  function Ia(T) {
    s("protocol" in T);
    const x = T.protocol;
    return x === "http:" || x === "https:";
  }
  const Xa = Object.hasOwn || ((T, x) => Object.prototype.hasOwnProperty.call(T, x));
  return Ds = {
    isAborted: V,
    isCancelled: P,
    createDeferredPromise: F,
    ReadableStreamFrom: o,
    toUSVString: r,
    tryUpgradeRequestToAPotentiallyTrustworthyURL: j,
    coarsenedSharedCurrentTime: Q,
    determineRequestsReferrer: U,
    makePolicyContainer: M,
    clonePolicyContainer: se,
    appendFetchMetadata: q,
    appendRequestOriginHeader: v,
    TAOCheck: B,
    corsCheck: D,
    crossOriginResourcePolicyCheck: I,
    createOpaqueTimingInfo: _,
    setRequestReferrerPolicyOnRedirect: b,
    isValidHTTPToken: h,
    requestBadPort: k,
    requestCurrentURL: c,
    responseURL: m,
    responseLocationURL: u,
    isBlobLike: d,
    isURLPotentiallyTrustworthy: H,
    isValidReasonPhrase: N,
    sameOrigin: R,
    normalizeMethod: Z,
    serializeJavascriptValueToJSONString: ie,
    makeIterator: z,
    isValidHeaderName: E,
    isValidHeaderValue: S,
    hasOwn: Xa,
    isErrorLike: g,
    fullyReadBody: Be,
    bytesMatch: $,
    isReadableStreamLike: qe,
    readableStreamClose: mi,
    isomorphicEncode: be,
    isomorphicDecode: ze,
    urlIsLocal: we,
    urlHasHttpsScheme: hi,
    urlIsHttpHttpsScheme: Ia,
    readAllBytes: fe,
    normalizeMethodRecord: O
  }, Ds;
}
var ws, ZA;
function ya() {
  return ZA || (ZA = 1, ws = {
    kUrl: Symbol("url"),
    kHeaders: Symbol("headers"),
    kSignal: Symbol("signal"),
    kState: Symbol("state"),
    kGuard: Symbol("guard"),
    kRealm: Symbol("realm")
  }), ws;
}
var Fs, KA;
function Mi() {
  if (KA)
    return Fs;
  KA = 1;
  const { types: n } = J, { hasOwn: e, toUSVString: i } = kn(), a = {};
  return a.converters = {}, a.util = {}, a.errors = {}, a.errors.exception = function(t) {
    return new TypeError(`${t.header}: ${t.message}`);
  }, a.errors.conversionFailed = function(t) {
    const d = t.types.length === 1 ? "" : " one of", r = `${t.argument} could not be converted to${d}: ${t.types.join(", ")}.`;
    return a.errors.exception({
      header: t.prefix,
      message: r
    });
  }, a.errors.invalidArgument = function(t) {
    return a.errors.exception({
      header: t.prefix,
      message: `"${t.value}" is an invalid ${t.type}.`
    });
  }, a.brandCheck = function(t, d, r = void 0) {
    if ((r == null ? void 0 : r.strict) !== !1 && !(t instanceof d))
      throw new TypeError("Illegal invocation");
    return (t == null ? void 0 : t[Symbol.toStringTag]) === d.prototype[Symbol.toStringTag];
  }, a.argumentLengthCheck = function({ length: t }, d, r) {
    if (t < d)
      throw a.errors.exception({
        message: `${d} argument${d !== 1 ? "s" : ""} required, but${t ? " only" : ""} ${t} found.`,
        ...r
      });
  }, a.illegalConstructor = function() {
    throw a.errors.exception({
      header: "TypeError",
      message: "Illegal constructor"
    });
  }, a.util.Type = function(t) {
    switch (typeof t) {
      case "undefined":
        return "Undefined";
      case "boolean":
        return "Boolean";
      case "string":
        return "String";
      case "symbol":
        return "Symbol";
      case "number":
        return "Number";
      case "bigint":
        return "BigInt";
      case "function":
      case "object":
        return t === null ? "Null" : "Object";
    }
  }, a.util.ConvertToInt = function(t, d, r, o = {}) {
    let s, A;
    d === 64 ? (s = Math.pow(2, 53) - 1, r === "unsigned" ? A = 0 : A = Math.pow(-2, 53) + 1) : r === "unsigned" ? (A = 0, s = Math.pow(2, d) - 1) : (A = Math.pow(-2, d) - 1, s = Math.pow(2, d - 1) - 1);
    let l = Number(t);
    if (l === 0 && (l = 0), o.enforceRange === !0) {
      if (Number.isNaN(l) || l === Number.POSITIVE_INFINITY || l === Number.NEGATIVE_INFINITY)
        throw a.errors.exception({
          header: "Integer conversion",
          message: `Could not convert ${t} to an integer.`
        });
      if (l = a.util.IntegerPart(l), l < A || l > s)
        throw a.errors.exception({
          header: "Integer conversion",
          message: `Value must be between ${A}-${s}, got ${l}.`
        });
      return l;
    }
    return !Number.isNaN(l) && o.clamp === !0 ? (l = Math.min(Math.max(l, A), s), Math.floor(l) % 2 === 0 ? l = Math.floor(l) : l = Math.ceil(l), l) : Number.isNaN(l) || l === 0 && Object.is(0, l) || l === Number.POSITIVE_INFINITY || l === Number.NEGATIVE_INFINITY ? 0 : (l = a.util.IntegerPart(l), l = l % Math.pow(2, d), r === "signed" && l >= Math.pow(2, d) - 1 ? l - Math.pow(2, d) : l);
  }, a.util.IntegerPart = function(t) {
    const d = Math.floor(Math.abs(t));
    return t < 0 ? -1 * d : d;
  }, a.sequenceConverter = function(t) {
    return (d) => {
      var s;
      if (a.util.Type(d) !== "Object")
        throw a.errors.exception({
          header: "Sequence",
          message: `Value of type ${a.util.Type(d)} is not an Object.`
        });
      const r = (s = d == null ? void 0 : d[Symbol.iterator]) == null ? void 0 : s.call(d), o = [];
      if (r === void 0 || typeof r.next != "function")
        throw a.errors.exception({
          header: "Sequence",
          message: "Object is not an iterator."
        });
      for (; ; ) {
        const { done: A, value: l } = r.next();
        if (A)
          break;
        o.push(t(l));
      }
      return o;
    };
  }, a.recordConverter = function(t, d) {
    return (r) => {
      if (a.util.Type(r) !== "Object")
        throw a.errors.exception({
          header: "Record",
          message: `Value of type ${a.util.Type(r)} is not an Object.`
        });
      const o = {};
      if (!n.isProxy(r)) {
        const A = Object.keys(r);
        for (const l of A) {
          const m = t(l), u = d(r[l]);
          o[m] = u;
        }
        return o;
      }
      const s = Reflect.ownKeys(r);
      for (const A of s) {
        const l = Reflect.getOwnPropertyDescriptor(r, A);
        if (l != null && l.enumerable) {
          const m = t(A), u = d(r[A]);
          o[m] = u;
        }
      }
      return o;
    };
  }, a.interfaceConverter = function(t) {
    return (d, r = {}) => {
      if (r.strict !== !1 && !(d instanceof t))
        throw a.errors.exception({
          header: t.name,
          message: `Expected ${d} to be an instance of ${t.name}.`
        });
      return d;
    };
  }, a.dictionaryConverter = function(t) {
    return (d) => {
      const r = a.util.Type(d), o = {};
      if (r === "Null" || r === "Undefined")
        return o;
      if (r !== "Object")
        throw a.errors.exception({
          header: "Dictionary",
          message: `Expected ${d} to be one of: Null, Undefined, Object.`
        });
      for (const s of t) {
        const { key: A, defaultValue: l, required: m, converter: u } = s;
        if (m === !0 && !e(d, A))
          throw a.errors.exception({
            header: "Dictionary",
            message: `Missing required key "${A}".`
          });
        let c = d[A];
        const k = e(s, "defaultValue");
        if (k && c !== null && (c = c ?? l), m || k || c !== void 0) {
          if (c = u(c), s.allowedValues && !s.allowedValues.includes(c))
            throw a.errors.exception({
              header: "Dictionary",
              message: `${c} is not an accepted type. Expected one of ${s.allowedValues.join(", ")}.`
            });
          o[A] = c;
        }
      }
      return o;
    };
  }, a.nullableConverter = function(t) {
    return (d) => d === null ? d : t(d);
  }, a.converters.DOMString = function(t, d = {}) {
    if (t === null && d.legacyNullToEmptyString)
      return "";
    if (typeof t == "symbol")
      throw new TypeError("Could not convert argument of type symbol to string.");
    return String(t);
  }, a.converters.ByteString = function(t) {
    const d = a.converters.DOMString(t);
    for (let r = 0; r < d.length; r++)
      if (d.charCodeAt(r) > 255)
        throw new TypeError(
          `Cannot convert argument to a ByteString because the character at index ${r} has a value of ${d.charCodeAt(r)} which is greater than 255.`
        );
    return d;
  }, a.converters.USVString = i, a.converters.boolean = function(t) {
    return !!t;
  }, a.converters.any = function(t) {
    return t;
  }, a.converters["long long"] = function(t) {
    return a.util.ConvertToInt(t, 64, "signed");
  }, a.converters["unsigned long long"] = function(t) {
    return a.util.ConvertToInt(t, 64, "unsigned");
  }, a.converters["unsigned long"] = function(t) {
    return a.util.ConvertToInt(t, 32, "unsigned");
  }, a.converters["unsigned short"] = function(t, d) {
    return a.util.ConvertToInt(t, 16, "unsigned", d);
  }, a.converters.ArrayBuffer = function(t, d = {}) {
    if (a.util.Type(t) !== "Object" || !n.isAnyArrayBuffer(t))
      throw a.errors.conversionFailed({
        prefix: `${t}`,
        argument: `${t}`,
        types: ["ArrayBuffer"]
      });
    if (d.allowShared === !1 && n.isSharedArrayBuffer(t))
      throw a.errors.exception({
        header: "ArrayBuffer",
        message: "SharedArrayBuffer is not allowed."
      });
    return t;
  }, a.converters.TypedArray = function(t, d, r = {}) {
    if (a.util.Type(t) !== "Object" || !n.isTypedArray(t) || t.constructor.name !== d.name)
      throw a.errors.conversionFailed({
        prefix: `${d.name}`,
        argument: `${t}`,
        types: [d.name]
      });
    if (r.allowShared === !1 && n.isSharedArrayBuffer(t.buffer))
      throw a.errors.exception({
        header: "ArrayBuffer",
        message: "SharedArrayBuffer is not allowed."
      });
    return t;
  }, a.converters.DataView = function(t, d = {}) {
    if (a.util.Type(t) !== "Object" || !n.isDataView(t))
      throw a.errors.exception({
        header: "DataView",
        message: "Object is not a DataView."
      });
    if (d.allowShared === !1 && n.isSharedArrayBuffer(t.buffer))
      throw a.errors.exception({
        header: "ArrayBuffer",
        message: "SharedArrayBuffer is not allowed."
      });
    return t;
  }, a.converters.BufferSource = function(t, d = {}) {
    if (n.isAnyArrayBuffer(t))
      return a.converters.ArrayBuffer(t, d);
    if (n.isTypedArray(t))
      return a.converters.TypedArray(t, t.constructor);
    if (n.isDataView(t))
      return a.converters.DataView(t, d);
    throw new TypeError(`Could not convert ${t} to a BufferSource.`);
  }, a.converters["sequence<ByteString>"] = a.sequenceConverter(
    a.converters.ByteString
  ), a.converters["sequence<sequence<ByteString>>"] = a.sequenceConverter(
    a.converters["sequence<ByteString>"]
  ), a.converters["record<ByteString, ByteString>"] = a.recordConverter(
    a.converters.ByteString,
    a.converters.ByteString
  ), Fs = {
    webidl: a
  }, Fs;
}
var Vs, XA;
function Fn() {
  if (XA)
    return Vs;
  XA = 1;
  const n = J, { atob: e } = J, { isomorphicDecode: i } = kn(), a = new TextEncoder(), t = /^[!#$%&'*+-.^_|~A-Za-z0-9]+$/, d = /(\u000A|\u000D|\u0009|\u0020)/, r = /[\u0009|\u0020-\u007E|\u0080-\u00FF]/;
  function o(b) {
    n(b.protocol === "data:");
    let I = s(b, !0);
    I = I.slice(5);
    const D = { position: 0 };
    let B = l(
      ",",
      I,
      D
    );
    const q = B.length;
    if (B = S(B, !0, !0), D.position >= I.length)
      return "failure";
    D.position++;
    const v = I.slice(q + 1);
    let Q = m(v);
    if (/;(\u0020){0,}base64$/i.test(B)) {
      const M = i(Q);
      if (Q = k(M), Q === "failure")
        return "failure";
      B = B.slice(0, -6), B = B.replace(/(\u0020)+$/, ""), B = B.slice(0, -1);
    }
    B.startsWith(";") && (B = "text/plain" + B);
    let _ = c(B);
    return _ === "failure" && (_ = c("text/plain;charset=US-ASCII")), { mimeType: _, body: Q };
  }
  function s(b, I = !1) {
    if (!I)
      return b.href;
    const D = b.href, B = b.hash.length;
    return B === 0 ? D : D.substring(0, D.length - B);
  }
  function A(b, I, D) {
    let B = "";
    for (; D.position < I.length && b(I[D.position]); )
      B += I[D.position], D.position++;
    return B;
  }
  function l(b, I, D) {
    const B = I.indexOf(b, D.position), q = D.position;
    return B === -1 ? (D.position = I.length, I.slice(q)) : (D.position = B, I.slice(q, D.position));
  }
  function m(b) {
    const I = a.encode(b);
    return u(I);
  }
  function u(b) {
    const I = [];
    for (let D = 0; D < b.length; D++) {
      const B = b[D];
      if (B !== 37)
        I.push(B);
      else if (B === 37 && !/^[0-9A-Fa-f]{2}$/i.test(String.fromCharCode(b[D + 1], b[D + 2])))
        I.push(37);
      else {
        const q = String.fromCharCode(b[D + 1], b[D + 2]), v = Number.parseInt(q, 16);
        I.push(v), D += 2;
      }
    }
    return Uint8Array.from(I);
  }
  function c(b) {
    b = h(b, !0, !0);
    const I = { position: 0 }, D = l(
      "/",
      b,
      I
    );
    if (D.length === 0 || !t.test(D) || I.position > b.length)
      return "failure";
    I.position++;
    let B = l(
      ";",
      b,
      I
    );
    if (B = h(B, !1, !0), B.length === 0 || !t.test(B))
      return "failure";
    const q = D.toLowerCase(), v = B.toLowerCase(), Q = {
      type: q,
      subtype: v,
      /** @type {Map<string, string>} */
      parameters: /* @__PURE__ */ new Map(),
      // https://mimesniff.spec.whatwg.org/#mime-type-essence
      essence: `${q}/${v}`
    };
    for (; I.position < b.length; ) {
      I.position++, A(
        // https://fetch.spec.whatwg.org/#http-whitespace
        (se) => d.test(se),
        b,
        I
      );
      let _ = A(
        (se) => se !== ";" && se !== "=",
        b,
        I
      );
      if (_ = _.toLowerCase(), I.position < b.length) {
        if (b[I.position] === ";")
          continue;
        I.position++;
      }
      if (I.position > b.length)
        break;
      let M = null;
      if (b[I.position] === '"')
        M = g(b, I, !0), l(
          ";",
          b,
          I
        );
      else if (M = l(
        ";",
        b,
        I
      ), M = h(M, !1, !0), M.length === 0)
        continue;
      _.length !== 0 && t.test(_) && (M.length === 0 || r.test(M)) && !Q.parameters.has(_) && Q.parameters.set(_, M);
    }
    return Q;
  }
  function k(b) {
    if (b = b.replace(/[\u0009\u000A\u000C\u000D\u0020]/g, ""), b.length % 4 === 0 && (b = b.replace(/=?=$/, "")), b.length % 4 === 1 || /[^+/0-9A-Za-z]/.test(b))
      return "failure";
    const I = e(b), D = new Uint8Array(I.length);
    for (let B = 0; B < I.length; B++)
      D[B] = I.charCodeAt(B);
    return D;
  }
  function g(b, I, D) {
    const B = I.position;
    let q = "";
    for (n(b[I.position] === '"'), I.position++; q += A(
      (Q) => Q !== '"' && Q !== "\\",
      b,
      I
    ), !(I.position >= b.length); ) {
      const v = b[I.position];
      if (I.position++, v === "\\") {
        if (I.position >= b.length) {
          q += "\\";
          break;
        }
        q += b[I.position], I.position++;
      } else {
        n(v === '"');
        break;
      }
    }
    return D ? q : b.slice(B, I.position);
  }
  function N(b) {
    n(b !== "failure");
    const { parameters: I, essence: D } = b;
    let B = D;
    for (let [q, v] of I.entries())
      B += ";", B += q, B += "=", t.test(v) || (v = v.replace(/(\\|")/g, "\\$1"), v = '"' + v, v += '"'), B += v;
    return B;
  }
  function y(b) {
    return b === "\r" || b === `
` || b === "	" || b === " ";
  }
  function h(b, I = !0, D = !0) {
    let B = 0, q = b.length - 1;
    if (I)
      for (; B < b.length && y(b[B]); B++)
        ;
    if (D)
      for (; q > 0 && y(b[q]); q--)
        ;
    return b.slice(B, q + 1);
  }
  function E(b) {
    return b === "\r" || b === `
` || b === "	" || b === "\f" || b === " ";
  }
  function S(b, I = !0, D = !0) {
    let B = 0, q = b.length - 1;
    if (I)
      for (; B < b.length && E(b[B]); B++)
        ;
    if (D)
      for (; q > 0 && E(b[q]); q--)
        ;
    return b.slice(B, q + 1);
  }
  return Vs = {
    dataURLProcessor: o,
    URLSerializer: s,
    collectASequenceOfCodePoints: A,
    collectASequenceOfCodePointsFast: l,
    stringPercentDecode: m,
    parseMIMEType: c,
    collectAnHTTPQuotedString: g,
    serializeAMimeType: N
  }, Vs;
}
var Ts, $A;
function Cl() {
  if ($A)
    return Ts;
  $A = 1;
  const { Blob: n, File: e } = J, { types: i } = J, { kState: a } = ya(), { isBlobLike: t } = kn(), { webidl: d } = Mi(), { parseMIMEType: r, serializeAMimeType: o } = Fn(), { kEnumerableProperty: s } = Ie, A = new TextEncoder();
  class l extends n {
    constructor(N, y, h = {}) {
      d.argumentLengthCheck(arguments, 2, { header: "File constructor" }), N = d.converters["sequence<BlobPart>"](N), y = d.converters.USVString(y), h = d.converters.FilePropertyBag(h);
      const E = y;
      let S = h.type, b;
      e: {
        if (S) {
          if (S = r(S), S === "failure") {
            S = "";
            break e;
          }
          S = o(S).toLowerCase();
        }
        b = h.lastModified;
      }
      super(u(N, h), { type: S }), this[a] = {
        name: E,
        lastModified: b,
        type: S
      };
    }
    get name() {
      return d.brandCheck(this, l), this[a].name;
    }
    get lastModified() {
      return d.brandCheck(this, l), this[a].lastModified;
    }
    get type() {
      return d.brandCheck(this, l), this[a].type;
    }
  }
  class m {
    constructor(N, y, h = {}) {
      const E = y, S = h.type, b = h.lastModified ?? Date.now();
      this[a] = {
        blobLike: N,
        name: E,
        type: S,
        lastModified: b
      };
    }
    stream(...N) {
      return d.brandCheck(this, m), this[a].blobLike.stream(...N);
    }
    arrayBuffer(...N) {
      return d.brandCheck(this, m), this[a].blobLike.arrayBuffer(...N);
    }
    slice(...N) {
      return d.brandCheck(this, m), this[a].blobLike.slice(...N);
    }
    text(...N) {
      return d.brandCheck(this, m), this[a].blobLike.text(...N);
    }
    get size() {
      return d.brandCheck(this, m), this[a].blobLike.size;
    }
    get type() {
      return d.brandCheck(this, m), this[a].blobLike.type;
    }
    get name() {
      return d.brandCheck(this, m), this[a].name;
    }
    get lastModified() {
      return d.brandCheck(this, m), this[a].lastModified;
    }
    get [Symbol.toStringTag]() {
      return "File";
    }
  }
  Object.defineProperties(l.prototype, {
    [Symbol.toStringTag]: {
      value: "File",
      configurable: !0
    },
    name: s,
    lastModified: s
  }), d.converters.Blob = d.interfaceConverter(n), d.converters.BlobPart = function(g, N) {
    if (d.util.Type(g) === "Object") {
      if (t(g))
        return d.converters.Blob(g, { strict: !1 });
      if (ArrayBuffer.isView(g) || i.isAnyArrayBuffer(g))
        return d.converters.BufferSource(g, N);
    }
    return d.converters.USVString(g, N);
  }, d.converters["sequence<BlobPart>"] = d.sequenceConverter(
    d.converters.BlobPart
  ), d.converters.FilePropertyBag = d.dictionaryConverter([
    {
      key: "lastModified",
      converter: d.converters["long long"],
      get defaultValue() {
        return Date.now();
      }
    },
    {
      key: "type",
      converter: d.converters.DOMString,
      defaultValue: ""
    },
    {
      key: "endings",
      converter: (g) => (g = d.converters.DOMString(g), g = g.toLowerCase(), g !== "native" && (g = "transparent"), g),
      defaultValue: "transparent"
    }
  ]);
  function u(g, N) {
    const y = [];
    for (const h of g)
      if (typeof h == "string") {
        let E = h;
        N.endings === "native" && (E = c(E)), y.push(A.encode(E));
      } else
        i.isAnyArrayBuffer(h) || i.isTypedArray(h) ? h.buffer ? y.push(
          new Uint8Array(h.buffer, h.byteOffset, h.byteLength)
        ) : y.push(new Uint8Array(h)) : t(h) && y.push(h);
    return y;
  }
  function c(g) {
    let N = `
`;
    return process.platform === "win32" && (N = `\r
`), g.replace(/\r?\n/g, N);
  }
  function k(g) {
    return e && g instanceof e || g instanceof l || g && (typeof g.stream == "function" || typeof g.arrayBuffer == "function") && g[Symbol.toStringTag] === "File";
  }
  return Ts = { File: l, FileLike: m, isFileLike: k }, Ts;
}
var _s, em;
function Bl() {
  if (em)
    return _s;
  em = 1;
  const { isBlobLike: n, toUSVString: e, makeIterator: i } = kn(), { kState: a } = ya(), { File: t, FileLike: d, isFileLike: r } = Cl(), { webidl: o } = Mi(), { Blob: s, File: A } = J, l = A ?? t;
  class m {
    constructor(k) {
      if (k !== void 0)
        throw o.errors.conversionFailed({
          prefix: "FormData constructor",
          argument: "Argument 1",
          types: ["undefined"]
        });
      this[a] = [];
    }
    append(k, g, N = void 0) {
      if (o.brandCheck(this, m), o.argumentLengthCheck(arguments, 2, { header: "FormData.append" }), arguments.length === 3 && !n(g))
        throw new TypeError(
          "Failed to execute 'append' on 'FormData': parameter 2 is not of type 'Blob'"
        );
      k = o.converters.USVString(k), g = n(g) ? o.converters.Blob(g, { strict: !1 }) : o.converters.USVString(g), N = arguments.length === 3 ? o.converters.USVString(N) : void 0;
      const y = u(k, g, N);
      this[a].push(y);
    }
    delete(k) {
      o.brandCheck(this, m), o.argumentLengthCheck(arguments, 1, { header: "FormData.delete" }), k = o.converters.USVString(k), this[a] = this[a].filter((g) => g.name !== k);
    }
    get(k) {
      o.brandCheck(this, m), o.argumentLengthCheck(arguments, 1, { header: "FormData.get" }), k = o.converters.USVString(k);
      const g = this[a].findIndex((N) => N.name === k);
      return g === -1 ? null : this[a][g].value;
    }
    getAll(k) {
      return o.brandCheck(this, m), o.argumentLengthCheck(arguments, 1, { header: "FormData.getAll" }), k = o.converters.USVString(k), this[a].filter((g) => g.name === k).map((g) => g.value);
    }
    has(k) {
      return o.brandCheck(this, m), o.argumentLengthCheck(arguments, 1, { header: "FormData.has" }), k = o.converters.USVString(k), this[a].findIndex((g) => g.name === k) !== -1;
    }
    set(k, g, N = void 0) {
      if (o.brandCheck(this, m), o.argumentLengthCheck(arguments, 2, { header: "FormData.set" }), arguments.length === 3 && !n(g))
        throw new TypeError(
          "Failed to execute 'set' on 'FormData': parameter 2 is not of type 'Blob'"
        );
      k = o.converters.USVString(k), g = n(g) ? o.converters.Blob(g, { strict: !1 }) : o.converters.USVString(g), N = arguments.length === 3 ? e(N) : void 0;
      const y = u(k, g, N), h = this[a].findIndex((E) => E.name === k);
      h !== -1 ? this[a] = [
        ...this[a].slice(0, h),
        y,
        ...this[a].slice(h + 1).filter((E) => E.name !== k)
      ] : this[a].push(y);
    }
    entries() {
      return o.brandCheck(this, m), i(
        () => this[a].map((k) => [k.name, k.value]),
        "FormData",
        "key+value"
      );
    }
    keys() {
      return o.brandCheck(this, m), i(
        () => this[a].map((k) => [k.name, k.value]),
        "FormData",
        "key"
      );
    }
    values() {
      return o.brandCheck(this, m), i(
        () => this[a].map((k) => [k.name, k.value]),
        "FormData",
        "value"
      );
    }
    /**
     * @param {(value: string, key: string, self: FormData) => void} callbackFn
     * @param {unknown} thisArg
     */
    forEach(k, g = globalThis) {
      if (o.brandCheck(this, m), o.argumentLengthCheck(arguments, 1, { header: "FormData.forEach" }), typeof k != "function")
        throw new TypeError(
          "Failed to execute 'forEach' on 'FormData': parameter 1 is not of type 'Function'."
        );
      for (const [N, y] of this)
        k.apply(g, [y, N, this]);
    }
  }
  m.prototype[Symbol.iterator] = m.prototype.entries, Object.defineProperties(m.prototype, {
    [Symbol.toStringTag]: {
      value: "FormData",
      configurable: !0
    }
  });
  function u(c, k, g) {
    if (c = Buffer.from(c).toString("utf8"), typeof k == "string")
      k = Buffer.from(k).toString("utf8");
    else if (r(k) || (k = k instanceof s ? new l([k], "blob", { type: k.type }) : new d(k, "blob", { type: k.type })), g !== void 0) {
      const N = {
        type: k.type,
        lastModified: k.lastModified
      };
      k = A && k instanceof A || k instanceof t ? new l([k], g, N) : new d(k, g, N);
    }
    return { name: c, value: k };
  }
  return _s = { FormData: m }, _s;
}
var Rs, im;
function Tr() {
  if (im)
    return Rs;
  im = 1;
  const n = Xf(), e = Ie, {
    ReadableStreamFrom: i,
    isBlobLike: a,
    isReadableStreamLike: t,
    readableStreamClose: d,
    createDeferredPromise: r,
    fullyReadBody: o
  } = kn(), { FormData: s } = Bl(), { kState: A } = ya(), { webidl: l } = Mi(), { DOMException: m, structuredClone: u } = Oa(), { Blob: c, File: k } = J, { kBodyUsed: g } = Ye, N = J, { isErrored: y } = Ie, { isUint8Array: h, isArrayBuffer: E } = J, { File: S } = Cl(), { parseMIMEType: b, serializeAMimeType: I } = Fn();
  let D = globalThis.ReadableStream;
  const B = k ?? S, q = new TextEncoder(), v = new TextDecoder();
  function Q(F, V = !1) {
    D || (D = J.ReadableStream);
    let P = null;
    F instanceof D ? P = F : a(F) ? P = F.stream() : P = new D({
      async pull(pe) {
        pe.enqueue(
          typeof Z == "string" ? q.encode(Z) : Z
        ), queueMicrotask(() => d(pe));
      },
      start() {
      },
      type: void 0
    }), N(t(P));
    let O = null, Z = null, ie = null, ne = null;
    if (typeof F == "string")
      Z = F, ne = "text/plain;charset=UTF-8";
    else if (F instanceof URLSearchParams)
      Z = F.toString(), ne = "application/x-www-form-urlencoded;charset=UTF-8";
    else if (E(F))
      Z = new Uint8Array(F.slice());
    else if (ArrayBuffer.isView(F))
      Z = new Uint8Array(F.buffer.slice(F.byteOffset, F.byteOffset + F.byteLength));
    else if (e.isFormDataLike(F)) {
      const pe = `----formdata-undici-0${`${Math.floor(Math.random() * 1e11)}`.padStart(11, "0")}`, Be = `--${pe}\r
Content-Disposition: form-data`;
      /*! formdata-polyfill. MIT License. Jimmy Wärting <https://jimmy.warting.se/opensource> */
      const ve = (fe) => fe.replace(/\n/g, "%0A").replace(/\r/g, "%0D").replace(/"/g, "%22"), qe = (fe) => fe.replace(/\r?\n|\r/g, `\r
`), Qe = [], ze = new Uint8Array([13, 10]);
      ie = 0;
      let mi = !1;
      for (const [fe, we] of F)
        if (typeof we == "string") {
          const hi = q.encode(Be + `; name="${ve(qe(fe))}"\r
\r
${qe(we)}\r
`);
          Qe.push(hi), ie += hi.byteLength;
        } else {
          const hi = q.encode(`${Be}; name="${ve(qe(fe))}"` + (we.name ? `; filename="${ve(we.name)}"` : "") + `\r
Content-Type: ${we.type || "application/octet-stream"}\r
\r
`);
          Qe.push(hi, we, ze), typeof we.size == "number" ? ie += hi.byteLength + we.size + ze.byteLength : mi = !0;
        }
      const be = q.encode(`--${pe}--`);
      Qe.push(be), ie += be.byteLength, mi && (ie = null), Z = F, O = async function* () {
        for (const fe of Qe)
          fe.stream ? yield* fe.stream() : yield fe;
      }, ne = "multipart/form-data; boundary=" + pe;
    } else if (a(F))
      Z = F, ie = F.size, F.type && (ne = F.type);
    else if (typeof F[Symbol.asyncIterator] == "function") {
      if (V)
        throw new TypeError("keepalive");
      if (e.isDisturbed(F) || F.locked)
        throw new TypeError(
          "Response body object should not be disturbed or locked"
        );
      P = F instanceof D ? F : i(F);
    }
    if ((typeof Z == "string" || e.isBuffer(Z)) && (ie = Buffer.byteLength(Z)), O != null) {
      let pe;
      P = new D({
        async start() {
          pe = O(F)[Symbol.asyncIterator]();
        },
        async pull(Be) {
          const { value: ve, done: qe } = await pe.next();
          return qe ? queueMicrotask(() => {
            Be.close();
          }) : y(P) || Be.enqueue(new Uint8Array(ve)), Be.desiredSize > 0;
        },
        async cancel(Be) {
          await pe.return();
        },
        type: void 0
      });
    }
    return [{ stream: P, source: Z, length: ie }, ne];
  }
  function _(F, V = !1) {
    return D || (D = J.ReadableStream), F instanceof D && (N(!e.isDisturbed(F), "The body has already been consumed."), N(!F.locked, "The stream is locked.")), Q(F, V);
  }
  function M(F) {
    const [V, P] = F.stream.tee(), O = u(P, { transfer: [P] }), [, Z] = O.tee();
    return F.stream = V, {
      stream: Z,
      length: F.length,
      source: F.source
    };
  }
  async function* se(F) {
    if (F)
      if (h(F))
        yield F;
      else {
        const V = F.stream;
        if (e.isDisturbed(V))
          throw new TypeError("The body has already been consumed.");
        if (V.locked)
          throw new TypeError("The stream is locked.");
        V[g] = !0, yield* V;
      }
  }
  function U(F) {
    if (F.aborted)
      throw new m("The operation was aborted.", "AbortError");
  }
  function G(F) {
    return {
      blob() {
        return $(this, (P) => {
          let O = R(this);
          return O === "failure" ? O = "" : O && (O = I(O)), new c([P], { type: O });
        }, F);
      },
      arrayBuffer() {
        return $(this, (P) => new Uint8Array(P).buffer, F);
      },
      text() {
        return $(this, w, F);
      },
      json() {
        return $(this, j, F);
      },
      async formData() {
        l.brandCheck(this, F), U(this[A]);
        const P = this.headers.get("Content-Type");
        if (/multipart\/form-data/.test(P)) {
          const O = {};
          for (const [z, pe] of this.headers)
            O[z.toLowerCase()] = pe;
          const Z = new s();
          let ie;
          try {
            ie = new n({
              headers: O,
              preservePath: !0
            });
          } catch (z) {
            throw new m(`${z}`, "AbortError");
          }
          ie.on("field", (z, pe) => {
            Z.append(z, pe);
          }), ie.on("file", (z, pe, Be, ve, qe) => {
            const Qe = [];
            if (ve === "base64" || ve.toLowerCase() === "base64") {
              let ze = "";
              pe.on("data", (mi) => {
                ze += mi.toString().replace(/[\r\n]/gm, "");
                const be = ze.length - ze.length % 4;
                Qe.push(Buffer.from(ze.slice(0, be), "base64")), ze = ze.slice(be);
              }), pe.on("end", () => {
                Qe.push(Buffer.from(ze, "base64")), Z.append(z, new B(Qe, Be, { type: qe }));
              });
            } else
              pe.on("data", (ze) => {
                Qe.push(ze);
              }), pe.on("end", () => {
                Z.append(z, new B(Qe, Be, { type: qe }));
              });
          });
          const ne = new Promise((z, pe) => {
            ie.on("finish", z), ie.on("error", (Be) => pe(new TypeError(Be)));
          });
          if (this.body !== null)
            for await (const z of se(this[A].body))
              ie.write(z);
          return ie.end(), await ne, Z;
        } else if (/application\/x-www-form-urlencoded/.test(P)) {
          let O;
          try {
            let ie = "";
            const ne = new TextDecoder("utf-8", { ignoreBOM: !0 });
            for await (const z of se(this[A].body)) {
              if (!h(z))
                throw new TypeError("Expected Uint8Array chunk");
              ie += ne.decode(z, { stream: !0 });
            }
            ie += ne.decode(), O = new URLSearchParams(ie);
          } catch (ie) {
            throw Object.assign(new TypeError(), { cause: ie });
          }
          const Z = new s();
          for (const [ie, ne] of O)
            Z.append(ie, ne);
          return Z;
        } else
          throw await Promise.resolve(), U(this[A]), l.errors.exception({
            header: `${F.name}.formData`,
            message: "Could not parse content as FormData."
          });
      }
    };
  }
  function H(F) {
    Object.assign(F.prototype, G(F));
  }
  async function $(F, V, P) {
    if (l.brandCheck(F, P), U(F[A]), W(F[A].body))
      throw new TypeError("Body is unusable");
    const O = r(), Z = (ne) => O.reject(ne), ie = (ne) => {
      try {
        O.resolve(V(ne));
      } catch (z) {
        Z(z);
      }
    };
    return F[A].body == null ? (ie(new Uint8Array()), O.promise) : (await o(F[A].body, ie, Z), O.promise);
  }
  function W(F) {
    return F != null && (F.stream.locked || e.isDisturbed(F.stream));
  }
  function w(F) {
    return F.length === 0 ? "" : (F[0] === 239 && F[1] === 187 && F[2] === 191 && (F = F.subarray(3)), v.decode(F));
  }
  function j(F) {
    return JSON.parse(w(F));
  }
  function R(F) {
    const { headersList: V } = F[A], P = V.get("content-type");
    return P === null ? "failure" : b(P);
  }
  return Rs = {
    extractBody: Q,
    safelyExtractBody: _,
    cloneBody: M,
    mixinBody: H
  }, Rs;
}
const {
  InvalidArgumentError: Re,
  NotSupportedError: $f
} = Le, Pn = J, { kHTTP2BuildRequest: eN, kHTTP2CopyHeaders: iN, kHTTP1BuildRequest: nN } = Ye, Oi = Ie, qc = /^[\^_`a-zA-Z\-0-9!#$%&'*+.|~]+$/, Pc = /[^\t\x20-\x7e\x80-\xff]/, aN = /[^\u0021-\u00ff]/, ln = Symbol("handler"), oi = {};
let Us;
try {
  const n = J;
  oi.create = n.channel("undici:request:create"), oi.bodySent = n.channel("undici:request:bodySent"), oi.headers = n.channel("undici:request:headers"), oi.trailers = n.channel("undici:request:trailers"), oi.error = n.channel("undici:request:error");
} catch {
  oi.create = { hasSubscribers: !1 }, oi.bodySent = { hasSubscribers: !1 }, oi.headers = { hasSubscribers: !1 }, oi.trailers = { hasSubscribers: !1 }, oi.error = { hasSubscribers: !1 };
}
let tN = class zo {
  constructor(e, {
    path: i,
    method: a,
    body: t,
    headers: d,
    query: r,
    idempotent: o,
    blocking: s,
    upgrade: A,
    headersTimeout: l,
    bodyTimeout: m,
    reset: u,
    throwOnError: c,
    expectContinue: k
  }, g) {
    if (typeof i != "string")
      throw new Re("path must be a string");
    if (i[0] !== "/" && !(i.startsWith("http://") || i.startsWith("https://")) && a !== "CONNECT")
      throw new Re("path must be an absolute URL or start with a slash");
    if (aN.exec(i) !== null)
      throw new Re("invalid request path");
    if (typeof a != "string")
      throw new Re("method must be a string");
    if (qc.exec(a) === null)
      throw new Re("invalid request method");
    if (A && typeof A != "string")
      throw new Re("upgrade must be a string");
    if (l != null && (!Number.isFinite(l) || l < 0))
      throw new Re("invalid headersTimeout");
    if (m != null && (!Number.isFinite(m) || m < 0))
      throw new Re("invalid bodyTimeout");
    if (u != null && typeof u != "boolean")
      throw new Re("invalid reset");
    if (k != null && typeof k != "boolean")
      throw new Re("invalid expectContinue");
    if (this.headersTimeout = l, this.bodyTimeout = m, this.throwOnError = c === !0, this.method = a, this.abort = null, t == null)
      this.body = null;
    else if (Oi.isStream(t)) {
      this.body = t;
      const N = this.body._readableState;
      (!N || !N.autoDestroy) && (this.endHandler = function() {
        Oi.destroy(this);
      }, this.body.on("end", this.endHandler)), this.errorHandler = (y) => {
        this.abort ? this.abort(y) : this.error = y;
      }, this.body.on("error", this.errorHandler);
    } else if (Oi.isBuffer(t))
      this.body = t.byteLength ? t : null;
    else if (ArrayBuffer.isView(t))
      this.body = t.buffer.byteLength ? Buffer.from(t.buffer, t.byteOffset, t.byteLength) : null;
    else if (t instanceof ArrayBuffer)
      this.body = t.byteLength ? Buffer.from(t) : null;
    else if (typeof t == "string")
      this.body = t.length ? Buffer.from(t) : null;
    else if (Oi.isFormDataLike(t) || Oi.isIterable(t) || Oi.isBlobLike(t))
      this.body = t;
    else
      throw new Re("body must be a string, a Buffer, a Readable stream, an iterable, or an async iterable");
    if (this.completed = !1, this.aborted = !1, this.upgrade = A || null, this.path = r ? Oi.buildURL(i, r) : i, this.origin = e, this.idempotent = o ?? (a === "HEAD" || a === "GET"), this.blocking = s ?? !1, this.reset = u ?? null, this.host = null, this.contentLength = null, this.contentType = null, this.headers = "", this.expectContinue = k ?? !1, Array.isArray(d)) {
      if (d.length % 2 !== 0)
        throw new Re("headers array must be even");
      for (let N = 0; N < d.length; N += 2)
        Yt(this, d[N], d[N + 1]);
    } else if (d && typeof d == "object") {
      const N = Object.keys(d);
      for (let y = 0; y < N.length; y++) {
        const h = N[y];
        Yt(this, h, d[h]);
      }
    } else if (d != null)
      throw new Re("headers must be an object or an array");
    if (Oi.isFormDataLike(this.body)) {
      if (Oi.nodeMajor < 16 || Oi.nodeMajor === 16 && Oi.nodeMinor < 8)
        throw new Re("Form-Data bodies are only supported in node v16.8 and newer.");
      Us || (Us = Tr().extractBody);
      const [N, y] = Us(t);
      this.contentType == null && (this.contentType = y, this.headers += `content-type: ${y}\r
`), this.body = N.stream, this.contentLength = N.length;
    } else
      Oi.isBlobLike(t) && this.contentType == null && t.type && (this.contentType = t.type, this.headers += `content-type: ${t.type}\r
`);
    Oi.validateHandler(g, a, A), this.servername = Oi.getServerName(this.host), this[ln] = g, oi.create.hasSubscribers && oi.create.publish({ request: this });
  }
  onBodySent(e) {
    if (this[ln].onBodySent)
      try {
        return this[ln].onBodySent(e);
      } catch (i) {
        this.abort(i);
      }
  }
  onRequestSent() {
    if (oi.bodySent.hasSubscribers && oi.bodySent.publish({ request: this }), this[ln].onRequestSent)
      try {
        return this[ln].onRequestSent();
      } catch (e) {
        this.abort(e);
      }
  }
  onConnect(e) {
    if (Pn(!this.aborted), Pn(!this.completed), this.error)
      e(this.error);
    else
      return this.abort = e, this[ln].onConnect(e);
  }
  onHeaders(e, i, a, t) {
    Pn(!this.aborted), Pn(!this.completed), oi.headers.hasSubscribers && oi.headers.publish({ request: this, response: { statusCode: e, headers: i, statusText: t } });
    try {
      return this[ln].onHeaders(e, i, a, t);
    } catch (d) {
      this.abort(d);
    }
  }
  onData(e) {
    Pn(!this.aborted), Pn(!this.completed);
    try {
      return this[ln].onData(e);
    } catch (i) {
      return this.abort(i), !1;
    }
  }
  onUpgrade(e, i, a) {
    return Pn(!this.aborted), Pn(!this.completed), this[ln].onUpgrade(e, i, a);
  }
  onComplete(e) {
    this.onFinally(), Pn(!this.aborted), this.completed = !0, oi.trailers.hasSubscribers && oi.trailers.publish({ request: this, trailers: e });
    try {
      return this[ln].onComplete(e);
    } catch (i) {
      this.onError(i);
    }
  }
  onError(e) {
    if (this.onFinally(), oi.error.hasSubscribers && oi.error.publish({ request: this, error: e }), !this.aborted)
      return this.aborted = !0, this[ln].onError(e);
  }
  onFinally() {
    this.errorHandler && (this.body.off("error", this.errorHandler), this.errorHandler = null), this.endHandler && (this.body.off("end", this.endHandler), this.endHandler = null);
  }
  // TODO: adjust to support H2
  addHeader(e, i) {
    return Yt(this, e, i), this;
  }
  static [nN](e, i, a) {
    return new zo(e, i, a);
  }
  static [eN](e, i, a) {
    const t = i.headers;
    i = { ...i, headers: null };
    const d = new zo(e, i, a);
    if (d.headers = {}, Array.isArray(t)) {
      if (t.length % 2 !== 0)
        throw new Re("headers array must be even");
      for (let r = 0; r < t.length; r += 2)
        Yt(d, t[r], t[r + 1], !0);
    } else if (t && typeof t == "object") {
      const r = Object.keys(t);
      for (let o = 0; o < r.length; o++) {
        const s = r[o];
        Yt(d, s, t[s], !0);
      }
    } else if (t != null)
      throw new Re("headers must be an object or an array");
    return d;
  }
  static [iN](e) {
    const i = e.split(`\r
`), a = {};
    for (const t of i) {
      const [d, r] = t.split(": ");
      r == null || r.length === 0 || (a[d] ? a[d] += `,${r}` : a[d] = r);
    }
    return a;
  }
};
function Ba(n, e, i) {
  if (e && typeof e == "object")
    throw new Re(`invalid ${n} header`);
  if (e = e != null ? `${e}` : "", Pc.exec(e) !== null)
    throw new Re(`invalid ${n} header`);
  return i ? e : `${n}: ${e}\r
`;
}
function Yt(n, e, i, a = !1) {
  if (i && typeof i == "object" && !Array.isArray(i))
    throw new Re(`invalid ${e} header`);
  if (i === void 0)
    return;
  if (n.host === null && e.length === 4 && e.toLowerCase() === "host") {
    if (Pc.exec(i) !== null)
      throw new Re(`invalid ${e} header`);
    n.host = i;
  } else if (n.contentLength === null && e.length === 14 && e.toLowerCase() === "content-length") {
    if (n.contentLength = parseInt(i, 10), !Number.isFinite(n.contentLength))
      throw new Re("invalid content-length header");
  } else if (n.contentType === null && e.length === 12 && e.toLowerCase() === "content-type")
    n.contentType = i, a ? n.headers[e] = Ba(e, i, a) : n.headers += Ba(e, i);
  else {
    if (e.length === 17 && e.toLowerCase() === "transfer-encoding")
      throw new Re("invalid transfer-encoding header");
    if (e.length === 10 && e.toLowerCase() === "connection") {
      const t = typeof i == "string" ? i.toLowerCase() : null;
      if (t !== "close" && t !== "keep-alive")
        throw new Re("invalid connection header");
      t === "close" && (n.reset = !0);
    } else {
      if (e.length === 10 && e.toLowerCase() === "keep-alive")
        throw new Re("invalid keep-alive header");
      if (e.length === 7 && e.toLowerCase() === "upgrade")
        throw new Re("invalid upgrade header");
      if (e.length === 6 && e.toLowerCase() === "expect")
        throw new $f("expect header not supported");
      if (qc.exec(e) === null)
        throw new Re("invalid header key");
      if (Array.isArray(i))
        for (let t = 0; t < i.length; t++)
          a ? n.headers[e] ? n.headers[e] += `,${Ba(e, i[t], a)}` : n.headers[e] = Ba(e, i[t], a) : n.headers += Ba(e, i[t]);
      else
        a ? n.headers[e] = Ba(e, i, a) : n.headers += Ba(e, i);
    }
  }
}
var dN = tN;
const rN = J;
let sN = class extends rN {
  dispatch() {
    throw new Error("not implemented");
  }
  close() {
    throw new Error("not implemented");
  }
  destroy() {
    throw new Error("not implemented");
  }
};
var Ql = sN;
const oN = Ql, {
  ClientDestroyedError: Ls,
  ClientClosedError: lN,
  InvalidArgumentError: it
} = Le, { kDestroy: AN, kClose: mN, kDispatch: qs, kInterceptors: Qa } = Ye, nt = Symbol("destroyed"), Jt = Symbol("closed"), On = Symbol("onDestroyed"), at = Symbol("onClosed"), Md = Symbol("Intercepted Dispatch");
let uN = class extends oN {
  constructor() {
    super(), this[nt] = !1, this[On] = null, this[Jt] = !1, this[at] = [];
  }
  get destroyed() {
    return this[nt];
  }
  get closed() {
    return this[Jt];
  }
  get interceptors() {
    return this[Qa];
  }
  set interceptors(e) {
    if (e) {
      for (let i = e.length - 1; i >= 0; i--)
        if (typeof this[Qa][i] != "function")
          throw new it("interceptor must be an function");
    }
    this[Qa] = e;
  }
  close(e) {
    if (e === void 0)
      return new Promise((a, t) => {
        this.close((d, r) => d ? t(d) : a(r));
      });
    if (typeof e != "function")
      throw new it("invalid callback");
    if (this[nt]) {
      queueMicrotask(() => e(new Ls(), null));
      return;
    }
    if (this[Jt]) {
      this[at] ? this[at].push(e) : queueMicrotask(() => e(null, null));
      return;
    }
    this[Jt] = !0, this[at].push(e);
    const i = () => {
      const a = this[at];
      this[at] = null;
      for (let t = 0; t < a.length; t++)
        a[t](null, null);
    };
    this[mN]().then(() => this.destroy()).then(() => {
      queueMicrotask(i);
    });
  }
  destroy(e, i) {
    if (typeof e == "function" && (i = e, e = null), i === void 0)
      return new Promise((t, d) => {
        this.destroy(e, (r, o) => r ? (
          /* istanbul ignore next: should never error */
          d(r)
        ) : t(o));
      });
    if (typeof i != "function")
      throw new it("invalid callback");
    if (this[nt]) {
      this[On] ? this[On].push(i) : queueMicrotask(() => i(null, null));
      return;
    }
    e || (e = new Ls()), this[nt] = !0, this[On] = this[On] || [], this[On].push(i);
    const a = () => {
      const t = this[On];
      this[On] = null;
      for (let d = 0; d < t.length; d++)
        t[d](null, null);
    };
    this[AN](e).then(() => {
      queueMicrotask(a);
    });
  }
  [Md](e, i) {
    if (!this[Qa] || this[Qa].length === 0)
      return this[Md] = this[qs], this[qs](e, i);
    let a = this[qs].bind(this);
    for (let t = this[Qa].length - 1; t >= 0; t--)
      a = this[Qa][t](a);
    return this[Md] = a, a(e, i);
  }
  dispatch(e, i) {
    if (!i || typeof i != "object")
      throw new it("handler must be an object");
    try {
      if (!e || typeof e != "object")
        throw new it("opts must be an object.");
      if (this[nt] || this[On])
        throw new Ls();
      if (this[Jt])
        throw new lN();
      return this[Md](e, i);
    } catch (a) {
      if (typeof i.onError != "function")
        throw new it("invalid onError method");
      return i.onError(a), !1;
    }
  }
};
var _r = uN;
const pN = J, nm = J, Oc = Ie, { InvalidArgumentError: cN, ConnectTimeoutError: kN } = Le;
let Ps, Zo;
me.FinalizationRegistry && !process.env.NODE_V8_COVERAGE ? Zo = class {
  constructor(e) {
    this._maxCachedSessions = e, this._sessionCache = /* @__PURE__ */ new Map(), this._sessionRegistry = new me.FinalizationRegistry((i) => {
      if (this._sessionCache.size < this._maxCachedSessions)
        return;
      const a = this._sessionCache.get(i);
      a !== void 0 && a.deref() === void 0 && this._sessionCache.delete(i);
    });
  }
  get(e) {
    const i = this._sessionCache.get(e);
    return i ? i.deref() : null;
  }
  set(e, i) {
    this._maxCachedSessions !== 0 && (this._sessionCache.set(e, new WeakRef(i)), this._sessionRegistry.register(i, e));
  }
} : Zo = class {
  constructor(e) {
    this._maxCachedSessions = e, this._sessionCache = /* @__PURE__ */ new Map();
  }
  get(e) {
    return this._sessionCache.get(e);
  }
  set(e, i) {
    if (this._maxCachedSessions !== 0) {
      if (this._sessionCache.size >= this._maxCachedSessions) {
        const { value: a } = this._sessionCache.keys().next();
        this._sessionCache.delete(a);
      }
      this._sessionCache.set(e, i);
    }
  }
};
function vN({ allowH2: n, maxCachedSessions: e, socketPath: i, timeout: a, ...t }) {
  if (e != null && (!Number.isInteger(e) || e < 0))
    throw new cN("maxCachedSessions must be a positive integer or zero");
  const d = { path: i, ...t }, r = new Zo(e ?? 100);
  return a = a ?? 1e4, n = n ?? !1, function({ hostname: s, host: A, protocol: l, port: m, servername: u, localAddress: c, httpSocket: k }, g) {
    let N;
    if (l === "https:") {
      Ps || (Ps = J), u = u || d.servername || Oc.getServerName(A) || null;
      const h = u || s, E = r.get(h) || null;
      nm(h), N = Ps.connect({
        highWaterMark: 16384,
        // TLS in node can't have bigger HWM anyway...
        ...d,
        servername: u,
        session: E,
        localAddress: c,
        // TODO(HTTP/2): Add support for h2c
        ALPNProtocols: n ? ["http/1.1", "h2"] : ["http/1.1"],
        socket: k,
        // upgrade socket connection
        port: m || 443,
        host: s
      }), N.on("session", function(S) {
        r.set(h, S);
      });
    } else
      nm(!k, "httpSocket can only be sent on TLS update"), N = pN.connect({
        highWaterMark: 64 * 1024,
        // Same as nodejs fs streams.
        ...d,
        localAddress: c,
        port: m || 80,
        host: s
      });
    if (d.keepAlive == null || d.keepAlive) {
      const h = d.keepAliveInitialDelay === void 0 ? 6e4 : d.keepAliveInitialDelay;
      N.setKeepAlive(!0, h);
    }
    const y = gN(() => hN(N), a);
    return N.setNoDelay(!0).once(l === "https:" ? "secureConnect" : "connect", function() {
      if (y(), g) {
        const h = g;
        g = null, h(null, this);
      }
    }).on("error", function(h) {
      if (y(), g) {
        const E = g;
        g = null, E(h);
      }
    }), N;
  };
}
function gN(n, e) {
  if (!e)
    return () => {
    };
  let i = null, a = null;
  const t = setTimeout(() => {
    i = setImmediate(() => {
      process.platform === "win32" ? a = setImmediate(() => n()) : n();
    });
  }, e);
  return () => {
    clearTimeout(t), clearImmediate(i), clearImmediate(a);
  };
}
function hN(n) {
  Oc.destroy(n, new kN());
}
var Rr = vN, Os = {}, Ht = {}, am;
function fN() {
  if (am)
    return Ht;
  am = 1, Object.defineProperty(Ht, "__esModule", { value: !0 }), Ht.enumToMap = void 0;
  function n(e) {
    const i = {};
    return Object.keys(e).forEach((a) => {
      const t = e[a];
      typeof t == "number" && (i[a] = t);
    }), i;
  }
  return Ht.enumToMap = n, Ht;
}
var tm;
function NN() {
  return tm || (tm = 1, function(n) {
    Object.defineProperty(n, "__esModule", { value: !0 }), n.SPECIAL_HEADERS = n.HEADER_STATE = n.MINOR = n.MAJOR = n.CONNECTION_TOKEN_CHARS = n.HEADER_CHARS = n.TOKEN = n.STRICT_TOKEN = n.HEX = n.URL_CHAR = n.STRICT_URL_CHAR = n.USERINFO_CHARS = n.MARK = n.ALPHANUM = n.NUM = n.HEX_MAP = n.NUM_MAP = n.ALPHA = n.FINISH = n.H_METHOD_MAP = n.METHOD_MAP = n.METHODS_RTSP = n.METHODS_ICE = n.METHODS_HTTP = n.METHODS = n.LENIENT_FLAGS = n.FLAGS = n.TYPE = n.ERROR = void 0;
    const e = fN();
    (function(t) {
      t[t.OK = 0] = "OK", t[t.INTERNAL = 1] = "INTERNAL", t[t.STRICT = 2] = "STRICT", t[t.LF_EXPECTED = 3] = "LF_EXPECTED", t[t.UNEXPECTED_CONTENT_LENGTH = 4] = "UNEXPECTED_CONTENT_LENGTH", t[t.CLOSED_CONNECTION = 5] = "CLOSED_CONNECTION", t[t.INVALID_METHOD = 6] = "INVALID_METHOD", t[t.INVALID_URL = 7] = "INVALID_URL", t[t.INVALID_CONSTANT = 8] = "INVALID_CONSTANT", t[t.INVALID_VERSION = 9] = "INVALID_VERSION", t[t.INVALID_HEADER_TOKEN = 10] = "INVALID_HEADER_TOKEN", t[t.INVALID_CONTENT_LENGTH = 11] = "INVALID_CONTENT_LENGTH", t[t.INVALID_CHUNK_SIZE = 12] = "INVALID_CHUNK_SIZE", t[t.INVALID_STATUS = 13] = "INVALID_STATUS", t[t.INVALID_EOF_STATE = 14] = "INVALID_EOF_STATE", t[t.INVALID_TRANSFER_ENCODING = 15] = "INVALID_TRANSFER_ENCODING", t[t.CB_MESSAGE_BEGIN = 16] = "CB_MESSAGE_BEGIN", t[t.CB_HEADERS_COMPLETE = 17] = "CB_HEADERS_COMPLETE", t[t.CB_MESSAGE_COMPLETE = 18] = "CB_MESSAGE_COMPLETE", t[t.CB_CHUNK_HEADER = 19] = "CB_CHUNK_HEADER", t[t.CB_CHUNK_COMPLETE = 20] = "CB_CHUNK_COMPLETE", t[t.PAUSED = 21] = "PAUSED", t[t.PAUSED_UPGRADE = 22] = "PAUSED_UPGRADE", t[t.PAUSED_H2_UPGRADE = 23] = "PAUSED_H2_UPGRADE", t[t.USER = 24] = "USER";
    })(n.ERROR || (n.ERROR = {})), function(t) {
      t[t.BOTH = 0] = "BOTH", t[t.REQUEST = 1] = "REQUEST", t[t.RESPONSE = 2] = "RESPONSE";
    }(n.TYPE || (n.TYPE = {})), function(t) {
      t[t.CONNECTION_KEEP_ALIVE = 1] = "CONNECTION_KEEP_ALIVE", t[t.CONNECTION_CLOSE = 2] = "CONNECTION_CLOSE", t[t.CONNECTION_UPGRADE = 4] = "CONNECTION_UPGRADE", t[t.CHUNKED = 8] = "CHUNKED", t[t.UPGRADE = 16] = "UPGRADE", t[t.CONTENT_LENGTH = 32] = "CONTENT_LENGTH", t[t.SKIPBODY = 64] = "SKIPBODY", t[t.TRAILING = 128] = "TRAILING", t[t.TRANSFER_ENCODING = 512] = "TRANSFER_ENCODING";
    }(n.FLAGS || (n.FLAGS = {})), function(t) {
      t[t.HEADERS = 1] = "HEADERS", t[t.CHUNKED_LENGTH = 2] = "CHUNKED_LENGTH", t[t.KEEP_ALIVE = 4] = "KEEP_ALIVE";
    }(n.LENIENT_FLAGS || (n.LENIENT_FLAGS = {}));
    var i;
    (function(t) {
      t[t.DELETE = 0] = "DELETE", t[t.GET = 1] = "GET", t[t.HEAD = 2] = "HEAD", t[t.POST = 3] = "POST", t[t.PUT = 4] = "PUT", t[t.CONNECT = 5] = "CONNECT", t[t.OPTIONS = 6] = "OPTIONS", t[t.TRACE = 7] = "TRACE", t[t.COPY = 8] = "COPY", t[t.LOCK = 9] = "LOCK", t[t.MKCOL = 10] = "MKCOL", t[t.MOVE = 11] = "MOVE", t[t.PROPFIND = 12] = "PROPFIND", t[t.PROPPATCH = 13] = "PROPPATCH", t[t.SEARCH = 14] = "SEARCH", t[t.UNLOCK = 15] = "UNLOCK", t[t.BIND = 16] = "BIND", t[t.REBIND = 17] = "REBIND", t[t.UNBIND = 18] = "UNBIND", t[t.ACL = 19] = "ACL", t[t.REPORT = 20] = "REPORT", t[t.MKACTIVITY = 21] = "MKACTIVITY", t[t.CHECKOUT = 22] = "CHECKOUT", t[t.MERGE = 23] = "MERGE", t[t["M-SEARCH"] = 24] = "M-SEARCH", t[t.NOTIFY = 25] = "NOTIFY", t[t.SUBSCRIBE = 26] = "SUBSCRIBE", t[t.UNSUBSCRIBE = 27] = "UNSUBSCRIBE", t[t.PATCH = 28] = "PATCH", t[t.PURGE = 29] = "PURGE", t[t.MKCALENDAR = 30] = "MKCALENDAR", t[t.LINK = 31] = "LINK", t[t.UNLINK = 32] = "UNLINK", t[t.SOURCE = 33] = "SOURCE", t[t.PRI = 34] = "PRI", t[t.DESCRIBE = 35] = "DESCRIBE", t[t.ANNOUNCE = 36] = "ANNOUNCE", t[t.SETUP = 37] = "SETUP", t[t.PLAY = 38] = "PLAY", t[t.PAUSE = 39] = "PAUSE", t[t.TEARDOWN = 40] = "TEARDOWN", t[t.GET_PARAMETER = 41] = "GET_PARAMETER", t[t.SET_PARAMETER = 42] = "SET_PARAMETER", t[t.REDIRECT = 43] = "REDIRECT", t[t.RECORD = 44] = "RECORD", t[t.FLUSH = 45] = "FLUSH";
    })(i = n.METHODS || (n.METHODS = {})), n.METHODS_HTTP = [
      i.DELETE,
      i.GET,
      i.HEAD,
      i.POST,
      i.PUT,
      i.CONNECT,
      i.OPTIONS,
      i.TRACE,
      i.COPY,
      i.LOCK,
      i.MKCOL,
      i.MOVE,
      i.PROPFIND,
      i.PROPPATCH,
      i.SEARCH,
      i.UNLOCK,
      i.BIND,
      i.REBIND,
      i.UNBIND,
      i.ACL,
      i.REPORT,
      i.MKACTIVITY,
      i.CHECKOUT,
      i.MERGE,
      i["M-SEARCH"],
      i.NOTIFY,
      i.SUBSCRIBE,
      i.UNSUBSCRIBE,
      i.PATCH,
      i.PURGE,
      i.MKCALENDAR,
      i.LINK,
      i.UNLINK,
      i.PRI,
      // TODO(indutny): should we allow it with HTTP?
      i.SOURCE
    ], n.METHODS_ICE = [
      i.SOURCE
    ], n.METHODS_RTSP = [
      i.OPTIONS,
      i.DESCRIBE,
      i.ANNOUNCE,
      i.SETUP,
      i.PLAY,
      i.PAUSE,
      i.TEARDOWN,
      i.GET_PARAMETER,
      i.SET_PARAMETER,
      i.REDIRECT,
      i.RECORD,
      i.FLUSH,
      // For AirPlay
      i.GET,
      i.POST
    ], n.METHOD_MAP = e.enumToMap(i), n.H_METHOD_MAP = {}, Object.keys(n.METHOD_MAP).forEach((t) => {
      /^H/.test(t) && (n.H_METHOD_MAP[t] = n.METHOD_MAP[t]);
    }), function(t) {
      t[t.SAFE = 0] = "SAFE", t[t.SAFE_WITH_CB = 1] = "SAFE_WITH_CB", t[t.UNSAFE = 2] = "UNSAFE";
    }(n.FINISH || (n.FINISH = {})), n.ALPHA = [];
    for (let t = 65; t <= 90; t++)
      n.ALPHA.push(String.fromCharCode(t)), n.ALPHA.push(String.fromCharCode(t + 32));
    n.NUM_MAP = {
      0: 0,
      1: 1,
      2: 2,
      3: 3,
      4: 4,
      5: 5,
      6: 6,
      7: 7,
      8: 8,
      9: 9
    }, n.HEX_MAP = {
      0: 0,
      1: 1,
      2: 2,
      3: 3,
      4: 4,
      5: 5,
      6: 6,
      7: 7,
      8: 8,
      9: 9,
      A: 10,
      B: 11,
      C: 12,
      D: 13,
      E: 14,
      F: 15,
      a: 10,
      b: 11,
      c: 12,
      d: 13,
      e: 14,
      f: 15
    }, n.NUM = [
      "0",
      "1",
      "2",
      "3",
      "4",
      "5",
      "6",
      "7",
      "8",
      "9"
    ], n.ALPHANUM = n.ALPHA.concat(n.NUM), n.MARK = ["-", "_", ".", "!", "~", "*", "'", "(", ")"], n.USERINFO_CHARS = n.ALPHANUM.concat(n.MARK).concat(["%", ";", ":", "&", "=", "+", "$", ","]), n.STRICT_URL_CHAR = [
      "!",
      '"',
      "$",
      "%",
      "&",
      "'",
      "(",
      ")",
      "*",
      "+",
      ",",
      "-",
      ".",
      "/",
      ":",
      ";",
      "<",
      "=",
      ">",
      "@",
      "[",
      "\\",
      "]",
      "^",
      "_",
      "`",
      "{",
      "|",
      "}",
      "~"
    ].concat(n.ALPHANUM), n.URL_CHAR = n.STRICT_URL_CHAR.concat(["	", "\f"]);
    for (let t = 128; t <= 255; t++)
      n.URL_CHAR.push(t);
    n.HEX = n.NUM.concat(["a", "b", "c", "d", "e", "f", "A", "B", "C", "D", "E", "F"]), n.STRICT_TOKEN = [
      "!",
      "#",
      "$",
      "%",
      "&",
      "'",
      "*",
      "+",
      "-",
      ".",
      "^",
      "_",
      "`",
      "|",
      "~"
    ].concat(n.ALPHANUM), n.TOKEN = n.STRICT_TOKEN.concat([" "]), n.HEADER_CHARS = ["	"];
    for (let t = 32; t <= 255; t++)
      t !== 127 && n.HEADER_CHARS.push(t);
    n.CONNECTION_TOKEN_CHARS = n.HEADER_CHARS.filter((t) => t !== 44), n.MAJOR = n.NUM_MAP, n.MINOR = n.MAJOR;
    var a;
    (function(t) {
      t[t.GENERAL = 0] = "GENERAL", t[t.CONNECTION = 1] = "CONNECTION", t[t.CONTENT_LENGTH = 2] = "CONTENT_LENGTH", t[t.TRANSFER_ENCODING = 3] = "TRANSFER_ENCODING", t[t.UPGRADE = 4] = "UPGRADE", t[t.CONNECTION_KEEP_ALIVE = 5] = "CONNECTION_KEEP_ALIVE", t[t.CONNECTION_CLOSE = 6] = "CONNECTION_CLOSE", t[t.CONNECTION_UPGRADE = 7] = "CONNECTION_UPGRADE", t[t.TRANSFER_ENCODING_CHUNKED = 8] = "TRANSFER_ENCODING_CHUNKED";
    })(a = n.HEADER_STATE || (n.HEADER_STATE = {})), n.SPECIAL_HEADERS = {
      connection: a.CONNECTION,
      "content-length": a.CONTENT_LENGTH,
      "proxy-connection": a.CONNECTION,
      "transfer-encoding": a.TRANSFER_ENCODING,
      upgrade: a.UPGRADE
    };
  }(Os)), Os;
}
const tt = Ie, { kBodyUsed: rd } = Ye, Sl = J, { InvalidArgumentError: EN } = Le, yN = J, bN = [300, 301, 302, 303, 307, 308], dm = Symbol("body");
class rm {
  constructor(e) {
    this[dm] = e, this[rd] = !1;
  }
  async *[Symbol.asyncIterator]() {
    Sl(!this[rd], "disturbed"), this[rd] = !0, yield* this[dm];
  }
}
let IN = class {
  constructor(e, i, a, t) {
    if (i != null && (!Number.isInteger(i) || i < 0))
      throw new EN("maxRedirections must be a positive number");
    tt.validateHandler(t, a.method, a.upgrade), this.dispatch = e, this.location = null, this.abort = null, this.opts = { ...a, maxRedirections: 0 }, this.maxRedirections = i, this.handler = t, this.history = [], tt.isStream(this.opts.body) ? (tt.bodyLength(this.opts.body) === 0 && this.opts.body.on("data", function() {
      Sl(!1);
    }), typeof this.opts.body.readableDidRead != "boolean" && (this.opts.body[rd] = !1, yN.prototype.on.call(this.opts.body, "data", function() {
      this[rd] = !0;
    }))) : this.opts.body && typeof this.opts.body.pipeTo == "function" ? this.opts.body = new rm(this.opts.body) : this.opts.body && typeof this.opts.body != "string" && !ArrayBuffer.isView(this.opts.body) && tt.isIterable(this.opts.body) && (this.opts.body = new rm(this.opts.body));
  }
  onConnect(e) {
    this.abort = e, this.handler.onConnect(e, { history: this.history });
  }
  onUpgrade(e, i, a) {
    this.handler.onUpgrade(e, i, a);
  }
  onError(e) {
    this.handler.onError(e);
  }
  onHeaders(e, i, a, t) {
    if (this.location = this.history.length >= this.maxRedirections || tt.isDisturbed(this.opts.body) ? null : CN(e, i), this.opts.origin && this.history.push(new URL(this.opts.path, this.opts.origin)), !this.location)
      return this.handler.onHeaders(e, i, a, t);
    const { origin: d, pathname: r, search: o } = tt.parseURL(new URL(this.location, this.opts.origin && new URL(this.opts.path, this.opts.origin))), s = o ? `${r}${o}` : r;
    this.opts.headers = BN(this.opts.headers, e === 303, this.opts.origin !== d), this.opts.path = s, this.opts.origin = d, this.opts.maxRedirections = 0, this.opts.query = null, e === 303 && this.opts.method !== "HEAD" && (this.opts.method = "GET", this.opts.body = null);
  }
  onData(e) {
    if (!this.location)
      return this.handler.onData(e);
  }
  onComplete(e) {
    this.location ? (this.location = null, this.abort = null, this.dispatch(this.opts, this)) : this.handler.onComplete(e);
  }
  onBodySent(e) {
    this.handler.onBodySent && this.handler.onBodySent(e);
  }
};
function CN(n, e) {
  if (bN.indexOf(n) === -1)
    return null;
  for (let i = 0; i < e.length; i += 2)
    if (e[i].toString().toLowerCase() === "location")
      return e[i + 1];
}
function sm(n, e, i) {
  return n.length === 4 && n.toString().toLowerCase() === "host" || e && n.toString().toLowerCase().indexOf("content-") === 0 || i && n.length === 13 && n.toString().toLowerCase() === "authorization" || i && n.length === 6 && n.toString().toLowerCase() === "cookie";
}
function BN(n, e, i) {
  const a = [];
  if (Array.isArray(n))
    for (let t = 0; t < n.length; t += 2)
      sm(n[t], e, i) || a.push(n[t], n[t + 1]);
  else if (n && typeof n == "object")
    for (const t of Object.keys(n))
      sm(t, e, i) || a.push(t, n[t]);
  else
    Sl(n == null, "headers must be an object or an array");
  return a;
}
var Gc = IN;
const QN = Gc;
function SN({ maxRedirections: n }) {
  return (e) => function(a, t) {
    const { maxRedirections: d = n } = a;
    if (!d)
      return e(a, t);
    const r = new QN(e, d, a, t);
    return a = { ...a, maxRedirections: 0 }, e(a, r);
  };
}
var Dl = SN, Gs, om;
function lm() {
  return om || (om = 1, Gs = ""), Gs;
}
var Ms, Am;
function DN() {
  return Am || (Am = 1, Ms = ""), Ms;
}
const oe = J, Mc = J, wN = J, { pipeline: FN } = J, ce = Ie, xs = Jf, Ko = dN, VN = _r, {
  RequestContentLengthMismatchError: jn,
  ResponseContentLengthMismatchError: TN,
  InvalidArgumentError: ai,
  RequestAbortedError: wl,
  HeadersTimeoutError: _N,
  HeadersOverflowError: RN,
  SocketError: yt,
  InformationalError: Qn,
  BodyTimeoutError: UN,
  HTTPParserError: LN,
  ResponseExceededMaxSizeError: qN,
  ClientDestroyedError: PN
} = Le, ON = Rr, {
  kUrl: Ei,
  kReset: Li,
  kServerName: ua,
  kClient: Dn,
  kBusy: Xo,
  kParser: ei,
  kConnect: GN,
  kBlocking: bt,
  kResuming: _a,
  kRunning: Ke,
  kPending: Pa,
  kSize: Ua,
  kWriting: zn,
  kQueue: Oe,
  kConnected: MN,
  kConnecting: mt,
  kNeedDrain: ga,
  kNoRef: ad,
  kKeepAliveDefaultTimeout: $o,
  kHostHeader: xc,
  kPendingIdx: ji,
  kRunningIdx: Ge,
  kError: yi,
  kPipelining: ha,
  kSocket: ii,
  kKeepAliveTimeoutValue: od,
  kMaxHeadersSize: cr,
  kKeepAliveMaxTimeout: Yc,
  kKeepAliveTimeoutThreshold: Jc,
  kHeadersTimeout: Hc,
  kBodyTimeout: jc,
  kStrictContentLength: ld,
  kConnector: td,
  kMaxRedirections: xN,
  kMaxRequests: Ad,
  kCounter: Wc,
  kClose: YN,
  kDestroy: JN,
  kDispatch: HN,
  kInterceptors: jN,
  kLocalAddress: dd,
  kMaxResponseSize: zc,
  kHTTPConnVersion: wn,
  // HTTP2
  kHost: Zc,
  kHTTP2Session: Wi,
  kHTTP2SessionState: Ir,
  kHTTP2BuildRequest: WN,
  kHTTP2CopyHeaders: zN,
  kHTTP1BuildRequest: ZN
} = Ye;
let Cr;
try {
  Cr = J;
} catch {
  Cr = { constants: {} };
}
const {
  constants: {
    HTTP2_HEADER_AUTHORITY: KN,
    HTTP2_HEADER_METHOD: XN,
    HTTP2_HEADER_PATH: $N,
    HTTP2_HEADER_SCHEME: eE,
    HTTP2_HEADER_CONTENT_LENGTH: iE,
    HTTP2_HEADER_EXPECT: nE,
    HTTP2_HEADER_STATUS: aE
  }
} = Cr;
let mm = !1;
const xd = Buffer[Symbol.species], pa = Symbol("kClosedResolve"), Fi = {};
try {
  const n = J;
  Fi.sendHeaders = n.channel("undici:client:sendHeaders"), Fi.beforeConnect = n.channel("undici:client:beforeConnect"), Fi.connectError = n.channel("undici:client:connectError"), Fi.connected = n.channel("undici:client:connected");
} catch {
  Fi.sendHeaders = { hasSubscribers: !1 }, Fi.beforeConnect = { hasSubscribers: !1 }, Fi.connectError = { hasSubscribers: !1 }, Fi.connected = { hasSubscribers: !1 };
}
let tE = class extends VN {
  /**
   *
   * @param {string|URL} url
   * @param {import('../types/client').Client.Options} options
   */
  constructor(e, {
    interceptors: i,
    maxHeaderSize: a,
    headersTimeout: t,
    socketTimeout: d,
    requestTimeout: r,
    connectTimeout: o,
    bodyTimeout: s,
    idleTimeout: A,
    keepAlive: l,
    keepAliveTimeout: m,
    maxKeepAliveTimeout: u,
    keepAliveMaxTimeout: c,
    keepAliveTimeoutThreshold: k,
    socketPath: g,
    pipelining: N,
    tls: y,
    strictContentLength: h,
    maxCachedSessions: E,
    maxRedirections: S,
    connect: b,
    maxRequestsPerClient: I,
    localAddress: D,
    maxResponseSize: B,
    autoSelectFamily: q,
    autoSelectFamilyAttemptTimeout: v,
    // h2
    allowH2: Q,
    maxConcurrentStreams: _
  } = {}) {
    if (super(), l !== void 0)
      throw new ai("unsupported keepAlive, use pipelining=0 instead");
    if (d !== void 0)
      throw new ai("unsupported socketTimeout, use headersTimeout & bodyTimeout instead");
    if (r !== void 0)
      throw new ai("unsupported requestTimeout, use headersTimeout & bodyTimeout instead");
    if (A !== void 0)
      throw new ai("unsupported idleTimeout, use keepAliveTimeout instead");
    if (u !== void 0)
      throw new ai("unsupported maxKeepAliveTimeout, use keepAliveMaxTimeout instead");
    if (a != null && !Number.isFinite(a))
      throw new ai("invalid maxHeaderSize");
    if (g != null && typeof g != "string")
      throw new ai("invalid socketPath");
    if (o != null && (!Number.isFinite(o) || o < 0))
      throw new ai("invalid connectTimeout");
    if (m != null && (!Number.isFinite(m) || m <= 0))
      throw new ai("invalid keepAliveTimeout");
    if (c != null && (!Number.isFinite(c) || c <= 0))
      throw new ai("invalid keepAliveMaxTimeout");
    if (k != null && !Number.isFinite(k))
      throw new ai("invalid keepAliveTimeoutThreshold");
    if (t != null && (!Number.isInteger(t) || t < 0))
      throw new ai("headersTimeout must be a positive integer or zero");
    if (s != null && (!Number.isInteger(s) || s < 0))
      throw new ai("bodyTimeout must be a positive integer or zero");
    if (b != null && typeof b != "function" && typeof b != "object")
      throw new ai("connect must be a function or an object");
    if (S != null && (!Number.isInteger(S) || S < 0))
      throw new ai("maxRedirections must be a positive number");
    if (I != null && (!Number.isInteger(I) || I < 0))
      throw new ai("maxRequestsPerClient must be a positive number");
    if (D != null && (typeof D != "string" || Mc.isIP(D) === 0))
      throw new ai("localAddress must be valid string IP address");
    if (B != null && (!Number.isInteger(B) || B < -1))
      throw new ai("maxResponseSize must be a positive number");
    if (v != null && (!Number.isInteger(v) || v < -1))
      throw new ai("autoSelectFamilyAttemptTimeout must be a positive number");
    if (Q != null && typeof Q != "boolean")
      throw new ai("allowH2 must be a valid boolean value");
    if (_ != null && (typeof _ != "number" || _ < 1))
      throw new ai("maxConcurrentStreams must be a possitive integer, greater than 0");
    typeof b != "function" && (b = ON({
      ...y,
      maxCachedSessions: E,
      allowH2: Q,
      socketPath: g,
      timeout: o,
      ...ce.nodeHasAutoSelectFamily && q ? { autoSelectFamily: q, autoSelectFamilyAttemptTimeout: v } : void 0,
      ...b
    })), this[jN] = i && i.Client && Array.isArray(i.Client) ? i.Client : [lE({ maxRedirections: S })], this[Ei] = ce.parseOrigin(e), this[td] = b, this[ii] = null, this[ha] = N ?? 1, this[cr] = a || wN.maxHeaderSize, this[$o] = m ?? 4e3, this[Yc] = c ?? 6e5, this[Jc] = k ?? 1e3, this[od] = this[$o], this[ua] = null, this[dd] = D ?? null, this[_a] = 0, this[ga] = 0, this[xc] = `host: ${this[Ei].hostname}${this[Ei].port ? `:${this[Ei].port}` : ""}\r
`, this[jc] = s ?? 3e5, this[Hc] = t ?? 3e5, this[ld] = h ?? !0, this[xN] = S, this[Ad] = I, this[pa] = null, this[zc] = B > -1 ? B : -1, this[wn] = "h1", this[Wi] = null, this[Ir] = Q ? {
      // streams: null, // Fixed queue of streams - For future support of `push`
      openStreams: 0,
      // Keep track of them to decide wether or not unref the session
      maxConcurrentStreams: _ ?? 100
      // Max peerConcurrentStreams for a Node h2 server
    } : null, this[Zc] = `${this[Ei].hostname}${this[Ei].port ? `:${this[Ei].port}` : ""}`, this[Oe] = [], this[Ge] = 0, this[ji] = 0;
  }
  get pipelining() {
    return this[ha];
  }
  set pipelining(e) {
    this[ha] = e, zi(this, !0);
  }
  get [Pa]() {
    return this[Oe].length - this[ji];
  }
  get [Ke]() {
    return this[ji] - this[Ge];
  }
  get [Ua]() {
    return this[Oe].length - this[Ge];
  }
  get [MN]() {
    return !!this[ii] && !this[mt] && !this[ii].destroyed;
  }
  get [Xo]() {
    const e = this[ii];
    return e && (e[Li] || e[zn] || e[bt]) || this[Ua] >= (this[ha] || 1) || this[Pa] > 0;
  }
  /* istanbul ignore: only used for test */
  [GN](e) {
    ek(this), this.once("connect", e);
  }
  [HN](e, i) {
    const a = e.origin || this[Ei].origin, t = this[wn] === "h2" ? Ko[WN](a, e, i) : Ko[ZN](a, e, i);
    return this[Oe].push(t), this[_a] || (ce.bodyLength(t.body) == null && ce.isIterable(t.body) ? (this[_a] = 1, process.nextTick(zi, this)) : zi(this, !0)), this[_a] && this[ga] !== 2 && this[Xo] && (this[ga] = 2), this[ga] < 2;
  }
  async [YN]() {
    return new Promise((e) => {
      this[Ua] ? this[pa] = e : e(null);
    });
  }
  async [JN](e) {
    return new Promise((i) => {
      const a = this[Oe].splice(this[ji]);
      for (let d = 0; d < a.length; d++) {
        const r = a[d];
        qi(this, r, e);
      }
      const t = () => {
        this[pa] && (this[pa](), this[pa] = null), i();
      };
      this[Wi] != null && (ce.destroy(this[Wi], e), this[Wi] = null, this[Ir] = null), this[ii] ? ce.destroy(this[ii].on("close", t), e) : queueMicrotask(t), zi(this);
    });
  }
};
function dE(n) {
  oe(n.code !== "ERR_TLS_CERT_ALTNAME_INVALID"), this[ii][yi] = n, Ur(this[Dn], n);
}
function rE(n, e, i) {
  const a = new Qn(`HTTP/2: "frameError" received - type ${n}, code ${e}`);
  i === 0 && (this[ii][yi] = a, Ur(this[Dn], a));
}
function sE() {
  ce.destroy(this, new yt("other side closed")), ce.destroy(this[ii], new yt("other side closed"));
}
function oE(n) {
  const e = this[Dn], i = new Qn(`HTTP/2: "GOAWAY" frame received with code ${n}`);
  if (e[ii] = null, e[Wi] = null, e.destroyed) {
    oe(this[Pa] === 0);
    const a = e[Oe].splice(e[Ge]);
    for (let t = 0; t < a.length; t++) {
      const d = a[t];
      qi(this, d, i);
    }
  } else if (e[Ke] > 0) {
    const a = e[Oe][e[Ge]];
    e[Oe][e[Ge]++] = null, qi(e, a, i);
  }
  e[ji] = e[Ge], oe(e[Ke] === 0), e.emit(
    "disconnect",
    e[Ei],
    [e],
    i
  ), zi(e);
}
const bn = NN(), lE = Dl, AE = Buffer.alloc(0);
async function mE() {
  const n = process.env.JEST_WORKER_ID ? lm() : void 0;
  let e;
  try {
    e = await WebAssembly.compile(Buffer.from(DN(), "base64"));
  } catch {
    e = await WebAssembly.compile(Buffer.from(n || lm(), "base64"));
  }
  return await WebAssembly.instantiate(e, {
    env: {
      /* eslint-disable camelcase */
      wasm_on_url: (i, a, t) => 0,
      wasm_on_status: (i, a, t) => {
        oe.strictEqual(ci.ptr, i);
        const d = a - Bn + Cn.byteOffset;
        return ci.onStatus(new xd(Cn.buffer, d, t)) || 0;
      },
      wasm_on_message_begin: (i) => (oe.strictEqual(ci.ptr, i), ci.onMessageBegin() || 0),
      wasm_on_header_field: (i, a, t) => {
        oe.strictEqual(ci.ptr, i);
        const d = a - Bn + Cn.byteOffset;
        return ci.onHeaderField(new xd(Cn.buffer, d, t)) || 0;
      },
      wasm_on_header_value: (i, a, t) => {
        oe.strictEqual(ci.ptr, i);
        const d = a - Bn + Cn.byteOffset;
        return ci.onHeaderValue(new xd(Cn.buffer, d, t)) || 0;
      },
      wasm_on_headers_complete: (i, a, t, d) => (oe.strictEqual(ci.ptr, i), ci.onHeadersComplete(a, !!t, !!d) || 0),
      wasm_on_body: (i, a, t) => {
        oe.strictEqual(ci.ptr, i);
        const d = a - Bn + Cn.byteOffset;
        return ci.onBody(new xd(Cn.buffer, d, t)) || 0;
      },
      wasm_on_message_complete: (i) => (oe.strictEqual(ci.ptr, i), ci.onMessageComplete() || 0)
      /* eslint-enable camelcase */
    }
  });
}
let Ys = null, el = mE();
el.catch();
let ci = null, Cn = null, Yd = 0, Bn = null;
const It = 1, kr = 2, il = 3;
class uE {
  constructor(e, i, { exports: a }) {
    oe(Number.isFinite(e[cr]) && e[cr] > 0), this.llhttp = a, this.ptr = this.llhttp.llhttp_alloc(bn.TYPE.RESPONSE), this.client = e, this.socket = i, this.timeout = null, this.timeoutValue = null, this.timeoutType = null, this.statusCode = null, this.statusText = "", this.upgrade = !1, this.headers = [], this.headersSize = 0, this.headersMaxSize = e[cr], this.shouldKeepAlive = !1, this.paused = !1, this.resume = this.resume.bind(this), this.bytesRead = 0, this.keepAlive = "", this.contentLength = "", this.connection = "", this.maxResponseSize = e[zc];
  }
  setTimeout(e, i) {
    this.timeoutType = i, e !== this.timeoutValue ? (xs.clearTimeout(this.timeout), e ? (this.timeout = xs.setTimeout(pE, e, this), this.timeout.unref && this.timeout.unref()) : this.timeout = null, this.timeoutValue = e) : this.timeout && this.timeout.refresh && this.timeout.refresh();
  }
  resume() {
    this.socket.destroyed || !this.paused || (oe(this.ptr != null), oe(ci == null), this.llhttp.llhttp_resume(this.ptr), oe(this.timeoutType === kr), this.timeout && this.timeout.refresh && this.timeout.refresh(), this.paused = !1, this.execute(this.socket.read() || AE), this.readMore());
  }
  readMore() {
    for (; !this.paused && this.ptr; ) {
      const e = this.socket.read();
      if (e === null)
        break;
      this.execute(e);
    }
  }
  execute(e) {
    oe(this.ptr != null), oe(ci == null), oe(!this.paused);
    const { socket: i, llhttp: a } = this;
    e.length > Yd && (Bn && a.free(Bn), Yd = Math.ceil(e.length / 4096) * 4096, Bn = a.malloc(Yd)), new Uint8Array(a.memory.buffer, Bn, Yd).set(e);
    try {
      let t;
      try {
        Cn = e, ci = this, t = a.llhttp_execute(this.ptr, Bn, e.length);
      } catch (r) {
        throw r;
      } finally {
        ci = null, Cn = null;
      }
      const d = a.llhttp_get_error_pos(this.ptr) - Bn;
      if (t === bn.ERROR.PAUSED_UPGRADE)
        this.onUpgrade(e.slice(d));
      else if (t === bn.ERROR.PAUSED)
        this.paused = !0, i.unshift(e.slice(d));
      else if (t !== bn.ERROR.OK) {
        const r = a.llhttp_get_error_reason(this.ptr);
        let o = "";
        if (r) {
          const s = new Uint8Array(a.memory.buffer, r).indexOf(0);
          o = "Response does not match the HTTP/1.1 protocol (" + Buffer.from(a.memory.buffer, r, s).toString() + ")";
        }
        throw new LN(o, bn.ERROR[t], e.slice(d));
      }
    } catch (t) {
      ce.destroy(i, t);
    }
  }
  destroy() {
    oe(this.ptr != null), oe(ci == null), this.llhttp.llhttp_free(this.ptr), this.ptr = null, xs.clearTimeout(this.timeout), this.timeout = null, this.timeoutValue = null, this.timeoutType = null, this.paused = !1;
  }
  onStatus(e) {
    this.statusText = e.toString();
  }
  onMessageBegin() {
    const { socket: e, client: i } = this;
    if (e.destroyed || !i[Oe][i[Ge]])
      return -1;
  }
  onHeaderField(e) {
    const i = this.headers.length;
    i & 1 ? this.headers[i - 1] = Buffer.concat([this.headers[i - 1], e]) : this.headers.push(e), this.trackHeader(e.length);
  }
  onHeaderValue(e) {
    let i = this.headers.length;
    (i & 1) === 1 ? (this.headers.push(e), i += 1) : this.headers[i - 1] = Buffer.concat([this.headers[i - 1], e]);
    const a = this.headers[i - 2];
    a.length === 10 && a.toString().toLowerCase() === "keep-alive" ? this.keepAlive += e.toString() : a.length === 10 && a.toString().toLowerCase() === "connection" ? this.connection += e.toString() : a.length === 14 && a.toString().toLowerCase() === "content-length" && (this.contentLength += e.toString()), this.trackHeader(e.length);
  }
  trackHeader(e) {
    this.headersSize += e, this.headersSize >= this.headersMaxSize && ce.destroy(this.socket, new RN());
  }
  onUpgrade(e) {
    const { upgrade: i, client: a, socket: t, headers: d, statusCode: r } = this;
    oe(i);
    const o = a[Oe][a[Ge]];
    oe(o), oe(!t.destroyed), oe(t === a[ii]), oe(!this.paused), oe(o.upgrade || o.method === "CONNECT"), this.statusCode = null, this.statusText = "", this.shouldKeepAlive = null, oe(this.headers.length % 2 === 0), this.headers = [], this.headersSize = 0, t.unshift(e), t[ei].destroy(), t[ei] = null, t[Dn] = null, t[yi] = null, t.removeListener("error", Xc).removeListener("readable", Kc).removeListener("end", $c).removeListener("close", nl), a[ii] = null, a[Oe][a[Ge]++] = null, a.emit("disconnect", a[Ei], [a], new Qn("upgrade"));
    try {
      o.onUpgrade(r, d, t);
    } catch (s) {
      ce.destroy(t, s);
    }
    zi(a);
  }
  onHeadersComplete(e, i, a) {
    const { client: t, socket: d, headers: r, statusText: o } = this;
    if (d.destroyed)
      return -1;
    const s = t[Oe][t[Ge]];
    if (!s)
      return -1;
    if (oe(!this.upgrade), oe(this.statusCode < 200), e === 100)
      return ce.destroy(d, new yt("bad response", ce.getSocketInfo(d))), -1;
    if (i && !s.upgrade)
      return ce.destroy(d, new yt("bad upgrade", ce.getSocketInfo(d))), -1;
    if (oe.strictEqual(this.timeoutType, It), this.statusCode = e, this.shouldKeepAlive = a || // Override llhttp value which does not allow keepAlive for HEAD.
    s.method === "HEAD" && !d[Li] && this.connection.toLowerCase() === "keep-alive", this.statusCode >= 200) {
      const l = s.bodyTimeout != null ? s.bodyTimeout : t[jc];
      this.setTimeout(l, kr);
    } else
      this.timeout && this.timeout.refresh && this.timeout.refresh();
    if (s.method === "CONNECT")
      return oe(t[Ke] === 1), this.upgrade = !0, 2;
    if (i)
      return oe(t[Ke] === 1), this.upgrade = !0, 2;
    if (oe(this.headers.length % 2 === 0), this.headers = [], this.headersSize = 0, this.shouldKeepAlive && t[ha]) {
      const l = this.keepAlive ? ce.parseKeepAliveTimeout(this.keepAlive) : null;
      if (l != null) {
        const m = Math.min(
          l - t[Jc],
          t[Yc]
        );
        m <= 0 ? d[Li] = !0 : t[od] = m;
      } else
        t[od] = t[$o];
    } else
      d[Li] = !0;
    const A = s.onHeaders(e, r, this.resume, o) === !1;
    return s.aborted ? -1 : s.method === "HEAD" || e < 200 ? 1 : (d[bt] && (d[bt] = !1, zi(t)), A ? bn.ERROR.PAUSED : 0);
  }
  onBody(e) {
    const { client: i, socket: a, statusCode: t, maxResponseSize: d } = this;
    if (a.destroyed)
      return -1;
    const r = i[Oe][i[Ge]];
    if (oe(r), oe.strictEqual(this.timeoutType, kr), this.timeout && this.timeout.refresh && this.timeout.refresh(), oe(t >= 200), d > -1 && this.bytesRead + e.length > d)
      return ce.destroy(a, new qN()), -1;
    if (this.bytesRead += e.length, r.onData(e) === !1)
      return bn.ERROR.PAUSED;
  }
  onMessageComplete() {
    const { client: e, socket: i, statusCode: a, upgrade: t, headers: d, contentLength: r, bytesRead: o, shouldKeepAlive: s } = this;
    if (i.destroyed && (!a || s))
      return -1;
    if (t)
      return;
    const A = e[Oe][e[Ge]];
    if (oe(A), oe(a >= 100), this.statusCode = null, this.statusText = "", this.bytesRead = 0, this.contentLength = "", this.keepAlive = "", this.connection = "", oe(this.headers.length % 2 === 0), this.headers = [], this.headersSize = 0, !(a < 200)) {
      if (A.method !== "HEAD" && r && o !== parseInt(r, 10))
        return ce.destroy(i, new TN()), -1;
      if (A.onComplete(d), e[Oe][e[Ge]++] = null, i[zn])
        return oe.strictEqual(e[Ke], 0), ce.destroy(i, new Qn("reset")), bn.ERROR.PAUSED;
      if (s) {
        if (i[Li] && e[Ke] === 0)
          return ce.destroy(i, new Qn("reset")), bn.ERROR.PAUSED;
        e[ha] === 1 ? setImmediate(zi, e) : zi(e);
      } else
        return ce.destroy(i, new Qn("reset")), bn.ERROR.PAUSED;
    }
  }
}
function pE(n) {
  const { socket: e, timeoutType: i, client: a } = n;
  i === It ? (!e[zn] || e.writableNeedDrain || a[Ke] > 1) && (oe(!n.paused, "cannot be paused while waiting for headers"), ce.destroy(e, new _N())) : i === kr ? n.paused || ce.destroy(e, new UN()) : i === il && (oe(a[Ke] === 0 && a[od]), ce.destroy(e, new Qn("socket idle timeout")));
}
function Kc() {
  const { [ei]: n } = this;
  n && n.readMore();
}
function Xc(n) {
  const { [Dn]: e, [ei]: i } = this;
  if (oe(n.code !== "ERR_TLS_CERT_ALTNAME_INVALID"), e[wn] !== "h2" && n.code === "ECONNRESET" && i.statusCode && !i.shouldKeepAlive) {
    i.onMessageComplete();
    return;
  }
  this[yi] = n, Ur(this[Dn], n);
}
function Ur(n, e) {
  if (n[Ke] === 0 && e.code !== "UND_ERR_INFO" && e.code !== "UND_ERR_SOCKET") {
    oe(n[ji] === n[Ge]);
    const i = n[Oe].splice(n[Ge]);
    for (let a = 0; a < i.length; a++) {
      const t = i[a];
      qi(n, t, e);
    }
    oe(n[Ua] === 0);
  }
}
function $c() {
  const { [ei]: n, [Dn]: e } = this;
  if (e[wn] !== "h2" && n.statusCode && !n.shouldKeepAlive) {
    n.onMessageComplete();
    return;
  }
  ce.destroy(this, new yt("other side closed", ce.getSocketInfo(this)));
}
function nl() {
  const { [Dn]: n, [ei]: e } = this;
  n[wn] === "h1" && e && (!this[yi] && e.statusCode && !e.shouldKeepAlive && e.onMessageComplete(), this[ei].destroy(), this[ei] = null);
  const i = this[yi] || new yt("closed", ce.getSocketInfo(this));
  if (n[ii] = null, n.destroyed) {
    oe(n[Pa] === 0);
    const a = n[Oe].splice(n[Ge]);
    for (let t = 0; t < a.length; t++) {
      const d = a[t];
      qi(n, d, i);
    }
  } else if (n[Ke] > 0 && i.code !== "UND_ERR_INFO") {
    const a = n[Oe][n[Ge]];
    n[Oe][n[Ge]++] = null, qi(n, a, i);
  }
  n[ji] = n[Ge], oe(n[Ke] === 0), n.emit("disconnect", n[Ei], [n], i), zi(n);
}
async function ek(n) {
  oe(!n[mt]), oe(!n[ii]);
  let { host: e, hostname: i, protocol: a, port: t } = n[Ei];
  if (i[0] === "[") {
    const d = i.indexOf("]");
    oe(d !== -1);
    const r = i.substring(1, d);
    oe(Mc.isIP(r)), i = r;
  }
  n[mt] = !0, Fi.beforeConnect.hasSubscribers && Fi.beforeConnect.publish({
    connectParams: {
      host: e,
      hostname: i,
      protocol: a,
      port: t,
      servername: n[ua],
      localAddress: n[dd]
    },
    connector: n[td]
  });
  try {
    const d = await new Promise((o, s) => {
      n[td]({
        host: e,
        hostname: i,
        protocol: a,
        port: t,
        servername: n[ua],
        localAddress: n[dd]
      }, (A, l) => {
        A ? s(A) : o(l);
      });
    });
    if (n.destroyed) {
      ce.destroy(d.on("error", () => {
      }), new PN());
      return;
    }
    if (n[mt] = !1, oe(d), d.alpnProtocol === "h2") {
      mm || (mm = !0, process.emitWarning("H2 support is experimental, expect them to change at any time.", {
        code: "UNDICI-H2"
      }));
      const o = Cr.connect(n[Ei], {
        createConnection: () => d,
        peerMaxConcurrentStreams: n[Ir].maxConcurrentStreams
      });
      n[wn] = "h2", o[Dn] = n, o[ii] = d, o.on("error", dE), o.on("frameError", rE), o.on("end", sE), o.on("goaway", oE), o.on("close", nl), o.unref(), n[Wi] = o, d[Wi] = o;
    } else
      Ys || (Ys = await el, el = null), d[ad] = !1, d[zn] = !1, d[Li] = !1, d[bt] = !1, d[ei] = new uE(n, d, Ys);
    d[Wc] = 0, d[Ad] = n[Ad], d[Dn] = n, d[yi] = null, d.on("error", Xc).on("readable", Kc).on("end", $c).on("close", nl), n[ii] = d, Fi.connected.hasSubscribers && Fi.connected.publish({
      connectParams: {
        host: e,
        hostname: i,
        protocol: a,
        port: t,
        servername: n[ua],
        localAddress: n[dd]
      },
      connector: n[td],
      socket: d
    }), n.emit("connect", n[Ei], [n]);
  } catch (d) {
    if (n.destroyed)
      return;
    if (n[mt] = !1, Fi.connectError.hasSubscribers && Fi.connectError.publish({
      connectParams: {
        host: e,
        hostname: i,
        protocol: a,
        port: t,
        servername: n[ua],
        localAddress: n[dd]
      },
      connector: n[td],
      error: d
    }), d.code === "ERR_TLS_CERT_ALTNAME_INVALID")
      for (oe(n[Ke] === 0); n[Pa] > 0 && n[Oe][n[ji]].servername === n[ua]; ) {
        const r = n[Oe][n[ji]++];
        qi(n, r, d);
      }
    else
      Ur(n, d);
    n.emit("connectionError", n[Ei], [n], d);
  }
  zi(n);
}
function um(n) {
  n[ga] = 0, n.emit("drain", n[Ei], [n]);
}
function zi(n, e) {
  n[_a] !== 2 && (n[_a] = 2, cE(n, e), n[_a] = 0, n[Ge] > 256 && (n[Oe].splice(0, n[Ge]), n[ji] -= n[Ge], n[Ge] = 0));
}
function cE(n, e) {
  for (; ; ) {
    if (n.destroyed) {
      oe(n[Pa] === 0);
      return;
    }
    if (n[pa] && !n[Ua]) {
      n[pa](), n[pa] = null;
      return;
    }
    const i = n[ii];
    if (i && !i.destroyed && i.alpnProtocol !== "h2") {
      if (n[Ua] === 0 ? !i[ad] && i.unref && (i.unref(), i[ad] = !0) : i[ad] && i.ref && (i.ref(), i[ad] = !1), n[Ua] === 0)
        i[ei].timeoutType !== il && i[ei].setTimeout(n[od], il);
      else if (n[Ke] > 0 && i[ei].statusCode < 200 && i[ei].timeoutType !== It) {
        const t = n[Oe][n[Ge]], d = t.headersTimeout != null ? t.headersTimeout : n[Hc];
        i[ei].setTimeout(d, It);
      }
    }
    if (n[Xo])
      n[ga] = 2;
    else if (n[ga] === 2) {
      e ? (n[ga] = 1, process.nextTick(um, n)) : um(n);
      continue;
    }
    if (n[Pa] === 0 || n[Ke] >= (n[ha] || 1))
      return;
    const a = n[Oe][n[ji]];
    if (n[Ei].protocol === "https:" && n[ua] !== a.servername) {
      if (n[Ke] > 0)
        return;
      if (n[ua] = a.servername, i && i.servername !== a.servername) {
        ce.destroy(i, new Qn("servername changed"));
        return;
      }
    }
    if (n[mt])
      return;
    if (!i && !n[Wi]) {
      ek(n);
      return;
    }
    if (i.destroyed || i[zn] || i[Li] || i[bt] || n[Ke] > 0 && !a.idempotent || n[Ke] > 0 && (a.upgrade || a.method === "CONNECT") || n[Ke] > 0 && ce.bodyLength(a.body) !== 0 && (ce.isStream(a.body) || ce.isAsyncIterable(a.body)))
      return;
    !a.aborted && kE(n, a) ? n[ji]++ : n[Oe].splice(n[ji], 1);
  }
}
function ik(n) {
  return n !== "GET" && n !== "HEAD" && n !== "OPTIONS" && n !== "TRACE" && n !== "CONNECT";
}
function kE(n, e) {
  if (n[wn] === "h2") {
    vE(n, n[Wi], e);
    return;
  }
  const { body: i, method: a, path: t, host: d, upgrade: r, headers: o, blocking: s, reset: A } = e, l = a === "PUT" || a === "POST" || a === "PATCH";
  i && typeof i.read == "function" && i.read(0);
  const m = ce.bodyLength(i);
  let u = m;
  if (u === null && (u = e.contentLength), u === 0 && !l && (u = null), ik(a) && u > 0 && e.contentLength !== null && e.contentLength !== u) {
    if (n[ld])
      return qi(n, e, new jn()), !1;
    process.emitWarning(new jn());
  }
  const c = n[ii];
  try {
    e.onConnect((g) => {
      e.aborted || e.completed || (qi(n, e, g || new wl()), ce.destroy(c, new Qn("aborted")));
    });
  } catch (g) {
    qi(n, e, g);
  }
  if (e.aborted)
    return !1;
  a === "HEAD" && (c[Li] = !0), (r || a === "CONNECT") && (c[Li] = !0), A != null && (c[Li] = A), n[Ad] && c[Wc]++ >= n[Ad] && (c[Li] = !0), s && (c[bt] = !0);
  let k = `${a} ${t} HTTP/1.1\r
`;
  return typeof d == "string" ? k += `host: ${d}\r
` : k += n[xc], r ? k += `connection: upgrade\r
upgrade: ${r}\r
` : n[ha] && !c[Li] ? k += `connection: keep-alive\r
` : k += `connection: close\r
`, o && (k += o), Fi.sendHeaders.hasSubscribers && Fi.sendHeaders.publish({ request: e, headers: k, socket: c }), !i || m === 0 ? (u === 0 ? c.write(`${k}content-length: 0\r
\r
`, "latin1") : (oe(u === null, "no body must not have content length"), c.write(`${k}\r
`, "latin1")), e.onRequestSent()) : ce.isBuffer(i) ? (oe(u === i.byteLength, "buffer body must have content length"), c.cork(), c.write(`${k}content-length: ${u}\r
\r
`, "latin1"), c.write(i), c.uncork(), e.onBodySent(i), e.onRequestSent(), l || (c[Li] = !0)) : ce.isBlobLike(i) ? typeof i.stream == "function" ? Br({ body: i.stream(), client: n, request: e, socket: c, contentLength: u, header: k, expectsPayload: l }) : ak({ body: i, client: n, request: e, socket: c, contentLength: u, header: k, expectsPayload: l }) : ce.isStream(i) ? nk({ body: i, client: n, request: e, socket: c, contentLength: u, header: k, expectsPayload: l }) : ce.isIterable(i) ? Br({ body: i, client: n, request: e, socket: c, contentLength: u, header: k, expectsPayload: l }) : oe(!1), !0;
}
function vE(n, e, i) {
  const { body: a, method: t, path: d, host: r, upgrade: o, expectContinue: s, signal: A, headers: l } = i;
  let m;
  if (typeof l == "string" ? m = Ko[zN](l.trim()) : m = l, o)
    return qi(n, i, new Error("Upgrade not supported for H2")), !1;
  try {
    i.onConnect((h) => {
      i.aborted || i.completed || qi(n, i, h || new wl());
    });
  } catch (h) {
    qi(n, i, h);
  }
  if (i.aborted)
    return !1;
  let u;
  const c = n[Ir];
  if (m[KN] = r || n[Zc], m[XN] = t, t === "CONNECT")
    return e.ref(), u = e.request(m, { endStream: !1, signal: A }), u.id && !u.pending ? (i.onUpgrade(null, null, u), ++c.openStreams) : u.once("ready", () => {
      i.onUpgrade(null, null, u), ++c.openStreams;
    }), u.once("close", () => {
      c.openStreams -= 1, c.openStreams === 0 && e.unref();
    }), !0;
  m[$N] = d, m[eE] = "https";
  const k = t === "PUT" || t === "POST" || t === "PATCH";
  a && typeof a.read == "function" && a.read(0);
  let g = ce.bodyLength(a);
  if (g == null && (g = i.contentLength), (g === 0 || !k) && (g = null), ik(t) && g > 0 && i.contentLength != null && i.contentLength !== g) {
    if (n[ld])
      return qi(n, i, new jn()), !1;
    process.emitWarning(new jn());
  }
  g != null && (oe(a, "no body must not have content length"), m[iE] = `${g}`), e.ref();
  const N = t === "GET" || t === "HEAD";
  return s ? (m[nE] = "100-continue", u = e.request(m, { endStream: N, signal: A }), u.once("continue", y)) : (u = e.request(m, {
    endStream: N,
    signal: A
  }), y()), ++c.openStreams, u.once("response", (h) => {
    const { [aE]: E, ...S } = h;
    i.onHeaders(Number(E), S, u.resume.bind(u), "") === !1 && u.pause();
  }), u.once("end", () => {
    i.onComplete([]);
  }), u.on("data", (h) => {
    i.onData(h) === !1 && u.pause();
  }), u.once("close", () => {
    c.openStreams -= 1, c.openStreams === 0 && e.unref();
  }), u.once("error", function(h) {
    n[Wi] && !n[Wi].destroyed && !this.closed && !this.destroyed && (c.streams -= 1, ce.destroy(u, h));
  }), u.once("frameError", (h, E) => {
    const S = new Qn(`HTTP/2: "frameError" received - type ${h}, code ${E}`);
    qi(n, i, S), n[Wi] && !n[Wi].destroyed && !this.closed && !this.destroyed && (c.streams -= 1, ce.destroy(u, S));
  }), !0;
  function y() {
    a ? ce.isBuffer(a) ? (oe(g === a.byteLength, "buffer body must have content length"), u.cork(), u.write(a), u.uncork(), u.end(), i.onBodySent(a), i.onRequestSent()) : ce.isBlobLike(a) ? typeof a.stream == "function" ? Br({
      client: n,
      request: i,
      contentLength: g,
      h2stream: u,
      expectsPayload: k,
      body: a.stream(),
      socket: n[ii],
      header: ""
    }) : ak({
      body: a,
      client: n,
      request: i,
      contentLength: g,
      expectsPayload: k,
      h2stream: u,
      header: "",
      socket: n[ii]
    }) : ce.isStream(a) ? nk({
      body: a,
      client: n,
      request: i,
      contentLength: g,
      expectsPayload: k,
      socket: n[ii],
      h2stream: u,
      header: ""
    }) : ce.isIterable(a) ? Br({
      body: a,
      client: n,
      request: i,
      contentLength: g,
      expectsPayload: k,
      header: "",
      h2stream: u,
      socket: n[ii]
    }) : oe(!1) : i.onRequestSent();
  }
}
function nk({ h2stream: n, body: e, client: i, request: a, socket: t, contentLength: d, header: r, expectsPayload: o }) {
  if (oe(d !== 0 || i[Ke] === 0, "stream body cannot be pipelined"), i[wn] === "h2") {
    let N = function(y) {
      a.onBodySent(y);
    };
    var k = N;
    const g = FN(
      e,
      n,
      (y) => {
        y ? (ce.destroy(e, y), ce.destroy(n, y)) : a.onRequestSent();
      }
    );
    g.on("data", N), g.once("end", () => {
      g.removeListener("data", N), ce.destroy(g);
    });
    return;
  }
  let s = !1;
  const A = new tk({ socket: t, request: a, contentLength: d, client: i, expectsPayload: o, header: r }), l = function(g) {
    if (!s)
      try {
        !A.write(g) && this.pause && this.pause();
      } catch (N) {
        ce.destroy(this, N);
      }
  }, m = function() {
    s || e.resume && e.resume();
  }, u = function() {
    if (s)
      return;
    const g = new wl();
    queueMicrotask(() => c(g));
  }, c = function(g) {
    if (!s) {
      if (s = !0, oe(t.destroyed || t[zn] && i[Ke] <= 1), t.off("drain", m).off("error", c), e.removeListener("data", l).removeListener("end", c).removeListener("error", c).removeListener("close", u), !g)
        try {
          A.end();
        } catch (N) {
          g = N;
        }
      A.destroy(g), g && (g.code !== "UND_ERR_INFO" || g.message !== "reset") ? ce.destroy(e, g) : ce.destroy(e);
    }
  };
  e.on("data", l).on("end", c).on("error", c).on("close", u), e.resume && e.resume(), t.on("drain", m).on("error", c);
}
async function ak({ h2stream: n, body: e, client: i, request: a, socket: t, contentLength: d, header: r, expectsPayload: o }) {
  oe(d === e.size, "blob body must have content length");
  const s = i[wn] === "h2";
  try {
    if (d != null && d !== e.size)
      throw new jn();
    const A = Buffer.from(await e.arrayBuffer());
    s ? (n.cork(), n.write(A), n.uncork()) : (t.cork(), t.write(`${r}content-length: ${d}\r
\r
`, "latin1"), t.write(A), t.uncork()), a.onBodySent(A), a.onRequestSent(), o || (t[Li] = !0), zi(i);
  } catch (A) {
    ce.destroy(s ? n : t, A);
  }
}
async function Br({ h2stream: n, body: e, client: i, request: a, socket: t, contentLength: d, header: r, expectsPayload: o }) {
  oe(d !== 0 || i[Ke] === 0, "iterator body cannot be pipelined");
  let s = null;
  function A() {
    if (s) {
      const u = s;
      s = null, u();
    }
  }
  const l = () => new Promise((u, c) => {
    oe(s === null), t[yi] ? c(t[yi]) : s = u;
  });
  if (i[wn] === "h2") {
    n.on("close", A).on("drain", A);
    try {
      for await (const u of e) {
        if (t[yi])
          throw t[yi];
        const c = n.write(u);
        a.onBodySent(u), c || await l();
      }
    } catch (u) {
      n.destroy(u);
    } finally {
      a.onRequestSent(), n.end(), n.off("close", A).off("drain", A);
    }
    return;
  }
  t.on("close", A).on("drain", A);
  const m = new tk({ socket: t, request: a, contentLength: d, client: i, expectsPayload: o, header: r });
  try {
    for await (const u of e) {
      if (t[yi])
        throw t[yi];
      m.write(u) || await l();
    }
    m.end();
  } catch (u) {
    m.destroy(u);
  } finally {
    t.off("close", A).off("drain", A);
  }
}
class tk {
  constructor({ socket: e, request: i, contentLength: a, client: t, expectsPayload: d, header: r }) {
    this.socket = e, this.request = i, this.contentLength = a, this.client = t, this.bytesWritten = 0, this.expectsPayload = d, this.header = r, e[zn] = !0;
  }
  write(e) {
    const { socket: i, request: a, contentLength: t, client: d, bytesWritten: r, expectsPayload: o, header: s } = this;
    if (i[yi])
      throw i[yi];
    if (i.destroyed)
      return !1;
    const A = Buffer.byteLength(e);
    if (!A)
      return !0;
    if (t !== null && r + A > t) {
      if (d[ld])
        throw new jn();
      process.emitWarning(new jn());
    }
    i.cork(), r === 0 && (o || (i[Li] = !0), t === null ? i.write(`${s}transfer-encoding: chunked\r
`, "latin1") : i.write(`${s}content-length: ${t}\r
\r
`, "latin1")), t === null && i.write(`\r
${A.toString(16)}\r
`, "latin1"), this.bytesWritten += A;
    const l = i.write(e);
    return i.uncork(), a.onBodySent(e), l || i[ei].timeout && i[ei].timeoutType === It && i[ei].timeout.refresh && i[ei].timeout.refresh(), l;
  }
  end() {
    const { socket: e, contentLength: i, client: a, bytesWritten: t, expectsPayload: d, header: r, request: o } = this;
    if (o.onRequestSent(), e[zn] = !1, e[yi])
      throw e[yi];
    if (!e.destroyed) {
      if (t === 0 ? d ? e.write(`${r}content-length: 0\r
\r
`, "latin1") : e.write(`${r}\r
`, "latin1") : i === null && e.write(`\r
0\r
\r
`, "latin1"), i !== null && t !== i) {
        if (a[ld])
          throw new jn();
        process.emitWarning(new jn());
      }
      e[ei].timeout && e[ei].timeoutType === It && e[ei].timeout.refresh && e[ei].timeout.refresh(), zi(a);
    }
  }
  destroy(e) {
    const { socket: i, client: a } = this;
    i[zn] = !1, e && (oe(a[Ke] <= 1, "pipeline should only contain this request"), ce.destroy(i, e));
  }
}
function qi(n, e, i) {
  try {
    e.onError(i), oe(e.aborted);
  } catch (a) {
    n.emit("error", a);
  }
}
var Lr = tE;
const dk = 2048, Js = dk - 1;
class pm {
  constructor() {
    this.bottom = 0, this.top = 0, this.list = new Array(dk), this.next = null;
  }
  isEmpty() {
    return this.top === this.bottom;
  }
  isFull() {
    return (this.top + 1 & Js) === this.bottom;
  }
  push(e) {
    this.list[this.top] = e, this.top = this.top + 1 & Js;
  }
  shift() {
    const e = this.list[this.bottom];
    return e === void 0 ? null : (this.list[this.bottom] = void 0, this.bottom = this.bottom + 1 & Js, e);
  }
}
var gE = class {
  constructor() {
    this.head = this.tail = new pm();
  }
  isEmpty() {
    return this.head.isEmpty();
  }
  push(e) {
    this.head.isFull() && (this.head = this.head.next = new pm()), this.head.push(e);
  }
  shift() {
    const e = this.tail, i = e.shift();
    return e.isEmpty() && e.next !== null && (this.tail = e.next), i;
  }
};
const { kFree: hE, kConnected: fE, kPending: NE, kQueued: EE, kRunning: yE, kSize: bE } = Ye, Sa = Symbol("pool");
let IE = class {
  constructor(e) {
    this[Sa] = e;
  }
  get connected() {
    return this[Sa][fE];
  }
  get free() {
    return this[Sa][hE];
  }
  get pending() {
    return this[Sa][NE];
  }
  get queued() {
    return this[Sa][EE];
  }
  get running() {
    return this[Sa][yE];
  }
  get size() {
    return this[Sa][bE];
  }
};
var CE = IE;
const BE = _r, QE = gE, { kConnected: Hs, kSize: cm, kRunning: km, kPending: vm, kQueued: jt, kBusy: SE, kFree: DE, kUrl: wE, kClose: FE, kDestroy: VE, kDispatch: TE } = Ye, _E = CE, Gi = Symbol("clients"), Ri = Symbol("needDrain"), Wt = Symbol("queue"), js = Symbol("closed resolve"), Ws = Symbol("onDrain"), gm = Symbol("onConnect"), hm = Symbol("onDisconnect"), fm = Symbol("onConnectionError"), al = Symbol("get dispatcher"), rk = Symbol("add client"), sk = Symbol("remove client"), Nm = Symbol("stats");
let RE = class extends BE {
  constructor() {
    super(), this[Wt] = new QE(), this[Gi] = [], this[jt] = 0;
    const e = this;
    this[Ws] = function(a, t) {
      const d = e[Wt];
      let r = !1;
      for (; !r; ) {
        const o = d.shift();
        if (!o)
          break;
        e[jt]--, r = !this.dispatch(o.opts, o.handler);
      }
      this[Ri] = r, !this[Ri] && e[Ri] && (e[Ri] = !1, e.emit("drain", a, [e, ...t])), e[js] && d.isEmpty() && Promise.all(e[Gi].map((o) => o.close())).then(e[js]);
    }, this[gm] = (i, a) => {
      e.emit("connect", i, [e, ...a]);
    }, this[hm] = (i, a, t) => {
      e.emit("disconnect", i, [e, ...a], t);
    }, this[fm] = (i, a, t) => {
      e.emit("connectionError", i, [e, ...a], t);
    }, this[Nm] = new _E(this);
  }
  get [SE]() {
    return this[Ri];
  }
  get [Hs]() {
    return this[Gi].filter((e) => e[Hs]).length;
  }
  get [DE]() {
    return this[Gi].filter((e) => e[Hs] && !e[Ri]).length;
  }
  get [vm]() {
    let e = this[jt];
    for (const { [vm]: i } of this[Gi])
      e += i;
    return e;
  }
  get [km]() {
    let e = 0;
    for (const { [km]: i } of this[Gi])
      e += i;
    return e;
  }
  get [cm]() {
    let e = this[jt];
    for (const { [cm]: i } of this[Gi])
      e += i;
    return e;
  }
  get stats() {
    return this[Nm];
  }
  async [FE]() {
    return this[Wt].isEmpty() ? Promise.all(this[Gi].map((e) => e.close())) : new Promise((e) => {
      this[js] = e;
    });
  }
  async [VE](e) {
    for (; ; ) {
      const i = this[Wt].shift();
      if (!i)
        break;
      i.handler.onError(e);
    }
    return Promise.all(this[Gi].map((i) => i.destroy(e)));
  }
  [TE](e, i) {
    const a = this[al]();
    return a ? a.dispatch(e, i) || (a[Ri] = !0, this[Ri] = !this[al]()) : (this[Ri] = !0, this[Wt].push({ opts: e, handler: i }), this[jt]++), !this[Ri];
  }
  [rk](e) {
    return e.on("drain", this[Ws]).on("connect", this[gm]).on("disconnect", this[hm]).on("connectionError", this[fm]), this[Gi].push(e), this[Ri] && process.nextTick(() => {
      this[Ri] && this[Ws](e[wE], [this, e]);
    }), this;
  }
  [sk](e) {
    e.close(() => {
      const i = this[Gi].indexOf(e);
      i !== -1 && this[Gi].splice(i, 1);
    }), this[Ri] = this[Gi].some((i) => !i[Ri] && i.closed !== !0 && i.destroyed !== !0);
  }
};
var ok = {
  PoolBase: RE,
  kClients: Gi,
  kNeedDrain: Ri,
  kAddClient: rk,
  kRemoveClient: sk,
  kGetDispatcher: al
};
const {
  PoolBase: UE,
  kClients: Em,
  kNeedDrain: LE,
  kAddClient: qE,
  kGetDispatcher: PE
} = ok, OE = Lr, {
  InvalidArgumentError: zs
} = Le, Zs = Ie, { kUrl: ym, kInterceptors: GE } = Ye, ME = Rr, Ks = Symbol("options"), Xs = Symbol("connections"), bm = Symbol("factory");
function xE(n, e) {
  return new OE(n, e);
}
let YE = class extends UE {
  constructor(e, {
    connections: i,
    factory: a = xE,
    connect: t,
    connectTimeout: d,
    tls: r,
    maxCachedSessions: o,
    socketPath: s,
    autoSelectFamily: A,
    autoSelectFamilyAttemptTimeout: l,
    allowH2: m,
    ...u
  } = {}) {
    if (super(), i != null && (!Number.isFinite(i) || i < 0))
      throw new zs("invalid connections");
    if (typeof a != "function")
      throw new zs("factory must be a function.");
    if (t != null && typeof t != "function" && typeof t != "object")
      throw new zs("connect must be a function or an object");
    typeof t != "function" && (t = ME({
      ...r,
      maxCachedSessions: o,
      allowH2: m,
      socketPath: s,
      timeout: d,
      ...Zs.nodeHasAutoSelectFamily && A ? { autoSelectFamily: A, autoSelectFamilyAttemptTimeout: l } : void 0,
      ...t
    })), this[GE] = u.interceptors && u.interceptors.Pool && Array.isArray(u.interceptors.Pool) ? u.interceptors.Pool : [], this[Xs] = i || null, this[ym] = Zs.parseOrigin(e), this[Ks] = { ...Zs.deepClone(u), connect: t, allowH2: m }, this[Ks].interceptors = u.interceptors ? { ...u.interceptors } : void 0, this[bm] = a;
  }
  [PE]() {
    let e = this[Em].find((i) => !i[LE]);
    return e || ((!this[Xs] || this[Em].length < this[Xs]) && (e = this[bm](this[ym], this[Ks]), this[qE](e)), e);
  }
};
var vd = YE;
const {
  BalancedPoolMissingUpstreamError: JE,
  InvalidArgumentError: HE
} = Le, {
  PoolBase: jE,
  kClients: _i,
  kNeedDrain: zt,
  kAddClient: WE,
  kRemoveClient: zE,
  kGetDispatcher: ZE
} = ok, KE = vd, { kUrl: $s, kInterceptors: XE } = Ye, { parseOrigin: Im } = Ie, Cm = Symbol("factory"), Jd = Symbol("options"), Bm = Symbol("kGreatestCommonDivisor"), Da = Symbol("kCurrentWeight"), wa = Symbol("kIndex"), Ki = Symbol("kWeight"), Hd = Symbol("kMaxWeightPerServer"), jd = Symbol("kErrorPenalty");
function lk(n, e) {
  return e === 0 ? n : lk(e, n % e);
}
function $E(n, e) {
  return new KE(n, e);
}
let e4 = class extends jE {
  constructor(e = [], { factory: i = $E, ...a } = {}) {
    if (super(), this[Jd] = a, this[wa] = -1, this[Da] = 0, this[Hd] = this[Jd].maxWeightPerServer || 100, this[jd] = this[Jd].errorPenalty || 15, Array.isArray(e) || (e = [e]), typeof i != "function")
      throw new HE("factory must be a function.");
    this[XE] = a.interceptors && a.interceptors.BalancedPool && Array.isArray(a.interceptors.BalancedPool) ? a.interceptors.BalancedPool : [], this[Cm] = i;
    for (const t of e)
      this.addUpstream(t);
    this._updateBalancedPoolStats();
  }
  addUpstream(e) {
    const i = Im(e).origin;
    if (this[_i].find((t) => t[$s].origin === i && t.closed !== !0 && t.destroyed !== !0))
      return this;
    const a = this[Cm](i, Object.assign({}, this[Jd]));
    this[WE](a), a.on("connect", () => {
      a[Ki] = Math.min(this[Hd], a[Ki] + this[jd]);
    }), a.on("connectionError", () => {
      a[Ki] = Math.max(1, a[Ki] - this[jd]), this._updateBalancedPoolStats();
    }), a.on("disconnect", (...t) => {
      const d = t[2];
      d && d.code === "UND_ERR_SOCKET" && (a[Ki] = Math.max(1, a[Ki] - this[jd]), this._updateBalancedPoolStats());
    });
    for (const t of this[_i])
      t[Ki] = this[Hd];
    return this._updateBalancedPoolStats(), this;
  }
  _updateBalancedPoolStats() {
    this[Bm] = this[_i].map((e) => e[Ki]).reduce(lk, 0);
  }
  removeUpstream(e) {
    const i = Im(e).origin, a = this[_i].find((t) => t[$s].origin === i && t.closed !== !0 && t.destroyed !== !0);
    return a && this[zE](a), this;
  }
  get upstreams() {
    return this[_i].filter((e) => e.closed !== !0 && e.destroyed !== !0).map((e) => e[$s].origin);
  }
  [ZE]() {
    if (this[_i].length === 0)
      throw new JE();
    if (!this[_i].find((d) => !d[zt] && d.closed !== !0 && d.destroyed !== !0) || this[_i].map((d) => d[zt]).reduce((d, r) => d && r, !0))
      return;
    let a = 0, t = this[_i].findIndex((d) => !d[zt]);
    for (; a++ < this[_i].length; ) {
      this[wa] = (this[wa] + 1) % this[_i].length;
      const d = this[_i][this[wa]];
      if (d[Ki] > this[_i][t][Ki] && !d[zt] && (t = this[wa]), this[wa] === 0 && (this[Da] = this[Da] - this[Bm], this[Da] <= 0 && (this[Da] = this[Hd])), d[Ki] >= this[Da] && !d[zt])
        return d;
    }
    return this[Da] = this[_i][t][Ki], this[wa] = t, this[_i][t];
  }
};
var i4 = e4;
const { kConnected: Ak, kSize: mk } = Ye;
class Qm {
  constructor(e) {
    this.value = e;
  }
  deref() {
    return this.value[Ak] === 0 && this.value[mk] === 0 ? void 0 : this.value;
  }
}
class Sm {
  constructor(e) {
    this.finalizer = e;
  }
  register(e, i) {
    e.on && e.on("disconnect", () => {
      e[Ak] === 0 && e[mk] === 0 && this.finalizer(i);
    });
  }
}
var uk = function() {
  return process.env.NODE_V8_COVERAGE ? {
    WeakRef: Qm,
    FinalizationRegistry: Sm
  } : {
    WeakRef: me.WeakRef || Qm,
    FinalizationRegistry: me.FinalizationRegistry || Sm
  };
};
const { InvalidArgumentError: Wd } = Le, { kClients: aa, kRunning: Dm, kClose: n4, kDestroy: a4, kDispatch: t4, kInterceptors: d4 } = Ye, r4 = _r, s4 = vd, o4 = Lr, l4 = Ie, A4 = Dl, { WeakRef: m4, FinalizationRegistry: u4 } = uk(), wm = Symbol("onConnect"), Fm = Symbol("onDisconnect"), Vm = Symbol("onConnectionError"), p4 = Symbol("maxRedirections"), Tm = Symbol("onDrain"), _m = Symbol("factory"), Rm = Symbol("finalizer"), eo = Symbol("options");
function c4(n, e) {
  return e && e.connections === 1 ? new o4(n, e) : new s4(n, e);
}
let k4 = class extends r4 {
  constructor({ factory: e = c4, maxRedirections: i = 0, connect: a, ...t } = {}) {
    if (super(), typeof e != "function")
      throw new Wd("factory must be a function.");
    if (a != null && typeof a != "function" && typeof a != "object")
      throw new Wd("connect must be a function or an object");
    if (!Number.isInteger(i) || i < 0)
      throw new Wd("maxRedirections must be a positive number");
    a && typeof a != "function" && (a = { ...a }), this[d4] = t.interceptors && t.interceptors.Agent && Array.isArray(t.interceptors.Agent) ? t.interceptors.Agent : [A4({ maxRedirections: i })], this[eo] = { ...l4.deepClone(t), connect: a }, this[eo].interceptors = t.interceptors ? { ...t.interceptors } : void 0, this[p4] = i, this[_m] = e, this[aa] = /* @__PURE__ */ new Map(), this[Rm] = new u4(
      /* istanbul ignore next: gc is undeterministic */
      (r) => {
        const o = this[aa].get(r);
        o !== void 0 && o.deref() === void 0 && this[aa].delete(r);
      }
    );
    const d = this;
    this[Tm] = (r, o) => {
      d.emit("drain", r, [d, ...o]);
    }, this[wm] = (r, o) => {
      d.emit("connect", r, [d, ...o]);
    }, this[Fm] = (r, o, s) => {
      d.emit("disconnect", r, [d, ...o], s);
    }, this[Vm] = (r, o, s) => {
      d.emit("connectionError", r, [d, ...o], s);
    };
  }
  get [Dm]() {
    let e = 0;
    for (const i of this[aa].values()) {
      const a = i.deref();
      a && (e += a[Dm]);
    }
    return e;
  }
  [t4](e, i) {
    let a;
    if (e.origin && (typeof e.origin == "string" || e.origin instanceof URL))
      a = String(e.origin);
    else
      throw new Wd("opts.origin must be a non-empty string or URL.");
    const t = this[aa].get(a);
    let d = t ? t.deref() : null;
    return d || (d = this[_m](e.origin, this[eo]).on("drain", this[Tm]).on("connect", this[wm]).on("disconnect", this[Fm]).on("connectionError", this[Vm]), this[aa].set(a, new m4(d)), this[Rm].register(d, a)), d.dispatch(e, i);
  }
  async [n4]() {
    const e = [];
    for (const i of this[aa].values()) {
      const a = i.deref();
      a && e.push(a.close());
    }
    await Promise.all(e);
  }
  async [a4](e) {
    const i = [];
    for (const a of this[aa].values()) {
      const t = a.deref();
      t && i.push(t.destroy(e));
    }
    await Promise.all(i);
  }
};
var qr = k4, St = {}, Fl = { exports: {} };
const pk = J, { Readable: v4 } = J, { RequestAbortedError: ck, NotSupportedError: g4, InvalidArgumentError: h4 } = Le, vr = Ie, { ReadableStreamFrom: f4, toUSVString: N4 } = Ie;
let io;
const Hi = Symbol("kConsume"), zd = Symbol("kReading"), oa = Symbol("kBody"), Um = Symbol("abort"), kk = Symbol("kContentType"), Lm = () => {
};
var E4 = class extends v4 {
  constructor({
    resume: e,
    abort: i,
    contentType: a = "",
    highWaterMark: t = 64 * 1024
    // Same as nodejs fs streams.
  }) {
    super({
      autoDestroy: !0,
      read: e,
      highWaterMark: t
    }), this._readableState.dataEmitted = !1, this[Um] = i, this[Hi] = null, this[oa] = null, this[kk] = a, this[zd] = !1;
  }
  destroy(e) {
    return this.destroyed ? this : (!e && !this._readableState.endEmitted && (e = new ck()), e && this[Um](), super.destroy(e));
  }
  emit(e, ...i) {
    return e === "data" ? this._readableState.dataEmitted = !0 : e === "error" && (this._readableState.errorEmitted = !0), super.emit(e, ...i);
  }
  on(e, ...i) {
    return (e === "data" || e === "readable") && (this[zd] = !0), super.on(e, ...i);
  }
  addListener(e, ...i) {
    return this.on(e, ...i);
  }
  off(e, ...i) {
    const a = super.off(e, ...i);
    return (e === "data" || e === "readable") && (this[zd] = this.listenerCount("data") > 0 || this.listenerCount("readable") > 0), a;
  }
  removeListener(e, ...i) {
    return this.off(e, ...i);
  }
  push(e) {
    return this[Hi] && e !== null && this.readableLength === 0 ? (vk(this[Hi], e), this[zd] ? super.push(e) : !0) : super.push(e);
  }
  // https://fetch.spec.whatwg.org/#dom-body-text
  async text() {
    return Zd(this, "text");
  }
  // https://fetch.spec.whatwg.org/#dom-body-json
  async json() {
    return Zd(this, "json");
  }
  // https://fetch.spec.whatwg.org/#dom-body-blob
  async blob() {
    return Zd(this, "blob");
  }
  // https://fetch.spec.whatwg.org/#dom-body-arraybuffer
  async arrayBuffer() {
    return Zd(this, "arrayBuffer");
  }
  // https://fetch.spec.whatwg.org/#dom-body-formdata
  async formData() {
    throw new g4();
  }
  // https://fetch.spec.whatwg.org/#dom-body-bodyused
  get bodyUsed() {
    return vr.isDisturbed(this);
  }
  // https://fetch.spec.whatwg.org/#dom-body-body
  get body() {
    return this[oa] || (this[oa] = f4(this), this[Hi] && (this[oa].getReader(), pk(this[oa].locked))), this[oa];
  }
  dump(e) {
    let i = e && Number.isFinite(e.limit) ? e.limit : 262144;
    const a = e && e.signal;
    if (a)
      try {
        if (typeof a != "object" || !("aborted" in a))
          throw new h4("signal must be an AbortSignal");
        vr.throwIfAborted(a);
      } catch (t) {
        return Promise.reject(t);
      }
    return this.closed ? Promise.resolve(null) : new Promise((t, d) => {
      const r = a ? vr.addAbortListener(a, () => {
        this.destroy();
      }) : Lm;
      this.on("close", function() {
        r(), a && a.aborted ? d(a.reason || Object.assign(new Error("The operation was aborted"), { name: "AbortError" })) : t(null);
      }).on("error", Lm).on("data", function(o) {
        i -= o.length, i <= 0 && this.destroy();
      }).resume();
    });
  }
};
function y4(n) {
  return n[oa] && n[oa].locked === !0 || n[Hi];
}
function b4(n) {
  return vr.isDisturbed(n) || y4(n);
}
async function Zd(n, e) {
  if (b4(n))
    throw new TypeError("unusable");
  return pk(!n[Hi]), new Promise((i, a) => {
    n[Hi] = {
      type: e,
      stream: n,
      resolve: i,
      reject: a,
      length: 0,
      body: []
    }, n.on("error", function(t) {
      tl(this[Hi], t);
    }).on("close", function() {
      this[Hi].body !== null && tl(this[Hi], new ck());
    }), process.nextTick(I4, n[Hi]);
  });
}
function I4(n) {
  if (n.body === null)
    return;
  const { _readableState: e } = n.stream;
  for (const i of e.buffer)
    vk(n, i);
  for (e.endEmitted ? qm(this[Hi]) : n.stream.on("end", function() {
    qm(this[Hi]);
  }), n.stream.resume(); n.stream.read() != null; )
    ;
}
function qm(n) {
  const { type: e, body: i, resolve: a, stream: t, length: d } = n;
  try {
    if (e === "text")
      a(N4(Buffer.concat(i)));
    else if (e === "json")
      a(JSON.parse(Buffer.concat(i)));
    else if (e === "arrayBuffer") {
      const r = new Uint8Array(d);
      let o = 0;
      for (const s of i)
        r.set(s, o), o += s.byteLength;
      a(r.buffer);
    } else
      e === "blob" && (io || (io = J.Blob), a(new io(i, { type: t[kk] })));
    tl(n);
  } catch (r) {
    t.destroy(r);
  }
}
function vk(n, e) {
  n.length += e.length, n.body.push(e);
}
function tl(n, e) {
  n.body !== null && (e ? n.reject(e) : n.resolve(), n.type = null, n.stream = null, n.resolve = null, n.reject = null, n.length = 0, n.body = null);
}
const C4 = J, {
  ResponseStatusCodeError: Kd
} = Le, { toUSVString: Pm } = Ie;
async function B4({ callback: n, body: e, contentType: i, statusCode: a, statusMessage: t, headers: d }) {
  C4(e);
  let r = [], o = 0;
  for await (const s of e)
    if (r.push(s), o += s.length, o > 128 * 1024) {
      r = null;
      break;
    }
  if (a === 204 || !i || !r) {
    process.nextTick(n, new Kd(`Response status code ${a}${t ? `: ${t}` : ""}`, a, d));
    return;
  }
  try {
    if (i.startsWith("application/json")) {
      const s = JSON.parse(Pm(Buffer.concat(r)));
      process.nextTick(n, new Kd(`Response status code ${a}${t ? `: ${t}` : ""}`, a, d, s));
      return;
    }
    if (i.startsWith("text/")) {
      const s = Pm(Buffer.concat(r));
      process.nextTick(n, new Kd(`Response status code ${a}${t ? `: ${t}` : ""}`, a, d, s));
      return;
    }
  } catch {
  }
  process.nextTick(n, new Kd(`Response status code ${a}${t ? `: ${t}` : ""}`, a, d));
}
var gk = { getResolveErrorBodyCallback: B4 };
const { addAbortListener: Q4 } = Ie, { RequestAbortedError: S4 } = Le, ct = Symbol("kListener"), ca = Symbol("kSignal");
function Om(n) {
  n.abort ? n.abort() : n.onError(new S4());
}
function D4(n, e) {
  if (n[ca] = null, n[ct] = null, !!e) {
    if (e.aborted) {
      Om(n);
      return;
    }
    n[ca] = e, n[ct] = () => {
      Om(n);
    }, Q4(n[ca], n[ct]);
  }
}
function w4(n) {
  n[ca] && ("removeEventListener" in n[ca] ? n[ca].removeEventListener("abort", n[ct]) : n[ca].removeListener("abort", n[ct]), n[ca] = null, n[ct] = null);
}
var gd = {
  addSignal: D4,
  removeSignal: w4
};
const F4 = E4, {
  InvalidArgumentError: dt,
  RequestAbortedError: V4
} = Le, In = Ie, { getResolveErrorBodyCallback: T4 } = gk, { AsyncResource: _4 } = J, { addSignal: R4, removeSignal: Gm } = gd;
class hk extends _4 {
  constructor(e, i) {
    if (!e || typeof e != "object")
      throw new dt("invalid opts");
    const { signal: a, method: t, opaque: d, body: r, onInfo: o, responseHeaders: s, throwOnError: A, highWaterMark: l } = e;
    try {
      if (typeof i != "function")
        throw new dt("invalid callback");
      if (l && (typeof l != "number" || l < 0))
        throw new dt("invalid highWaterMark");
      if (a && typeof a.on != "function" && typeof a.addEventListener != "function")
        throw new dt("signal must be an EventEmitter or EventTarget");
      if (t === "CONNECT")
        throw new dt("invalid method");
      if (o && typeof o != "function")
        throw new dt("invalid onInfo callback");
      super("UNDICI_REQUEST");
    } catch (m) {
      throw In.isStream(r) && In.destroy(r.on("error", In.nop), m), m;
    }
    this.responseHeaders = s || null, this.opaque = d || null, this.callback = i, this.res = null, this.abort = null, this.body = r, this.trailers = {}, this.context = null, this.onInfo = o || null, this.throwOnError = A, this.highWaterMark = l, In.isStream(r) && r.on("error", (m) => {
      this.onError(m);
    }), R4(this, a);
  }
  onConnect(e, i) {
    if (!this.callback)
      throw new V4();
    this.abort = e, this.context = i;
  }
  onHeaders(e, i, a, t) {
    const { callback: d, opaque: r, abort: o, context: s, responseHeaders: A, highWaterMark: l } = this, m = A === "raw" ? In.parseRawHeaders(i) : In.parseHeaders(i);
    if (e < 200) {
      this.onInfo && this.onInfo({ statusCode: e, headers: m });
      return;
    }
    const c = (A === "raw" ? In.parseHeaders(i) : m)["content-type"], k = new F4({ resume: a, abort: o, contentType: c, highWaterMark: l });
    this.callback = null, this.res = k, d !== null && (this.throwOnError && e >= 400 ? this.runInAsyncScope(
      T4,
      null,
      { callback: d, body: k, contentType: c, statusCode: e, statusMessage: t, headers: m }
    ) : this.runInAsyncScope(d, null, null, {
      statusCode: e,
      headers: m,
      trailers: this.trailers,
      opaque: r,
      body: k,
      context: s
    }));
  }
  onData(e) {
    const { res: i } = this;
    return i.push(e);
  }
  onComplete(e) {
    const { res: i } = this;
    Gm(this), In.parseHeaders(e, this.trailers), i.push(null);
  }
  onError(e) {
    const { res: i, callback: a, body: t, opaque: d } = this;
    Gm(this), a && (this.callback = null, queueMicrotask(() => {
      this.runInAsyncScope(a, null, e, { opaque: d });
    })), i && (this.res = null, queueMicrotask(() => {
      In.destroy(i, e);
    })), t && (this.body = null, In.destroy(t, e));
  }
}
function fk(n, e) {
  if (e === void 0)
    return new Promise((i, a) => {
      fk.call(this, n, (t, d) => t ? a(t) : i(d));
    });
  try {
    this.dispatch(n, new hk(n, e));
  } catch (i) {
    if (typeof e != "function")
      throw i;
    const a = n && n.opaque;
    queueMicrotask(() => e(i, { opaque: a }));
  }
}
Fl.exports = fk;
Fl.exports.RequestHandler = hk;
var U4 = Fl.exports;
const { finished: L4, PassThrough: q4 } = J, {
  InvalidArgumentError: rt,
  InvalidReturnValueError: P4,
  RequestAbortedError: O4
} = Le, An = Ie, { getResolveErrorBodyCallback: G4 } = gk, { AsyncResource: M4 } = J, { addSignal: x4, removeSignal: Mm } = gd;
class Y4 extends M4 {
  constructor(e, i, a) {
    if (!e || typeof e != "object")
      throw new rt("invalid opts");
    const { signal: t, method: d, opaque: r, body: o, onInfo: s, responseHeaders: A, throwOnError: l } = e;
    try {
      if (typeof a != "function")
        throw new rt("invalid callback");
      if (typeof i != "function")
        throw new rt("invalid factory");
      if (t && typeof t.on != "function" && typeof t.addEventListener != "function")
        throw new rt("signal must be an EventEmitter or EventTarget");
      if (d === "CONNECT")
        throw new rt("invalid method");
      if (s && typeof s != "function")
        throw new rt("invalid onInfo callback");
      super("UNDICI_STREAM");
    } catch (m) {
      throw An.isStream(o) && An.destroy(o.on("error", An.nop), m), m;
    }
    this.responseHeaders = A || null, this.opaque = r || null, this.factory = i, this.callback = a, this.res = null, this.abort = null, this.context = null, this.trailers = null, this.body = o, this.onInfo = s || null, this.throwOnError = l || !1, An.isStream(o) && o.on("error", (m) => {
      this.onError(m);
    }), x4(this, t);
  }
  onConnect(e, i) {
    if (!this.callback)
      throw new O4();
    this.abort = e, this.context = i;
  }
  onHeaders(e, i, a, t) {
    const { factory: d, opaque: r, context: o, callback: s, responseHeaders: A } = this, l = A === "raw" ? An.parseRawHeaders(i) : An.parseHeaders(i);
    if (e < 200) {
      this.onInfo && this.onInfo({ statusCode: e, headers: l });
      return;
    }
    this.factory = null;
    let m;
    if (this.throwOnError && e >= 400) {
      const k = (A === "raw" ? An.parseHeaders(i) : l)["content-type"];
      m = new q4(), this.callback = null, this.runInAsyncScope(
        G4,
        null,
        { callback: s, body: m, contentType: k, statusCode: e, statusMessage: t, headers: l }
      );
    } else {
      if (d === null)
        return;
      if (m = this.runInAsyncScope(d, null, {
        statusCode: e,
        headers: l,
        opaque: r,
        context: o
      }), !m || typeof m.write != "function" || typeof m.end != "function" || typeof m.on != "function")
        throw new P4("expected Writable");
      L4(m, { readable: !1 }, (c) => {
        const { callback: k, res: g, opaque: N, trailers: y, abort: h } = this;
        this.res = null, (c || !g.readable) && An.destroy(g, c), this.callback = null, this.runInAsyncScope(k, null, c || null, { opaque: N, trailers: y }), c && h();
      });
    }
    return m.on("drain", a), this.res = m, (m.writableNeedDrain !== void 0 ? m.writableNeedDrain : m._writableState && m._writableState.needDrain) !== !0;
  }
  onData(e) {
    const { res: i } = this;
    return i ? i.write(e) : !0;
  }
  onComplete(e) {
    const { res: i } = this;
    Mm(this), i && (this.trailers = An.parseHeaders(e), i.end());
  }
  onError(e) {
    const { res: i, callback: a, opaque: t, body: d } = this;
    Mm(this), this.factory = null, i ? (this.res = null, An.destroy(i, e)) : a && (this.callback = null, queueMicrotask(() => {
      this.runInAsyncScope(a, null, e, { opaque: t });
    })), d && (this.body = null, An.destroy(d, e));
  }
}
function Nk(n, e, i) {
  if (i === void 0)
    return new Promise((a, t) => {
      Nk.call(this, n, e, (d, r) => d ? t(d) : a(r));
    });
  try {
    this.dispatch(n, new Y4(n, e, i));
  } catch (a) {
    if (typeof i != "function")
      throw a;
    const t = n && n.opaque;
    queueMicrotask(() => i(a, { opaque: t }));
  }
}
var J4 = Nk;
const {
  Readable: Ek,
  Duplex: H4,
  PassThrough: j4
} = J, {
  InvalidArgumentError: Zt,
  InvalidReturnValueError: W4,
  RequestAbortedError: gr
} = Le, Xi = Ie, { AsyncResource: z4 } = J, { addSignal: Z4, removeSignal: K4 } = gd, X4 = J, kt = Symbol("resume");
class $4 extends Ek {
  constructor() {
    super({ autoDestroy: !0 }), this[kt] = null;
  }
  _read() {
    const { [kt]: e } = this;
    e && (this[kt] = null, e());
  }
  _destroy(e, i) {
    this._read(), i(e);
  }
}
class e6 extends Ek {
  constructor(e) {
    super({ autoDestroy: !0 }), this[kt] = e;
  }
  _read() {
    this[kt]();
  }
  _destroy(e, i) {
    !e && !this._readableState.endEmitted && (e = new gr()), i(e);
  }
}
class i6 extends z4 {
  constructor(e, i) {
    if (!e || typeof e != "object")
      throw new Zt("invalid opts");
    if (typeof i != "function")
      throw new Zt("invalid handler");
    const { signal: a, method: t, opaque: d, onInfo: r, responseHeaders: o } = e;
    if (a && typeof a.on != "function" && typeof a.addEventListener != "function")
      throw new Zt("signal must be an EventEmitter or EventTarget");
    if (t === "CONNECT")
      throw new Zt("invalid method");
    if (r && typeof r != "function")
      throw new Zt("invalid onInfo callback");
    super("UNDICI_PIPELINE"), this.opaque = d || null, this.responseHeaders = o || null, this.handler = i, this.abort = null, this.context = null, this.onInfo = r || null, this.req = new $4().on("error", Xi.nop), this.ret = new H4({
      readableObjectMode: e.objectMode,
      autoDestroy: !0,
      read: () => {
        const { body: s } = this;
        s && s.resume && s.resume();
      },
      write: (s, A, l) => {
        const { req: m } = this;
        m.push(s, A) || m._readableState.destroyed ? l() : m[kt] = l;
      },
      destroy: (s, A) => {
        const { body: l, req: m, res: u, ret: c, abort: k } = this;
        !s && !c._readableState.endEmitted && (s = new gr()), k && s && k(), Xi.destroy(l, s), Xi.destroy(m, s), Xi.destroy(u, s), K4(this), A(s);
      }
    }).on("prefinish", () => {
      const { req: s } = this;
      s.push(null);
    }), this.res = null, Z4(this, a);
  }
  onConnect(e, i) {
    const { ret: a, res: t } = this;
    if (X4(!t, "pipeline cannot be retried"), a.destroyed)
      throw new gr();
    this.abort = e, this.context = i;
  }
  onHeaders(e, i, a) {
    const { opaque: t, handler: d, context: r } = this;
    if (e < 200) {
      if (this.onInfo) {
        const s = this.responseHeaders === "raw" ? Xi.parseRawHeaders(i) : Xi.parseHeaders(i);
        this.onInfo({ statusCode: e, headers: s });
      }
      return;
    }
    this.res = new e6(a);
    let o;
    try {
      this.handler = null;
      const s = this.responseHeaders === "raw" ? Xi.parseRawHeaders(i) : Xi.parseHeaders(i);
      o = this.runInAsyncScope(d, null, {
        statusCode: e,
        headers: s,
        opaque: t,
        body: this.res,
        context: r
      });
    } catch (s) {
      throw this.res.on("error", Xi.nop), s;
    }
    if (!o || typeof o.on != "function")
      throw new W4("expected Readable");
    o.on("data", (s) => {
      const { ret: A, body: l } = this;
      !A.push(s) && l.pause && l.pause();
    }).on("error", (s) => {
      const { ret: A } = this;
      Xi.destroy(A, s);
    }).on("end", () => {
      const { ret: s } = this;
      s.push(null);
    }).on("close", () => {
      const { ret: s } = this;
      s._readableState.ended || Xi.destroy(s, new gr());
    }), this.body = o;
  }
  onData(e) {
    const { res: i } = this;
    return i.push(e);
  }
  onComplete(e) {
    const { res: i } = this;
    i.push(null);
  }
  onError(e) {
    const { ret: i } = this;
    this.handler = null, Xi.destroy(i, e);
  }
}
function n6(n, e) {
  try {
    const i = new i6(n, e);
    return this.dispatch({ ...n, body: i.req }, i), i.ret;
  } catch (i) {
    return new j4().destroy(i);
  }
}
var a6 = n6;
const { InvalidArgumentError: no, RequestAbortedError: t6, SocketError: d6 } = Le, { AsyncResource: r6 } = J, xm = Ie, { addSignal: s6, removeSignal: Ym } = gd, o6 = J;
class l6 extends r6 {
  constructor(e, i) {
    if (!e || typeof e != "object")
      throw new no("invalid opts");
    if (typeof i != "function")
      throw new no("invalid callback");
    const { signal: a, opaque: t, responseHeaders: d } = e;
    if (a && typeof a.on != "function" && typeof a.addEventListener != "function")
      throw new no("signal must be an EventEmitter or EventTarget");
    super("UNDICI_UPGRADE"), this.responseHeaders = d || null, this.opaque = t || null, this.callback = i, this.abort = null, this.context = null, s6(this, a);
  }
  onConnect(e, i) {
    if (!this.callback)
      throw new t6();
    this.abort = e, this.context = null;
  }
  onHeaders() {
    throw new d6("bad upgrade", null);
  }
  onUpgrade(e, i, a) {
    const { callback: t, opaque: d, context: r } = this;
    o6.strictEqual(e, 101), Ym(this), this.callback = null;
    const o = this.responseHeaders === "raw" ? xm.parseRawHeaders(i) : xm.parseHeaders(i);
    this.runInAsyncScope(t, null, null, {
      headers: o,
      socket: a,
      opaque: d,
      context: r
    });
  }
  onError(e) {
    const { callback: i, opaque: a } = this;
    Ym(this), i && (this.callback = null, queueMicrotask(() => {
      this.runInAsyncScope(i, null, e, { opaque: a });
    }));
  }
}
function yk(n, e) {
  if (e === void 0)
    return new Promise((i, a) => {
      yk.call(this, n, (t, d) => t ? a(t) : i(d));
    });
  try {
    const i = new l6(n, e);
    this.dispatch({
      ...n,
      method: n.method || "GET",
      upgrade: n.protocol || "Websocket"
    }, i);
  } catch (i) {
    if (typeof e != "function")
      throw i;
    const a = n && n.opaque;
    queueMicrotask(() => e(i, { opaque: a }));
  }
}
var A6 = yk;
const { AsyncResource: m6 } = J, { InvalidArgumentError: ao, RequestAbortedError: u6, SocketError: p6 } = Le, Jm = Ie, { addSignal: c6, removeSignal: Hm } = gd;
class k6 extends m6 {
  constructor(e, i) {
    if (!e || typeof e != "object")
      throw new ao("invalid opts");
    if (typeof i != "function")
      throw new ao("invalid callback");
    const { signal: a, opaque: t, responseHeaders: d } = e;
    if (a && typeof a.on != "function" && typeof a.addEventListener != "function")
      throw new ao("signal must be an EventEmitter or EventTarget");
    super("UNDICI_CONNECT"), this.opaque = t || null, this.responseHeaders = d || null, this.callback = i, this.abort = null, c6(this, a);
  }
  onConnect(e, i) {
    if (!this.callback)
      throw new u6();
    this.abort = e, this.context = i;
  }
  onHeaders() {
    throw new p6("bad connect", null);
  }
  onUpgrade(e, i, a) {
    const { callback: t, opaque: d, context: r } = this;
    Hm(this), this.callback = null;
    let o = i;
    o != null && (o = this.responseHeaders === "raw" ? Jm.parseRawHeaders(i) : Jm.parseHeaders(i)), this.runInAsyncScope(t, null, null, {
      statusCode: e,
      headers: o,
      socket: a,
      opaque: d,
      context: r
    });
  }
  onError(e) {
    const { callback: i, opaque: a } = this;
    Hm(this), i && (this.callback = null, queueMicrotask(() => {
      this.runInAsyncScope(i, null, e, { opaque: a });
    }));
  }
}
function bk(n, e) {
  if (e === void 0)
    return new Promise((i, a) => {
      bk.call(this, n, (t, d) => t ? a(t) : i(d));
    });
  try {
    const i = new k6(n, e);
    this.dispatch({ ...n, method: "CONNECT" }, i);
  } catch (i) {
    if (typeof e != "function")
      throw i;
    const a = n && n.opaque;
    queueMicrotask(() => e(i, { opaque: a }));
  }
}
var v6 = bk;
St.request = U4;
St.stream = J4;
St.pipeline = a6;
St.upgrade = A6;
St.connect = v6;
const { UndiciError: g6 } = Le;
let h6 = class Ik extends g6 {
  constructor(e) {
    super(e), Error.captureStackTrace(this, Ik), this.name = "MockNotMatchedError", this.message = e || "The request does not match any registered mock dispatches", this.code = "UND_MOCK_ERR_MOCK_NOT_MATCHED";
  }
};
var Ck = {
  MockNotMatchedError: h6
}, hd = {
  kAgent: Symbol("agent"),
  kOptions: Symbol("options"),
  kFactory: Symbol("factory"),
  kDispatches: Symbol("dispatches"),
  kDispatchKey: Symbol("dispatch key"),
  kDefaultHeaders: Symbol("default headers"),
  kDefaultTrailers: Symbol("default trailers"),
  kContentLength: Symbol("content length"),
  kMockAgent: Symbol("mock agent"),
  kMockAgentSet: Symbol("mock agent set"),
  kMockAgentGet: Symbol("mock agent get"),
  kMockDispatch: Symbol("mock dispatch"),
  kClose: Symbol("close"),
  kOriginalClose: Symbol("original agent close"),
  kOrigin: Symbol("origin"),
  kIsMockActive: Symbol("is mock active"),
  kNetConnect: Symbol("net connect"),
  kGetNetConnect: Symbol("get net connect"),
  kConnected: Symbol("connected")
};
const { MockNotMatchedError: Ra } = Ck, {
  kDispatches: Xd,
  kMockAgent: f6,
  kOriginalDispatch: N6,
  kOrigin: E6,
  kGetNetConnect: y6
} = hd, { buildURL: b6, nop: I6 } = Ie, { STATUS_CODES: C6 } = J, {
  types: {
    isPromise: B6
  }
} = J;
function Zn(n, e) {
  return typeof n == "string" ? n === e : n instanceof RegExp ? n.test(e) : typeof n == "function" ? n(e) === !0 : !1;
}
function Bk(n) {
  return Object.fromEntries(
    Object.entries(n).map(([e, i]) => [e.toLocaleLowerCase(), i])
  );
}
function Qk(n, e) {
  if (Array.isArray(n)) {
    for (let i = 0; i < n.length; i += 2)
      if (n[i].toLocaleLowerCase() === e.toLocaleLowerCase())
        return n[i + 1];
    return;
  } else
    return typeof n.get == "function" ? n.get(e) : Bk(n)[e.toLocaleLowerCase()];
}
function Sk(n) {
  const e = n.slice(), i = [];
  for (let a = 0; a < e.length; a += 2)
    i.push([e[a], e[a + 1]]);
  return Object.fromEntries(i);
}
function Dk(n, e) {
  if (typeof n.headers == "function")
    return Array.isArray(e) && (e = Sk(e)), n.headers(e ? Bk(e) : {});
  if (typeof n.headers > "u")
    return !0;
  if (typeof e != "object" || typeof n.headers != "object")
    return !1;
  for (const [i, a] of Object.entries(n.headers)) {
    const t = Qk(e, i);
    if (!Zn(a, t))
      return !1;
  }
  return !0;
}
function jm(n) {
  if (typeof n != "string")
    return n;
  const e = n.split("?");
  if (e.length !== 2)
    return n;
  const i = new URLSearchParams(e.pop());
  return i.sort(), [...e, i.toString()].join("?");
}
function Q6(n, { path: e, method: i, body: a, headers: t }) {
  const d = Zn(n.path, e), r = Zn(n.method, i), o = typeof n.body < "u" ? Zn(n.body, a) : !0, s = Dk(n, t);
  return d && r && o && s;
}
function wk(n) {
  return Buffer.isBuffer(n) ? n : typeof n == "object" ? JSON.stringify(n) : n.toString();
}
function Fk(n, e) {
  const i = e.query ? b6(e.path, e.query) : e.path, a = typeof i == "string" ? jm(i) : i;
  let t = n.filter(({ consumed: d }) => !d).filter(({ path: d }) => Zn(jm(d), a));
  if (t.length === 0)
    throw new Ra(`Mock dispatch not matched for path '${a}'`);
  if (t = t.filter(({ method: d }) => Zn(d, e.method)), t.length === 0)
    throw new Ra(`Mock dispatch not matched for method '${e.method}'`);
  if (t = t.filter(({ body: d }) => typeof d < "u" ? Zn(d, e.body) : !0), t.length === 0)
    throw new Ra(`Mock dispatch not matched for body '${e.body}'`);
  if (t = t.filter((d) => Dk(d, e.headers)), t.length === 0)
    throw new Ra(`Mock dispatch not matched for headers '${typeof e.headers == "object" ? JSON.stringify(e.headers) : e.headers}'`);
  return t[0];
}
function S6(n, e, i) {
  const a = { timesInvoked: 0, times: 1, persist: !1, consumed: !1 }, t = typeof i == "function" ? { callback: i } : { ...i }, d = { ...a, ...e, pending: !0, data: { error: null, ...t } };
  return n.push(d), d;
}
function dl(n, e) {
  const i = n.findIndex((a) => a.consumed ? Q6(a, e) : !1);
  i !== -1 && n.splice(i, 1);
}
function Vk(n) {
  const { path: e, method: i, body: a, headers: t, query: d } = n;
  return {
    path: e,
    method: i,
    body: a,
    headers: t,
    query: d
  };
}
function rl(n) {
  return Object.entries(n).reduce((e, [i, a]) => [
    ...e,
    Buffer.from(`${i}`),
    Array.isArray(a) ? a.map((t) => Buffer.from(`${t}`)) : Buffer.from(`${a}`)
  ], []);
}
function Tk(n) {
  return C6[n] || "unknown";
}
async function D6(n) {
  const e = [];
  for await (const i of n)
    e.push(i);
  return Buffer.concat(e).toString("utf8");
}
function _k(n, e) {
  const i = Vk(n), a = Fk(this[Xd], i);
  a.timesInvoked++, a.data.callback && (a.data = { ...a.data, ...a.data.callback(n) });
  const { data: { statusCode: t, data: d, headers: r, trailers: o, error: s }, delay: A, persist: l } = a, { timesInvoked: m, times: u } = a;
  if (a.consumed = !l && m >= u, a.pending = m < u, s !== null)
    return dl(this[Xd], i), e.onError(s), !0;
  typeof A == "number" && A > 0 ? setTimeout(() => {
    c(this[Xd]);
  }, A) : c(this[Xd]);
  function c(g, N = d) {
    const y = Array.isArray(n.headers) ? Sk(n.headers) : n.headers, h = typeof N == "function" ? N({ ...n, headers: y }) : N;
    if (B6(h)) {
      h.then((I) => c(g, I));
      return;
    }
    const E = wk(h), S = rl(r), b = rl(o);
    e.abort = I6, e.onHeaders(t, S, k, Tk(t)), e.onData(Buffer.from(E)), e.onComplete(b), dl(g, i);
  }
  function k() {
  }
  return !0;
}
function w6() {
  const n = this[f6], e = this[E6], i = this[N6];
  return function(t, d) {
    if (n.isMockActive)
      try {
        _k.call(this, t, d);
      } catch (r) {
        if (r instanceof Ra) {
          const o = n[y6]();
          if (o === !1)
            throw new Ra(`${r.message}: subsequent request to origin ${e} was not allowed (net.connect disabled)`);
          if (Rk(o, e))
            i.call(this, t, d);
          else
            throw new Ra(`${r.message}: subsequent request to origin ${e} was not allowed (net.connect is not enabled for this origin)`);
        } else
          throw r;
      }
    else
      i.call(this, t, d);
  };
}
function Rk(n, e) {
  const i = new URL(e);
  return n === !0 ? !0 : !!(Array.isArray(n) && n.some((a) => Zn(a, i.host)));
}
function F6(n) {
  if (n) {
    const { agent: e, ...i } = n;
    return i;
  }
}
var Pr = {
  getResponseData: wk,
  getMockDispatch: Fk,
  addMockDispatch: S6,
  deleteMockDispatch: dl,
  buildKey: Vk,
  generateKeyValues: rl,
  matchValue: Zn,
  getResponse: D6,
  getStatusText: Tk,
  mockDispatch: _k,
  buildMockDispatch: w6,
  checkNetConnect: Rk,
  buildMockOptions: F6,
  getHeaderByName: Qk
}, Or = {};
const { getResponseData: V6, buildKey: T6, addMockDispatch: to } = Pr, {
  kDispatches: $d,
  kDispatchKey: er,
  kDefaultHeaders: ro,
  kDefaultTrailers: so,
  kContentLength: oo,
  kMockDispatch: ir
} = hd, { InvalidArgumentError: cn } = Le, { buildURL: _6 } = Ie;
class hr {
  constructor(e) {
    this[ir] = e;
  }
  /**
   * Delay a reply by a set amount in ms.
   */
  delay(e) {
    if (typeof e != "number" || !Number.isInteger(e) || e <= 0)
      throw new cn("waitInMs must be a valid integer > 0");
    return this[ir].delay = e, this;
  }
  /**
   * For a defined reply, never mark as consumed.
   */
  persist() {
    return this[ir].persist = !0, this;
  }
  /**
   * Allow one to define a reply for a set amount of matching requests.
   */
  times(e) {
    if (typeof e != "number" || !Number.isInteger(e) || e <= 0)
      throw new cn("repeatTimes must be a valid integer > 0");
    return this[ir].times = e, this;
  }
}
let R6 = class {
  constructor(e, i) {
    if (typeof e != "object")
      throw new cn("opts must be an object");
    if (typeof e.path > "u")
      throw new cn("opts.path must be defined");
    if (typeof e.method > "u" && (e.method = "GET"), typeof e.path == "string")
      if (e.query)
        e.path = _6(e.path, e.query);
      else {
        const a = new URL(e.path, "data://");
        e.path = a.pathname + a.search;
      }
    typeof e.method == "string" && (e.method = e.method.toUpperCase()), this[er] = T6(e), this[$d] = i, this[ro] = {}, this[so] = {}, this[oo] = !1;
  }
  createMockScopeDispatchData(e, i, a = {}) {
    const t = V6(i), d = this[oo] ? { "content-length": t.length } : {}, r = { ...this[ro], ...d, ...a.headers }, o = { ...this[so], ...a.trailers };
    return { statusCode: e, data: i, headers: r, trailers: o };
  }
  validateReplyParameters(e, i, a) {
    if (typeof e > "u")
      throw new cn("statusCode must be defined");
    if (typeof i > "u")
      throw new cn("data must be defined");
    if (typeof a != "object")
      throw new cn("responseOptions must be an object");
  }
  /**
   * Mock an undici request with a defined reply.
   */
  reply(e) {
    if (typeof e == "function") {
      const o = (A) => {
        const l = e(A);
        if (typeof l != "object")
          throw new cn("reply options callback must return an object");
        const { statusCode: m, data: u = "", responseOptions: c = {} } = l;
        return this.validateReplyParameters(m, u, c), {
          ...this.createMockScopeDispatchData(m, u, c)
        };
      }, s = to(this[$d], this[er], o);
      return new hr(s);
    }
    const [i, a = "", t = {}] = [...arguments];
    this.validateReplyParameters(i, a, t);
    const d = this.createMockScopeDispatchData(i, a, t), r = to(this[$d], this[er], d);
    return new hr(r);
  }
  /**
   * Mock an undici request with a defined error.
   */
  replyWithError(e) {
    if (typeof e > "u")
      throw new cn("error must be defined");
    const i = to(this[$d], this[er], { error: e });
    return new hr(i);
  }
  /**
   * Set default reply headers on the interceptor for subsequent replies
   */
  defaultReplyHeaders(e) {
    if (typeof e > "u")
      throw new cn("headers must be defined");
    return this[ro] = e, this;
  }
  /**
   * Set default reply trailers on the interceptor for subsequent replies
   */
  defaultReplyTrailers(e) {
    if (typeof e > "u")
      throw new cn("trailers must be defined");
    return this[so] = e, this;
  }
  /**
   * Set reply content length header for replies on the interceptor
   */
  replyContentLength() {
    return this[oo] = !0, this;
  }
};
Or.MockInterceptor = R6;
Or.MockScope = hr;
const { promisify: U6 } = J, L6 = Lr, { buildMockDispatch: q6 } = Pr, {
  kDispatches: Wm,
  kMockAgent: zm,
  kClose: Zm,
  kOriginalClose: Km,
  kOrigin: Xm,
  kOriginalDispatch: P6,
  kConnected: lo
} = hd, { MockInterceptor: O6 } = Or, $m = Ye, { InvalidArgumentError: G6 } = Le;
let M6 = class extends L6 {
  constructor(e, i) {
    if (super(e, i), !i || !i.agent || typeof i.agent.dispatch != "function")
      throw new G6("Argument opts.agent must implement Agent");
    this[zm] = i.agent, this[Xm] = e, this[Wm] = [], this[lo] = 1, this[P6] = this.dispatch, this[Km] = this.close.bind(this), this.dispatch = q6.call(this), this.close = this[Zm];
  }
  get [$m.kConnected]() {
    return this[lo];
  }
  /**
   * Sets up the base interceptor for mocking replies from undici.
   */
  intercept(e) {
    return new O6(e, this[Wm]);
  }
  async [Zm]() {
    await U6(this[Km])(), this[lo] = 0, this[zm][$m.kClients].delete(this[Xm]);
  }
};
var Uk = M6;
const { promisify: x6 } = J, Y6 = vd, { buildMockDispatch: J6 } = Pr, {
  kDispatches: eu,
  kMockAgent: iu,
  kClose: nu,
  kOriginalClose: au,
  kOrigin: tu,
  kOriginalDispatch: H6,
  kConnected: Ao
} = hd, { MockInterceptor: j6 } = Or, du = Ye, { InvalidArgumentError: W6 } = Le;
let z6 = class extends Y6 {
  constructor(e, i) {
    if (super(e, i), !i || !i.agent || typeof i.agent.dispatch != "function")
      throw new W6("Argument opts.agent must implement Agent");
    this[iu] = i.agent, this[tu] = e, this[eu] = [], this[Ao] = 1, this[H6] = this.dispatch, this[au] = this.close.bind(this), this.dispatch = J6.call(this), this.close = this[nu];
  }
  get [du.kConnected]() {
    return this[Ao];
  }
  /**
   * Sets up the base interceptor for mocking replies from undici.
   */
  intercept(e) {
    return new j6(e, this[eu]);
  }
  async [nu]() {
    await x6(this[au])(), this[Ao] = 0, this[iu][du.kClients].delete(this[tu]);
  }
};
var Lk = z6;
const Z6 = {
  pronoun: "it",
  is: "is",
  was: "was",
  this: "this"
}, K6 = {
  pronoun: "they",
  is: "are",
  was: "were",
  this: "these"
};
var X6 = class {
  constructor(e, i) {
    this.singular = e, this.plural = i;
  }
  pluralize(e) {
    const i = e === 1, a = i ? Z6 : K6, t = i ? this.singular : this.plural;
    return { ...a, count: e, noun: t };
  }
};
const { Transform: $6 } = J, { Console: ey } = J;
var iy = class {
  constructor({ disableColors: e } = {}) {
    this.transform = new $6({
      transform(i, a, t) {
        t(null, i);
      }
    }), this.logger = new ey({
      stdout: this.transform,
      inspectOptions: {
        colors: !e && !process.env.CI
      }
    });
  }
  format(e) {
    const i = e.map(
      ({ method: a, path: t, data: { statusCode: d }, persist: r, times: o, timesInvoked: s, origin: A }) => ({
        Method: a,
        Origin: A,
        Path: t,
        "Status code": d,
        Persistent: r ? "✅" : "❌",
        Invocations: s,
        Remaining: r ? 1 / 0 : o - s
      })
    );
    return this.logger.table(i), this.transform.read().toString();
  }
};
const { kClients: Fa } = Ye, ny = qr, {
  kAgent: mo,
  kMockAgentSet: nr,
  kMockAgentGet: ru,
  kDispatches: uo,
  kIsMockActive: ar,
  kNetConnect: Va,
  kGetNetConnect: ay,
  kOptions: tr,
  kFactory: dr
} = hd, ty = Uk, dy = Lk, { matchValue: ry, buildMockOptions: sy } = Pr, { InvalidArgumentError: su, UndiciError: oy } = Le, ly = Ql, Ay = X6, my = iy;
class uy {
  constructor(e) {
    this.value = e;
  }
  deref() {
    return this.value;
  }
}
let py = class extends ly {
  constructor(e) {
    if (super(e), this[Va] = !0, this[ar] = !0, e && e.agent && typeof e.agent.dispatch != "function")
      throw new su("Argument opts.agent must implement Agent");
    const i = e && e.agent ? e.agent : new ny(e);
    this[mo] = i, this[Fa] = i[Fa], this[tr] = sy(e);
  }
  get(e) {
    let i = this[ru](e);
    return i || (i = this[dr](e), this[nr](e, i)), i;
  }
  dispatch(e, i) {
    return this.get(e.origin), this[mo].dispatch(e, i);
  }
  async close() {
    await this[mo].close(), this[Fa].clear();
  }
  deactivate() {
    this[ar] = !1;
  }
  activate() {
    this[ar] = !0;
  }
  enableNetConnect(e) {
    if (typeof e == "string" || typeof e == "function" || e instanceof RegExp)
      Array.isArray(this[Va]) ? this[Va].push(e) : this[Va] = [e];
    else if (typeof e > "u")
      this[Va] = !0;
    else
      throw new su("Unsupported matcher. Must be one of String|Function|RegExp.");
  }
  disableNetConnect() {
    this[Va] = !1;
  }
  // This is required to bypass issues caused by using global symbols - see:
  // https://github.com/nodejs/undici/issues/1447
  get isMockActive() {
    return this[ar];
  }
  [nr](e, i) {
    this[Fa].set(e, new uy(i));
  }
  [dr](e) {
    const i = Object.assign({ agent: this }, this[tr]);
    return this[tr] && this[tr].connections === 1 ? new ty(e, i) : new dy(e, i);
  }
  [ru](e) {
    const i = this[Fa].get(e);
    if (i)
      return i.deref();
    if (typeof e != "string") {
      const a = this[dr]("http://localhost:9999");
      return this[nr](e, a), a;
    }
    for (const [a, t] of Array.from(this[Fa])) {
      const d = t.deref();
      if (d && typeof a != "string" && ry(a, e)) {
        const r = this[dr](e);
        return this[nr](e, r), r[uo] = d[uo], r;
      }
    }
  }
  [ay]() {
    return this[Va];
  }
  pendingInterceptors() {
    const e = this[Fa];
    return Array.from(e.entries()).flatMap(([i, a]) => a.deref()[uo].map((t) => ({ ...t, origin: i }))).filter(({ pending: i }) => i);
  }
  assertNoPendingInterceptors({ pendingInterceptorsFormatter: e = new my() } = {}) {
    const i = this.pendingInterceptors();
    if (i.length === 0)
      return;
    const a = new Ay("interceptor", "interceptors").pluralize(i.length);
    throw new oy(`
${a.count} ${a.noun} ${a.is} pending:

${e.format(i)}
`.trim());
  }
};
var cy = py;
const { kProxy: ky, kClose: vy, kDestroy: gy, kInterceptors: hy } = Ye, { URL: ou } = J, lu = qr, fy = vd, Ny = _r, { InvalidArgumentError: sd, RequestAbortedError: Ey } = Le, Au = Rr, Kt = Symbol("proxy agent"), rr = Symbol("proxy client"), Xt = Symbol("proxy headers"), po = Symbol("request tls settings"), yy = Symbol("proxy tls settings"), mu = Symbol("connect endpoint function");
function by(n) {
  return n === "https:" ? 443 : 80;
}
function Iy(n) {
  if (typeof n == "string" && (n = { uri: n }), !n || !n.uri)
    throw new sd("Proxy opts.uri is mandatory");
  return {
    uri: n.uri,
    protocol: n.protocol || "https"
  };
}
function Cy(n, e) {
  return new fy(n, e);
}
let By = class extends Ny {
  constructor(e) {
    if (super(e), this[ky] = Iy(e), this[Kt] = new lu(e), this[hy] = e.interceptors && e.interceptors.ProxyAgent && Array.isArray(e.interceptors.ProxyAgent) ? e.interceptors.ProxyAgent : [], typeof e == "string" && (e = { uri: e }), !e || !e.uri)
      throw new sd("Proxy opts.uri is mandatory");
    const { clientFactory: i = Cy } = e;
    if (typeof i != "function")
      throw new sd("Proxy opts.clientFactory must be a function.");
    this[po] = e.requestTls, this[yy] = e.proxyTls, this[Xt] = e.headers || {};
    const a = new ou(e.uri), { origin: t, port: d, host: r, username: o, password: s } = a;
    if (e.auth && e.token)
      throw new sd("opts.auth cannot be used in combination with opts.token");
    e.auth ? this[Xt]["proxy-authorization"] = `Basic ${e.auth}` : e.token ? this[Xt]["proxy-authorization"] = e.token : o && s && (this[Xt]["proxy-authorization"] = `Basic ${Buffer.from(`${decodeURIComponent(o)}:${decodeURIComponent(s)}`).toString("base64")}`);
    const A = Au({ ...e.proxyTls });
    this[mu] = Au({ ...e.requestTls }), this[rr] = i(a, { connect: A }), this[Kt] = new lu({
      ...e,
      connect: async (l, m) => {
        let u = l.host;
        l.port || (u += `:${by(l.protocol)}`);
        try {
          const { socket: c, statusCode: k } = await this[rr].connect({
            origin: t,
            port: d,
            path: u,
            signal: l.signal,
            headers: {
              ...this[Xt],
              host: r
            }
          });
          if (k !== 200 && (c.on("error", () => {
          }).destroy(), m(new Ey(`Proxy response (${k}) !== 200 when HTTP Tunneling`))), l.protocol !== "https:") {
            m(null, c);
            return;
          }
          let g;
          this[po] ? g = this[po].servername : g = l.servername, this[mu]({ ...l, servername: g, httpSocket: c }, m);
        } catch (c) {
          m(c);
        }
      }
    });
  }
  dispatch(e, i) {
    const { host: a } = new ou(e.origin), t = Qy(e.headers);
    return Sy(t), this[Kt].dispatch(
      {
        ...e,
        headers: {
          ...t,
          host: a
        }
      },
      i
    );
  }
  async [vy]() {
    await this[Kt].close(), await this[rr].close();
  }
  async [gy]() {
    await this[Kt].destroy(), await this[rr].destroy();
  }
};
function Qy(n) {
  if (Array.isArray(n)) {
    const e = {};
    for (let i = 0; i < n.length; i += 2)
      e[n[i]] = n[i + 1];
    return e;
  }
  return n;
}
function Sy(n) {
  if (n && Object.keys(n).find((i) => i.toLowerCase() === "proxy-authorization"))
    throw new sd("Proxy-Authorization should be sent in ProxyAgent constructor");
}
var Dy = By;
const Ta = J, { kRetryHandlerDefaultRetry: uu } = Ye, { RequestRetryError: sr } = Le, { isDisturbed: pu, parseHeaders: wy, parseRangeHeader: cu } = Ie;
function Fy(n) {
  const e = Date.now();
  return new Date(n).getTime() - e;
}
let Vy = class qk {
  constructor(e, i) {
    const { retryOptions: a, ...t } = e, {
      // Retry scoped
      retry: d,
      maxRetries: r,
      maxTimeout: o,
      minTimeout: s,
      timeoutFactor: A,
      // Response scoped
      methods: l,
      errorCodes: m,
      retryAfter: u,
      statusCodes: c
    } = a ?? {};
    this.dispatch = i.dispatch, this.handler = i.handler, this.opts = t, this.abort = null, this.aborted = !1, this.retryOpts = {
      retry: d ?? qk[uu],
      retryAfter: u ?? !0,
      maxTimeout: o ?? 30 * 1e3,
      // 30s,
      timeout: s ?? 500,
      // .5s
      timeoutFactor: A ?? 2,
      maxRetries: r ?? 5,
      // What errors we should retry
      methods: l ?? ["GET", "HEAD", "OPTIONS", "PUT", "DELETE", "TRACE"],
      // Indicates which errors to retry
      statusCodes: c ?? [500, 502, 503, 504, 429],
      // List of errors to retry
      errorCodes: m ?? [
        "ECONNRESET",
        "ECONNREFUSED",
        "ENOTFOUND",
        "ENETDOWN",
        "ENETUNREACH",
        "EHOSTDOWN",
        "EHOSTUNREACH",
        "EPIPE"
      ]
    }, this.retryCount = 0, this.start = 0, this.end = null, this.etag = null, this.resume = null, this.handler.onConnect((k) => {
      this.aborted = !0, this.abort ? this.abort(k) : this.reason = k;
    });
  }
  onRequestSent() {
    this.handler.onRequestSent && this.handler.onRequestSent();
  }
  onUpgrade(e, i, a) {
    this.handler.onUpgrade && this.handler.onUpgrade(e, i, a);
  }
  onConnect(e) {
    this.aborted ? e(this.reason) : this.abort = e;
  }
  onBodySent(e) {
    if (this.handler.onBodySent)
      return this.handler.onBodySent(e);
  }
  static [uu](e, { state: i, opts: a }, t) {
    const { statusCode: d, code: r, headers: o } = e, { method: s, retryOptions: A } = a, {
      maxRetries: l,
      timeout: m,
      maxTimeout: u,
      timeoutFactor: c,
      statusCodes: k,
      errorCodes: g,
      methods: N
    } = A;
    let { counter: y, currentTimeout: h } = i;
    if (h = h != null && h > 0 ? h : m, r && r !== "UND_ERR_REQ_RETRY" && r !== "UND_ERR_SOCKET" && !g.includes(r)) {
      t(e);
      return;
    }
    if (Array.isArray(N) && !N.includes(s)) {
      t(e);
      return;
    }
    if (d != null && Array.isArray(k) && !k.includes(d)) {
      t(e);
      return;
    }
    if (y > l) {
      t(e);
      return;
    }
    let E = o != null && o["retry-after"];
    E && (E = Number(E), E = isNaN(E) ? Fy(E) : E * 1e3);
    const S = E > 0 ? Math.min(E, u) : Math.min(h * c ** y, u);
    i.currentTimeout = S, setTimeout(() => t(null), S);
  }
  onHeaders(e, i, a, t) {
    const d = wy(i);
    if (this.retryCount += 1, e >= 300)
      return this.abort(
        new sr("Request failed", e, {
          headers: d,
          count: this.retryCount
        })
      ), !1;
    if (this.resume != null) {
      if (this.resume = null, e !== 206)
        return !0;
      const o = cu(d["content-range"]);
      if (!o)
        return this.abort(
          new sr("Content-Range mismatch", e, {
            headers: d,
            count: this.retryCount
          })
        ), !1;
      if (this.etag != null && this.etag !== d.etag)
        return this.abort(
          new sr("ETag mismatch", e, {
            headers: d,
            count: this.retryCount
          })
        ), !1;
      const { start: s, size: A, end: l = A } = o;
      return Ta(this.start === s, "content-range mismatch"), Ta(this.end == null || this.end === l, "content-range mismatch"), this.resume = a, !0;
    }
    if (this.end == null) {
      if (e === 206) {
        const o = cu(d["content-range"]);
        if (o == null)
          return this.handler.onHeaders(
            e,
            i,
            a,
            t
          );
        const { start: s, size: A, end: l = A } = o;
        Ta(
          s != null && Number.isFinite(s) && this.start !== s,
          "content-range mismatch"
        ), Ta(Number.isFinite(s)), Ta(
          l != null && Number.isFinite(l) && this.end !== l,
          "invalid content-length"
        ), this.start = s, this.end = l;
      }
      if (this.end == null) {
        const o = d["content-length"];
        this.end = o != null ? Number(o) : null;
      }
      return Ta(Number.isFinite(this.start)), Ta(
        this.end == null || Number.isFinite(this.end),
        "invalid content-length"
      ), this.resume = a, this.etag = d.etag != null ? d.etag : null, this.handler.onHeaders(
        e,
        i,
        a,
        t
      );
    }
    const r = new sr("Request failed", e, {
      headers: d,
      count: this.retryCount
    });
    return this.abort(r), !1;
  }
  onData(e) {
    return this.start += e.length, this.handler.onData(e);
  }
  onComplete(e) {
    return this.retryCount = 0, this.handler.onComplete(e);
  }
  onError(e) {
    if (this.aborted || pu(this.opts.body))
      return this.handler.onError(e);
    this.retryOpts.retry(
      e,
      {
        state: { counter: this.retryCount++, currentTimeout: this.retryAfter },
        opts: { retryOptions: this.retryOpts, ...this.opts }
      },
      i.bind(this)
    );
    function i(a) {
      if (a != null || this.aborted || pu(this.opts.body))
        return this.handler.onError(a);
      this.start !== 0 && (this.opts = {
        ...this.opts,
        headers: {
          ...this.opts.headers,
          range: `bytes=${this.start}-${this.end ?? ""}`
        }
      });
      try {
        this.dispatch(this.opts, this);
      } catch (t) {
        this.handler.onError(t);
      }
    }
  }
};
var Ty = Vy;
const Pk = Symbol.for("undici.globalDispatcher.1"), { InvalidArgumentError: _y } = Le, Ry = qr;
Gk() === void 0 && Ok(new Ry());
function Ok(n) {
  if (!n || typeof n.dispatch != "function")
    throw new _y("Argument agent must implement Agent");
  Object.defineProperty(globalThis, Pk, {
    value: n,
    writable: !0,
    enumerable: !1,
    configurable: !1
  });
}
function Gk() {
  return globalThis[Pk];
}
var fd = {
  setGlobalDispatcher: Ok,
  getGlobalDispatcher: Gk
}, Uy = class {
  constructor(e) {
    this.handler = e;
  }
  onConnect(...e) {
    return this.handler.onConnect(...e);
  }
  onError(...e) {
    return this.handler.onError(...e);
  }
  onUpgrade(...e) {
    return this.handler.onUpgrade(...e);
  }
  onHeaders(...e) {
    return this.handler.onHeaders(...e);
  }
  onData(...e) {
    return this.handler.onData(...e);
  }
  onComplete(...e) {
    return this.handler.onComplete(...e);
  }
  onBodySent(...e) {
    return this.handler.onBodySent(...e);
  }
}, co, ku;
function Dt() {
  if (ku)
    return co;
  ku = 1;
  const { kHeadersList: n, kConstruct: e } = Ye, { kGuard: i } = ya(), { kEnumerableProperty: a } = Ie, {
    makeIterator: t,
    isValidHeaderName: d,
    isValidHeaderValue: r
  } = kn(), { webidl: o } = Mi(), s = J, A = Symbol("headers map"), l = Symbol("headers map sorted");
  function m(y) {
    return y === 10 || y === 13 || y === 9 || y === 32;
  }
  function u(y) {
    let h = 0, E = y.length;
    for (; E > h && m(y.charCodeAt(E - 1)); )
      --E;
    for (; E > h && m(y.charCodeAt(h)); )
      ++h;
    return h === 0 && E === y.length ? y : y.substring(h, E);
  }
  function c(y, h) {
    if (Array.isArray(h))
      for (let E = 0; E < h.length; ++E) {
        const S = h[E];
        if (S.length !== 2)
          throw o.errors.exception({
            header: "Headers constructor",
            message: `expected name/value pair to be length 2, found ${S.length}.`
          });
        k(y, S[0], S[1]);
      }
    else if (typeof h == "object" && h !== null) {
      const E = Object.keys(h);
      for (let S = 0; S < E.length; ++S)
        k(y, E[S], h[E[S]]);
    } else
      throw o.errors.conversionFailed({
        prefix: "Headers constructor",
        argument: "Argument 1",
        types: ["sequence<sequence<ByteString>>", "record<ByteString, ByteString>"]
      });
  }
  function k(y, h, E) {
    if (E = u(E), d(h)) {
      if (!r(E))
        throw o.errors.invalidArgument({
          prefix: "Headers.append",
          value: E,
          type: "header value"
        });
    } else
      throw o.errors.invalidArgument({
        prefix: "Headers.append",
        value: h,
        type: "header name"
      });
    if (y[i] === "immutable")
      throw new TypeError("immutable");
    return y[i], y[n].append(h, E);
  }
  class g {
    constructor(h) {
      /** @type {[string, string][]|null} */
      QA(this, "cookies", null);
      h instanceof g ? (this[A] = new Map(h[A]), this[l] = h[l], this.cookies = h.cookies === null ? null : [...h.cookies]) : (this[A] = new Map(h), this[l] = null);
    }
    // https://fetch.spec.whatwg.org/#header-list-contains
    contains(h) {
      return h = h.toLowerCase(), this[A].has(h);
    }
    clear() {
      this[A].clear(), this[l] = null, this.cookies = null;
    }
    // https://fetch.spec.whatwg.org/#concept-header-list-append
    append(h, E) {
      this[l] = null;
      const S = h.toLowerCase(), b = this[A].get(S);
      if (b) {
        const I = S === "cookie" ? "; " : ", ";
        this[A].set(S, {
          name: b.name,
          value: `${b.value}${I}${E}`
        });
      } else
        this[A].set(S, { name: h, value: E });
      S === "set-cookie" && (this.cookies ?? (this.cookies = []), this.cookies.push(E));
    }
    // https://fetch.spec.whatwg.org/#concept-header-list-set
    set(h, E) {
      this[l] = null;
      const S = h.toLowerCase();
      S === "set-cookie" && (this.cookies = [E]), this[A].set(S, { name: h, value: E });
    }
    // https://fetch.spec.whatwg.org/#concept-header-list-delete
    delete(h) {
      this[l] = null, h = h.toLowerCase(), h === "set-cookie" && (this.cookies = null), this[A].delete(h);
    }
    // https://fetch.spec.whatwg.org/#concept-header-list-get
    get(h) {
      const E = this[A].get(h.toLowerCase());
      return E === void 0 ? null : E.value;
    }
    *[Symbol.iterator]() {
      for (const [h, { value: E }] of this[A])
        yield [h, E];
    }
    get entries() {
      const h = {};
      if (this[A].size)
        for (const { name: E, value: S } of this[A].values())
          h[E] = S;
      return h;
    }
  }
  class N {
    constructor(h = void 0) {
      h !== e && (this[n] = new g(), this[i] = "none", h !== void 0 && (h = o.converters.HeadersInit(h), c(this, h)));
    }
    // https://fetch.spec.whatwg.org/#dom-headers-append
    append(h, E) {
      return o.brandCheck(this, N), o.argumentLengthCheck(arguments, 2, { header: "Headers.append" }), h = o.converters.ByteString(h), E = o.converters.ByteString(E), k(this, h, E);
    }
    // https://fetch.spec.whatwg.org/#dom-headers-delete
    delete(h) {
      if (o.brandCheck(this, N), o.argumentLengthCheck(arguments, 1, { header: "Headers.delete" }), h = o.converters.ByteString(h), !d(h))
        throw o.errors.invalidArgument({
          prefix: "Headers.delete",
          value: h,
          type: "header name"
        });
      if (this[i] === "immutable")
        throw new TypeError("immutable");
      this[i], this[n].contains(h) && this[n].delete(h);
    }
    // https://fetch.spec.whatwg.org/#dom-headers-get
    get(h) {
      if (o.brandCheck(this, N), o.argumentLengthCheck(arguments, 1, { header: "Headers.get" }), h = o.converters.ByteString(h), !d(h))
        throw o.errors.invalidArgument({
          prefix: "Headers.get",
          value: h,
          type: "header name"
        });
      return this[n].get(h);
    }
    // https://fetch.spec.whatwg.org/#dom-headers-has
    has(h) {
      if (o.brandCheck(this, N), o.argumentLengthCheck(arguments, 1, { header: "Headers.has" }), h = o.converters.ByteString(h), !d(h))
        throw o.errors.invalidArgument({
          prefix: "Headers.has",
          value: h,
          type: "header name"
        });
      return this[n].contains(h);
    }
    // https://fetch.spec.whatwg.org/#dom-headers-set
    set(h, E) {
      if (o.brandCheck(this, N), o.argumentLengthCheck(arguments, 2, { header: "Headers.set" }), h = o.converters.ByteString(h), E = o.converters.ByteString(E), E = u(E), d(h)) {
        if (!r(E))
          throw o.errors.invalidArgument({
            prefix: "Headers.set",
            value: E,
            type: "header value"
          });
      } else
        throw o.errors.invalidArgument({
          prefix: "Headers.set",
          value: h,
          type: "header name"
        });
      if (this[i] === "immutable")
        throw new TypeError("immutable");
      this[i], this[n].set(h, E);
    }
    // https://fetch.spec.whatwg.org/#dom-headers-getsetcookie
    getSetCookie() {
      o.brandCheck(this, N);
      const h = this[n].cookies;
      return h ? [...h] : [];
    }
    // https://fetch.spec.whatwg.org/#concept-header-list-sort-and-combine
    get [l]() {
      if (this[n][l])
        return this[n][l];
      const h = [], E = [...this[n]].sort((b, I) => b[0] < I[0] ? -1 : 1), S = this[n].cookies;
      for (let b = 0; b < E.length; ++b) {
        const [I, D] = E[b];
        if (I === "set-cookie")
          for (let B = 0; B < S.length; ++B)
            h.push([I, S[B]]);
        else
          s(D !== null), h.push([I, D]);
      }
      return this[n][l] = h, h;
    }
    keys() {
      if (o.brandCheck(this, N), this[i] === "immutable") {
        const h = this[l];
        return t(
          () => h,
          "Headers",
          "key"
        );
      }
      return t(
        () => [...this[l].values()],
        "Headers",
        "key"
      );
    }
    values() {
      if (o.brandCheck(this, N), this[i] === "immutable") {
        const h = this[l];
        return t(
          () => h,
          "Headers",
          "value"
        );
      }
      return t(
        () => [...this[l].values()],
        "Headers",
        "value"
      );
    }
    entries() {
      if (o.brandCheck(this, N), this[i] === "immutable") {
        const h = this[l];
        return t(
          () => h,
          "Headers",
          "key+value"
        );
      }
      return t(
        () => [...this[l].values()],
        "Headers",
        "key+value"
      );
    }
    /**
     * @param {(value: string, key: string, self: Headers) => void} callbackFn
     * @param {unknown} thisArg
     */
    forEach(h, E = globalThis) {
      if (o.brandCheck(this, N), o.argumentLengthCheck(arguments, 1, { header: "Headers.forEach" }), typeof h != "function")
        throw new TypeError(
          "Failed to execute 'forEach' on 'Headers': parameter 1 is not of type 'Function'."
        );
      for (const [S, b] of this)
        h.apply(E, [b, S, this]);
    }
    [Symbol.for("nodejs.util.inspect.custom")]() {
      return o.brandCheck(this, N), this[n];
    }
  }
  return N.prototype[Symbol.iterator] = N.prototype.entries, Object.defineProperties(N.prototype, {
    append: a,
    delete: a,
    get: a,
    has: a,
    set: a,
    getSetCookie: a,
    keys: a,
    values: a,
    entries: a,
    forEach: a,
    [Symbol.iterator]: { enumerable: !1 },
    [Symbol.toStringTag]: {
      value: "Headers",
      configurable: !0
    }
  }), o.converters.HeadersInit = function(y) {
    if (o.util.Type(y) === "Object")
      return y[Symbol.iterator] ? o.converters["sequence<sequence<ByteString>>"](y) : o.converters["record<ByteString, ByteString>"](y);
    throw o.errors.conversionFailed({
      prefix: "Headers constructor",
      argument: "Argument 1",
      types: ["sequence<sequence<ByteString>>", "record<ByteString, ByteString>"]
    });
  }, co = {
    fill: c,
    Headers: N,
    HeadersList: g
  }, co;
}
var ko, vu;
function Vl() {
  if (vu)
    return ko;
  vu = 1;
  const { Headers: n, HeadersList: e, fill: i } = Dt(), { extractBody: a, cloneBody: t, mixinBody: d } = Tr(), r = Ie, { kEnumerableProperty: o } = r, {
    isValidReasonPhrase: s,
    isCancelled: A,
    isAborted: l,
    isBlobLike: m,
    serializeJavascriptValueToJSONString: u,
    isErrorLike: c,
    isomorphicEncode: k
  } = kn(), {
    redirectStatusSet: g,
    nullBodyStatus: N,
    DOMException: y
  } = Oa(), { kState: h, kHeaders: E, kGuard: S, kRealm: b } = ya(), { webidl: I } = Mi(), { FormData: D } = Bl(), { getGlobalOrigin: B } = kd(), { URLSerializer: q } = Fn(), { kHeadersList: v, kConstruct: Q } = Ye, _ = J, { types: M } = J, se = globalThis.ReadableStream || J.ReadableStream, U = new TextEncoder("utf-8");
  class G {
    // Creates network error Response.
    static error() {
      const P = { settingsObject: {} }, O = new G();
      return O[h] = W(), O[b] = P, O[E][v] = O[h].headersList, O[E][S] = "immutable", O[E][b] = P, O;
    }
    // https://fetch.spec.whatwg.org/#dom-response-json
    static json(P, O = {}) {
      I.argumentLengthCheck(arguments, 1, { header: "Response.json" }), O !== null && (O = I.converters.ResponseInit(O));
      const Z = U.encode(
        u(P)
      ), ie = a(Z), ne = { settingsObject: {} }, z = new G();
      return z[b] = ne, z[E][S] = "response", z[E][b] = ne, F(z, O, { body: ie[0], type: "application/json" }), z;
    }
    // Creates a redirect Response that redirects to url with status status.
    static redirect(P, O = 302) {
      const Z = { settingsObject: {} };
      I.argumentLengthCheck(arguments, 1, { header: "Response.redirect" }), P = I.converters.USVString(P), O = I.converters["unsigned short"](O);
      let ie;
      try {
        ie = new URL(P, B());
      } catch (pe) {
        throw Object.assign(new TypeError("Failed to parse URL from " + P), {
          cause: pe
        });
      }
      if (!g.has(O))
        throw new RangeError("Invalid status code " + O);
      const ne = new G();
      ne[b] = Z, ne[E][S] = "immutable", ne[E][b] = Z, ne[h].status = O;
      const z = k(q(ie));
      return ne[h].headersList.append("location", z), ne;
    }
    // https://fetch.spec.whatwg.org/#dom-response
    constructor(P = null, O = {}) {
      P !== null && (P = I.converters.BodyInit(P)), O = I.converters.ResponseInit(O), this[b] = { settingsObject: {} }, this[h] = $({}), this[E] = new n(Q), this[E][S] = "response", this[E][v] = this[h].headersList, this[E][b] = this[b];
      let Z = null;
      if (P != null) {
        const [ie, ne] = a(P);
        Z = { body: ie, type: ne };
      }
      F(this, O, Z);
    }
    // Returns response’s type, e.g., "cors".
    get type() {
      return I.brandCheck(this, G), this[h].type;
    }
    // Returns response’s URL, if it has one; otherwise the empty string.
    get url() {
      I.brandCheck(this, G);
      const P = this[h].urlList, O = P[P.length - 1] ?? null;
      return O === null ? "" : q(O, !0);
    }
    // Returns whether response was obtained through a redirect.
    get redirected() {
      return I.brandCheck(this, G), this[h].urlList.length > 1;
    }
    // Returns response’s status.
    get status() {
      return I.brandCheck(this, G), this[h].status;
    }
    // Returns whether response’s status is an ok status.
    get ok() {
      return I.brandCheck(this, G), this[h].status >= 200 && this[h].status <= 299;
    }
    // Returns response’s status message.
    get statusText() {
      return I.brandCheck(this, G), this[h].statusText;
    }
    // Returns response’s headers as Headers.
    get headers() {
      return I.brandCheck(this, G), this[E];
    }
    get body() {
      return I.brandCheck(this, G), this[h].body ? this[h].body.stream : null;
    }
    get bodyUsed() {
      return I.brandCheck(this, G), !!this[h].body && r.isDisturbed(this[h].body.stream);
    }
    // Returns a clone of response.
    clone() {
      if (I.brandCheck(this, G), this.bodyUsed || this.body && this.body.locked)
        throw I.errors.exception({
          header: "Response.clone",
          message: "Body has already been consumed."
        });
      const P = H(this[h]), O = new G();
      return O[h] = P, O[b] = this[b], O[E][v] = P.headersList, O[E][S] = this[E][S], O[E][b] = this[E][b], O;
    }
  }
  d(G), Object.defineProperties(G.prototype, {
    type: o,
    url: o,
    status: o,
    ok: o,
    redirected: o,
    statusText: o,
    headers: o,
    clone: o,
    body: o,
    bodyUsed: o,
    [Symbol.toStringTag]: {
      value: "Response",
      configurable: !0
    }
  }), Object.defineProperties(G, {
    json: o,
    redirect: o,
    error: o
  });
  function H(V) {
    if (V.internalResponse)
      return j(
        H(V.internalResponse),
        V.type
      );
    const P = $({ ...V, body: null });
    return V.body != null && (P.body = t(V.body)), P;
  }
  function $(V) {
    return {
      aborted: !1,
      rangeRequested: !1,
      timingAllowPassed: !1,
      requestIncludesCredentials: !1,
      type: "default",
      status: 200,
      timingInfo: null,
      cacheState: "",
      statusText: "",
      ...V,
      headersList: V.headersList ? new e(V.headersList) : new e(),
      urlList: V.urlList ? [...V.urlList] : []
    };
  }
  function W(V) {
    const P = c(V);
    return $({
      type: "error",
      status: 0,
      error: P ? V : new Error(V && String(V)),
      aborted: V && V.name === "AbortError"
    });
  }
  function w(V, P) {
    return P = {
      internalResponse: V,
      ...P
    }, new Proxy(V, {
      get(O, Z) {
        return Z in P ? P[Z] : O[Z];
      },
      set(O, Z, ie) {
        return _(!(Z in P)), O[Z] = ie, !0;
      }
    });
  }
  function j(V, P) {
    if (P === "basic")
      return w(V, {
        type: "basic",
        headersList: V.headersList
      });
    if (P === "cors")
      return w(V, {
        type: "cors",
        headersList: V.headersList
      });
    if (P === "opaque")
      return w(V, {
        type: "opaque",
        urlList: Object.freeze([]),
        status: 0,
        statusText: "",
        body: null
      });
    if (P === "opaqueredirect")
      return w(V, {
        type: "opaqueredirect",
        status: 0,
        statusText: "",
        headersList: [],
        body: null
      });
    _(!1);
  }
  function R(V, P = null) {
    return _(A(V)), l(V) ? W(Object.assign(new y("The operation was aborted.", "AbortError"), { cause: P })) : W(Object.assign(new y("Request was cancelled."), { cause: P }));
  }
  function F(V, P, O) {
    if (P.status !== null && (P.status < 200 || P.status > 599))
      throw new RangeError('init["status"] must be in the range of 200 to 599, inclusive.');
    if ("statusText" in P && P.statusText != null && !s(String(P.statusText)))
      throw new TypeError("Invalid statusText");
    if ("status" in P && P.status != null && (V[h].status = P.status), "statusText" in P && P.statusText != null && (V[h].statusText = P.statusText), "headers" in P && P.headers != null && i(V[E], P.headers), O) {
      if (N.includes(V.status))
        throw I.errors.exception({
          header: "Response constructor",
          message: "Invalid response status code " + V.status
        });
      V[h].body = O.body, O.type != null && !V[h].headersList.contains("Content-Type") && V[h].headersList.append("content-type", O.type);
    }
  }
  return I.converters.ReadableStream = I.interfaceConverter(
    se
  ), I.converters.FormData = I.interfaceConverter(
    D
  ), I.converters.URLSearchParams = I.interfaceConverter(
    URLSearchParams
  ), I.converters.XMLHttpRequestBodyInit = function(V) {
    return typeof V == "string" ? I.converters.USVString(V) : m(V) ? I.converters.Blob(V, { strict: !1 }) : M.isArrayBuffer(V) || M.isTypedArray(V) || M.isDataView(V) ? I.converters.BufferSource(V) : r.isFormDataLike(V) ? I.converters.FormData(V, { strict: !1 }) : V instanceof URLSearchParams ? I.converters.URLSearchParams(V) : I.converters.DOMString(V);
  }, I.converters.BodyInit = function(V) {
    return V instanceof se ? I.converters.ReadableStream(V) : V != null && V[Symbol.asyncIterator] ? V : I.converters.XMLHttpRequestBodyInit(V);
  }, I.converters.ResponseInit = I.dictionaryConverter([
    {
      key: "status",
      converter: I.converters["unsigned short"],
      defaultValue: 200
    },
    {
      key: "statusText",
      converter: I.converters.ByteString,
      defaultValue: ""
    },
    {
      key: "headers",
      converter: I.converters.HeadersInit
    }
  ]), ko = {
    makeNetworkError: W,
    makeResponse: $,
    makeAppropriateNetworkError: R,
    filterResponse: j,
    Response: G,
    cloneResponse: H
  }, ko;
}
var vo, gu;
function Gr() {
  if (gu)
    return vo;
  gu = 1;
  const { extractBody: n, mixinBody: e, cloneBody: i } = Tr(), { Headers: a, fill: t, HeadersList: d } = Dt(), { FinalizationRegistry: r } = uk(), o = Ie, {
    isValidHTTPToken: s,
    sameOrigin: A,
    normalizeMethod: l,
    makePolicyContainer: m,
    normalizeMethodRecord: u
  } = kn(), {
    forbiddenMethodsSet: c,
    corsSafeListedMethodsSet: k,
    referrerPolicy: g,
    requestRedirect: N,
    requestMode: y,
    requestCredentials: h,
    requestCache: E,
    requestDuplex: S
  } = Oa(), { kEnumerableProperty: b } = o, { kHeaders: I, kSignal: D, kState: B, kGuard: q, kRealm: v } = ya(), { webidl: Q } = Mi(), { getGlobalOrigin: _ } = kd(), { URLSerializer: M } = Fn(), { kHeadersList: se, kConstruct: U } = Ye, G = J, { getMaxListeners: H, setMaxListeners: $, getEventListeners: W, defaultMaxListeners: w } = J;
  let j = globalThis.TransformStream;
  const R = Symbol("abortController"), F = new r(({ signal: Z, abort: ie }) => {
    Z.removeEventListener("abort", ie);
  });
  class V {
    // https://fetch.spec.whatwg.org/#dom-request
    constructor(ie, ne = {}) {
      var Xa, T;
      if (ie === U)
        return;
      Q.argumentLengthCheck(arguments, 1, { header: "Request constructor" }), ie = Q.converters.RequestInfo(ie), ne = Q.converters.RequestInit(ne), this[v] = {
        settingsObject: {
          baseUrl: _(),
          get origin() {
            var x;
            return (x = this.baseUrl) == null ? void 0 : x.origin;
          },
          policyContainer: m()
        }
      };
      let z = null, pe = null;
      const Be = this[v].settingsObject.baseUrl;
      let ve = null;
      if (typeof ie == "string") {
        let x;
        try {
          x = new URL(ie, Be);
        } catch (te) {
          throw new TypeError("Failed to parse URL from " + ie, { cause: te });
        }
        if (x.username || x.password)
          throw new TypeError(
            "Request cannot be constructed from a URL that includes credentials: " + ie
          );
        z = P({ urlList: [x] }), pe = "cors";
      } else
        G(ie instanceof V), z = ie[B], ve = ie[D];
      const qe = this[v].settingsObject.origin;
      let Qe = "client";
      if (((T = (Xa = z.window) == null ? void 0 : Xa.constructor) == null ? void 0 : T.name) === "EnvironmentSettingsObject" && A(z.window, qe) && (Qe = z.window), ne.window != null)
        throw new TypeError(`'window' option '${Qe}' must be null`);
      "window" in ne && (Qe = "no-window"), z = P({
        // URL request’s URL.
        // undici implementation note: this is set as the first item in request's urlList in makeRequest
        // method request’s method.
        method: z.method,
        // header list A copy of request’s header list.
        // undici implementation note: headersList is cloned in makeRequest
        headersList: z.headersList,
        // unsafe-request flag Set.
        unsafeRequest: z.unsafeRequest,
        // client This’s relevant settings object.
        client: this[v].settingsObject,
        // window window.
        window: Qe,
        // priority request’s priority.
        priority: z.priority,
        // origin request’s origin. The propagation of the origin is only significant for navigation requests
        // being handled by a service worker. In this scenario a request can have an origin that is different
        // from the current client.
        origin: z.origin,
        // referrer request’s referrer.
        referrer: z.referrer,
        // referrer policy request’s referrer policy.
        referrerPolicy: z.referrerPolicy,
        // mode request’s mode.
        mode: z.mode,
        // credentials mode request’s credentials mode.
        credentials: z.credentials,
        // cache mode request’s cache mode.
        cache: z.cache,
        // redirect mode request’s redirect mode.
        redirect: z.redirect,
        // integrity metadata request’s integrity metadata.
        integrity: z.integrity,
        // keepalive request’s keepalive.
        keepalive: z.keepalive,
        // reload-navigation flag request’s reload-navigation flag.
        reloadNavigation: z.reloadNavigation,
        // history-navigation flag request’s history-navigation flag.
        historyNavigation: z.historyNavigation,
        // URL list A clone of request’s URL list.
        urlList: [...z.urlList]
      });
      const ze = Object.keys(ne).length !== 0;
      if (ze && (z.mode === "navigate" && (z.mode = "same-origin"), z.reloadNavigation = !1, z.historyNavigation = !1, z.origin = "client", z.referrer = "client", z.referrerPolicy = "", z.url = z.urlList[z.urlList.length - 1], z.urlList = [z.url]), ne.referrer !== void 0) {
        const x = ne.referrer;
        if (x === "")
          z.referrer = "no-referrer";
        else {
          let te;
          try {
            te = new URL(x, Be);
          } catch (ge) {
            throw new TypeError(`Referrer "${x}" is not a valid URL.`, { cause: ge });
          }
          te.protocol === "about:" && te.hostname === "client" || qe && !A(te, this[v].settingsObject.baseUrl) ? z.referrer = "client" : z.referrer = te;
        }
      }
      ne.referrerPolicy !== void 0 && (z.referrerPolicy = ne.referrerPolicy);
      let mi;
      if (ne.mode !== void 0 ? mi = ne.mode : mi = pe, mi === "navigate")
        throw Q.errors.exception({
          header: "Request constructor",
          message: "invalid request mode navigate."
        });
      if (mi != null && (z.mode = mi), ne.credentials !== void 0 && (z.credentials = ne.credentials), ne.cache !== void 0 && (z.cache = ne.cache), z.cache === "only-if-cached" && z.mode !== "same-origin")
        throw new TypeError(
          "'only-if-cached' can be set only with 'same-origin' mode"
        );
      if (ne.redirect !== void 0 && (z.redirect = ne.redirect), ne.integrity != null && (z.integrity = String(ne.integrity)), ne.keepalive !== void 0 && (z.keepalive = !!ne.keepalive), ne.method !== void 0) {
        let x = ne.method;
        if (!s(x))
          throw new TypeError(`'${x}' is not a valid HTTP method.`);
        if (c.has(x.toUpperCase()))
          throw new TypeError(`'${x}' HTTP method is unsupported.`);
        x = u[x] ?? l(x), z.method = x;
      }
      ne.signal !== void 0 && (ve = ne.signal), this[B] = z;
      const be = new AbortController();
      if (this[D] = be.signal, this[D][v] = this[v], ve != null) {
        if (!ve || typeof ve.aborted != "boolean" || typeof ve.addEventListener != "function")
          throw new TypeError(
            "Failed to construct 'Request': member signal is not of type AbortSignal."
          );
        if (ve.aborted)
          be.abort(ve.reason);
        else {
          this[R] = be;
          const x = new WeakRef(be), te = function() {
            const ge = x.deref();
            ge !== void 0 && ge.abort(this.reason);
          };
          try {
            (typeof H == "function" && H(ve) === w || W(ve, "abort").length >= w) && $(100, ve);
          } catch {
          }
          o.addAbortListener(ve, te), F.register(be, { signal: ve, abort: te });
        }
      }
      if (this[I] = new a(U), this[I][se] = z.headersList, this[I][q] = "request", this[I][v] = this[v], mi === "no-cors") {
        if (!k.has(z.method))
          throw new TypeError(
            `'${z.method} is unsupported in no-cors mode.`
          );
        this[I][q] = "request-no-cors";
      }
      if (ze) {
        const x = this[I][se], te = ne.headers !== void 0 ? ne.headers : new d(x);
        if (x.clear(), te instanceof d) {
          for (const [ge, Ce] of te)
            x.append(ge, Ce);
          x.cookies = te.cookies;
        } else
          t(this[I], te);
      }
      const fe = ie instanceof V ? ie[B].body : null;
      if ((ne.body != null || fe != null) && (z.method === "GET" || z.method === "HEAD"))
        throw new TypeError("Request with GET/HEAD method cannot have body.");
      let we = null;
      if (ne.body != null) {
        const [x, te] = n(
          ne.body,
          z.keepalive
        );
        we = x, te && !this[I][se].contains("content-type") && this[I].append("content-type", te);
      }
      const hi = we ?? fe;
      if (hi != null && hi.source == null) {
        if (we != null && ne.duplex == null)
          throw new TypeError("RequestInit: duplex option is required when sending a body.");
        if (z.mode !== "same-origin" && z.mode !== "cors")
          throw new TypeError(
            'If request is made from ReadableStream, mode should be "same-origin" or "cors"'
          );
        z.useCORSPreflightFlag = !0;
      }
      let Ia = hi;
      if (we == null && fe != null) {
        if (o.isDisturbed(fe.stream) || fe.stream.locked)
          throw new TypeError(
            "Cannot construct a Request with a Request object that has already been used."
          );
        j || (j = J.TransformStream);
        const x = new j();
        fe.stream.pipeThrough(x), Ia = {
          source: fe.source,
          length: fe.length,
          stream: x.readable
        };
      }
      this[B].body = Ia;
    }
    // Returns request’s HTTP method, which is "GET" by default.
    get method() {
      return Q.brandCheck(this, V), this[B].method;
    }
    // Returns the URL of request as a string.
    get url() {
      return Q.brandCheck(this, V), M(this[B].url);
    }
    // Returns a Headers object consisting of the headers associated with request.
    // Note that headers added in the network layer by the user agent will not
    // be accounted for in this object, e.g., the "Host" header.
    get headers() {
      return Q.brandCheck(this, V), this[I];
    }
    // Returns the kind of resource requested by request, e.g., "document"
    // or "script".
    get destination() {
      return Q.brandCheck(this, V), this[B].destination;
    }
    // Returns the referrer of request. Its value can be a same-origin URL if
    // explicitly set in init, the empty string to indicate no referrer, and
    // "about:client" when defaulting to the global’s default. This is used
    // during fetching to determine the value of the `Referer` header of the
    // request being made.
    get referrer() {
      return Q.brandCheck(this, V), this[B].referrer === "no-referrer" ? "" : this[B].referrer === "client" ? "about:client" : this[B].referrer.toString();
    }
    // Returns the referrer policy associated with request.
    // This is used during fetching to compute the value of the request’s
    // referrer.
    get referrerPolicy() {
      return Q.brandCheck(this, V), this[B].referrerPolicy;
    }
    // Returns the mode associated with request, which is a string indicating
    // whether the request will use CORS, or will be restricted to same-origin
    // URLs.
    get mode() {
      return Q.brandCheck(this, V), this[B].mode;
    }
    // Returns the credentials mode associated with request,
    // which is a string indicating whether credentials will be sent with the
    // request always, never, or only when sent to a same-origin URL.
    get credentials() {
      return this[B].credentials;
    }
    // Returns the cache mode associated with request,
    // which is a string indicating how the request will
    // interact with the browser’s cache when fetching.
    get cache() {
      return Q.brandCheck(this, V), this[B].cache;
    }
    // Returns the redirect mode associated with request,
    // which is a string indicating how redirects for the
    // request will be handled during fetching. A request
    // will follow redirects by default.
    get redirect() {
      return Q.brandCheck(this, V), this[B].redirect;
    }
    // Returns request’s subresource integrity metadata, which is a
    // cryptographic hash of the resource being fetched. Its value
    // consists of multiple hashes separated by whitespace. [SRI]
    get integrity() {
      return Q.brandCheck(this, V), this[B].integrity;
    }
    // Returns a boolean indicating whether or not request can outlive the
    // global in which it was created.
    get keepalive() {
      return Q.brandCheck(this, V), this[B].keepalive;
    }
    // Returns a boolean indicating whether or not request is for a reload
    // navigation.
    get isReloadNavigation() {
      return Q.brandCheck(this, V), this[B].reloadNavigation;
    }
    // Returns a boolean indicating whether or not request is for a history
    // navigation (a.k.a. back-foward navigation).
    get isHistoryNavigation() {
      return Q.brandCheck(this, V), this[B].historyNavigation;
    }
    // Returns the signal associated with request, which is an AbortSignal
    // object indicating whether or not request has been aborted, and its
    // abort event handler.
    get signal() {
      return Q.brandCheck(this, V), this[D];
    }
    get body() {
      return Q.brandCheck(this, V), this[B].body ? this[B].body.stream : null;
    }
    get bodyUsed() {
      return Q.brandCheck(this, V), !!this[B].body && o.isDisturbed(this[B].body.stream);
    }
    get duplex() {
      return Q.brandCheck(this, V), "half";
    }
    // Returns a clone of request.
    clone() {
      var pe;
      if (Q.brandCheck(this, V), this.bodyUsed || (pe = this.body) != null && pe.locked)
        throw new TypeError("unusable");
      const ie = O(this[B]), ne = new V(U);
      ne[B] = ie, ne[v] = this[v], ne[I] = new a(U), ne[I][se] = ie.headersList, ne[I][q] = this[I][q], ne[I][v] = this[I][v];
      const z = new AbortController();
      return this.signal.aborted ? z.abort(this.signal.reason) : o.addAbortListener(
        this.signal,
        () => {
          z.abort(this.signal.reason);
        }
      ), ne[D] = z.signal, ne;
    }
  }
  e(V);
  function P(Z) {
    const ie = {
      method: "GET",
      localURLsOnly: !1,
      unsafeRequest: !1,
      body: null,
      client: null,
      reservedClient: null,
      replacesClientId: "",
      window: "client",
      keepalive: !1,
      serviceWorkers: "all",
      initiator: "",
      destination: "",
      priority: null,
      origin: "client",
      policyContainer: "client",
      referrer: "client",
      referrerPolicy: "",
      mode: "no-cors",
      useCORSPreflightFlag: !1,
      credentials: "same-origin",
      useCredentials: !1,
      cache: "default",
      redirect: "follow",
      integrity: "",
      cryptoGraphicsNonceMetadata: "",
      parserMetadata: "",
      reloadNavigation: !1,
      historyNavigation: !1,
      userActivation: !1,
      taintedOrigin: !1,
      redirectCount: 0,
      responseTainting: "basic",
      preventNoCacheCacheControlHeaderModification: !1,
      done: !1,
      timingAllowFailed: !1,
      ...Z,
      headersList: Z.headersList ? new d(Z.headersList) : new d()
    };
    return ie.url = ie.urlList[0], ie;
  }
  function O(Z) {
    const ie = P({ ...Z, body: null });
    return Z.body != null && (ie.body = i(Z.body)), ie;
  }
  return Object.defineProperties(V.prototype, {
    method: b,
    url: b,
    headers: b,
    redirect: b,
    clone: b,
    signal: b,
    duplex: b,
    destination: b,
    body: b,
    bodyUsed: b,
    isHistoryNavigation: b,
    isReloadNavigation: b,
    keepalive: b,
    integrity: b,
    cache: b,
    credentials: b,
    attribute: b,
    referrerPolicy: b,
    referrer: b,
    mode: b,
    [Symbol.toStringTag]: {
      value: "Request",
      configurable: !0
    }
  }), Q.converters.Request = Q.interfaceConverter(
    V
  ), Q.converters.RequestInfo = function(Z) {
    return typeof Z == "string" ? Q.converters.USVString(Z) : Z instanceof V ? Q.converters.Request(Z) : Q.converters.USVString(Z);
  }, Q.converters.AbortSignal = Q.interfaceConverter(
    AbortSignal
  ), Q.converters.RequestInit = Q.dictionaryConverter([
    {
      key: "method",
      converter: Q.converters.ByteString
    },
    {
      key: "headers",
      converter: Q.converters.HeadersInit
    },
    {
      key: "body",
      converter: Q.nullableConverter(
        Q.converters.BodyInit
      )
    },
    {
      key: "referrer",
      converter: Q.converters.USVString
    },
    {
      key: "referrerPolicy",
      converter: Q.converters.DOMString,
      // https://w3c.github.io/webappsec-referrer-policy/#referrer-policy
      allowedValues: g
    },
    {
      key: "mode",
      converter: Q.converters.DOMString,
      // https://fetch.spec.whatwg.org/#concept-request-mode
      allowedValues: y
    },
    {
      key: "credentials",
      converter: Q.converters.DOMString,
      // https://fetch.spec.whatwg.org/#requestcredentials
      allowedValues: h
    },
    {
      key: "cache",
      converter: Q.converters.DOMString,
      // https://fetch.spec.whatwg.org/#requestcache
      allowedValues: E
    },
    {
      key: "redirect",
      converter: Q.converters.DOMString,
      // https://fetch.spec.whatwg.org/#requestredirect
      allowedValues: N
    },
    {
      key: "integrity",
      converter: Q.converters.DOMString
    },
    {
      key: "keepalive",
      converter: Q.converters.boolean
    },
    {
      key: "signal",
      converter: Q.nullableConverter(
        (Z) => Q.converters.AbortSignal(
          Z,
          { strict: !1 }
        )
      )
    },
    {
      key: "window",
      converter: Q.converters.any
    },
    {
      key: "duplex",
      converter: Q.converters.DOMString,
      allowedValues: S
    }
  ]), vo = { Request: V, makeRequest: P }, vo;
}
var go, hu;
function Tl() {
  if (hu)
    return go;
  hu = 1;
  const {
    Response: n,
    makeNetworkError: e,
    makeAppropriateNetworkError: i,
    filterResponse: a,
    makeResponse: t
  } = Vl(), { Headers: d } = Dt(), { Request: r, makeRequest: o } = Gr(), s = J, {
    bytesMatch: A,
    makePolicyContainer: l,
    clonePolicyContainer: m,
    requestBadPort: u,
    TAOCheck: c,
    appendRequestOriginHeader: k,
    responseLocationURL: g,
    requestCurrentURL: N,
    setRequestReferrerPolicyOnRedirect: y,
    tryUpgradeRequestToAPotentiallyTrustworthyURL: h,
    createOpaqueTimingInfo: E,
    appendFetchMetadata: S,
    corsCheck: b,
    crossOriginResourcePolicyCheck: I,
    determineRequestsReferrer: D,
    coarsenedSharedCurrentTime: B,
    createDeferredPromise: q,
    isBlobLike: v,
    sameOrigin: Q,
    isCancelled: _,
    isAborted: M,
    isErrorLike: se,
    fullyReadBody: U,
    readableStreamClose: G,
    isomorphicEncode: H,
    urlIsLocal: $,
    urlIsHttpHttpsScheme: W,
    urlHasHttpsScheme: w
  } = kn(), { kState: j, kHeaders: R, kGuard: F, kRealm: V } = ya(), P = J, { safelyExtractBody: O } = Tr(), {
    redirectStatusSet: Z,
    nullBodyStatus: ie,
    safeMethodsSet: ne,
    requestBodyHeader: z,
    subresourceSet: pe,
    DOMException: Be
  } = Oa(), { kHeadersList: ve } = Ye, qe = J, { Readable: Qe, pipeline: ze } = J, { addAbortListener: mi, isErrored: be, isReadable: fe, nodeMajor: we, nodeMinor: hi } = Ie, { dataURLProcessor: Ia, serializeAMimeType: Xa } = Fn(), { TransformStream: T } = J, { getGlobalDispatcher: x } = fd, { webidl: te } = Mi(), { STATUS_CODES: ge } = J, Ce = ["GET", "HEAD"];
  let je, Pe = globalThis.ReadableStream;
  class Ci extends qe {
    constructor(re) {
      super(), this.dispatcher = re, this.connection = null, this.dump = !1, this.state = "ongoing", this.setMaxListeners(21);
    }
    terminate(re) {
      var K;
      this.state === "ongoing" && (this.state = "terminated", (K = this.connection) == null || K.destroy(re), this.emit("terminated", re));
    }
    // https://fetch.spec.whatwg.org/#fetch-controller-abort
    abort(re) {
      var K;
      this.state === "ongoing" && (this.state = "aborted", re || (re = new Be("The operation was aborted.", "AbortError")), this.serializedAbortReason = re, (K = this.connection) == null || K.destroy(re), this.emit("terminated", re));
    }
  }
  function En(L, re = {}) {
    var Ee;
    te.argumentLengthCheck(arguments, 1, { header: "globalThis.fetch" });
    const K = q();
    let X;
    try {
      X = new r(L, re);
    } catch (Fe) {
      return K.reject(Fe), K.promise;
    }
    const ue = X[j];
    if (X.signal.aborted)
      return as(K, ue, null, X.signal.reason), K.promise;
    const ae = ue.client.globalObject;
    ((Ee = ae == null ? void 0 : ae.constructor) == null ? void 0 : Ee.name) === "ServiceWorkerGlobalScope" && (ue.serviceWorkers = "none");
    let Ne = null;
    const Xe = null;
    let Yi = !1, ni = null;
    return mi(
      X.signal,
      () => {
        Yi = !0, P(ni != null), ni.abort(X.signal.reason), as(K, ue, Ne, X.signal.reason);
      }
    ), ni = yA({
      request: ue,
      processResponseEndOfBody: (Fe) => qn(Fe, "fetch"),
      processResponse: (Fe) => {
        if (Yi)
          return Promise.resolve();
        if (Fe.aborted)
          return as(K, ue, Ne, ni.serializedAbortReason), Promise.resolve();
        if (Fe.type === "error")
          return K.reject(
            Object.assign(new TypeError("fetch failed"), { cause: Fe.error })
          ), Promise.resolve();
        Ne = new n(), Ne[j] = Fe, Ne[V] = Xe, Ne[R][ve] = Fe.headersList, Ne[R][F] = "immutable", Ne[R][V] = Xe, K.resolve(Ne);
      },
      dispatcher: re.dispatcher ?? x()
      // undici
    }), K.promise;
  }
  function qn(L, re = "other") {
    var ae;
    if (L.type === "error" && L.aborted || !((ae = L.urlList) != null && ae.length))
      return;
    const K = L.urlList[0];
    let X = L.timingInfo, ue = L.cacheState;
    W(K) && X !== null && (L.timingAllowPassed || (X = E({
      startTime: X.startTime
    }), ue = ""), X.endTime = B(), L.timingInfo = X, $n(
      X,
      K,
      re,
      globalThis,
      ue
    ));
  }
  function $n(L, re, K, X, ue) {
    (we > 18 || we === 18 && hi >= 2) && performance.markResourceTiming(L, re.href, K, X, ue);
  }
  function as(L, re, K, X) {
    var ae, Ne;
    if (X || (X = new Be("The operation was aborted.", "AbortError")), L.reject(X), re.body != null && fe((ae = re.body) == null ? void 0 : ae.stream) && re.body.stream.cancel(X).catch((Xe) => {
      if (Xe.code !== "ERR_INVALID_STATE")
        throw Xe;
    }), K == null)
      return;
    const ue = K[j];
    ue.body != null && fe((Ne = ue.body) == null ? void 0 : Ne.stream) && ue.body.stream.cancel(X).catch((Xe) => {
      if (Xe.code !== "ERR_INVALID_STATE")
        throw Xe;
    });
  }
  function yA({
    request: L,
    processRequestBodyChunkLength: re,
    processRequestEndOfBody: K,
    processResponse: X,
    processResponseEndOfBody: ue,
    processResponseConsumeBody: ae,
    useParallelQueue: Ne = !1,
    dispatcher: Xe
    // undici
  }) {
    var Fe, Ji, si, yn;
    let Yi = null, ni = !1;
    L.client != null && (Yi = L.client.globalObject, ni = L.client.crossOriginIsolatedCapability);
    const ea = B(ni), Pd = E({
      startTime: ea
    }), Ee = {
      controller: new Ci(Xe),
      request: L,
      timingInfo: Pd,
      processRequestBodyChunkLength: re,
      processRequestEndOfBody: K,
      processResponse: X,
      processResponseConsumeBody: ae,
      processResponseEndOfBody: ue,
      taskDestination: Yi,
      crossOriginIsolatedCapability: ni
    };
    if (P(!L.body || L.body.stream), L.window === "client" && (L.window = ((si = (Ji = (Fe = L.client) == null ? void 0 : Fe.globalObject) == null ? void 0 : Ji.constructor) == null ? void 0 : si.name) === "Window" ? L.client : "no-window"), L.origin === "client" && (L.origin = (yn = L.client) == null ? void 0 : yn.origin), L.policyContainer === "client" && (L.client != null ? L.policyContainer = m(
      L.client.policyContainer
    ) : L.policyContainer = l()), !L.headersList.contains("accept")) {
      const We = "*/*";
      L.headersList.append("accept", We);
    }
    return L.headersList.contains("accept-language") || L.headersList.append("accept-language", "*"), L.priority, pe.has(L.destination), bA(Ee).catch((We) => {
      Ee.controller.terminate(We);
    }), Ee.controller;
  }
  async function bA(L, re = !1) {
    const K = L.request;
    let X = null;
    if (K.localURLsOnly && !$(N(K)) && (X = e("local URLs only")), h(K), u(K) === "blocked" && (X = e("bad port")), K.referrerPolicy === "" && (K.referrerPolicy = K.policyContainer.referrerPolicy), K.referrer !== "no-referrer" && (K.referrer = D(K)), X === null && (X = await (async () => {
      const ae = N(K);
      return (
        // - request’s current URL’s origin is same origin with request’s origin,
        //   and request’s response tainting is "basic"
        Q(ae, K.url) && K.responseTainting === "basic" || // request’s current URL’s scheme is "data"
        ae.protocol === "data:" || // - request’s mode is "navigate" or "websocket"
        K.mode === "navigate" || K.mode === "websocket" ? (K.responseTainting = "basic", await IA(L)) : K.mode === "same-origin" ? e('request mode cannot be "same-origin"') : K.mode === "no-cors" ? K.redirect !== "follow" ? e(
          'redirect mode cannot be "follow" for "no-cors" request'
        ) : (K.responseTainting = "opaque", await IA(L)) : W(N(K)) ? (K.responseTainting = "cors", await CA(L)) : e("URL scheme must be a HTTP(S) scheme")
      );
    })()), re)
      return X;
    X.status !== 0 && !X.internalResponse && (K.responseTainting, K.responseTainting === "basic" ? X = a(X, "basic") : K.responseTainting === "cors" ? X = a(X, "cors") : K.responseTainting === "opaque" ? X = a(X, "opaque") : P(!1));
    let ue = X.status === 0 ? X : X.internalResponse;
    if (ue.urlList.length === 0 && ue.urlList.push(...K.urlList), K.timingAllowFailed || (X.timingAllowPassed = !0), X.type === "opaque" && ue.status === 206 && ue.rangeRequested && !K.headers.contains("range") && (X = ue = e()), X.status !== 0 && (K.method === "HEAD" || K.method === "CONNECT" || ie.includes(ue.status)) && (ue.body = null, L.controller.dump = !0), K.integrity) {
      const ae = (Xe) => ts(L, e(Xe));
      if (K.responseTainting === "opaque" || X.body == null) {
        ae(X.error);
        return;
      }
      const Ne = (Xe) => {
        if (!A(Xe, K.integrity)) {
          ae("integrity mismatch");
          return;
        }
        X.body = O(Xe)[0], ts(L, X);
      };
      await U(X.body, Ne, ae);
    } else
      ts(L, X);
  }
  function IA(L) {
    if (_(L) && L.request.redirectCount === 0)
      return Promise.resolve(i(L));
    const { request: re } = L, { protocol: K } = N(re);
    switch (K) {
      case "about:":
        return Promise.resolve(e("about scheme is not supported"));
      case "blob:": {
        je || (je = J.resolveObjectURL);
        const X = N(re);
        if (X.search.length !== 0)
          return Promise.resolve(e("NetworkError when attempting to fetch resource."));
        const ue = je(X.toString());
        if (re.method !== "GET" || !v(ue))
          return Promise.resolve(e("invalid method"));
        const ae = O(ue), Ne = ae[0], Xe = H(`${Ne.length}`), Yi = ae[1] ?? "", ni = t({
          statusText: "OK",
          headersList: [
            ["content-length", { name: "Content-Length", value: Xe }],
            ["content-type", { name: "Content-Type", value: Yi }]
          ]
        });
        return ni.body = Ne, Promise.resolve(ni);
      }
      case "data:": {
        const X = N(re), ue = Ia(X);
        if (ue === "failure")
          return Promise.resolve(e("failed to fetch the data URL"));
        const ae = Xa(ue.mimeType);
        return Promise.resolve(t({
          statusText: "OK",
          headersList: [
            ["content-type", { name: "Content-Type", value: ae }]
          ],
          body: O(ue.body)[0]
        }));
      }
      case "file:":
        return Promise.resolve(e("not implemented... yet..."));
      case "http:":
      case "https:":
        return CA(L).catch((X) => e(X));
      default:
        return Promise.resolve(e("unknown scheme"));
    }
  }
  function Wh(L, re) {
    L.request.done = !0, L.processResponseDone != null && queueMicrotask(() => L.processResponseDone(re));
  }
  function ts(L, re) {
    re.type === "error" && (re.urlList = [L.request.urlList[0]], re.timingInfo = E({
      startTime: L.timingInfo.startTime
    }));
    const K = () => {
      L.request.done = !0, L.processResponseEndOfBody != null && queueMicrotask(() => L.processResponseEndOfBody(re));
    };
    if (L.processResponse != null && queueMicrotask(() => L.processResponse(re)), re.body == null)
      K();
    else {
      const X = (ae, Ne) => {
        Ne.enqueue(ae);
      }, ue = new T({
        start() {
        },
        transform: X,
        flush: K
      }, {
        size() {
          return 1;
        }
      }, {
        size() {
          return 1;
        }
      });
      re.body = { stream: re.body.stream.pipeThrough(ue) };
    }
    if (L.processResponseConsumeBody != null) {
      const X = (ae) => L.processResponseConsumeBody(re, ae), ue = (ae) => L.processResponseConsumeBody(re, ae);
      if (re.body == null)
        queueMicrotask(() => X(null));
      else
        return U(re.body, X, ue);
      return Promise.resolve();
    }
  }
  async function CA(L) {
    const re = L.request;
    let K = null, X = null;
    const ue = L.timingInfo;
    if (re.serviceWorkers, K === null) {
      if (re.redirect === "follow" && (re.serviceWorkers = "none"), X = K = await BA(L), re.responseTainting === "cors" && b(re, K) === "failure")
        return e("cors failure");
      c(re, K) === "failure" && (re.timingAllowFailed = !0);
    }
    return (re.responseTainting === "opaque" || K.type === "opaque") && I(
      re.origin,
      re.client,
      re.destination,
      X
    ) === "blocked" ? e("blocked") : (Z.has(X.status) && (re.redirect !== "manual" && L.controller.connection.destroy(), re.redirect === "error" ? K = e("unexpected redirect") : re.redirect === "manual" ? K = X : re.redirect === "follow" ? K = await zh(L, K) : P(!1)), K.timingInfo = ue, K);
  }
  function zh(L, re) {
    const K = L.request, X = re.internalResponse ? re.internalResponse : re;
    let ue;
    try {
      if (ue = g(
        X,
        N(K).hash
      ), ue == null)
        return re;
    } catch (Ne) {
      return Promise.resolve(e(Ne));
    }
    if (!W(ue))
      return Promise.resolve(e("URL scheme must be a HTTP(S) scheme"));
    if (K.redirectCount === 20)
      return Promise.resolve(e("redirect count exceeded"));
    if (K.redirectCount += 1, K.mode === "cors" && (ue.username || ue.password) && !Q(K, ue))
      return Promise.resolve(e('cross origin not allowed for request mode "cors"'));
    if (K.responseTainting === "cors" && (ue.username || ue.password))
      return Promise.resolve(e(
        'URL cannot contain credentials for request mode "cors"'
      ));
    if (X.status !== 303 && K.body != null && K.body.source == null)
      return Promise.resolve(e());
    if ([301, 302].includes(X.status) && K.method === "POST" || X.status === 303 && !Ce.includes(K.method)) {
      K.method = "GET", K.body = null;
      for (const Ne of z)
        K.headersList.delete(Ne);
    }
    Q(N(K), ue) || (K.headersList.delete("authorization"), K.headersList.delete("cookie"), K.headersList.delete("host")), K.body != null && (P(K.body.source != null), K.body = O(K.body.source)[0]);
    const ae = L.timingInfo;
    return ae.redirectEndTime = ae.postRedirectStartTime = B(L.crossOriginIsolatedCapability), ae.redirectStartTime === 0 && (ae.redirectStartTime = ae.startTime), K.urlList.push(ue), y(K, X), bA(L, !0);
  }
  async function BA(L, re = !1, K = !1) {
    const X = L.request;
    let ue = null, ae = null, Ne = null;
    X.window === "no-window" && X.redirect === "error" ? (ue = L, ae = X) : (ae = o(X), ue = { ...L }, ue.request = ae);
    const Xe = X.credentials === "include" || X.credentials === "same-origin" && X.responseTainting === "basic", Yi = ae.body ? ae.body.length : null;
    let ni = null;
    if (ae.body == null && ["POST", "PUT"].includes(ae.method) && (ni = "0"), Yi != null && (ni = H(`${Yi}`)), ni != null && ae.headersList.append("content-length", ni), Yi != null && ae.keepalive, ae.referrer instanceof URL && ae.headersList.append("referer", H(ae.referrer.href)), k(ae), S(ae), ae.headersList.contains("user-agent") || ae.headersList.append("user-agent", typeof esbuildDetection > "u" ? "undici" : "node"), ae.cache === "default" && (ae.headersList.contains("if-modified-since") || ae.headersList.contains("if-none-match") || ae.headersList.contains("if-unmodified-since") || ae.headersList.contains("if-match") || ae.headersList.contains("if-range")) && (ae.cache = "no-store"), ae.cache === "no-cache" && !ae.preventNoCacheCacheControlHeaderModification && !ae.headersList.contains("cache-control") && ae.headersList.append("cache-control", "max-age=0"), (ae.cache === "no-store" || ae.cache === "reload") && (ae.headersList.contains("pragma") || ae.headersList.append("pragma", "no-cache"), ae.headersList.contains("cache-control") || ae.headersList.append("cache-control", "no-cache")), ae.headersList.contains("range") && ae.headersList.append("accept-encoding", "identity"), ae.headersList.contains("accept-encoding") || (w(N(ae)) ? ae.headersList.append("accept-encoding", "br, gzip, deflate") : ae.headersList.append("accept-encoding", "gzip, deflate")), ae.headersList.delete("host"), ae.cache = "no-store", ae.mode !== "no-store" && ae.mode, Ne == null) {
      if (ae.mode === "only-if-cached")
        return e("only if cached");
      const ea = await Zh(
        ue,
        Xe,
        K
      );
      !ne.has(ae.method) && ea.status >= 200 && ea.status <= 399, Ne == null && (Ne = ea);
    }
    if (Ne.urlList = [...ae.urlList], ae.headersList.contains("range") && (Ne.rangeRequested = !0), Ne.requestIncludesCredentials = Xe, Ne.status === 407)
      return X.window === "no-window" ? e() : _(L) ? i(L) : e("proxy authentication required");
    if (
      // response’s status is 421
      Ne.status === 421 && // isNewConnectionFetch is false
      !K && // request’s body is null, or request’s body is non-null and request’s body’s source is non-null
      (X.body == null || X.body.source != null)
    ) {
      if (_(L))
        return i(L);
      L.controller.connection.destroy(), Ne = await BA(
        L,
        re,
        !0
      );
    }
    return Ne;
  }
  async function Zh(L, re = !1, K = !1) {
    P(!L.controller.connection || L.controller.connection.destroyed), L.controller.connection = {
      abort: null,
      destroyed: !1,
      destroy(Ee) {
        var Fe;
        this.destroyed || (this.destroyed = !0, (Fe = this.abort) == null || Fe.call(this, Ee ?? new Be("The operation was aborted.", "AbortError")));
      }
    };
    const X = L.request;
    let ue = null;
    const ae = L.timingInfo;
    X.cache = "no-store", X.mode;
    let Ne = null;
    if (X.body == null && L.processRequestEndOfBody)
      queueMicrotask(() => L.processRequestEndOfBody());
    else if (X.body != null) {
      const Ee = async function* (si) {
        var yn;
        _(L) || (yield si, (yn = L.processRequestBodyChunkLength) == null || yn.call(L, si.byteLength));
      }, Fe = () => {
        _(L) || L.processRequestEndOfBody && L.processRequestEndOfBody();
      }, Ji = (si) => {
        _(L) || (si.name === "AbortError" ? L.controller.abort() : L.controller.terminate(si));
      };
      Ne = async function* () {
        try {
          for await (const si of X.body.stream)
            yield* Ee(si);
          Fe();
        } catch (si) {
          Ji(si);
        }
      }();
    }
    try {
      const { body: Ee, status: Fe, statusText: Ji, headersList: si, socket: yn } = await Pd({ body: Ne });
      if (yn)
        ue = t({ status: Fe, statusText: Ji, headersList: si, socket: yn });
      else {
        const We = Ee[Symbol.asyncIterator]();
        L.controller.next = () => We.next(), ue = t({ status: Fe, statusText: Ji, headersList: si });
      }
    } catch (Ee) {
      return Ee.name === "AbortError" ? (L.controller.connection.destroy(), i(L, Ee)) : e(Ee);
    }
    const Xe = () => {
      L.controller.resume();
    }, Yi = (Ee) => {
      L.controller.abort(Ee);
    };
    Pe || (Pe = J.ReadableStream);
    const ni = new Pe(
      {
        async start(Ee) {
          L.controller.controller = Ee;
        },
        async pull(Ee) {
          await Xe();
        },
        async cancel(Ee) {
          await Yi(Ee);
        }
      },
      {
        highWaterMark: 0,
        size() {
          return 1;
        }
      }
    );
    ue.body = { stream: ni }, L.controller.on("terminated", ea), L.controller.resume = async () => {
      for (; ; ) {
        let Ee, Fe;
        try {
          const { done: Ji, value: si } = await L.controller.next();
          if (M(L))
            break;
          Ee = Ji ? void 0 : si;
        } catch (Ji) {
          L.controller.ended && !ae.encodedBodySize ? Ee = void 0 : (Ee = Ji, Fe = !0);
        }
        if (Ee === void 0) {
          G(L.controller.controller), Wh(L, ue);
          return;
        }
        if (ae.decodedBodySize += (Ee == null ? void 0 : Ee.byteLength) ?? 0, Fe) {
          L.controller.terminate(Ee);
          return;
        }
        if (L.controller.controller.enqueue(new Uint8Array(Ee)), be(ni)) {
          L.controller.terminate();
          return;
        }
        if (!L.controller.controller.desiredSize)
          return;
      }
    };
    function ea(Ee) {
      M(L) ? (ue.aborted = !0, fe(ni) && L.controller.controller.error(
        L.controller.serializedAbortReason
      )) : fe(ni) && L.controller.controller.error(new TypeError("terminated", {
        cause: se(Ee) ? Ee : void 0
      })), L.controller.connection.destroy();
    }
    return ue;
    async function Pd({ body: Ee }) {
      const Fe = N(X), Ji = L.controller.dispatcher;
      return new Promise((si, yn) => Ji.dispatch(
        {
          path: Fe.pathname + Fe.search,
          origin: Fe.origin,
          method: X.method,
          body: L.controller.dispatcher.isMockActive ? X.body && (X.body.source || X.body.stream) : Ee,
          headers: X.headersList.entries,
          maxRedirections: 0,
          upgrade: X.mode === "websocket" ? "websocket" : void 0
        },
        {
          body: null,
          abort: null,
          onConnect(We) {
            const { connection: ui } = L.controller;
            ui.destroyed ? We(new Be("The operation was aborted.", "AbortError")) : (L.controller.on("terminated", We), this.abort = ui.abort = We);
          },
          onHeaders(We, ui, ds, Od) {
            if (We < 200)
              return;
            let ia = [], Ot = "";
            const Gt = new d();
            if (Array.isArray(ui))
              for (let sn = 0; sn < ui.length; sn += 2) {
                const na = ui[sn + 0].toString("latin1"), Ca = ui[sn + 1].toString("latin1");
                na.toLowerCase() === "content-encoding" ? ia = Ca.toLowerCase().split(",").map((rs) => rs.trim()) : na.toLowerCase() === "location" && (Ot = Ca), Gt[ve].append(na, Ca);
              }
            else {
              const sn = Object.keys(ui);
              for (const na of sn) {
                const Ca = ui[na];
                na.toLowerCase() === "content-encoding" ? ia = Ca.toLowerCase().split(",").map((rs) => rs.trim()).reverse() : na.toLowerCase() === "location" && (Ot = Ca), Gt[ve].append(na, Ca);
              }
            }
            this.body = new Qe({ read: ds });
            const $a = [], Kh = X.redirect === "follow" && Ot && Z.has(We);
            if (X.method !== "HEAD" && X.method !== "CONNECT" && !ie.includes(We) && !Kh)
              for (const sn of ia)
                if (sn === "x-gzip" || sn === "gzip")
                  $a.push(s.createGunzip({
                    // Be less strict when decoding compressed responses, since sometimes
                    // servers send slightly invalid responses that are still accepted
                    // by common browsers.
                    // Always using Z_SYNC_FLUSH is what cURL does.
                    flush: s.constants.Z_SYNC_FLUSH,
                    finishFlush: s.constants.Z_SYNC_FLUSH
                  }));
                else if (sn === "deflate")
                  $a.push(s.createInflate());
                else if (sn === "br")
                  $a.push(s.createBrotliDecompress());
                else {
                  $a.length = 0;
                  break;
                }
            return si({
              status: We,
              statusText: Od,
              headersList: Gt[ve],
              body: $a.length ? ze(this.body, ...$a, () => {
              }) : this.body.on("error", () => {
              })
            }), !0;
          },
          onData(We) {
            if (L.controller.dump)
              return;
            const ui = We;
            return ae.encodedBodySize += ui.byteLength, this.body.push(ui);
          },
          onComplete() {
            this.abort && L.controller.off("terminated", this.abort), L.controller.ended = !0, this.body.push(null);
          },
          onError(We) {
            var ui;
            this.abort && L.controller.off("terminated", this.abort), (ui = this.body) == null || ui.destroy(We), L.controller.terminate(We), yn(We);
          },
          onUpgrade(We, ui, ds) {
            if (We !== 101)
              return;
            const Od = new d();
            for (let ia = 0; ia < ui.length; ia += 2) {
              const Ot = ui[ia + 0].toString("latin1"), Gt = ui[ia + 1].toString("latin1");
              Od[ve].append(Ot, Gt);
            }
            return si({
              status: We,
              statusText: ge[We],
              headersList: Od[ve],
              socket: ds
            }), !0;
          }
        }
      ));
    }
  }
  return go = {
    fetch: En,
    Fetch: Ci,
    fetching: yA,
    finalizeAndReportTiming: qn
  }, go;
}
var ho, fu;
function Mk() {
  return fu || (fu = 1, ho = {
    kState: Symbol("FileReader state"),
    kResult: Symbol("FileReader result"),
    kError: Symbol("FileReader error"),
    kLastProgressEventFired: Symbol("FileReader last progress event fired timestamp"),
    kEvents: Symbol("FileReader events"),
    kAborted: Symbol("FileReader aborted")
  }), ho;
}
var fo, Nu;
function Ly() {
  if (Nu)
    return fo;
  Nu = 1;
  const { webidl: n } = Mi(), e = Symbol("ProgressEvent state");
  class i extends Event {
    constructor(t, d = {}) {
      t = n.converters.DOMString(t), d = n.converters.ProgressEventInit(d ?? {}), super(t, d), this[e] = {
        lengthComputable: d.lengthComputable,
        loaded: d.loaded,
        total: d.total
      };
    }
    get lengthComputable() {
      return n.brandCheck(this, i), this[e].lengthComputable;
    }
    get loaded() {
      return n.brandCheck(this, i), this[e].loaded;
    }
    get total() {
      return n.brandCheck(this, i), this[e].total;
    }
  }
  return n.converters.ProgressEventInit = n.dictionaryConverter([
    {
      key: "lengthComputable",
      converter: n.converters.boolean,
      defaultValue: !1
    },
    {
      key: "loaded",
      converter: n.converters["unsigned long long"],
      defaultValue: 0
    },
    {
      key: "total",
      converter: n.converters["unsigned long long"],
      defaultValue: 0
    },
    {
      key: "bubbles",
      converter: n.converters.boolean,
      defaultValue: !1
    },
    {
      key: "cancelable",
      converter: n.converters.boolean,
      defaultValue: !1
    },
    {
      key: "composed",
      converter: n.converters.boolean,
      defaultValue: !1
    }
  ]), fo = {
    ProgressEvent: i
  }, fo;
}
var No, Eu;
function qy() {
  if (Eu)
    return No;
  Eu = 1;
  function n(e) {
    if (!e)
      return "failure";
    switch (e.trim().toLowerCase()) {
      case "unicode-1-1-utf-8":
      case "unicode11utf8":
      case "unicode20utf8":
      case "utf-8":
      case "utf8":
      case "x-unicode20utf8":
        return "UTF-8";
      case "866":
      case "cp866":
      case "csibm866":
      case "ibm866":
        return "IBM866";
      case "csisolatin2":
      case "iso-8859-2":
      case "iso-ir-101":
      case "iso8859-2":
      case "iso88592":
      case "iso_8859-2":
      case "iso_8859-2:1987":
      case "l2":
      case "latin2":
        return "ISO-8859-2";
      case "csisolatin3":
      case "iso-8859-3":
      case "iso-ir-109":
      case "iso8859-3":
      case "iso88593":
      case "iso_8859-3":
      case "iso_8859-3:1988":
      case "l3":
      case "latin3":
        return "ISO-8859-3";
      case "csisolatin4":
      case "iso-8859-4":
      case "iso-ir-110":
      case "iso8859-4":
      case "iso88594":
      case "iso_8859-4":
      case "iso_8859-4:1988":
      case "l4":
      case "latin4":
        return "ISO-8859-4";
      case "csisolatincyrillic":
      case "cyrillic":
      case "iso-8859-5":
      case "iso-ir-144":
      case "iso8859-5":
      case "iso88595":
      case "iso_8859-5":
      case "iso_8859-5:1988":
        return "ISO-8859-5";
      case "arabic":
      case "asmo-708":
      case "csiso88596e":
      case "csiso88596i":
      case "csisolatinarabic":
      case "ecma-114":
      case "iso-8859-6":
      case "iso-8859-6-e":
      case "iso-8859-6-i":
      case "iso-ir-127":
      case "iso8859-6":
      case "iso88596":
      case "iso_8859-6":
      case "iso_8859-6:1987":
        return "ISO-8859-6";
      case "csisolatingreek":
      case "ecma-118":
      case "elot_928":
      case "greek":
      case "greek8":
      case "iso-8859-7":
      case "iso-ir-126":
      case "iso8859-7":
      case "iso88597":
      case "iso_8859-7":
      case "iso_8859-7:1987":
      case "sun_eu_greek":
        return "ISO-8859-7";
      case "csiso88598e":
      case "csisolatinhebrew":
      case "hebrew":
      case "iso-8859-8":
      case "iso-8859-8-e":
      case "iso-ir-138":
      case "iso8859-8":
      case "iso88598":
      case "iso_8859-8":
      case "iso_8859-8:1988":
      case "visual":
        return "ISO-8859-8";
      case "csiso88598i":
      case "iso-8859-8-i":
      case "logical":
        return "ISO-8859-8-I";
      case "csisolatin6":
      case "iso-8859-10":
      case "iso-ir-157":
      case "iso8859-10":
      case "iso885910":
      case "l6":
      case "latin6":
        return "ISO-8859-10";
      case "iso-8859-13":
      case "iso8859-13":
      case "iso885913":
        return "ISO-8859-13";
      case "iso-8859-14":
      case "iso8859-14":
      case "iso885914":
        return "ISO-8859-14";
      case "csisolatin9":
      case "iso-8859-15":
      case "iso8859-15":
      case "iso885915":
      case "iso_8859-15":
      case "l9":
        return "ISO-8859-15";
      case "iso-8859-16":
        return "ISO-8859-16";
      case "cskoi8r":
      case "koi":
      case "koi8":
      case "koi8-r":
      case "koi8_r":
        return "KOI8-R";
      case "koi8-ru":
      case "koi8-u":
        return "KOI8-U";
      case "csmacintosh":
      case "mac":
      case "macintosh":
      case "x-mac-roman":
        return "macintosh";
      case "iso-8859-11":
      case "iso8859-11":
      case "iso885911":
      case "tis-620":
      case "windows-874":
        return "windows-874";
      case "cp1250":
      case "windows-1250":
      case "x-cp1250":
        return "windows-1250";
      case "cp1251":
      case "windows-1251":
      case "x-cp1251":
        return "windows-1251";
      case "ansi_x3.4-1968":
      case "ascii":
      case "cp1252":
      case "cp819":
      case "csisolatin1":
      case "ibm819":
      case "iso-8859-1":
      case "iso-ir-100":
      case "iso8859-1":
      case "iso88591":
      case "iso_8859-1":
      case "iso_8859-1:1987":
      case "l1":
      case "latin1":
      case "us-ascii":
      case "windows-1252":
      case "x-cp1252":
        return "windows-1252";
      case "cp1253":
      case "windows-1253":
      case "x-cp1253":
        return "windows-1253";
      case "cp1254":
      case "csisolatin5":
      case "iso-8859-9":
      case "iso-ir-148":
      case "iso8859-9":
      case "iso88599":
      case "iso_8859-9":
      case "iso_8859-9:1989":
      case "l5":
      case "latin5":
      case "windows-1254":
      case "x-cp1254":
        return "windows-1254";
      case "cp1255":
      case "windows-1255":
      case "x-cp1255":
        return "windows-1255";
      case "cp1256":
      case "windows-1256":
      case "x-cp1256":
        return "windows-1256";
      case "cp1257":
      case "windows-1257":
      case "x-cp1257":
        return "windows-1257";
      case "cp1258":
      case "windows-1258":
      case "x-cp1258":
        return "windows-1258";
      case "x-mac-cyrillic":
      case "x-mac-ukrainian":
        return "x-mac-cyrillic";
      case "chinese":
      case "csgb2312":
      case "csiso58gb231280":
      case "gb2312":
      case "gb_2312":
      case "gb_2312-80":
      case "gbk":
      case "iso-ir-58":
      case "x-gbk":
        return "GBK";
      case "gb18030":
        return "gb18030";
      case "big5":
      case "big5-hkscs":
      case "cn-big5":
      case "csbig5":
      case "x-x-big5":
        return "Big5";
      case "cseucpkdfmtjapanese":
      case "euc-jp":
      case "x-euc-jp":
        return "EUC-JP";
      case "csiso2022jp":
      case "iso-2022-jp":
        return "ISO-2022-JP";
      case "csshiftjis":
      case "ms932":
      case "ms_kanji":
      case "shift-jis":
      case "shift_jis":
      case "sjis":
      case "windows-31j":
      case "x-sjis":
        return "Shift_JIS";
      case "cseuckr":
      case "csksc56011987":
      case "euc-kr":
      case "iso-ir-149":
      case "korean":
      case "ks_c_5601-1987":
      case "ks_c_5601-1989":
      case "ksc5601":
      case "ksc_5601":
      case "windows-949":
        return "EUC-KR";
      case "csiso2022kr":
      case "hz-gb-2312":
      case "iso-2022-cn":
      case "iso-2022-cn-ext":
      case "iso-2022-kr":
      case "replacement":
        return "replacement";
      case "unicodefffe":
      case "utf-16be":
        return "UTF-16BE";
      case "csunicode":
      case "iso-10646-ucs-2":
      case "ucs-2":
      case "unicode":
      case "unicodefeff":
      case "utf-16":
      case "utf-16le":
        return "UTF-16LE";
      case "x-user-defined":
        return "x-user-defined";
      default:
        return "failure";
    }
  }
  return No = {
    getEncoding: n
  }, No;
}
var Eo, yu;
function Py() {
  if (yu)
    return Eo;
  yu = 1;
  const {
    kState: n,
    kError: e,
    kResult: i,
    kAborted: a,
    kLastProgressEventFired: t
  } = Mk(), { ProgressEvent: d } = Ly(), { getEncoding: r } = qy(), { DOMException: o } = Oa(), { serializeAMimeType: s, parseMIMEType: A } = Fn(), { types: l } = J, { StringDecoder: m } = J, { btoa: u } = J, c = {
    enumerable: !0,
    writable: !1,
    configurable: !1
  };
  function k(S, b, I, D) {
    if (S[n] === "loading")
      throw new o("Invalid state", "InvalidStateError");
    S[n] = "loading", S[i] = null, S[e] = null;
    const q = b.stream().getReader(), v = [];
    let Q = q.read(), _ = !0;
    (async () => {
      for (; !S[a]; )
        try {
          const { done: M, value: se } = await Q;
          if (_ && !S[a] && queueMicrotask(() => {
            g("loadstart", S);
          }), _ = !1, !M && l.isUint8Array(se))
            v.push(se), (S[t] === void 0 || Date.now() - S[t] >= 50) && !S[a] && (S[t] = Date.now(), queueMicrotask(() => {
              g("progress", S);
            })), Q = q.read();
          else if (M) {
            queueMicrotask(() => {
              S[n] = "done";
              try {
                const U = N(v, I, b.type, D);
                if (S[a])
                  return;
                S[i] = U, g("load", S);
              } catch (U) {
                S[e] = U, g("error", S);
              }
              S[n] !== "loading" && g("loadend", S);
            });
            break;
          }
        } catch (M) {
          if (S[a])
            return;
          queueMicrotask(() => {
            S[n] = "done", S[e] = M, g("error", S), S[n] !== "loading" && g("loadend", S);
          });
          break;
        }
    })();
  }
  function g(S, b) {
    const I = new d(S, {
      bubbles: !1,
      cancelable: !1
    });
    b.dispatchEvent(I);
  }
  function N(S, b, I, D) {
    switch (b) {
      case "DataURL": {
        let B = "data:";
        const q = A(I || "application/octet-stream");
        q !== "failure" && (B += s(q)), B += ";base64,";
        const v = new m("latin1");
        for (const Q of S)
          B += u(v.write(Q));
        return B += u(v.end()), B;
      }
      case "Text": {
        let B = "failure";
        if (D && (B = r(D)), B === "failure" && I) {
          const q = A(I);
          q !== "failure" && (B = r(q.parameters.get("charset")));
        }
        return B === "failure" && (B = "UTF-8"), y(S, B);
      }
      case "ArrayBuffer":
        return E(S).buffer;
      case "BinaryString": {
        let B = "";
        const q = new m("latin1");
        for (const v of S)
          B += q.write(v);
        return B += q.end(), B;
      }
    }
  }
  function y(S, b) {
    const I = E(S), D = h(I);
    let B = 0;
    D !== null && (b = D, B = D === "UTF-8" ? 3 : 2);
    const q = I.slice(B);
    return new TextDecoder(b).decode(q);
  }
  function h(S) {
    const [b, I, D] = S;
    return b === 239 && I === 187 && D === 191 ? "UTF-8" : b === 254 && I === 255 ? "UTF-16BE" : b === 255 && I === 254 ? "UTF-16LE" : null;
  }
  function E(S) {
    const b = S.reduce((D, B) => D + B.byteLength, 0);
    let I = 0;
    return S.reduce((D, B) => (D.set(B, I), I += B.byteLength, D), new Uint8Array(b));
  }
  return Eo = {
    staticPropertyDescriptors: c,
    readOperation: k,
    fireAProgressEvent: g
  }, Eo;
}
var yo, bu;
function Oy() {
  if (bu)
    return yo;
  bu = 1;
  const {
    staticPropertyDescriptors: n,
    readOperation: e,
    fireAProgressEvent: i
  } = Py(), {
    kState: a,
    kError: t,
    kResult: d,
    kEvents: r,
    kAborted: o
  } = Mk(), { webidl: s } = Mi(), { kEnumerableProperty: A } = Ie;
  class l extends EventTarget {
    constructor() {
      super(), this[a] = "empty", this[d] = null, this[t] = null, this[r] = {
        loadend: null,
        error: null,
        abort: null,
        load: null,
        progress: null,
        loadstart: null
      };
    }
    /**
     * @see https://w3c.github.io/FileAPI/#dfn-readAsArrayBuffer
     * @param {import('buffer').Blob} blob
     */
    readAsArrayBuffer(u) {
      s.brandCheck(this, l), s.argumentLengthCheck(arguments, 1, { header: "FileReader.readAsArrayBuffer" }), u = s.converters.Blob(u, { strict: !1 }), e(this, u, "ArrayBuffer");
    }
    /**
     * @see https://w3c.github.io/FileAPI/#readAsBinaryString
     * @param {import('buffer').Blob} blob
     */
    readAsBinaryString(u) {
      s.brandCheck(this, l), s.argumentLengthCheck(arguments, 1, { header: "FileReader.readAsBinaryString" }), u = s.converters.Blob(u, { strict: !1 }), e(this, u, "BinaryString");
    }
    /**
     * @see https://w3c.github.io/FileAPI/#readAsDataText
     * @param {import('buffer').Blob} blob
     * @param {string?} encoding
     */
    readAsText(u, c = void 0) {
      s.brandCheck(this, l), s.argumentLengthCheck(arguments, 1, { header: "FileReader.readAsText" }), u = s.converters.Blob(u, { strict: !1 }), c !== void 0 && (c = s.converters.DOMString(c)), e(this, u, "Text", c);
    }
    /**
     * @see https://w3c.github.io/FileAPI/#dfn-readAsDataURL
     * @param {import('buffer').Blob} blob
     */
    readAsDataURL(u) {
      s.brandCheck(this, l), s.argumentLengthCheck(arguments, 1, { header: "FileReader.readAsDataURL" }), u = s.converters.Blob(u, { strict: !1 }), e(this, u, "DataURL");
    }
    /**
     * @see https://w3c.github.io/FileAPI/#dfn-abort
     */
    abort() {
      if (this[a] === "empty" || this[a] === "done") {
        this[d] = null;
        return;
      }
      this[a] === "loading" && (this[a] = "done", this[d] = null), this[o] = !0, i("abort", this), this[a] !== "loading" && i("loadend", this);
    }
    /**
     * @see https://w3c.github.io/FileAPI/#dom-filereader-readystate
     */
    get readyState() {
      switch (s.brandCheck(this, l), this[a]) {
        case "empty":
          return this.EMPTY;
        case "loading":
          return this.LOADING;
        case "done":
          return this.DONE;
      }
    }
    /**
     * @see https://w3c.github.io/FileAPI/#dom-filereader-result
     */
    get result() {
      return s.brandCheck(this, l), this[d];
    }
    /**
     * @see https://w3c.github.io/FileAPI/#dom-filereader-error
     */
    get error() {
      return s.brandCheck(this, l), this[t];
    }
    get onloadend() {
      return s.brandCheck(this, l), this[r].loadend;
    }
    set onloadend(u) {
      s.brandCheck(this, l), this[r].loadend && this.removeEventListener("loadend", this[r].loadend), typeof u == "function" ? (this[r].loadend = u, this.addEventListener("loadend", u)) : this[r].loadend = null;
    }
    get onerror() {
      return s.brandCheck(this, l), this[r].error;
    }
    set onerror(u) {
      s.brandCheck(this, l), this[r].error && this.removeEventListener("error", this[r].error), typeof u == "function" ? (this[r].error = u, this.addEventListener("error", u)) : this[r].error = null;
    }
    get onloadstart() {
      return s.brandCheck(this, l), this[r].loadstart;
    }
    set onloadstart(u) {
      s.brandCheck(this, l), this[r].loadstart && this.removeEventListener("loadstart", this[r].loadstart), typeof u == "function" ? (this[r].loadstart = u, this.addEventListener("loadstart", u)) : this[r].loadstart = null;
    }
    get onprogress() {
      return s.brandCheck(this, l), this[r].progress;
    }
    set onprogress(u) {
      s.brandCheck(this, l), this[r].progress && this.removeEventListener("progress", this[r].progress), typeof u == "function" ? (this[r].progress = u, this.addEventListener("progress", u)) : this[r].progress = null;
    }
    get onload() {
      return s.brandCheck(this, l), this[r].load;
    }
    set onload(u) {
      s.brandCheck(this, l), this[r].load && this.removeEventListener("load", this[r].load), typeof u == "function" ? (this[r].load = u, this.addEventListener("load", u)) : this[r].load = null;
    }
    get onabort() {
      return s.brandCheck(this, l), this[r].abort;
    }
    set onabort(u) {
      s.brandCheck(this, l), this[r].abort && this.removeEventListener("abort", this[r].abort), typeof u == "function" ? (this[r].abort = u, this.addEventListener("abort", u)) : this[r].abort = null;
    }
  }
  return l.EMPTY = l.prototype.EMPTY = 0, l.LOADING = l.prototype.LOADING = 1, l.DONE = l.prototype.DONE = 2, Object.defineProperties(l.prototype, {
    EMPTY: n,
    LOADING: n,
    DONE: n,
    readAsArrayBuffer: A,
    readAsBinaryString: A,
    readAsText: A,
    readAsDataURL: A,
    abort: A,
    readyState: A,
    result: A,
    error: A,
    onloadstart: A,
    onprogress: A,
    onload: A,
    onabort: A,
    onerror: A,
    onloadend: A,
    [Symbol.toStringTag]: {
      value: "FileReader",
      writable: !1,
      enumerable: !1,
      configurable: !0
    }
  }), Object.defineProperties(l, {
    EMPTY: n,
    LOADING: n,
    DONE: n
  }), yo = {
    FileReader: l
  }, yo;
}
var bo, Iu;
function _l() {
  return Iu || (Iu = 1, bo = {
    kConstruct: Ye.kConstruct
  }), bo;
}
var Io, Cu;
function Gy() {
  if (Cu)
    return Io;
  Cu = 1;
  const n = J, { URLSerializer: e } = Fn(), { isValidHeaderName: i } = kn();
  function a(d, r, o = !1) {
    const s = e(d, o), A = e(r, o);
    return s === A;
  }
  function t(d) {
    n(d !== null);
    const r = [];
    for (let o of d.split(",")) {
      if (o = o.trim(), o.length) {
        if (!i(o))
          continue;
      } else
        continue;
      r.push(o);
    }
    return r;
  }
  return Io = {
    urlEquals: a,
    fieldValues: t
  }, Io;
}
var Co, Bu;
function My() {
  var I, D, fr, q, lt, Q, xk;
  if (Bu)
    return Co;
  Bu = 1;
  const { kConstruct: n } = _l(), { urlEquals: e, fieldValues: i } = Gy(), { kEnumerableProperty: a, isDisturbed: t } = Ie, { kHeadersList: d } = Ye, { webidl: r } = Mi(), { Response: o, cloneResponse: s } = Vl(), { Request: A } = Gr(), { kState: l, kHeaders: m, kGuard: u, kRealm: c } = ya(), { fetching: k } = Tl(), { urlIsHttpHttpsScheme: g, createDeferredPromise: N, readAllBytes: y } = kn(), h = J, { getGlobalDispatcher: E } = fd, M = class M {
    constructor() {
      /**
       * @see https://w3c.github.io/ServiceWorker/#batch-cache-operations-algorithm
       * @param {CacheBatchOperation[]} operations
       * @returns {requestResponseList}
       */
      pi(this, D);
      /**
       * @see https://w3c.github.io/ServiceWorker/#query-cache
       * @param {any} requestQuery
       * @param {import('../../types/cache').CacheQueryOptions} options
       * @param {requestResponseList} targetStorage
       * @returns {requestResponseList}
       */
      pi(this, q);
      /**
       * @see https://w3c.github.io/ServiceWorker/#request-matches-cached-item-algorithm
       * @param {any} requestQuery
       * @param {any} request
       * @param {any | null} response
       * @param {import('../../types/cache').CacheQueryOptions | undefined} options
       * @returns {boolean}
       */
      pi(this, Q);
      /**
       * @see https://w3c.github.io/ServiceWorker/#dfn-relevant-request-response-list
       * @type {requestResponseList}
       */
      pi(this, I, void 0);
      arguments[0] !== n && r.illegalConstructor(), Ve(this, I, arguments[1]);
    }
    async match(U, G = {}) {
      r.brandCheck(this, M), r.argumentLengthCheck(arguments, 1, { header: "Cache.match" }), U = r.converters.RequestInfo(U), G = r.converters.CacheQueryOptions(G);
      const H = await this.matchAll(U, G);
      if (H.length !== 0)
        return H[0];
    }
    async matchAll(U = void 0, G = {}) {
      var w;
      r.brandCheck(this, M), U !== void 0 && (U = r.converters.RequestInfo(U)), G = r.converters.CacheQueryOptions(G);
      let H = null;
      if (U !== void 0)
        if (U instanceof A) {
          if (H = U[l], H.method !== "GET" && !G.ignoreMethod)
            return [];
        } else
          typeof U == "string" && (H = new A(U)[l]);
      const $ = [];
      if (U === void 0)
        for (const j of Y(this, I))
          $.push(j[1]);
      else {
        const j = on(this, q, lt).call(this, H, G);
        for (const R of j)
          $.push(R[1]);
      }
      const W = [];
      for (const j of $) {
        const R = new o(((w = j.body) == null ? void 0 : w.source) ?? null), F = R[l].body;
        R[l] = j, R[l].body = F, R[m][d] = j.headersList, R[m][u] = "immutable", W.push(R);
      }
      return Object.freeze(W);
    }
    async add(U) {
      r.brandCheck(this, M), r.argumentLengthCheck(arguments, 1, { header: "Cache.add" }), U = r.converters.RequestInfo(U);
      const G = [U];
      return await this.addAll(G);
    }
    async addAll(U) {
      r.brandCheck(this, M), r.argumentLengthCheck(arguments, 1, { header: "Cache.addAll" }), U = r.converters["sequence<RequestInfo>"](U);
      const G = [], H = [];
      for (const P of U) {
        if (typeof P == "string")
          continue;
        const O = P[l];
        if (!g(O.url) || O.method !== "GET")
          throw r.errors.exception({
            header: "Cache.addAll",
            message: "Expected http/s scheme when method is not GET."
          });
      }
      const $ = [];
      for (const P of U) {
        const O = new A(P)[l];
        if (!g(O.url))
          throw r.errors.exception({
            header: "Cache.addAll",
            message: "Expected http/s scheme."
          });
        O.initiator = "fetch", O.destination = "subresource", H.push(O);
        const Z = N();
        $.push(k({
          request: O,
          dispatcher: E(),
          processResponse(ie) {
            if (ie.type === "error" || ie.status === 206 || ie.status < 200 || ie.status > 299)
              Z.reject(r.errors.exception({
                header: "Cache.addAll",
                message: "Received an invalid status code or the request failed."
              }));
            else if (ie.headersList.contains("vary")) {
              const ne = i(ie.headersList.get("vary"));
              for (const z of ne)
                if (z === "*") {
                  Z.reject(r.errors.exception({
                    header: "Cache.addAll",
                    message: "invalid vary field value"
                  }));
                  for (const pe of $)
                    pe.abort();
                  return;
                }
            }
          },
          processResponseEndOfBody(ie) {
            if (ie.aborted) {
              Z.reject(new DOMException("aborted", "AbortError"));
              return;
            }
            Z.resolve(ie);
          }
        })), G.push(Z.promise);
      }
      const w = await Promise.all(G), j = [];
      let R = 0;
      for (const P of w) {
        const O = {
          type: "put",
          // 7.3.2
          request: H[R],
          // 7.3.3
          response: P
          // 7.3.4
        };
        j.push(O), R++;
      }
      const F = N();
      let V = null;
      try {
        on(this, D, fr).call(this, j);
      } catch (P) {
        V = P;
      }
      return queueMicrotask(() => {
        V === null ? F.resolve(void 0) : F.reject(V);
      }), F.promise;
    }
    async put(U, G) {
      r.brandCheck(this, M), r.argumentLengthCheck(arguments, 2, { header: "Cache.put" }), U = r.converters.RequestInfo(U), G = r.converters.Response(G);
      let H = null;
      if (U instanceof A ? H = U[l] : H = new A(U)[l], !g(H.url) || H.method !== "GET")
        throw r.errors.exception({
          header: "Cache.put",
          message: "Expected an http/s scheme when method is not GET"
        });
      const $ = G[l];
      if ($.status === 206)
        throw r.errors.exception({
          header: "Cache.put",
          message: "Got 206 status"
        });
      if ($.headersList.contains("vary")) {
        const O = i($.headersList.get("vary"));
        for (const Z of O)
          if (Z === "*")
            throw r.errors.exception({
              header: "Cache.put",
              message: "Got * vary field value"
            });
      }
      if ($.body && (t($.body.stream) || $.body.stream.locked))
        throw r.errors.exception({
          header: "Cache.put",
          message: "Response body is locked or disturbed"
        });
      const W = s($), w = N();
      if ($.body != null) {
        const Z = $.body.stream.getReader();
        y(Z).then(w.resolve, w.reject);
      } else
        w.resolve(void 0);
      const j = [], R = {
        type: "put",
        // 14.
        request: H,
        // 15.
        response: W
        // 16.
      };
      j.push(R);
      const F = await w.promise;
      W.body != null && (W.body.source = F);
      const V = N();
      let P = null;
      try {
        on(this, D, fr).call(this, j);
      } catch (O) {
        P = O;
      }
      return queueMicrotask(() => {
        P === null ? V.resolve() : V.reject(P);
      }), V.promise;
    }
    async delete(U, G = {}) {
      r.brandCheck(this, M), r.argumentLengthCheck(arguments, 1, { header: "Cache.delete" }), U = r.converters.RequestInfo(U), G = r.converters.CacheQueryOptions(G);
      let H = null;
      if (U instanceof A) {
        if (H = U[l], H.method !== "GET" && !G.ignoreMethod)
          return !1;
      } else
        h(typeof U == "string"), H = new A(U)[l];
      const $ = [], W = {
        type: "delete",
        request: H,
        options: G
      };
      $.push(W);
      const w = N();
      let j = null, R;
      try {
        R = on(this, D, fr).call(this, $);
      } catch (F) {
        j = F;
      }
      return queueMicrotask(() => {
        j === null ? w.resolve(!!(R != null && R.length)) : w.reject(j);
      }), w.promise;
    }
    /**
     * @see https://w3c.github.io/ServiceWorker/#dom-cache-keys
     * @param {any} request
     * @param {import('../../types/cache').CacheQueryOptions} options
     * @returns {readonly Request[]}
     */
    async keys(U = void 0, G = {}) {
      r.brandCheck(this, M), U !== void 0 && (U = r.converters.RequestInfo(U)), G = r.converters.CacheQueryOptions(G);
      let H = null;
      if (U !== void 0)
        if (U instanceof A) {
          if (H = U[l], H.method !== "GET" && !G.ignoreMethod)
            return [];
        } else
          typeof U == "string" && (H = new A(U)[l]);
      const $ = N(), W = [];
      if (U === void 0)
        for (const w of Y(this, I))
          W.push(w[0]);
      else {
        const w = on(this, q, lt).call(this, H, G);
        for (const j of w)
          W.push(j[0]);
      }
      return queueMicrotask(() => {
        const w = [];
        for (const j of W) {
          const R = new A("https://a");
          R[l] = j, R[m][d] = j.headersList, R[m][u] = "immutable", R[c] = j.client, w.push(R);
        }
        $.resolve(Object.freeze(w));
      }), $.promise;
    }
  };
  I = new WeakMap(), D = new WeakSet(), fr = function(U) {
    const G = Y(this, I), H = [...G], $ = [], W = [];
    try {
      for (const w of U) {
        if (w.type !== "delete" && w.type !== "put")
          throw r.errors.exception({
            header: "Cache.#batchCacheOperations",
            message: 'operation type does not match "delete" or "put"'
          });
        if (w.type === "delete" && w.response != null)
          throw r.errors.exception({
            header: "Cache.#batchCacheOperations",
            message: "delete operation should not have an associated response"
          });
        if (on(this, q, lt).call(this, w.request, w.options, $).length)
          throw new DOMException("???", "InvalidStateError");
        let j;
        if (w.type === "delete") {
          if (j = on(this, q, lt).call(this, w.request, w.options), j.length === 0)
            return [];
          for (const R of j) {
            const F = G.indexOf(R);
            h(F !== -1), G.splice(F, 1);
          }
        } else if (w.type === "put") {
          if (w.response == null)
            throw r.errors.exception({
              header: "Cache.#batchCacheOperations",
              message: "put operation should have an associated response"
            });
          const R = w.request;
          if (!g(R.url))
            throw r.errors.exception({
              header: "Cache.#batchCacheOperations",
              message: "expected http or https scheme"
            });
          if (R.method !== "GET")
            throw r.errors.exception({
              header: "Cache.#batchCacheOperations",
              message: "not get method"
            });
          if (w.options != null)
            throw r.errors.exception({
              header: "Cache.#batchCacheOperations",
              message: "options must not be defined"
            });
          j = on(this, q, lt).call(this, w.request);
          for (const F of j) {
            const V = G.indexOf(F);
            h(V !== -1), G.splice(V, 1);
          }
          G.push([w.request, w.response]), $.push([w.request, w.response]);
        }
        W.push([w.request, w.response]);
      }
      return W;
    } catch (w) {
      throw Y(this, I).length = 0, Ve(this, I, H), w;
    }
  }, q = new WeakSet(), lt = function(U, G, H) {
    const $ = [], W = H ?? Y(this, I);
    for (const w of W) {
      const [j, R] = w;
      on(this, Q, xk).call(this, U, j, R, G) && $.push(w);
    }
    return $;
  }, Q = new WeakSet(), xk = function(U, G, H = null, $) {
    const W = new URL(U.url), w = new URL(G.url);
    if ($ != null && $.ignoreSearch && (w.search = "", W.search = ""), !e(W, w, !0))
      return !1;
    if (H == null || $ != null && $.ignoreVary || !H.headersList.contains("vary"))
      return !0;
    const j = i(H.headersList.get("vary"));
    for (const R of j) {
      if (R === "*")
        return !1;
      const F = G.headersList.get(R), V = U.headersList.get(R);
      if (F !== V)
        return !1;
    }
    return !0;
  };
  let S = M;
  Object.defineProperties(S.prototype, {
    [Symbol.toStringTag]: {
      value: "Cache",
      configurable: !0
    },
    match: a,
    matchAll: a,
    add: a,
    addAll: a,
    put: a,
    delete: a,
    keys: a
  });
  const b = [
    {
      key: "ignoreSearch",
      converter: r.converters.boolean,
      defaultValue: !1
    },
    {
      key: "ignoreMethod",
      converter: r.converters.boolean,
      defaultValue: !1
    },
    {
      key: "ignoreVary",
      converter: r.converters.boolean,
      defaultValue: !1
    }
  ];
  return r.converters.CacheQueryOptions = r.dictionaryConverter(b), r.converters.MultiCacheQueryOptions = r.dictionaryConverter([
    ...b,
    {
      key: "cacheName",
      converter: r.converters.DOMString
    }
  ]), r.converters.Response = r.interfaceConverter(o), r.converters["sequence<RequestInfo>"] = r.sequenceConverter(
    r.converters.RequestInfo
  ), Co = {
    Cache: S
  }, Co;
}
var Bo, Qu;
function xy() {
  var d;
  if (Qu)
    return Bo;
  Qu = 1;
  const { kConstruct: n } = _l(), { Cache: e } = My(), { webidl: i } = Mi(), { kEnumerableProperty: a } = Ie, r = class r {
    constructor() {
      /**
       * @see https://w3c.github.io/ServiceWorker/#dfn-relevant-name-to-cache-map
       * @type {Map<string, import('./cache').requestResponseList}
       */
      pi(this, d, /* @__PURE__ */ new Map());
      arguments[0] !== n && i.illegalConstructor();
    }
    async match(s, A = {}) {
      if (i.brandCheck(this, r), i.argumentLengthCheck(arguments, 1, { header: "CacheStorage.match" }), s = i.converters.RequestInfo(s), A = i.converters.MultiCacheQueryOptions(A), A.cacheName != null) {
        if (Y(this, d).has(A.cacheName)) {
          const l = Y(this, d).get(A.cacheName);
          return await new e(n, l).match(s, A);
        }
      } else
        for (const l of Y(this, d).values()) {
          const u = await new e(n, l).match(s, A);
          if (u !== void 0)
            return u;
        }
    }
    /**
     * @see https://w3c.github.io/ServiceWorker/#cache-storage-has
     * @param {string} cacheName
     * @returns {Promise<boolean>}
     */
    async has(s) {
      return i.brandCheck(this, r), i.argumentLengthCheck(arguments, 1, { header: "CacheStorage.has" }), s = i.converters.DOMString(s), Y(this, d).has(s);
    }
    /**
     * @see https://w3c.github.io/ServiceWorker/#dom-cachestorage-open
     * @param {string} cacheName
     * @returns {Promise<Cache>}
     */
    async open(s) {
      if (i.brandCheck(this, r), i.argumentLengthCheck(arguments, 1, { header: "CacheStorage.open" }), s = i.converters.DOMString(s), Y(this, d).has(s)) {
        const l = Y(this, d).get(s);
        return new e(n, l);
      }
      const A = [];
      return Y(this, d).set(s, A), new e(n, A);
    }
    /**
     * @see https://w3c.github.io/ServiceWorker/#cache-storage-delete
     * @param {string} cacheName
     * @returns {Promise<boolean>}
     */
    async delete(s) {
      return i.brandCheck(this, r), i.argumentLengthCheck(arguments, 1, { header: "CacheStorage.delete" }), s = i.converters.DOMString(s), Y(this, d).delete(s);
    }
    /**
     * @see https://w3c.github.io/ServiceWorker/#cache-storage-keys
     * @returns {string[]}
     */
    async keys() {
      return i.brandCheck(this, r), [...Y(this, d).keys()];
    }
  };
  d = new WeakMap();
  let t = r;
  return Object.defineProperties(t.prototype, {
    [Symbol.toStringTag]: {
      value: "CacheStorage",
      configurable: !0
    },
    match: a,
    has: a,
    open: a,
    delete: a,
    keys: a
  }), Bo = {
    CacheStorage: t
  }, Bo;
}
var Qo, Su;
function Yy() {
  return Su || (Su = 1, Qo = {
    maxAttributeValueSize: 1024,
    maxNameValuePairSize: 4096
  }), Qo;
}
var So, Du;
function Yk() {
  if (Du)
    return So;
  Du = 1;
  const n = J, { kHeadersList: e } = Ye;
  function i(u) {
    if (u.length === 0)
      return !1;
    for (const c of u) {
      const k = c.charCodeAt(0);
      if (k >= 0 || k <= 8 || k >= 10 || k <= 31 || k === 127)
        return !1;
    }
  }
  function a(u) {
    for (const c of u) {
      const k = c.charCodeAt(0);
      if (k <= 32 || k > 127 || c === "(" || c === ")" || c === ">" || c === "<" || c === "@" || c === "," || c === ";" || c === ":" || c === "\\" || c === '"' || c === "/" || c === "[" || c === "]" || c === "?" || c === "=" || c === "{" || c === "}")
        throw new Error("Invalid cookie name");
    }
  }
  function t(u) {
    for (const c of u) {
      const k = c.charCodeAt(0);
      if (k < 33 || // exclude CTLs (0-31)
      k === 34 || k === 44 || k === 59 || k === 92 || k > 126)
        throw new Error("Invalid header value");
    }
  }
  function d(u) {
    for (const c of u)
      if (c.charCodeAt(0) < 33 || c === ";")
        throw new Error("Invalid cookie path");
  }
  function r(u) {
    if (u.startsWith("-") || u.endsWith(".") || u.endsWith("-"))
      throw new Error("Invalid cookie domain");
  }
  function o(u) {
    typeof u == "number" && (u = new Date(u));
    const c = [
      "Sun",
      "Mon",
      "Tue",
      "Wed",
      "Thu",
      "Fri",
      "Sat"
    ], k = [
      "Jan",
      "Feb",
      "Mar",
      "Apr",
      "May",
      "Jun",
      "Jul",
      "Aug",
      "Sep",
      "Oct",
      "Nov",
      "Dec"
    ], g = c[u.getUTCDay()], N = u.getUTCDate().toString().padStart(2, "0"), y = k[u.getUTCMonth()], h = u.getUTCFullYear(), E = u.getUTCHours().toString().padStart(2, "0"), S = u.getUTCMinutes().toString().padStart(2, "0"), b = u.getUTCSeconds().toString().padStart(2, "0");
    return `${g}, ${N} ${y} ${h} ${E}:${S}:${b} GMT`;
  }
  function s(u) {
    if (u < 0)
      throw new Error("Invalid cookie max-age");
  }
  function A(u) {
    if (u.name.length === 0)
      return null;
    a(u.name), t(u.value);
    const c = [`${u.name}=${u.value}`];
    u.name.startsWith("__Secure-") && (u.secure = !0), u.name.startsWith("__Host-") && (u.secure = !0, u.domain = null, u.path = "/"), u.secure && c.push("Secure"), u.httpOnly && c.push("HttpOnly"), typeof u.maxAge == "number" && (s(u.maxAge), c.push(`Max-Age=${u.maxAge}`)), u.domain && (r(u.domain), c.push(`Domain=${u.domain}`)), u.path && (d(u.path), c.push(`Path=${u.path}`)), u.expires && u.expires.toString() !== "Invalid Date" && c.push(`Expires=${o(u.expires)}`), u.sameSite && c.push(`SameSite=${u.sameSite}`);
    for (const k of u.unparsed) {
      if (!k.includes("="))
        throw new Error("Invalid unparsed");
      const [g, ...N] = k.split("=");
      c.push(`${g.trim()}=${N.join("=")}`);
    }
    return c.join("; ");
  }
  let l;
  function m(u) {
    if (u[e])
      return u[e];
    l || (l = Object.getOwnPropertySymbols(u).find(
      (k) => k.description === "headers list"
    ), n(l, "Headers cannot be parsed"));
    const c = u[l];
    return n(c), c;
  }
  return So = {
    isCTLExcludingHtab: i,
    stringify: A,
    getHeadersList: m
  }, So;
}
var Do, wu;
function Jy() {
  if (wu)
    return Do;
  wu = 1;
  const { maxNameValuePairSize: n, maxAttributeValueSize: e } = Yy(), { isCTLExcludingHtab: i } = Yk(), { collectASequenceOfCodePointsFast: a } = Fn(), t = J;
  function d(o) {
    if (i(o))
      return null;
    let s = "", A = "", l = "", m = "";
    if (o.includes(";")) {
      const u = { position: 0 };
      s = a(";", o, u), A = o.slice(u.position);
    } else
      s = o;
    if (!s.includes("="))
      m = s;
    else {
      const u = { position: 0 };
      l = a(
        "=",
        s,
        u
      ), m = s.slice(u.position + 1);
    }
    return l = l.trim(), m = m.trim(), l.length + m.length > n ? null : {
      name: l,
      value: m,
      ...r(A)
    };
  }
  function r(o, s = {}) {
    if (o.length === 0)
      return s;
    t(o[0] === ";"), o = o.slice(1);
    let A = "";
    o.includes(";") ? (A = a(
      ";",
      o,
      { position: 0 }
    ), o = o.slice(A.length)) : (A = o, o = "");
    let l = "", m = "";
    if (A.includes("=")) {
      const c = { position: 0 };
      l = a(
        "=",
        A,
        c
      ), m = A.slice(c.position + 1);
    } else
      l = A;
    if (l = l.trim(), m = m.trim(), m.length > e)
      return r(o, s);
    const u = l.toLowerCase();
    if (u === "expires") {
      const c = new Date(m);
      s.expires = c;
    } else if (u === "max-age") {
      const c = m.charCodeAt(0);
      if ((c < 48 || c > 57) && m[0] !== "-" || !/^\d+$/.test(m))
        return r(o, s);
      const k = Number(m);
      s.maxAge = k;
    } else if (u === "domain") {
      let c = m;
      c[0] === "." && (c = c.slice(1)), c = c.toLowerCase(), s.domain = c;
    } else if (u === "path") {
      let c = "";
      m.length === 0 || m[0] !== "/" ? c = "/" : c = m, s.path = c;
    } else if (u === "secure")
      s.secure = !0;
    else if (u === "httponly")
      s.httpOnly = !0;
    else if (u === "samesite") {
      let c = "Default";
      const k = m.toLowerCase();
      k.includes("none") && (c = "None"), k.includes("strict") && (c = "Strict"), k.includes("lax") && (c = "Lax"), s.sameSite = c;
    } else
      s.unparsed ?? (s.unparsed = []), s.unparsed.push(`${l}=${m}`);
    return r(o, s);
  }
  return Do = {
    parseSetCookie: d,
    parseUnparsedAttributes: r
  }, Do;
}
var wo, Fu;
function Hy() {
  if (Fu)
    return wo;
  Fu = 1;
  const { parseSetCookie: n } = Jy(), { stringify: e, getHeadersList: i } = Yk(), { webidl: a } = Mi(), { Headers: t } = Dt();
  function d(A) {
    a.argumentLengthCheck(arguments, 1, { header: "getCookies" }), a.brandCheck(A, t, { strict: !1 });
    const l = A.get("cookie"), m = {};
    if (!l)
      return m;
    for (const u of l.split(";")) {
      const [c, ...k] = u.split("=");
      m[c.trim()] = k.join("=");
    }
    return m;
  }
  function r(A, l, m) {
    a.argumentLengthCheck(arguments, 2, { header: "deleteCookie" }), a.brandCheck(A, t, { strict: !1 }), l = a.converters.DOMString(l), m = a.converters.DeleteCookieAttributes(m), s(A, {
      name: l,
      value: "",
      expires: /* @__PURE__ */ new Date(0),
      ...m
    });
  }
  function o(A) {
    a.argumentLengthCheck(arguments, 1, { header: "getSetCookies" }), a.brandCheck(A, t, { strict: !1 });
    const l = i(A).cookies;
    return l ? l.map((m) => n(Array.isArray(m) ? m[1] : m)) : [];
  }
  function s(A, l) {
    a.argumentLengthCheck(arguments, 2, { header: "setCookie" }), a.brandCheck(A, t, { strict: !1 }), l = a.converters.Cookie(l), e(l) && A.append("Set-Cookie", e(l));
  }
  return a.converters.DeleteCookieAttributes = a.dictionaryConverter([
    {
      converter: a.nullableConverter(a.converters.DOMString),
      key: "path",
      defaultValue: null
    },
    {
      converter: a.nullableConverter(a.converters.DOMString),
      key: "domain",
      defaultValue: null
    }
  ]), a.converters.Cookie = a.dictionaryConverter([
    {
      converter: a.converters.DOMString,
      key: "name"
    },
    {
      converter: a.converters.DOMString,
      key: "value"
    },
    {
      converter: a.nullableConverter((A) => typeof A == "number" ? a.converters["unsigned long long"](A) : new Date(A)),
      key: "expires",
      defaultValue: null
    },
    {
      converter: a.nullableConverter(a.converters["long long"]),
      key: "maxAge",
      defaultValue: null
    },
    {
      converter: a.nullableConverter(a.converters.DOMString),
      key: "domain",
      defaultValue: null
    },
    {
      converter: a.nullableConverter(a.converters.DOMString),
      key: "path",
      defaultValue: null
    },
    {
      converter: a.nullableConverter(a.converters.boolean),
      key: "secure",
      defaultValue: null
    },
    {
      converter: a.nullableConverter(a.converters.boolean),
      key: "httpOnly",
      defaultValue: null
    },
    {
      converter: a.converters.USVString,
      key: "sameSite",
      allowedValues: ["Strict", "Lax", "None"]
    },
    {
      converter: a.sequenceConverter(a.converters.DOMString),
      key: "unparsed",
      defaultValue: []
    }
  ]), wo = {
    getCookies: d,
    deleteCookie: r,
    getSetCookies: o,
    setCookie: s
  }, wo;
}
var Fo, Vu;
function Nd() {
  if (Vu)
    return Fo;
  Vu = 1;
  const n = "258EAFA5-E914-47DA-95CA-C5AB0DC85B11", e = {
    enumerable: !0,
    writable: !1,
    configurable: !1
  }, i = {
    CONNECTING: 0,
    OPEN: 1,
    CLOSING: 2,
    CLOSED: 3
  }, a = {
    CONTINUATION: 0,
    TEXT: 1,
    BINARY: 2,
    CLOSE: 8,
    PING: 9,
    PONG: 10
  }, t = 2 ** 16 - 1, d = {
    INFO: 0,
    PAYLOADLENGTH_16: 2,
    PAYLOADLENGTH_64: 3,
    READ_DATA: 4
  }, r = Buffer.allocUnsafe(0);
  return Fo = {
    uid: n,
    staticPropertyDescriptors: e,
    states: i,
    opcodes: a,
    maxUnsigned16Bit: t,
    parserStates: d,
    emptyBuffer: r
  }, Fo;
}
var Vo, Tu;
function Mr() {
  return Tu || (Tu = 1, Vo = {
    kWebSocketURL: Symbol("url"),
    kReadyState: Symbol("ready state"),
    kController: Symbol("controller"),
    kResponse: Symbol("response"),
    kBinaryType: Symbol("binary type"),
    kSentClose: Symbol("sent close"),
    kReceivedClose: Symbol("received close"),
    kByteParser: Symbol("byte parser")
  }), Vo;
}
var To, _u;
function Jk() {
  var o, A, m;
  if (_u)
    return To;
  _u = 1;
  const { webidl: n } = Mi(), { kEnumerableProperty: e } = Ie, { MessagePort: i } = J, s = class s extends Event {
    constructor(g, N = {}) {
      n.argumentLengthCheck(arguments, 1, { header: "MessageEvent constructor" }), g = n.converters.DOMString(g), N = n.converters.MessageEventInit(N);
      super(g, N);
      pi(this, o, void 0);
      Ve(this, o, N);
    }
    get data() {
      return n.brandCheck(this, s), Y(this, o).data;
    }
    get origin() {
      return n.brandCheck(this, s), Y(this, o).origin;
    }
    get lastEventId() {
      return n.brandCheck(this, s), Y(this, o).lastEventId;
    }
    get source() {
      return n.brandCheck(this, s), Y(this, o).source;
    }
    get ports() {
      return n.brandCheck(this, s), Object.isFrozen(Y(this, o).ports) || Object.freeze(Y(this, o).ports), Y(this, o).ports;
    }
    initMessageEvent(g, N = !1, y = !1, h = null, E = "", S = "", b = null, I = []) {
      return n.brandCheck(this, s), n.argumentLengthCheck(arguments, 1, { header: "MessageEvent.initMessageEvent" }), new s(g, {
        bubbles: N,
        cancelable: y,
        data: h,
        origin: E,
        lastEventId: S,
        source: b,
        ports: I
      });
    }
  };
  o = new WeakMap();
  let a = s;
  const l = class l extends Event {
    constructor(g, N = {}) {
      n.argumentLengthCheck(arguments, 1, { header: "CloseEvent constructor" }), g = n.converters.DOMString(g), N = n.converters.CloseEventInit(N);
      super(g, N);
      pi(this, A, void 0);
      Ve(this, A, N);
    }
    get wasClean() {
      return n.brandCheck(this, l), Y(this, A).wasClean;
    }
    get code() {
      return n.brandCheck(this, l), Y(this, A).code;
    }
    get reason() {
      return n.brandCheck(this, l), Y(this, A).reason;
    }
  };
  A = new WeakMap();
  let t = l;
  const u = class u extends Event {
    constructor(g, N) {
      n.argumentLengthCheck(arguments, 1, { header: "ErrorEvent constructor" });
      super(g, N);
      pi(this, m, void 0);
      g = n.converters.DOMString(g), N = n.converters.ErrorEventInit(N ?? {}), Ve(this, m, N);
    }
    get message() {
      return n.brandCheck(this, u), Y(this, m).message;
    }
    get filename() {
      return n.brandCheck(this, u), Y(this, m).filename;
    }
    get lineno() {
      return n.brandCheck(this, u), Y(this, m).lineno;
    }
    get colno() {
      return n.brandCheck(this, u), Y(this, m).colno;
    }
    get error() {
      return n.brandCheck(this, u), Y(this, m).error;
    }
  };
  m = new WeakMap();
  let d = u;
  Object.defineProperties(a.prototype, {
    [Symbol.toStringTag]: {
      value: "MessageEvent",
      configurable: !0
    },
    data: e,
    origin: e,
    lastEventId: e,
    source: e,
    ports: e,
    initMessageEvent: e
  }), Object.defineProperties(t.prototype, {
    [Symbol.toStringTag]: {
      value: "CloseEvent",
      configurable: !0
    },
    reason: e,
    code: e,
    wasClean: e
  }), Object.defineProperties(d.prototype, {
    [Symbol.toStringTag]: {
      value: "ErrorEvent",
      configurable: !0
    },
    message: e,
    filename: e,
    lineno: e,
    colno: e,
    error: e
  }), n.converters.MessagePort = n.interfaceConverter(i), n.converters["sequence<MessagePort>"] = n.sequenceConverter(
    n.converters.MessagePort
  );
  const r = [
    {
      key: "bubbles",
      converter: n.converters.boolean,
      defaultValue: !1
    },
    {
      key: "cancelable",
      converter: n.converters.boolean,
      defaultValue: !1
    },
    {
      key: "composed",
      converter: n.converters.boolean,
      defaultValue: !1
    }
  ];
  return n.converters.MessageEventInit = n.dictionaryConverter([
    ...r,
    {
      key: "data",
      converter: n.converters.any,
      defaultValue: null
    },
    {
      key: "origin",
      converter: n.converters.USVString,
      defaultValue: ""
    },
    {
      key: "lastEventId",
      converter: n.converters.DOMString,
      defaultValue: ""
    },
    {
      key: "source",
      // Node doesn't implement WindowProxy or ServiceWorker, so the only
      // valid value for source is a MessagePort.
      converter: n.nullableConverter(n.converters.MessagePort),
      defaultValue: null
    },
    {
      key: "ports",
      converter: n.converters["sequence<MessagePort>"],
      get defaultValue() {
        return [];
      }
    }
  ]), n.converters.CloseEventInit = n.dictionaryConverter([
    ...r,
    {
      key: "wasClean",
      converter: n.converters.boolean,
      defaultValue: !1
    },
    {
      key: "code",
      converter: n.converters["unsigned short"],
      defaultValue: 0
    },
    {
      key: "reason",
      converter: n.converters.USVString,
      defaultValue: ""
    }
  ]), n.converters.ErrorEventInit = n.dictionaryConverter([
    ...r,
    {
      key: "message",
      converter: n.converters.DOMString,
      defaultValue: ""
    },
    {
      key: "filename",
      converter: n.converters.USVString,
      defaultValue: ""
    },
    {
      key: "lineno",
      converter: n.converters["unsigned long"],
      defaultValue: 0
    },
    {
      key: "colno",
      converter: n.converters["unsigned long"],
      defaultValue: 0
    },
    {
      key: "error",
      converter: n.converters.any
    }
  ]), To = {
    MessageEvent: a,
    CloseEvent: t,
    ErrorEvent: d
  }, To;
}
var _o, Ru;
function Rl() {
  if (Ru)
    return _o;
  Ru = 1;
  const { kReadyState: n, kController: e, kResponse: i, kBinaryType: a, kWebSocketURL: t } = Mr(), { states: d, opcodes: r } = Nd(), { MessageEvent: o, ErrorEvent: s } = Jk();
  function A(y) {
    return y[n] === d.OPEN;
  }
  function l(y) {
    return y[n] === d.CLOSING;
  }
  function m(y) {
    return y[n] === d.CLOSED;
  }
  function u(y, h, E = Event, S) {
    const b = new E(y, S);
    h.dispatchEvent(b);
  }
  function c(y, h, E) {
    if (y[n] !== d.OPEN)
      return;
    let S;
    if (h === r.TEXT)
      try {
        S = new TextDecoder("utf-8", { fatal: !0 }).decode(E);
      } catch {
        N(y, "Received invalid UTF-8 in text frame.");
        return;
      }
    else
      h === r.BINARY && (y[a] === "blob" ? S = new Blob([E]) : S = new Uint8Array(E).buffer);
    u("message", y, o, {
      origin: y[t].origin,
      data: S
    });
  }
  function k(y) {
    if (y.length === 0)
      return !1;
    for (const h of y) {
      const E = h.charCodeAt(0);
      if (E < 33 || E > 126 || h === "(" || h === ")" || h === "<" || h === ">" || h === "@" || h === "," || h === ";" || h === ":" || h === "\\" || h === '"' || h === "/" || h === "[" || h === "]" || h === "?" || h === "=" || h === "{" || h === "}" || E === 32 || // SP
      E === 9)
        return !1;
    }
    return !0;
  }
  function g(y) {
    return y >= 1e3 && y < 1015 ? y !== 1004 && // reserved
    y !== 1005 && // "MUST NOT be set as a status code"
    y !== 1006 : y >= 3e3 && y <= 4999;
  }
  function N(y, h) {
    const { [e]: E, [i]: S } = y;
    E.abort(), S != null && S.socket && !S.socket.destroyed && S.socket.destroy(), h && u("error", y, s, {
      error: new Error(h)
    });
  }
  return _o = {
    isEstablished: A,
    isClosing: l,
    isClosed: m,
    fireEvent: u,
    isValidSubprotocol: k,
    isValidStatusCode: g,
    failWebsocketConnection: N,
    websocketMessageReceived: c
  }, _o;
}
var Ro, Uu;
function jy() {
  if (Uu)
    return Ro;
  Uu = 1;
  const n = J, { uid: e, states: i } = Nd(), {
    kReadyState: a,
    kSentClose: t,
    kByteParser: d,
    kReceivedClose: r
  } = Mr(), { fireEvent: o, failWebsocketConnection: s } = Rl(), { CloseEvent: A } = Jk(), { makeRequest: l } = Gr(), { fetching: m } = Tl(), { Headers: u } = Dt(), { getGlobalDispatcher: c } = fd, { kHeadersList: k } = Ye, g = {};
  g.open = n.channel("undici:websocket:open"), g.close = n.channel("undici:websocket:close"), g.socketError = n.channel("undici:websocket:socket_error");
  let N;
  try {
    N = J;
  } catch {
  }
  function y(b, I, D, B, q) {
    const v = b;
    v.protocol = b.protocol === "ws:" ? "http:" : "https:";
    const Q = l({
      urlList: [v],
      serviceWorkers: "none",
      referrer: "no-referrer",
      mode: "websocket",
      credentials: "include",
      cache: "no-store",
      redirect: "error"
    });
    if (q.headers) {
      const U = new u(q.headers)[k];
      Q.headersList = U;
    }
    const _ = N.randomBytes(16).toString("base64");
    Q.headersList.append("sec-websocket-key", _), Q.headersList.append("sec-websocket-version", "13");
    for (const U of I)
      Q.headersList.append("sec-websocket-protocol", U);
    const M = "";
    return m({
      request: Q,
      useParallelQueue: !0,
      dispatcher: q.dispatcher ?? c(),
      processResponse(U) {
        var w, j;
        if (U.type === "error" || U.status !== 101) {
          s(D, "Received network error or non-101 status code.");
          return;
        }
        if (I.length !== 0 && !U.headersList.get("Sec-WebSocket-Protocol")) {
          s(D, "Server did not respond with sent protocols.");
          return;
        }
        if (((w = U.headersList.get("Upgrade")) == null ? void 0 : w.toLowerCase()) !== "websocket") {
          s(D, 'Server did not set Upgrade header to "websocket".');
          return;
        }
        if (((j = U.headersList.get("Connection")) == null ? void 0 : j.toLowerCase()) !== "upgrade") {
          s(D, 'Server did not set Connection header to "upgrade".');
          return;
        }
        const G = U.headersList.get("Sec-WebSocket-Accept"), H = N.createHash("sha1").update(_ + e).digest("base64");
        if (G !== H) {
          s(D, "Incorrect hash received in Sec-WebSocket-Accept header.");
          return;
        }
        const $ = U.headersList.get("Sec-WebSocket-Extensions");
        if ($ !== null && $ !== M) {
          s(D, "Received different permessage-deflate than the one set.");
          return;
        }
        const W = U.headersList.get("Sec-WebSocket-Protocol");
        if (W !== null && W !== Q.headersList.get("Sec-WebSocket-Protocol")) {
          s(D, "Protocol was not set in the opening handshake.");
          return;
        }
        U.socket.on("data", h), U.socket.on("close", E), U.socket.on("error", S), g.open.hasSubscribers && g.open.publish({
          address: U.socket.address(),
          protocol: W,
          extensions: $
        }), B(U);
      }
    });
  }
  function h(b) {
    this.ws[d].write(b) || this.pause();
  }
  function E() {
    const { ws: b } = this, I = b[t] && b[r];
    let D = 1005, B = "";
    const q = b[d].closingInfo;
    q ? (D = q.code ?? 1005, B = q.reason) : b[t] || (D = 1006), b[a] = i.CLOSED, o("close", b, A, {
      wasClean: I,
      code: D,
      reason: B
    }), g.close.hasSubscribers && g.close.publish({
      websocket: b,
      code: D,
      reason: B
    });
  }
  function S(b) {
    const { ws: I } = this;
    I[a] = i.CLOSING, g.socketError.hasSubscribers && g.socketError.publish(b), this.destroy();
  }
  return Ro = {
    establishWebSocketConnection: y
  }, Ro;
}
var Uo, Lu;
function Hk() {
  if (Lu)
    return Uo;
  Lu = 1;
  const { maxUnsigned16Bit: n } = Nd();
  let e;
  try {
    e = J;
  } catch {
  }
  class i {
    /**
     * @param {Buffer|undefined} data
     */
    constructor(t) {
      this.frameData = t, this.maskKey = e.randomBytes(4);
    }
    createFrame(t) {
      var A;
      const d = ((A = this.frameData) == null ? void 0 : A.byteLength) ?? 0;
      let r = d, o = 6;
      d > n ? (o += 8, r = 127) : d > 125 && (o += 2, r = 126);
      const s = Buffer.allocUnsafe(d + o);
      s[0] = s[1] = 0, s[0] |= 128, s[0] = (s[0] & 240) + t;
      /*! ws. MIT License. Einar Otto Stangvik <einaros@gmail.com> */
      s[o - 4] = this.maskKey[0], s[o - 3] = this.maskKey[1], s[o - 2] = this.maskKey[2], s[o - 1] = this.maskKey[3], s[1] = r, r === 126 ? s.writeUInt16BE(d, 2) : r === 127 && (s[2] = s[3] = 0, s.writeUIntBE(d, 4, 6)), s[1] |= 128;
      for (let l = 0; l < d; l++)
        s[o + l] = this.frameData[l] ^ this.maskKey[l % 4];
      return s;
    }
  }
  return Uo = {
    WebsocketFrameSend: i
  }, Uo;
}
var Lo, qu;
function Wy() {
  var N, y, h, E, S;
  if (qu)
    return Lo;
  qu = 1;
  const { Writable: n } = J, e = J, { parserStates: i, opcodes: a, states: t, emptyBuffer: d } = Nd(), { kReadyState: r, kSentClose: o, kResponse: s, kReceivedClose: A } = Mr(), { isValidStatusCode: l, failWebsocketConnection: m, websocketMessageReceived: u } = Rl(), { WebsocketFrameSend: c } = Hk(), k = {};
  k.ping = e.channel("undici:websocket:ping"), k.pong = e.channel("undici:websocket:pong");
  class g extends n {
    constructor(D) {
      super();
      pi(this, N, []);
      pi(this, y, 0);
      pi(this, h, i.INFO);
      pi(this, E, {});
      pi(this, S, []);
      this.ws = D;
    }
    /**
     * @param {Buffer} chunk
     * @param {() => void} callback
     */
    _write(D, B, q) {
      Y(this, N).push(D), Ve(this, y, Y(this, y) + D.length), this.run(q);
    }
    /**
     * Runs whenever a new chunk is received.
     * Callback is called whenever there are no more chunks buffering,
     * or not enough bytes are buffered to parse.
     */
    run(D) {
      var B;
      for (; ; ) {
        if (Y(this, h) === i.INFO) {
          if (Y(this, y) < 2)
            return D();
          const q = this.consume(2);
          if (Y(this, E).fin = (q[0] & 128) !== 0, Y(this, E).opcode = q[0] & 15, (B = Y(this, E)).originalOpcode ?? (B.originalOpcode = Y(this, E).opcode), Y(this, E).fragmented = !Y(this, E).fin && Y(this, E).opcode !== a.CONTINUATION, Y(this, E).fragmented && Y(this, E).opcode !== a.BINARY && Y(this, E).opcode !== a.TEXT) {
            m(this.ws, "Invalid frame type was fragmented.");
            return;
          }
          const v = q[1] & 127;
          if (v <= 125 ? (Y(this, E).payloadLength = v, Ve(this, h, i.READ_DATA)) : v === 126 ? Ve(this, h, i.PAYLOADLENGTH_16) : v === 127 && Ve(this, h, i.PAYLOADLENGTH_64), Y(this, E).fragmented && v > 125) {
            m(this.ws, "Fragmented frame exceeded 125 bytes.");
            return;
          } else if ((Y(this, E).opcode === a.PING || Y(this, E).opcode === a.PONG || Y(this, E).opcode === a.CLOSE) && v > 125) {
            m(this.ws, "Payload length for control frame exceeded 125 bytes.");
            return;
          } else if (Y(this, E).opcode === a.CLOSE) {
            if (v === 1) {
              m(this.ws, "Received close frame with a 1-byte body.");
              return;
            }
            const Q = this.consume(v);
            if (Y(this, E).closeInfo = this.parseCloseBody(!1, Q), !this.ws[o]) {
              const _ = Buffer.allocUnsafe(2);
              _.writeUInt16BE(Y(this, E).closeInfo.code, 0);
              const M = new c(_);
              this.ws[s].socket.write(
                M.createFrame(a.CLOSE),
                (se) => {
                  se || (this.ws[o] = !0);
                }
              );
            }
            this.ws[r] = t.CLOSING, this.ws[A] = !0, this.end();
            return;
          } else if (Y(this, E).opcode === a.PING) {
            const Q = this.consume(v);
            if (!this.ws[A]) {
              const _ = new c(Q);
              this.ws[s].socket.write(_.createFrame(a.PONG)), k.ping.hasSubscribers && k.ping.publish({
                payload: Q
              });
            }
            if (Ve(this, h, i.INFO), Y(this, y) > 0)
              continue;
            D();
            return;
          } else if (Y(this, E).opcode === a.PONG) {
            const Q = this.consume(v);
            if (k.pong.hasSubscribers && k.pong.publish({
              payload: Q
            }), Y(this, y) > 0)
              continue;
            D();
            return;
          }
        } else if (Y(this, h) === i.PAYLOADLENGTH_16) {
          if (Y(this, y) < 2)
            return D();
          const q = this.consume(2);
          Y(this, E).payloadLength = q.readUInt16BE(0), Ve(this, h, i.READ_DATA);
        } else if (Y(this, h) === i.PAYLOADLENGTH_64) {
          if (Y(this, y) < 8)
            return D();
          const q = this.consume(8), v = q.readUInt32BE(0);
          if (v > 2 ** 31 - 1) {
            m(this.ws, "Received payload length > 2^31 bytes.");
            return;
          }
          const Q = q.readUInt32BE(4);
          Y(this, E).payloadLength = (v << 8) + Q, Ve(this, h, i.READ_DATA);
        } else if (Y(this, h) === i.READ_DATA) {
          if (Y(this, y) < Y(this, E).payloadLength)
            return D();
          if (Y(this, y) >= Y(this, E).payloadLength) {
            const q = this.consume(Y(this, E).payloadLength);
            if (Y(this, S).push(q), !Y(this, E).fragmented || Y(this, E).fin && Y(this, E).opcode === a.CONTINUATION) {
              const v = Buffer.concat(Y(this, S));
              u(this.ws, Y(this, E).originalOpcode, v), Ve(this, E, {}), Y(this, S).length = 0;
            }
            Ve(this, h, i.INFO);
          }
        }
        if (!(Y(this, y) > 0)) {
          D();
          break;
        }
      }
    }
    /**
     * Take n bytes from the buffered Buffers
     * @param {number} n
     * @returns {Buffer|null}
     */
    consume(D) {
      if (D > Y(this, y))
        return null;
      if (D === 0)
        return d;
      if (Y(this, N)[0].length === D)
        return Ve(this, y, Y(this, y) - Y(this, N)[0].length), Y(this, N).shift();
      const B = Buffer.allocUnsafe(D);
      let q = 0;
      for (; q !== D; ) {
        const v = Y(this, N)[0], { length: Q } = v;
        if (Q + q === D) {
          B.set(Y(this, N).shift(), q);
          break;
        } else if (Q + q > D) {
          B.set(v.subarray(0, D - q), q), Y(this, N)[0] = v.subarray(D - q);
          break;
        } else
          B.set(Y(this, N).shift(), q), q += v.length;
      }
      return Ve(this, y, Y(this, y) - D), B;
    }
    parseCloseBody(D, B) {
      let q;
      if (B.length >= 2 && (q = B.readUInt16BE(0)), D)
        return l(q) ? { code: q } : null;
      let v = B.subarray(2);
      if (v[0] === 239 && v[1] === 187 && v[2] === 191 && (v = v.subarray(3)), q !== void 0 && !l(q))
        return null;
      try {
        v = new TextDecoder("utf-8", { fatal: !0 }).decode(v);
      } catch {
        return null;
      }
      return { code: q, reason: v };
    }
    get closingInfo() {
      return Y(this, E).closeInfo;
    }
  }
  return N = new WeakMap(), y = new WeakMap(), h = new WeakMap(), E = new WeakMap(), S = new WeakMap(), Lo = {
    ByteParser: g
  }, Lo;
}
var qo, Pu;
function zy() {
  var M, se, U, G, H, jk;
  if (Pu)
    return qo;
  Pu = 1;
  const { webidl: n } = Mi(), { DOMException: e } = Oa(), { URLSerializer: i } = Fn(), { getGlobalOrigin: a } = kd(), { staticPropertyDescriptors: t, states: d, opcodes: r, emptyBuffer: o } = Nd(), {
    kWebSocketURL: s,
    kReadyState: A,
    kController: l,
    kBinaryType: m,
    kResponse: u,
    kSentClose: c,
    kByteParser: k
  } = Mr(), { isEstablished: g, isClosing: N, isValidSubprotocol: y, failWebsocketConnection: h, fireEvent: E } = Rl(), { establishWebSocketConnection: S } = jy(), { WebsocketFrameSend: b } = Hk(), { ByteParser: I } = Wy(), { kEnumerableProperty: D, isBlobLike: B } = Ie, { getGlobalDispatcher: q } = fd, { types: v } = J;
  let Q = !1;
  const W = class W extends EventTarget {
    /**
     * @param {string} url
     * @param {string|string[]} protocols
     */
    constructor(R, F = []) {
      super();
      /**
       * @see https://websockets.spec.whatwg.org/#feedback-from-the-protocol
       */
      pi(this, H);
      pi(this, M, {
        open: null,
        error: null,
        close: null,
        message: null
      });
      pi(this, se, 0);
      pi(this, U, "");
      pi(this, G, "");
      n.argumentLengthCheck(arguments, 1, { header: "WebSocket constructor" }), Q || (Q = !0, process.emitWarning("WebSockets are experimental, expect them to change at any time.", {
        code: "UNDICI-WS"
      }));
      const V = n.converters["DOMString or sequence<DOMString> or WebSocketInit"](F);
      R = n.converters.USVString(R), F = V.protocols;
      const P = a();
      let O;
      try {
        O = new URL(R, P);
      } catch (Z) {
        throw new e(Z, "SyntaxError");
      }
      if (O.protocol === "http:" ? O.protocol = "ws:" : O.protocol === "https:" && (O.protocol = "wss:"), O.protocol !== "ws:" && O.protocol !== "wss:")
        throw new e(
          `Expected a ws: or wss: protocol, got ${O.protocol}`,
          "SyntaxError"
        );
      if (O.hash || O.href.endsWith("#"))
        throw new e("Got fragment", "SyntaxError");
      if (typeof F == "string" && (F = [F]), F.length !== new Set(F.map((Z) => Z.toLowerCase())).size)
        throw new e("Invalid Sec-WebSocket-Protocol value", "SyntaxError");
      if (F.length > 0 && !F.every((Z) => y(Z)))
        throw new e("Invalid Sec-WebSocket-Protocol value", "SyntaxError");
      this[s] = new URL(O.href), this[l] = S(
        O,
        F,
        this,
        (Z) => on(this, H, jk).call(this, Z),
        V
      ), this[A] = W.CONNECTING, this[m] = "blob";
    }
    /**
     * @see https://websockets.spec.whatwg.org/#dom-websocket-close
     * @param {number|undefined} code
     * @param {string|undefined} reason
     */
    close(R = void 0, F = void 0) {
      if (n.brandCheck(this, W), R !== void 0 && (R = n.converters["unsigned short"](R, { clamp: !0 })), F !== void 0 && (F = n.converters.USVString(F)), R !== void 0 && R !== 1e3 && (R < 3e3 || R > 4999))
        throw new e("invalid code", "InvalidAccessError");
      let V = 0;
      if (F !== void 0 && (V = Buffer.byteLength(F), V > 123))
        throw new e(
          `Reason must be less than 123 bytes; received ${V}`,
          "SyntaxError"
        );
      if (!(this[A] === W.CLOSING || this[A] === W.CLOSED))
        if (!g(this))
          h(this, "Connection was closed before it was established."), this[A] = W.CLOSING;
        else if (N(this))
          this[A] = W.CLOSING;
        else {
          const P = new b();
          R !== void 0 && F === void 0 ? (P.frameData = Buffer.allocUnsafe(2), P.frameData.writeUInt16BE(R, 0)) : R !== void 0 && F !== void 0 ? (P.frameData = Buffer.allocUnsafe(2 + V), P.frameData.writeUInt16BE(R, 0), P.frameData.write(F, 2, "utf-8")) : P.frameData = o, this[u].socket.write(P.createFrame(r.CLOSE), (Z) => {
            Z || (this[c] = !0);
          }), this[A] = d.CLOSING;
        }
    }
    /**
     * @see https://websockets.spec.whatwg.org/#dom-websocket-send
     * @param {NodeJS.TypedArray|ArrayBuffer|Blob|string} data
     */
    send(R) {
      if (n.brandCheck(this, W), n.argumentLengthCheck(arguments, 1, { header: "WebSocket.send" }), R = n.converters.WebSocketSendData(R), this[A] === W.CONNECTING)
        throw new e("Sent before connected.", "InvalidStateError");
      if (!g(this) || N(this))
        return;
      const F = this[u].socket;
      if (typeof R == "string") {
        const V = Buffer.from(R), O = new b(V).createFrame(r.TEXT);
        Ve(this, se, Y(this, se) + V.byteLength), F.write(O, () => {
          Ve(this, se, Y(this, se) - V.byteLength);
        });
      } else if (v.isArrayBuffer(R)) {
        const V = Buffer.from(R), O = new b(V).createFrame(r.BINARY);
        Ve(this, se, Y(this, se) + V.byteLength), F.write(O, () => {
          Ve(this, se, Y(this, se) - V.byteLength);
        });
      } else if (ArrayBuffer.isView(R)) {
        const V = Buffer.from(R, R.byteOffset, R.byteLength), O = new b(V).createFrame(r.BINARY);
        Ve(this, se, Y(this, se) + V.byteLength), F.write(O, () => {
          Ve(this, se, Y(this, se) - V.byteLength);
        });
      } else if (B(R)) {
        const V = new b();
        R.arrayBuffer().then((P) => {
          const O = Buffer.from(P);
          V.frameData = O;
          const Z = V.createFrame(r.BINARY);
          Ve(this, se, Y(this, se) + O.byteLength), F.write(Z, () => {
            Ve(this, se, Y(this, se) - O.byteLength);
          });
        });
      }
    }
    get readyState() {
      return n.brandCheck(this, W), this[A];
    }
    get bufferedAmount() {
      return n.brandCheck(this, W), Y(this, se);
    }
    get url() {
      return n.brandCheck(this, W), i(this[s]);
    }
    get extensions() {
      return n.brandCheck(this, W), Y(this, G);
    }
    get protocol() {
      return n.brandCheck(this, W), Y(this, U);
    }
    get onopen() {
      return n.brandCheck(this, W), Y(this, M).open;
    }
    set onopen(R) {
      n.brandCheck(this, W), Y(this, M).open && this.removeEventListener("open", Y(this, M).open), typeof R == "function" ? (Y(this, M).open = R, this.addEventListener("open", R)) : Y(this, M).open = null;
    }
    get onerror() {
      return n.brandCheck(this, W), Y(this, M).error;
    }
    set onerror(R) {
      n.brandCheck(this, W), Y(this, M).error && this.removeEventListener("error", Y(this, M).error), typeof R == "function" ? (Y(this, M).error = R, this.addEventListener("error", R)) : Y(this, M).error = null;
    }
    get onclose() {
      return n.brandCheck(this, W), Y(this, M).close;
    }
    set onclose(R) {
      n.brandCheck(this, W), Y(this, M).close && this.removeEventListener("close", Y(this, M).close), typeof R == "function" ? (Y(this, M).close = R, this.addEventListener("close", R)) : Y(this, M).close = null;
    }
    get onmessage() {
      return n.brandCheck(this, W), Y(this, M).message;
    }
    set onmessage(R) {
      n.brandCheck(this, W), Y(this, M).message && this.removeEventListener("message", Y(this, M).message), typeof R == "function" ? (Y(this, M).message = R, this.addEventListener("message", R)) : Y(this, M).message = null;
    }
    get binaryType() {
      return n.brandCheck(this, W), this[m];
    }
    set binaryType(R) {
      n.brandCheck(this, W), R !== "blob" && R !== "arraybuffer" ? this[m] = "blob" : this[m] = R;
    }
  };
  M = new WeakMap(), se = new WeakMap(), U = new WeakMap(), G = new WeakMap(), H = new WeakSet(), jk = function(R) {
    this[u] = R;
    const F = new I(this);
    F.on("drain", function() {
      this.ws[u].socket.resume();
    }), R.socket.ws = this, this[k] = F, this[A] = d.OPEN;
    const V = R.headersList.get("sec-websocket-extensions");
    V !== null && Ve(this, G, V);
    const P = R.headersList.get("sec-websocket-protocol");
    P !== null && Ve(this, U, P), E("open", this);
  };
  let _ = W;
  return _.CONNECTING = _.prototype.CONNECTING = d.CONNECTING, _.OPEN = _.prototype.OPEN = d.OPEN, _.CLOSING = _.prototype.CLOSING = d.CLOSING, _.CLOSED = _.prototype.CLOSED = d.CLOSED, Object.defineProperties(_.prototype, {
    CONNECTING: t,
    OPEN: t,
    CLOSING: t,
    CLOSED: t,
    url: D,
    readyState: D,
    bufferedAmount: D,
    onopen: D,
    onerror: D,
    onclose: D,
    close: D,
    onmessage: D,
    binaryType: D,
    send: D,
    extensions: D,
    protocol: D,
    [Symbol.toStringTag]: {
      value: "WebSocket",
      writable: !1,
      enumerable: !1,
      configurable: !0
    }
  }), Object.defineProperties(_, {
    CONNECTING: t,
    OPEN: t,
    CLOSING: t,
    CLOSED: t
  }), n.converters["sequence<DOMString>"] = n.sequenceConverter(
    n.converters.DOMString
  ), n.converters["DOMString or sequence<DOMString>"] = function(w) {
    return n.util.Type(w) === "Object" && Symbol.iterator in w ? n.converters["sequence<DOMString>"](w) : n.converters.DOMString(w);
  }, n.converters.WebSocketInit = n.dictionaryConverter([
    {
      key: "protocols",
      converter: n.converters["DOMString or sequence<DOMString>"],
      get defaultValue() {
        return [];
      }
    },
    {
      key: "dispatcher",
      converter: (w) => w,
      get defaultValue() {
        return q();
      }
    },
    {
      key: "headers",
      converter: n.nullableConverter(n.converters.HeadersInit)
    }
  ]), n.converters["DOMString or sequence<DOMString> or WebSocketInit"] = function(w) {
    return n.util.Type(w) === "Object" && !(Symbol.iterator in w) ? n.converters.WebSocketInit(w) : { protocols: n.converters["DOMString or sequence<DOMString>"](w) };
  }, n.converters.WebSocketSendData = function(w) {
    if (n.util.Type(w) === "Object") {
      if (B(w))
        return n.converters.Blob(w, { strict: !1 });
      if (ArrayBuffer.isView(w) || v.isAnyArrayBuffer(w))
        return n.converters.BufferSource(w);
    }
    return n.converters.USVString(w);
  }, qo = {
    WebSocket: _
  }, qo;
}
const Zy = Lr, Wk = Ql, zk = Le, Ky = vd, Xy = i4, $y = qr, La = Ie, { InvalidArgumentError: or } = zk, wt = St, eb = Rr, ib = Uk, nb = cy, ab = Lk, tb = Ck, db = Dy, rb = Ty, { getGlobalDispatcher: Zk, setGlobalDispatcher: sb } = fd, ob = Uy, lb = Gc, Ab = Dl;
let sl;
try {
  sl = !0;
} catch {
  sl = !1;
}
Object.assign(Wk.prototype, wt);
he.Dispatcher = Wk;
he.Client = Zy;
he.Pool = Ky;
he.BalancedPool = Xy;
he.Agent = $y;
he.ProxyAgent = db;
he.RetryHandler = rb;
he.DecoratorHandler = ob;
he.RedirectHandler = lb;
he.createRedirectInterceptor = Ab;
he.buildConnector = eb;
he.errors = zk;
function Ed(n) {
  return (e, i, a) => {
    if (typeof i == "function" && (a = i, i = null), !e || typeof e != "string" && typeof e != "object" && !(e instanceof URL))
      throw new or("invalid url");
    if (i != null && typeof i != "object")
      throw new or("invalid opts");
    if (i && i.path != null) {
      if (typeof i.path != "string")
        throw new or("invalid opts.path");
      let r = i.path;
      i.path.startsWith("/") || (r = `/${r}`), e = new URL(La.parseOrigin(e).origin + r);
    } else
      i || (i = typeof e == "object" ? e : {}), e = La.parseURL(e);
    const { agent: t, dispatcher: d = Zk() } = i;
    if (t)
      throw new or("unsupported opts.agent. Did you mean opts.client?");
    return n.call(d, {
      ...i,
      origin: e.origin,
      path: e.search ? `${e.pathname}${e.search}` : e.pathname,
      method: i.method || (i.body ? "PUT" : "GET")
    }, a);
  };
}
he.setGlobalDispatcher = sb;
he.getGlobalDispatcher = Zk;
if (La.nodeMajor > 16 || La.nodeMajor === 16 && La.nodeMinor >= 8) {
  let n = null;
  he.fetch = async function(r) {
    n || (n = Tl().fetch);
    try {
      return await n(...arguments);
    } catch (o) {
      throw typeof o == "object" && Error.captureStackTrace(o, this), o;
    }
  }, he.Headers = Dt().Headers, he.Response = Vl().Response, he.Request = Gr().Request, he.FormData = Bl().FormData, he.File = Cl().File, he.FileReader = Oy().FileReader;
  const { setGlobalOrigin: e, getGlobalOrigin: i } = kd();
  he.setGlobalOrigin = e, he.getGlobalOrigin = i;
  const { CacheStorage: a } = xy(), { kConstruct: t } = _l();
  he.caches = new a(t);
}
if (La.nodeMajor >= 16) {
  const { deleteCookie: n, getCookies: e, getSetCookies: i, setCookie: a } = Hy();
  he.deleteCookie = n, he.getCookies = e, he.getSetCookies = i, he.setCookie = a;
  const { parseMIMEType: t, serializeAMimeType: d } = Fn();
  he.parseMIMEType = t, he.serializeAMimeType = d;
}
if (La.nodeMajor >= 18 && sl) {
  const { WebSocket: n } = zy();
  he.WebSocket = n;
}
he.request = Ed(wt.request);
he.stream = Ed(wt.stream);
he.pipeline = Ed(wt.pipeline);
he.connect = Ed(wt.connect);
he.upgrade = Ed(wt.upgrade);
he.MockClient = ib;
he.MockPool = ab;
he.MockAgent = nb;
he.mockErrors = tb;
var mb = me && me.__createBinding || (Object.create ? function(n, e, i, a) {
  a === void 0 && (a = i);
  var t = Object.getOwnPropertyDescriptor(e, i);
  (!t || ("get" in t ? !e.__esModule : t.writable || t.configurable)) && (t = { enumerable: !0, get: function() {
    return e[i];
  } }), Object.defineProperty(n, a, t);
} : function(n, e, i, a) {
  a === void 0 && (a = i), n[a] = e[i];
}), ub = me && me.__setModuleDefault || (Object.create ? function(n, e) {
  Object.defineProperty(n, "default", { enumerable: !0, value: e });
} : function(n, e) {
  n.default = e;
}), xr = me && me.__importStar || function(n) {
  if (n && n.__esModule)
    return n;
  var e = {};
  if (n != null)
    for (var i in n)
      i !== "default" && Object.prototype.hasOwnProperty.call(n, i) && mb(e, n, i);
  return ub(e, n), e;
}, ti = me && me.__awaiter || function(n, e, i, a) {
  function t(d) {
    return d instanceof i ? d : new i(function(r) {
      r(d);
    });
  }
  return new (i || (i = Promise))(function(d, r) {
    function o(l) {
      try {
        A(a.next(l));
      } catch (m) {
        r(m);
      }
    }
    function s(l) {
      try {
        A(a.throw(l));
      } catch (m) {
        r(m);
      }
    }
    function A(l) {
      l.done ? d(l.value) : t(l.value).then(o, s);
    }
    A((a = a.apply(n, e || [])).next());
  });
};
Object.defineProperty(ki, "__esModule", { value: !0 });
ki.HttpClient = ki.isHttps = ki.HttpClientResponse = ki.HttpClientError = ki.getProxyUrl = ki.MediaTypes = ki.Headers = ki.HttpCodes = void 0;
const lr = xr(J), Po = xr(J), ol = xr(Nt), Ar = xr(W2), pb = he;
var nn;
(function(n) {
  n[n.OK = 200] = "OK", n[n.MultipleChoices = 300] = "MultipleChoices", n[n.MovedPermanently = 301] = "MovedPermanently", n[n.ResourceMoved = 302] = "ResourceMoved", n[n.SeeOther = 303] = "SeeOther", n[n.NotModified = 304] = "NotModified", n[n.UseProxy = 305] = "UseProxy", n[n.SwitchProxy = 306] = "SwitchProxy", n[n.TemporaryRedirect = 307] = "TemporaryRedirect", n[n.PermanentRedirect = 308] = "PermanentRedirect", n[n.BadRequest = 400] = "BadRequest", n[n.Unauthorized = 401] = "Unauthorized", n[n.PaymentRequired = 402] = "PaymentRequired", n[n.Forbidden = 403] = "Forbidden", n[n.NotFound = 404] = "NotFound", n[n.MethodNotAllowed = 405] = "MethodNotAllowed", n[n.NotAcceptable = 406] = "NotAcceptable", n[n.ProxyAuthenticationRequired = 407] = "ProxyAuthenticationRequired", n[n.RequestTimeout = 408] = "RequestTimeout", n[n.Conflict = 409] = "Conflict", n[n.Gone = 410] = "Gone", n[n.TooManyRequests = 429] = "TooManyRequests", n[n.InternalServerError = 500] = "InternalServerError", n[n.NotImplemented = 501] = "NotImplemented", n[n.BadGateway = 502] = "BadGateway", n[n.ServiceUnavailable = 503] = "ServiceUnavailable", n[n.GatewayTimeout = 504] = "GatewayTimeout";
})(nn || (ki.HttpCodes = nn = {}));
var wi;
(function(n) {
  n.Accept = "accept", n.ContentType = "content-type";
})(wi || (ki.Headers = wi = {}));
var Yn;
(function(n) {
  n.ApplicationJson = "application/json";
})(Yn || (ki.MediaTypes = Yn = {}));
function cb(n) {
  const e = ol.getProxyUrl(new URL(n));
  return e ? e.href : "";
}
ki.getProxyUrl = cb;
const kb = [
  nn.MovedPermanently,
  nn.ResourceMoved,
  nn.SeeOther,
  nn.TemporaryRedirect,
  nn.PermanentRedirect
], vb = [
  nn.BadGateway,
  nn.ServiceUnavailable,
  nn.GatewayTimeout
], gb = ["OPTIONS", "GET", "DELETE", "HEAD"], hb = 10, fb = 5;
class Yr extends Error {
  constructor(e, i) {
    super(e), this.name = "HttpClientError", this.statusCode = i, Object.setPrototypeOf(this, Yr.prototype);
  }
}
ki.HttpClientError = Yr;
class Kk {
  constructor(e) {
    this.message = e;
  }
  readBody() {
    return ti(this, void 0, void 0, function* () {
      return new Promise((e) => ti(this, void 0, void 0, function* () {
        let i = Buffer.alloc(0);
        this.message.on("data", (a) => {
          i = Buffer.concat([i, a]);
        }), this.message.on("end", () => {
          e(i.toString());
        });
      }));
    });
  }
  readBodyBuffer() {
    return ti(this, void 0, void 0, function* () {
      return new Promise((e) => ti(this, void 0, void 0, function* () {
        const i = [];
        this.message.on("data", (a) => {
          i.push(a);
        }), this.message.on("end", () => {
          e(Buffer.concat(i));
        });
      }));
    });
  }
}
ki.HttpClientResponse = Kk;
function Nb(n) {
  return new URL(n).protocol === "https:";
}
ki.isHttps = Nb;
class Eb {
  constructor(e, i, a) {
    this._ignoreSslError = !1, this._allowRedirects = !0, this._allowRedirectDowngrade = !1, this._maxRedirects = 50, this._allowRetries = !1, this._maxRetries = 1, this._keepAlive = !1, this._disposed = !1, this.userAgent = e, this.handlers = i || [], this.requestOptions = a, a && (a.ignoreSslError != null && (this._ignoreSslError = a.ignoreSslError), this._socketTimeout = a.socketTimeout, a.allowRedirects != null && (this._allowRedirects = a.allowRedirects), a.allowRedirectDowngrade != null && (this._allowRedirectDowngrade = a.allowRedirectDowngrade), a.maxRedirects != null && (this._maxRedirects = Math.max(a.maxRedirects, 0)), a.keepAlive != null && (this._keepAlive = a.keepAlive), a.allowRetries != null && (this._allowRetries = a.allowRetries), a.maxRetries != null && (this._maxRetries = a.maxRetries));
  }
  options(e, i) {
    return ti(this, void 0, void 0, function* () {
      return this.request("OPTIONS", e, null, i || {});
    });
  }
  get(e, i) {
    return ti(this, void 0, void 0, function* () {
      return this.request("GET", e, null, i || {});
    });
  }
  del(e, i) {
    return ti(this, void 0, void 0, function* () {
      return this.request("DELETE", e, null, i || {});
    });
  }
  post(e, i, a) {
    return ti(this, void 0, void 0, function* () {
      return this.request("POST", e, i, a || {});
    });
  }
  patch(e, i, a) {
    return ti(this, void 0, void 0, function* () {
      return this.request("PATCH", e, i, a || {});
    });
  }
  put(e, i, a) {
    return ti(this, void 0, void 0, function* () {
      return this.request("PUT", e, i, a || {});
    });
  }
  head(e, i) {
    return ti(this, void 0, void 0, function* () {
      return this.request("HEAD", e, null, i || {});
    });
  }
  sendStream(e, i, a, t) {
    return ti(this, void 0, void 0, function* () {
      return this.request(e, i, a, t);
    });
  }
  /**
   * Gets a typed object from an endpoint
   * Be aware that not found returns a null.  Other errors (4xx, 5xx) reject the promise
   */
  getJson(e, i = {}) {
    return ti(this, void 0, void 0, function* () {
      i[wi.Accept] = this._getExistingOrDefaultHeader(i, wi.Accept, Yn.ApplicationJson);
      const a = yield this.get(e, i);
      return this._processResponse(a, this.requestOptions);
    });
  }
  postJson(e, i, a = {}) {
    return ti(this, void 0, void 0, function* () {
      const t = JSON.stringify(i, null, 2);
      a[wi.Accept] = this._getExistingOrDefaultHeader(a, wi.Accept, Yn.ApplicationJson), a[wi.ContentType] = this._getExistingOrDefaultHeader(a, wi.ContentType, Yn.ApplicationJson);
      const d = yield this.post(e, t, a);
      return this._processResponse(d, this.requestOptions);
    });
  }
  putJson(e, i, a = {}) {
    return ti(this, void 0, void 0, function* () {
      const t = JSON.stringify(i, null, 2);
      a[wi.Accept] = this._getExistingOrDefaultHeader(a, wi.Accept, Yn.ApplicationJson), a[wi.ContentType] = this._getExistingOrDefaultHeader(a, wi.ContentType, Yn.ApplicationJson);
      const d = yield this.put(e, t, a);
      return this._processResponse(d, this.requestOptions);
    });
  }
  patchJson(e, i, a = {}) {
    return ti(this, void 0, void 0, function* () {
      const t = JSON.stringify(i, null, 2);
      a[wi.Accept] = this._getExistingOrDefaultHeader(a, wi.Accept, Yn.ApplicationJson), a[wi.ContentType] = this._getExistingOrDefaultHeader(a, wi.ContentType, Yn.ApplicationJson);
      const d = yield this.patch(e, t, a);
      return this._processResponse(d, this.requestOptions);
    });
  }
  /**
   * Makes a raw http request.
   * All other methods such as get, post, patch, and request ultimately call this.
   * Prefer get, del, post and patch
   */
  request(e, i, a, t) {
    return ti(this, void 0, void 0, function* () {
      if (this._disposed)
        throw new Error("Client has already been disposed.");
      const d = new URL(i);
      let r = this._prepareRequest(e, d, t);
      const o = this._allowRetries && gb.includes(e) ? this._maxRetries + 1 : 1;
      let s = 0, A;
      do {
        if (A = yield this.requestRaw(r, a), A && A.message && A.message.statusCode === nn.Unauthorized) {
          let m;
          for (const u of this.handlers)
            if (u.canHandleAuthentication(A)) {
              m = u;
              break;
            }
          return m ? m.handleAuthentication(this, r, a) : A;
        }
        let l = this._maxRedirects;
        for (; A.message.statusCode && kb.includes(A.message.statusCode) && this._allowRedirects && l > 0; ) {
          const m = A.message.headers.location;
          if (!m)
            break;
          const u = new URL(m);
          if (d.protocol === "https:" && d.protocol !== u.protocol && !this._allowRedirectDowngrade)
            throw new Error("Redirect from HTTPS to HTTP protocol. This downgrade is not allowed for security reasons. If you want to allow this behavior, set the allowRedirectDowngrade option to true.");
          if (yield A.readBody(), u.hostname !== d.hostname)
            for (const c in t)
              c.toLowerCase() === "authorization" && delete t[c];
          r = this._prepareRequest(e, u, t), A = yield this.requestRaw(r, a), l--;
        }
        if (!A.message.statusCode || !vb.includes(A.message.statusCode))
          return A;
        s += 1, s < o && (yield A.readBody(), yield this._performExponentialBackoff(s));
      } while (s < o);
      return A;
    });
  }
  /**
   * Needs to be called if keepAlive is set to true in request options.
   */
  dispose() {
    this._agent && this._agent.destroy(), this._disposed = !0;
  }
  /**
   * Raw request.
   * @param info
   * @param data
   */
  requestRaw(e, i) {
    return ti(this, void 0, void 0, function* () {
      return new Promise((a, t) => {
        function d(r, o) {
          r ? t(r) : o ? a(o) : t(new Error("Unknown error"));
        }
        this.requestRawWithCallback(e, i, d);
      });
    });
  }
  /**
   * Raw request with callback.
   * @param info
   * @param data
   * @param onResult
   */
  requestRawWithCallback(e, i, a) {
    typeof i == "string" && (e.options.headers || (e.options.headers = {}), e.options.headers["Content-Length"] = Buffer.byteLength(i, "utf8"));
    let t = !1;
    function d(s, A) {
      t || (t = !0, a(s, A));
    }
    const r = e.httpModule.request(e.options, (s) => {
      const A = new Kk(s);
      d(void 0, A);
    });
    let o;
    r.on("socket", (s) => {
      o = s;
    }), r.setTimeout(this._socketTimeout || 3 * 6e4, () => {
      o && o.end(), d(new Error(`Request timeout: ${e.options.path}`));
    }), r.on("error", function(s) {
      d(s);
    }), i && typeof i == "string" && r.write(i, "utf8"), i && typeof i != "string" ? (i.on("close", function() {
      r.end();
    }), i.pipe(r)) : r.end();
  }
  /**
   * Gets an http agent. This function is useful when you need an http agent that handles
   * routing through a proxy server - depending upon the url and proxy environment variables.
   * @param serverUrl  The server URL where the request will be sent. For example, https://api.github.com
   */
  getAgent(e) {
    const i = new URL(e);
    return this._getAgent(i);
  }
  getAgentDispatcher(e) {
    const i = new URL(e), a = ol.getProxyUrl(i);
    if (a && a.hostname)
      return this._getProxyAgentDispatcher(i, a);
  }
  _prepareRequest(e, i, a) {
    const t = {};
    t.parsedUrl = i;
    const d = t.parsedUrl.protocol === "https:";
    t.httpModule = d ? Po : lr;
    const r = d ? 443 : 80;
    if (t.options = {}, t.options.host = t.parsedUrl.hostname, t.options.port = t.parsedUrl.port ? parseInt(t.parsedUrl.port) : r, t.options.path = (t.parsedUrl.pathname || "") + (t.parsedUrl.search || ""), t.options.method = e, t.options.headers = this._mergeHeaders(a), this.userAgent != null && (t.options.headers["user-agent"] = this.userAgent), t.options.agent = this._getAgent(t.parsedUrl), this.handlers)
      for (const o of this.handlers)
        o.prepareRequest(t.options);
    return t;
  }
  _mergeHeaders(e) {
    return this.requestOptions && this.requestOptions.headers ? Object.assign({}, mr(this.requestOptions.headers), mr(e || {})) : mr(e || {});
  }
  _getExistingOrDefaultHeader(e, i, a) {
    let t;
    return this.requestOptions && this.requestOptions.headers && (t = mr(this.requestOptions.headers)[i]), e[i] || t || a;
  }
  _getAgent(e) {
    let i;
    const a = ol.getProxyUrl(e), t = a && a.hostname;
    if (this._keepAlive && t && (i = this._proxyAgent), this._keepAlive && !t && (i = this._agent), i)
      return i;
    const d = e.protocol === "https:";
    let r = 100;
    if (this.requestOptions && (r = this.requestOptions.maxSockets || lr.globalAgent.maxSockets), a && a.hostname) {
      const o = {
        maxSockets: r,
        keepAlive: this._keepAlive,
        proxy: Object.assign(Object.assign({}, (a.username || a.password) && {
          proxyAuth: `${a.username}:${a.password}`
        }), { host: a.hostname, port: a.port })
      };
      let s;
      const A = a.protocol === "https:";
      d ? s = A ? Ar.httpsOverHttps : Ar.httpsOverHttp : s = A ? Ar.httpOverHttps : Ar.httpOverHttp, i = s(o), this._proxyAgent = i;
    }
    if (this._keepAlive && !i) {
      const o = { keepAlive: this._keepAlive, maxSockets: r };
      i = d ? new Po.Agent(o) : new lr.Agent(o), this._agent = i;
    }
    return i || (i = d ? Po.globalAgent : lr.globalAgent), d && this._ignoreSslError && (i.options = Object.assign(i.options || {}, {
      rejectUnauthorized: !1
    })), i;
  }
  _getProxyAgentDispatcher(e, i) {
    let a;
    if (this._keepAlive && (a = this._proxyAgentDispatcher), a)
      return a;
    const t = e.protocol === "https:";
    return a = new pb.ProxyAgent(Object.assign({ uri: i.href, pipelining: this._keepAlive ? 1 : 0 }, (i.username || i.password) && {
      token: `${i.username}:${i.password}`
    })), this._proxyAgentDispatcher = a, t && this._ignoreSslError && (a.options = Object.assign(a.options.requestTls || {}, {
      rejectUnauthorized: !1
    })), a;
  }
  _performExponentialBackoff(e) {
    return ti(this, void 0, void 0, function* () {
      e = Math.min(hb, e);
      const i = fb * Math.pow(2, e);
      return new Promise((a) => setTimeout(() => a(), i));
    });
  }
  _processResponse(e, i) {
    return ti(this, void 0, void 0, function* () {
      return new Promise((a, t) => ti(this, void 0, void 0, function* () {
        const d = e.message.statusCode || 0, r = {
          statusCode: d,
          result: null,
          headers: {}
        };
        d === nn.NotFound && a(r);
        function o(l, m) {
          if (typeof m == "string") {
            const u = new Date(m);
            if (!isNaN(u.valueOf()))
              return u;
          }
          return m;
        }
        let s, A;
        try {
          A = yield e.readBody(), A && A.length > 0 && (i && i.deserializeDates ? s = JSON.parse(A, o) : s = JSON.parse(A), r.result = s), r.headers = e.message.headers;
        } catch {
        }
        if (d > 299) {
          let l;
          s && s.message ? l = s.message : A && A.length > 0 ? l = A : l = `Failed request: (${d})`;
          const m = new Yr(l, d);
          m.result = r.result, t(m);
        } else
          a(r);
      }));
    });
  }
}
ki.HttpClient = Eb;
const mr = (n) => Object.keys(n).reduce((e, i) => (e[i.toLowerCase()] = n[i], e), {});
var fa = {}, Ul = me && me.__awaiter || function(n, e, i, a) {
  function t(d) {
    return d instanceof i ? d : new i(function(r) {
      r(d);
    });
  }
  return new (i || (i = Promise))(function(d, r) {
    function o(l) {
      try {
        A(a.next(l));
      } catch (m) {
        r(m);
      }
    }
    function s(l) {
      try {
        A(a.throw(l));
      } catch (m) {
        r(m);
      }
    }
    function A(l) {
      l.done ? d(l.value) : t(l.value).then(o, s);
    }
    A((a = a.apply(n, e || [])).next());
  });
};
Object.defineProperty(fa, "__esModule", { value: !0 });
fa.PersonalAccessTokenCredentialHandler = fa.BearerCredentialHandler = fa.BasicCredentialHandler = void 0;
class yb {
  constructor(e, i) {
    this.username = e, this.password = i;
  }
  prepareRequest(e) {
    if (!e.headers)
      throw Error("The request has no headers");
    e.headers.Authorization = `Basic ${Buffer.from(`${this.username}:${this.password}`).toString("base64")}`;
  }
  // This handler cannot handle 401
  canHandleAuthentication() {
    return !1;
  }
  handleAuthentication() {
    return Ul(this, void 0, void 0, function* () {
      throw new Error("not implemented");
    });
  }
}
fa.BasicCredentialHandler = yb;
class bb {
  constructor(e) {
    this.token = e;
  }
  // currently implements pre-authorization
  // TODO: support preAuth = false where it hooks on 401
  prepareRequest(e) {
    if (!e.headers)
      throw Error("The request has no headers");
    e.headers.Authorization = `Bearer ${this.token}`;
  }
  // This handler cannot handle 401
  canHandleAuthentication() {
    return !1;
  }
  handleAuthentication() {
    return Ul(this, void 0, void 0, function* () {
      throw new Error("not implemented");
    });
  }
}
fa.BearerCredentialHandler = bb;
class Ib {
  constructor(e) {
    this.token = e;
  }
  // currently implements pre-authorization
  // TODO: support preAuth = false where it hooks on 401
  prepareRequest(e) {
    if (!e.headers)
      throw Error("The request has no headers");
    e.headers.Authorization = `Basic ${Buffer.from(`PAT:${this.token}`).toString("base64")}`;
  }
  // This handler cannot handle 401
  canHandleAuthentication() {
    return !1;
  }
  handleAuthentication() {
    return Ul(this, void 0, void 0, function* () {
      throw new Error("not implemented");
    });
  }
}
fa.PersonalAccessTokenCredentialHandler = Ib;
var Ou;
function Cb() {
  if (Ou)
    return Mt;
  Ou = 1;
  var n = me && me.__awaiter || function(d, r, o, s) {
    function A(l) {
      return l instanceof o ? l : new o(function(m) {
        m(l);
      });
    }
    return new (o || (o = Promise))(function(l, m) {
      function u(g) {
        try {
          k(s.next(g));
        } catch (N) {
          m(N);
        }
      }
      function c(g) {
        try {
          k(s.throw(g));
        } catch (N) {
          m(N);
        }
      }
      function k(g) {
        g.done ? l(g.value) : A(g.value).then(u, c);
      }
      k((s = s.apply(d, r || [])).next());
    });
  };
  Object.defineProperty(Mt, "__esModule", { value: !0 }), Mt.OidcClient = void 0;
  const e = ki, i = fa, a = Xk();
  class t {
    static createHttpClient(r = !0, o = 10) {
      const s = {
        allowRetries: r,
        maxRetries: o
      };
      return new e.HttpClient("actions/oidc-client", [new i.BearerCredentialHandler(t.getRequestToken())], s);
    }
    static getRequestToken() {
      const r = process.env.ACTIONS_ID_TOKEN_REQUEST_TOKEN;
      if (!r)
        throw new Error("Unable to get ACTIONS_ID_TOKEN_REQUEST_TOKEN env variable");
      return r;
    }
    static getIDTokenUrl() {
      const r = process.env.ACTIONS_ID_TOKEN_REQUEST_URL;
      if (!r)
        throw new Error("Unable to get ACTIONS_ID_TOKEN_REQUEST_URL env variable");
      return r;
    }
    static getCall(r) {
      var o;
      return n(this, void 0, void 0, function* () {
        const l = (o = (yield t.createHttpClient().getJson(r).catch((m) => {
          throw new Error(`Failed to get ID Token. 
 
        Error Code : ${m.statusCode}
 
        Error Message: ${m.message}`);
        })).result) === null || o === void 0 ? void 0 : o.value;
        if (!l)
          throw new Error("Response json body do not have ID Token field");
        return l;
      });
    }
    static getIDToken(r) {
      return n(this, void 0, void 0, function* () {
        try {
          let o = t.getIDTokenUrl();
          if (r) {
            const A = encodeURIComponent(r);
            o = `${o}&audience=${A}`;
          }
          a.debug(`ID token url is ${o}`);
          const s = yield t.getCall(o);
          return a.setSecret(s), s;
        } catch (o) {
          throw new Error(`Error message: ${o.message}`);
        }
      });
    }
  }
  return Mt.OidcClient = t, Mt;
}
var Oo = {}, Gu;
function Mu() {
  return Gu || (Gu = 1, function(n) {
    var e = me && me.__awaiter || function(A, l, m, u) {
      function c(k) {
        return k instanceof m ? k : new m(function(g) {
          g(k);
        });
      }
      return new (m || (m = Promise))(function(k, g) {
        function N(E) {
          try {
            h(u.next(E));
          } catch (S) {
            g(S);
          }
        }
        function y(E) {
          try {
            h(u.throw(E));
          } catch (S) {
            g(S);
          }
        }
        function h(E) {
          E.done ? k(E.value) : c(E.value).then(N, y);
        }
        h((u = u.apply(A, l || [])).next());
      });
    };
    Object.defineProperty(n, "__esModule", { value: !0 }), n.summary = n.markdownSummary = n.SUMMARY_DOCS_URL = n.SUMMARY_ENV_VAR = void 0;
    const i = J, a = J, { access: t, appendFile: d, writeFile: r } = a.promises;
    n.SUMMARY_ENV_VAR = "GITHUB_STEP_SUMMARY", n.SUMMARY_DOCS_URL = "https://docs.github.com/actions/using-workflows/workflow-commands-for-github-actions#adding-a-job-summary";
    class o {
      constructor() {
        this._buffer = "";
      }
      /**
       * Finds the summary file path from the environment, rejects if env var is not found or file does not exist
       * Also checks r/w permissions.
       *
       * @returns step summary file path
       */
      filePath() {
        return e(this, void 0, void 0, function* () {
          if (this._filePath)
            return this._filePath;
          const l = process.env[n.SUMMARY_ENV_VAR];
          if (!l)
            throw new Error(`Unable to find environment variable for $${n.SUMMARY_ENV_VAR}. Check if your runtime environment supports job summaries.`);
          try {
            yield t(l, a.constants.R_OK | a.constants.W_OK);
          } catch {
            throw new Error(`Unable to access summary file: '${l}'. Check if the file has correct read/write permissions.`);
          }
          return this._filePath = l, this._filePath;
        });
      }
      /**
       * Wraps content in an HTML tag, adding any HTML attributes
       *
       * @param {string} tag HTML tag to wrap
       * @param {string | null} content content within the tag
       * @param {[attribute: string]: string} attrs key-value list of HTML attributes to add
       *
       * @returns {string} content wrapped in HTML element
       */
      wrap(l, m, u = {}) {
        const c = Object.entries(u).map(([k, g]) => ` ${k}="${g}"`).join("");
        return m ? `<${l}${c}>${m}</${l}>` : `<${l}${c}>`;
      }
      /**
       * Writes text in the buffer to the summary buffer file and empties buffer. Will append by default.
       *
       * @param {SummaryWriteOptions} [options] (optional) options for write operation
       *
       * @returns {Promise<Summary>} summary instance
       */
      write(l) {
        return e(this, void 0, void 0, function* () {
          const m = !!(l != null && l.overwrite), u = yield this.filePath();
          return yield (m ? r : d)(u, this._buffer, { encoding: "utf8" }), this.emptyBuffer();
        });
      }
      /**
       * Clears the summary buffer and wipes the summary file
       *
       * @returns {Summary} summary instance
       */
      clear() {
        return e(this, void 0, void 0, function* () {
          return this.emptyBuffer().write({ overwrite: !0 });
        });
      }
      /**
       * Returns the current summary buffer as a string
       *
       * @returns {string} string of summary buffer
       */
      stringify() {
        return this._buffer;
      }
      /**
       * If the summary buffer is empty
       *
       * @returns {boolen} true if the buffer is empty
       */
      isEmptyBuffer() {
        return this._buffer.length === 0;
      }
      /**
       * Resets the summary buffer without writing to summary file
       *
       * @returns {Summary} summary instance
       */
      emptyBuffer() {
        return this._buffer = "", this;
      }
      /**
       * Adds raw text to the summary buffer
       *
       * @param {string} text content to add
       * @param {boolean} [addEOL=false] (optional) append an EOL to the raw text (default: false)
       *
       * @returns {Summary} summary instance
       */
      addRaw(l, m = !1) {
        return this._buffer += l, m ? this.addEOL() : this;
      }
      /**
       * Adds the operating system-specific end-of-line marker to the buffer
       *
       * @returns {Summary} summary instance
       */
      addEOL() {
        return this.addRaw(i.EOL);
      }
      /**
       * Adds an HTML codeblock to the summary buffer
       *
       * @param {string} code content to render within fenced code block
       * @param {string} lang (optional) language to syntax highlight code
       *
       * @returns {Summary} summary instance
       */
      addCodeBlock(l, m) {
        const u = Object.assign({}, m && { lang: m }), c = this.wrap("pre", this.wrap("code", l), u);
        return this.addRaw(c).addEOL();
      }
      /**
       * Adds an HTML list to the summary buffer
       *
       * @param {string[]} items list of items to render
       * @param {boolean} [ordered=false] (optional) if the rendered list should be ordered or not (default: false)
       *
       * @returns {Summary} summary instance
       */
      addList(l, m = !1) {
        const u = m ? "ol" : "ul", c = l.map((g) => this.wrap("li", g)).join(""), k = this.wrap(u, c);
        return this.addRaw(k).addEOL();
      }
      /**
       * Adds an HTML table to the summary buffer
       *
       * @param {SummaryTableCell[]} rows table rows
       *
       * @returns {Summary} summary instance
       */
      addTable(l) {
        const m = l.map((c) => {
          const k = c.map((g) => {
            if (typeof g == "string")
              return this.wrap("td", g);
            const { header: N, data: y, colspan: h, rowspan: E } = g, S = N ? "th" : "td", b = Object.assign(Object.assign({}, h && { colspan: h }), E && { rowspan: E });
            return this.wrap(S, y, b);
          }).join("");
          return this.wrap("tr", k);
        }).join(""), u = this.wrap("table", m);
        return this.addRaw(u).addEOL();
      }
      /**
       * Adds a collapsable HTML details element to the summary buffer
       *
       * @param {string} label text for the closed state
       * @param {string} content collapsable content
       *
       * @returns {Summary} summary instance
       */
      addDetails(l, m) {
        const u = this.wrap("details", this.wrap("summary", l) + m);
        return this.addRaw(u).addEOL();
      }
      /**
       * Adds an HTML image tag to the summary buffer
       *
       * @param {string} src path to the image you to embed
       * @param {string} alt text description of the image
       * @param {SummaryImageOptions} options (optional) addition image attributes
       *
       * @returns {Summary} summary instance
       */
      addImage(l, m, u) {
        const { width: c, height: k } = u || {}, g = Object.assign(Object.assign({}, c && { width: c }), k && { height: k }), N = this.wrap("img", null, Object.assign({ src: l, alt: m }, g));
        return this.addRaw(N).addEOL();
      }
      /**
       * Adds an HTML section heading element
       *
       * @param {string} text heading text
       * @param {number | string} [level=1] (optional) the heading level, default: 1
       *
       * @returns {Summary} summary instance
       */
      addHeading(l, m) {
        const u = `h${m}`, c = ["h1", "h2", "h3", "h4", "h5", "h6"].includes(u) ? u : "h1", k = this.wrap(c, l);
        return this.addRaw(k).addEOL();
      }
      /**
       * Adds an HTML thematic break (<hr>) to the summary buffer
       *
       * @returns {Summary} summary instance
       */
      addSeparator() {
        const l = this.wrap("hr", null);
        return this.addRaw(l).addEOL();
      }
      /**
       * Adds an HTML line break (<br>) to the summary buffer
       *
       * @returns {Summary} summary instance
       */
      addBreak() {
        const l = this.wrap("br", null);
        return this.addRaw(l).addEOL();
      }
      /**
       * Adds an HTML blockquote to the summary buffer
       *
       * @param {string} text quote text
       * @param {string} cite (optional) citation url
       *
       * @returns {Summary} summary instance
       */
      addQuote(l, m) {
        const u = Object.assign({}, m && { cite: m }), c = this.wrap("blockquote", l, u);
        return this.addRaw(c).addEOL();
      }
      /**
       * Adds an HTML anchor tag to the summary buffer
       *
       * @param {string} text link text/content
       * @param {string} href hyperlink
       *
       * @returns {Summary} summary instance
       */
      addLink(l, m) {
        const u = this.wrap("a", l, { href: m });
        return this.addRaw(u).addEOL();
      }
    }
    const s = new o();
    n.markdownSummary = s, n.summary = s;
  }(Oo)), Oo;
}
var Gn = {}, xu;
function Bb() {
  if (xu)
    return Gn;
  xu = 1;
  var n = me && me.__createBinding || (Object.create ? function(o, s, A, l) {
    l === void 0 && (l = A), Object.defineProperty(o, l, { enumerable: !0, get: function() {
      return s[A];
    } });
  } : function(o, s, A, l) {
    l === void 0 && (l = A), o[l] = s[A];
  }), e = me && me.__setModuleDefault || (Object.create ? function(o, s) {
    Object.defineProperty(o, "default", { enumerable: !0, value: s });
  } : function(o, s) {
    o.default = s;
  }), i = me && me.__importStar || function(o) {
    if (o && o.__esModule)
      return o;
    var s = {};
    if (o != null)
      for (var A in o)
        A !== "default" && Object.hasOwnProperty.call(o, A) && n(s, o, A);
    return e(s, o), s;
  };
  Object.defineProperty(Gn, "__esModule", { value: !0 }), Gn.toPlatformPath = Gn.toWin32Path = Gn.toPosixPath = void 0;
  const a = i(J);
  function t(o) {
    return o.replace(/[\\]/g, "/");
  }
  Gn.toPosixPath = t;
  function d(o) {
    return o.replace(/[/]/g, "\\");
  }
  Gn.toWin32Path = d;
  function r(o) {
    return o.replace(/[/\\]/g, a.sep);
  }
  return Gn.toPlatformPath = r, Gn;
}
var Yu;
function Xk() {
  return Yu || (Yu = 1, function(n) {
    var e = me && me.__createBinding || (Object.create ? function(w, j, R, F) {
      F === void 0 && (F = R), Object.defineProperty(w, F, { enumerable: !0, get: function() {
        return j[R];
      } });
    } : function(w, j, R, F) {
      F === void 0 && (F = R), w[F] = j[R];
    }), i = me && me.__setModuleDefault || (Object.create ? function(w, j) {
      Object.defineProperty(w, "default", { enumerable: !0, value: j });
    } : function(w, j) {
      w.default = j;
    }), a = me && me.__importStar || function(w) {
      if (w && w.__esModule)
        return w;
      var j = {};
      if (w != null)
        for (var R in w)
          R !== "default" && Object.hasOwnProperty.call(w, R) && e(j, w, R);
      return i(j, w), j;
    }, t = me && me.__awaiter || function(w, j, R, F) {
      function V(P) {
        return P instanceof R ? P : new R(function(O) {
          O(P);
        });
      }
      return new (R || (R = Promise))(function(P, O) {
        function Z(z) {
          try {
            ne(F.next(z));
          } catch (pe) {
            O(pe);
          }
        }
        function ie(z) {
          try {
            ne(F.throw(z));
          } catch (pe) {
            O(pe);
          }
        }
        function ne(z) {
          z.done ? P(z.value) : V(z.value).then(Z, ie);
        }
        ne((F = F.apply(w, j || [])).next());
      });
    };
    Object.defineProperty(n, "__esModule", { value: !0 }), n.getIDToken = n.getState = n.saveState = n.group = n.endGroup = n.startGroup = n.info = n.notice = n.warning = n.error = n.debug = n.isDebug = n.setFailed = n.setCommandEcho = n.setOutput = n.getBooleanInput = n.getMultilineInput = n.getInput = n.addPath = n.setSecret = n.exportVariable = n.ExitCode = void 0;
    const d = ht, r = ft, o = Ea, s = a(J), A = a(J), l = Cb();
    var m;
    (function(w) {
      w[w.Success = 0] = "Success", w[w.Failure = 1] = "Failure";
    })(m = n.ExitCode || (n.ExitCode = {}));
    function u(w, j) {
      const R = o.toCommandValue(j);
      if (process.env[w] = R, process.env.GITHUB_ENV || "")
        return r.issueFileCommand("ENV", r.prepareKeyValueMessage(w, j));
      d.issueCommand("set-env", { name: w }, R);
    }
    n.exportVariable = u;
    function c(w) {
      d.issueCommand("add-mask", {}, w);
    }
    n.setSecret = c;
    function k(w) {
      process.env.GITHUB_PATH || "" ? r.issueFileCommand("PATH", w) : d.issueCommand("add-path", {}, w), process.env.PATH = `${w}${A.delimiter}${process.env.PATH}`;
    }
    n.addPath = k;
    function g(w, j) {
      const R = process.env[`INPUT_${w.replace(/ /g, "_").toUpperCase()}`] || "";
      if (j && j.required && !R)
        throw new Error(`Input required and not supplied: ${w}`);
      return j && j.trimWhitespace === !1 ? R : R.trim();
    }
    n.getInput = g;
    function N(w, j) {
      const R = g(w, j).split(`
`).filter((F) => F !== "");
      return j && j.trimWhitespace === !1 ? R : R.map((F) => F.trim());
    }
    n.getMultilineInput = N;
    function y(w, j) {
      const R = ["true", "True", "TRUE"], F = ["false", "False", "FALSE"], V = g(w, j);
      if (R.includes(V))
        return !0;
      if (F.includes(V))
        return !1;
      throw new TypeError(`Input does not meet YAML 1.2 "Core Schema" specification: ${w}
Support boolean input list: \`true | True | TRUE | false | False | FALSE\``);
    }
    n.getBooleanInput = y;
    function h(w, j) {
      if (process.env.GITHUB_OUTPUT || "")
        return r.issueFileCommand("OUTPUT", r.prepareKeyValueMessage(w, j));
      process.stdout.write(s.EOL), d.issueCommand("set-output", { name: w }, o.toCommandValue(j));
    }
    n.setOutput = h;
    function E(w) {
      d.issue("echo", w ? "on" : "off");
    }
    n.setCommandEcho = E;
    function S(w) {
      process.exitCode = m.Failure, D(w);
    }
    n.setFailed = S;
    function b() {
      return process.env.RUNNER_DEBUG === "1";
    }
    n.isDebug = b;
    function I(w) {
      d.issueCommand("debug", {}, w);
    }
    n.debug = I;
    function D(w, j = {}) {
      d.issueCommand("error", o.toCommandProperties(j), w instanceof Error ? w.toString() : w);
    }
    n.error = D;
    function B(w, j = {}) {
      d.issueCommand("warning", o.toCommandProperties(j), w instanceof Error ? w.toString() : w);
    }
    n.warning = B;
    function q(w, j = {}) {
      d.issueCommand("notice", o.toCommandProperties(j), w instanceof Error ? w.toString() : w);
    }
    n.notice = q;
    function v(w) {
      process.stdout.write(w + s.EOL);
    }
    n.info = v;
    function Q(w) {
      d.issue("group", w);
    }
    n.startGroup = Q;
    function _() {
      d.issue("endgroup");
    }
    n.endGroup = _;
    function M(w, j) {
      return t(this, void 0, void 0, function* () {
        Q(w);
        let R;
        try {
          R = yield j();
        } finally {
          _();
        }
        return R;
      });
    }
    n.group = M;
    function se(w, j) {
      if (process.env.GITHUB_STATE || "")
        return r.issueFileCommand("STATE", r.prepareKeyValueMessage(w, j));
      d.issueCommand("save-state", { name: w }, o.toCommandValue(j));
    }
    n.saveState = se;
    function U(w) {
      return process.env[`STATE_${w}`] || "";
    }
    n.getState = U;
    function G(w) {
      return t(this, void 0, void 0, function* () {
        return yield l.OidcClient.getIDToken(w);
      });
    }
    n.getIDToken = G;
    var H = Mu();
    Object.defineProperty(n, "summary", { enumerable: !0, get: function() {
      return H.summary;
    } });
    var $ = Mu();
    Object.defineProperty(n, "markdownSummary", { enumerable: !0, get: function() {
      return $.markdownSummary;
    } });
    var W = Bb();
    Object.defineProperty(n, "toPosixPath", { enumerable: !0, get: function() {
      return W.toPosixPath;
    } }), Object.defineProperty(n, "toWin32Path", { enumerable: !0, get: function() {
      return W.toWin32Path;
    } }), Object.defineProperty(n, "toPlatformPath", { enumerable: !0, get: function() {
      return W.toPlatformPath;
    } });
  }(os)), os;
}
var Mn = Xk(), md = {}, yd = {};
Object.defineProperty(yd, "__esModule", { value: !0 });
yd.Context = void 0;
const Ju = J, Qb = J;
let Sb = class {
  /**
   * Hydrate the context from the environment
   */
  constructor() {
    var e, i, a;
    if (this.payload = {}, process.env.GITHUB_EVENT_PATH)
      if ((0, Ju.existsSync)(process.env.GITHUB_EVENT_PATH))
        this.payload = JSON.parse((0, Ju.readFileSync)(process.env.GITHUB_EVENT_PATH, { encoding: "utf8" }));
      else {
        const t = process.env.GITHUB_EVENT_PATH;
        process.stdout.write(`GITHUB_EVENT_PATH ${t} does not exist${Qb.EOL}`);
      }
    this.eventName = process.env.GITHUB_EVENT_NAME, this.sha = process.env.GITHUB_SHA, this.ref = process.env.GITHUB_REF, this.workflow = process.env.GITHUB_WORKFLOW, this.action = process.env.GITHUB_ACTION, this.actor = process.env.GITHUB_ACTOR, this.job = process.env.GITHUB_JOB, this.runNumber = parseInt(process.env.GITHUB_RUN_NUMBER, 10), this.runId = parseInt(process.env.GITHUB_RUN_ID, 10), this.apiUrl = (e = process.env.GITHUB_API_URL) !== null && e !== void 0 ? e : "https://api.github.com", this.serverUrl = (i = process.env.GITHUB_SERVER_URL) !== null && i !== void 0 ? i : "https://github.com", this.graphqlUrl = (a = process.env.GITHUB_GRAPHQL_URL) !== null && a !== void 0 ? a : "https://api.github.com/graphql";
  }
  get issue() {
    const e = this.payload;
    return Object.assign(Object.assign({}, this.repo), { number: (e.issue || e.pull_request || e).number });
  }
  get repo() {
    if (process.env.GITHUB_REPOSITORY) {
      const [e, i] = process.env.GITHUB_REPOSITORY.split("/");
      return { owner: e, repo: i };
    }
    if (this.payload.repository)
      return {
        owner: this.payload.repository.owner.login,
        repo: this.payload.repository.name
      };
    throw new Error("context.repo requires a GITHUB_REPOSITORY environment variable like 'owner/repo'");
  }
};
yd.Context = Sb;
var $k = {}, an = {}, Db = me && me.__createBinding || (Object.create ? function(n, e, i, a) {
  a === void 0 && (a = i);
  var t = Object.getOwnPropertyDescriptor(e, i);
  (!t || ("get" in t ? !e.__esModule : t.writable || t.configurable)) && (t = { enumerable: !0, get: function() {
    return e[i];
  } }), Object.defineProperty(n, a, t);
} : function(n, e, i, a) {
  a === void 0 && (a = i), n[a] = e[i];
}), wb = me && me.__setModuleDefault || (Object.create ? function(n, e) {
  Object.defineProperty(n, "default", { enumerable: !0, value: e });
} : function(n, e) {
  n.default = e;
}), Fb = me && me.__importStar || function(n) {
  if (n && n.__esModule)
    return n;
  var e = {};
  if (n != null)
    for (var i in n)
      i !== "default" && Object.prototype.hasOwnProperty.call(n, i) && Db(e, n, i);
  return wb(e, n), e;
}, Vb = me && me.__awaiter || function(n, e, i, a) {
  function t(d) {
    return d instanceof i ? d : new i(function(r) {
      r(d);
    });
  }
  return new (i || (i = Promise))(function(d, r) {
    function o(l) {
      try {
        A(a.next(l));
      } catch (m) {
        r(m);
      }
    }
    function s(l) {
      try {
        A(a.throw(l));
      } catch (m) {
        r(m);
      }
    }
    function A(l) {
      l.done ? d(l.value) : t(l.value).then(o, s);
    }
    A((a = a.apply(n, e || [])).next());
  });
};
Object.defineProperty(an, "__esModule", { value: !0 });
an.getApiBaseUrl = an.getProxyFetch = an.getProxyAgentDispatcher = an.getProxyAgent = an.getAuthString = void 0;
const e1 = Fb(ki), Tb = he;
function _b(n, e) {
  if (!n && !e.auth)
    throw new Error("Parameter token or opts.auth is required");
  if (n && e.auth)
    throw new Error("Parameters token and opts.auth may not both be specified");
  return typeof e.auth == "string" ? e.auth : `token ${n}`;
}
an.getAuthString = _b;
function Rb(n) {
  return new e1.HttpClient().getAgent(n);
}
an.getProxyAgent = Rb;
function i1(n) {
  return new e1.HttpClient().getAgentDispatcher(n);
}
an.getProxyAgentDispatcher = i1;
function Ub(n) {
  const e = i1(n);
  return (a, t) => Vb(this, void 0, void 0, function* () {
    return (0, Tb.fetch)(a, Object.assign(Object.assign({}, t), { dispatcher: e }));
  });
}
an.getProxyFetch = Ub;
function Lb() {
  return process.env.GITHUB_API_URL || "https://api.github.com";
}
an.getApiBaseUrl = Lb;
function Jr() {
  return typeof navigator == "object" && "userAgent" in navigator ? navigator.userAgent : typeof process == "object" && process.version !== void 0 ? `Node.js/${process.version.substr(1)} (${process.platform}; ${process.arch})` : "<environment undetectable>";
}
var Hr = { exports: {} }, qb = n1;
function n1(n, e, i, a) {
  if (typeof i != "function")
    throw new Error("method for before hook must be a function");
  return a || (a = {}), Array.isArray(e) ? e.reverse().reduce(function(t, d) {
    return n1.bind(null, n, d, t, a);
  }, i)() : Promise.resolve().then(function() {
    return n.registry[e] ? n.registry[e].reduce(function(t, d) {
      return d.hook.bind(null, t, a);
    }, i)() : i(a);
  });
}
var Pb = Ob;
function Ob(n, e, i, a) {
  var t = a;
  n.registry[i] || (n.registry[i] = []), e === "before" && (a = function(d, r) {
    return Promise.resolve().then(t.bind(null, r)).then(d.bind(null, r));
  }), e === "after" && (a = function(d, r) {
    var o;
    return Promise.resolve().then(d.bind(null, r)).then(function(s) {
      return o = s, t(o, r);
    }).then(function() {
      return o;
    });
  }), e === "error" && (a = function(d, r) {
    return Promise.resolve().then(d.bind(null, r)).catch(function(o) {
      return t(o, r);
    });
  }), n.registry[i].push({
    hook: a,
    orig: t
  });
}
var Gb = Mb;
function Mb(n, e, i) {
  if (n.registry[e]) {
    var a = n.registry[e].map(function(t) {
      return t.orig;
    }).indexOf(i);
    a !== -1 && n.registry[e].splice(a, 1);
  }
}
var a1 = qb, xb = Pb, Yb = Gb, Hu = Function.bind, ju = Hu.bind(Hu);
function t1(n, e, i) {
  var a = ju(Yb, null).apply(
    null,
    i ? [e, i] : [e]
  );
  n.api = { remove: a }, n.remove = a, ["before", "error", "after", "wrap"].forEach(function(t) {
    var d = i ? [e, t, i] : [e, t];
    n[t] = n.api[t] = ju(xb, null).apply(null, d);
  });
}
function Jb() {
  var n = "h", e = {
    registry: {}
  }, i = a1.bind(null, e, n);
  return t1(i, e, n), i;
}
function d1() {
  var n = {
    registry: {}
  }, e = a1.bind(null, n);
  return t1(e, n), e;
}
var Wu = !1;
function Ft() {
  return Wu || (console.warn(
    '[before-after-hook]: "Hook()" repurposing warning, use "Hook.Collection()". Read more: https://git.io/upgrade-before-after-hook-to-1.4'
  ), Wu = !0), d1();
}
Ft.Singular = Jb.bind();
Ft.Collection = d1.bind();
Hr.exports = Ft;
Hr.exports.Hook = Ft;
Hr.exports.Singular = Ft.Singular;
var Hb = Hr.exports.Collection = Ft.Collection, jb = "9.0.4", Wb = `octokit-endpoint.js/${jb} ${Jr()}`, zb = {
  method: "GET",
  baseUrl: "https://api.github.com",
  headers: {
    accept: "application/vnd.github.v3+json",
    "user-agent": Wb
  },
  mediaType: {
    format: ""
  }
};
function Zb(n) {
  return n ? Object.keys(n).reduce((e, i) => (e[i.toLowerCase()] = n[i], e), {}) : {};
}
function Kb(n) {
  if (typeof n != "object" || n === null || Object.prototype.toString.call(n) !== "[object Object]")
    return !1;
  const e = Object.getPrototypeOf(n);
  if (e === null)
    return !0;
  const i = Object.prototype.hasOwnProperty.call(e, "constructor") && e.constructor;
  return typeof i == "function" && i instanceof i && Function.prototype.call(i) === Function.prototype.call(n);
}
function r1(n, e) {
  const i = Object.assign({}, n);
  return Object.keys(e).forEach((a) => {
    Kb(e[a]) ? a in n ? i[a] = r1(n[a], e[a]) : Object.assign(i, { [a]: e[a] }) : Object.assign(i, { [a]: e[a] });
  }), i;
}
function zu(n) {
  for (const e in n)
    n[e] === void 0 && delete n[e];
  return n;
}
function ll(n, e, i) {
  var t;
  if (typeof e == "string") {
    let [d, r] = e.split(" ");
    i = Object.assign(r ? { method: d, url: r } : { url: d }, i);
  } else
    i = Object.assign({}, e);
  i.headers = Zb(i.headers), zu(i), zu(i.headers);
  const a = r1(n || {}, i);
  return i.url === "/graphql" && (n && ((t = n.mediaType.previews) != null && t.length) && (a.mediaType.previews = n.mediaType.previews.filter(
    (d) => !a.mediaType.previews.includes(d)
  ).concat(a.mediaType.previews)), a.mediaType.previews = (a.mediaType.previews || []).map((d) => d.replace(/-preview/, ""))), a;
}
function Xb(n, e) {
  const i = /\?/.test(n) ? "&" : "?", a = Object.keys(e);
  return a.length === 0 ? n : n + i + a.map((t) => t === "q" ? "q=" + e.q.split("+").map(encodeURIComponent).join("+") : `${t}=${encodeURIComponent(e[t])}`).join("&");
}
var $b = /\{[^}]+\}/g;
function eI(n) {
  return n.replace(/^\W+|\W+$/g, "").split(/,/);
}
function iI(n) {
  const e = n.match($b);
  return e ? e.map(eI).reduce((i, a) => i.concat(a), []) : [];
}
function Zu(n, e) {
  const i = { __proto__: null };
  for (const a of Object.keys(n))
    e.indexOf(a) === -1 && (i[a] = n[a]);
  return i;
}
function s1(n) {
  return n.split(/(%[0-9A-Fa-f]{2})/g).map(function(e) {
    return /%[0-9A-Fa-f]/.test(e) || (e = encodeURI(e).replace(/%5B/g, "[").replace(/%5D/g, "]")), e;
  }).join("");
}
function ut(n) {
  return encodeURIComponent(n).replace(/[!'()*]/g, function(e) {
    return "%" + e.charCodeAt(0).toString(16).toUpperCase();
  });
}
function $t(n, e, i) {
  return e = n === "+" || n === "#" ? s1(e) : ut(e), i ? ut(i) + "=" + e : e;
}
function st(n) {
  return n != null;
}
function Go(n) {
  return n === ";" || n === "&" || n === "?";
}
function nI(n, e, i, a) {
  var t = n[i], d = [];
  if (st(t) && t !== "")
    if (typeof t == "string" || typeof t == "number" || typeof t == "boolean")
      t = t.toString(), a && a !== "*" && (t = t.substring(0, parseInt(a, 10))), d.push(
        $t(e, t, Go(e) ? i : "")
      );
    else if (a === "*")
      Array.isArray(t) ? t.filter(st).forEach(function(r) {
        d.push(
          $t(e, r, Go(e) ? i : "")
        );
      }) : Object.keys(t).forEach(function(r) {
        st(t[r]) && d.push($t(e, t[r], r));
      });
    else {
      const r = [];
      Array.isArray(t) ? t.filter(st).forEach(function(o) {
        r.push($t(e, o));
      }) : Object.keys(t).forEach(function(o) {
        st(t[o]) && (r.push(ut(o)), r.push($t(e, t[o].toString())));
      }), Go(e) ? d.push(ut(i) + "=" + r.join(",")) : r.length !== 0 && d.push(r.join(","));
    }
  else
    e === ";" ? st(t) && d.push(ut(i)) : t === "" && (e === "&" || e === "?") ? d.push(ut(i) + "=") : t === "" && d.push("");
  return d;
}
function aI(n) {
  return {
    expand: tI.bind(null, n)
  };
}
function tI(n, e) {
  var i = ["+", "#", ".", "/", ";", "?", "&"];
  return n = n.replace(
    /\{([^\{\}]+)\}|([^\{\}]+)/g,
    function(a, t, d) {
      if (t) {
        let o = "";
        const s = [];
        if (i.indexOf(t.charAt(0)) !== -1 && (o = t.charAt(0), t = t.substr(1)), t.split(/,/g).forEach(function(A) {
          var l = /([^:\*]*)(?::(\d+)|(\*))?/.exec(A);
          s.push(nI(e, o, l[1], l[2] || l[3]));
        }), o && o !== "+") {
          var r = ",";
          return o === "?" ? r = "&" : o !== "#" && (r = o), (s.length !== 0 ? o : "") + s.join(r);
        } else
          return s.join(",");
      } else
        return s1(d);
    }
  ), n === "/" ? n : n.replace(/\/$/, "");
}
function o1(n) {
  var l;
  let e = n.method.toUpperCase(), i = (n.url || "/").replace(/:([a-z]\w+)/g, "{$1}"), a = Object.assign({}, n.headers), t, d = Zu(n, [
    "method",
    "baseUrl",
    "url",
    "headers",
    "request",
    "mediaType"
  ]);
  const r = iI(i);
  i = aI(i).expand(d), /^http/.test(i) || (i = n.baseUrl + i);
  const o = Object.keys(n).filter((m) => r.includes(m)).concat("baseUrl"), s = Zu(d, o);
  if (!/application\/octet-stream/i.test(a.accept) && (n.mediaType.format && (a.accept = a.accept.split(/,/).map(
    (m) => m.replace(
      /application\/vnd(\.\w+)(\.v3)?(\.\w+)?(\+json)?$/,
      `application/vnd$1$2.${n.mediaType.format}`
    )
  ).join(",")), i.endsWith("/graphql") && (l = n.mediaType.previews) != null && l.length)) {
    const m = a.accept.match(/[\w-]+(?=-preview)/g) || [];
    a.accept = m.concat(n.mediaType.previews).map((u) => {
      const c = n.mediaType.format ? `.${n.mediaType.format}` : "+json";
      return `application/vnd.github.${u}-preview${c}`;
    }).join(",");
  }
  return ["GET", "HEAD"].includes(e) ? i = Xb(i, s) : "data" in s ? t = s.data : Object.keys(s).length && (t = s), !a["content-type"] && typeof t < "u" && (a["content-type"] = "application/json; charset=utf-8"), ["PATCH", "PUT"].includes(e) && typeof t > "u" && (t = ""), Object.assign(
    { method: e, url: i, headers: a },
    typeof t < "u" ? { body: t } : null,
    n.request ? { request: n.request } : null
  );
}
function dI(n, e, i) {
  return o1(ll(n, e, i));
}
function l1(n, e) {
  const i = ll(n, e), a = dI.bind(null, i);
  return Object.assign(a, {
    DEFAULTS: i,
    defaults: l1.bind(null, i),
    merge: ll.bind(null, i),
    parse: o1
  });
}
var rI = l1(null, zb);
class Ku extends Error {
  constructor(e) {
    super(e), Error.captureStackTrace && Error.captureStackTrace(this, this.constructor), this.name = "Deprecation";
  }
}
var Ll = { exports: {} }, sI = A1;
function A1(n, e) {
  if (n && e)
    return A1(n)(e);
  if (typeof n != "function")
    throw new TypeError("need wrapper function");
  return Object.keys(n).forEach(function(a) {
    i[a] = n[a];
  }), i;
  function i() {
    for (var a = new Array(arguments.length), t = 0; t < a.length; t++)
      a[t] = arguments[t];
    var d = n.apply(this, a), r = a[a.length - 1];
    return typeof d == "function" && d !== r && Object.keys(r).forEach(function(o) {
      d[o] = r[o];
    }), d;
  }
}
var m1 = sI;
Ll.exports = m1(Nr);
Ll.exports.strict = m1(u1);
Nr.proto = Nr(function() {
  Object.defineProperty(Function.prototype, "once", {
    value: function() {
      return Nr(this);
    },
    configurable: !0
  }), Object.defineProperty(Function.prototype, "onceStrict", {
    value: function() {
      return u1(this);
    },
    configurable: !0
  });
});
function Nr(n) {
  var e = function() {
    return e.called ? e.value : (e.called = !0, e.value = n.apply(this, arguments));
  };
  return e.called = !1, e;
}
function u1(n) {
  var e = function() {
    if (e.called)
      throw new Error(e.onceError);
    return e.called = !0, e.value = n.apply(this, arguments);
  }, i = n.name || "Function wrapped with `once`";
  return e.onceError = i + " shouldn't be called more than once", e.called = !1, e;
}
var oI = Ll.exports;
const p1 = /* @__PURE__ */ e2(oI);
var lI = p1((n) => console.warn(n)), AI = p1((n) => console.warn(n)), ed = class extends Error {
  constructor(n, e, i) {
    super(n), Error.captureStackTrace && Error.captureStackTrace(this, this.constructor), this.name = "HttpError", this.status = e;
    let a;
    "headers" in i && typeof i.headers < "u" && (a = i.headers), "response" in i && (this.response = i.response, a = i.response.headers);
    const t = Object.assign({}, i.request);
    i.request.headers.authorization && (t.headers = Object.assign({}, i.request.headers, {
      authorization: i.request.headers.authorization.replace(
        / .*$/,
        " [REDACTED]"
      )
    })), t.url = t.url.replace(/\bclient_secret=\w+/g, "client_secret=[REDACTED]").replace(/\baccess_token=\w+/g, "access_token=[REDACTED]"), this.request = t, Object.defineProperty(this, "code", {
      get() {
        return lI(
          new Ku(
            "[@octokit/request-error] `error.code` is deprecated, use `error.status`."
          )
        ), e;
      }
    }), Object.defineProperty(this, "headers", {
      get() {
        return AI(
          new Ku(
            "[@octokit/request-error] `error.headers` is deprecated, use `error.response.headers`."
          )
        ), a || {};
      }
    });
  }
}, mI = "8.1.6";
function uI(n) {
  if (typeof n != "object" || n === null || Object.prototype.toString.call(n) !== "[object Object]")
    return !1;
  const e = Object.getPrototypeOf(n);
  if (e === null)
    return !0;
  const i = Object.prototype.hasOwnProperty.call(e, "constructor") && e.constructor;
  return typeof i == "function" && i instanceof i && Function.prototype.call(i) === Function.prototype.call(n);
}
function pI(n) {
  return n.arrayBuffer();
}
function Xu(n) {
  var o, s, A;
  const e = n.request && n.request.log ? n.request.log : console, i = ((o = n.request) == null ? void 0 : o.parseSuccessResponseBody) !== !1;
  (uI(n.body) || Array.isArray(n.body)) && (n.body = JSON.stringify(n.body));
  let a = {}, t, d, { fetch: r } = globalThis;
  if ((s = n.request) != null && s.fetch && (r = n.request.fetch), !r)
    throw new Error(
      "fetch is not set. Please pass a fetch implementation as new Octokit({ request: { fetch }}). Learn more at https://github.com/octokit/octokit.js/#fetch-missing"
    );
  return r(n.url, {
    method: n.method,
    body: n.body,
    headers: n.headers,
    signal: (A = n.request) == null ? void 0 : A.signal,
    // duplex must be set if request.body is ReadableStream or Async Iterables.
    // See https://fetch.spec.whatwg.org/#dom-requestinit-duplex.
    ...n.body && { duplex: "half" }
  }).then(async (l) => {
    d = l.url, t = l.status;
    for (const m of l.headers)
      a[m[0]] = m[1];
    if ("deprecation" in a) {
      const m = a.link && a.link.match(/<([^>]+)>; rel="deprecation"/), u = m && m.pop();
      e.warn(
        `[@octokit/request] "${n.method} ${n.url}" is deprecated. It is scheduled to be removed on ${a.sunset}${u ? `. See ${u}` : ""}`
      );
    }
    if (!(t === 204 || t === 205)) {
      if (n.method === "HEAD") {
        if (t < 400)
          return;
        throw new ed(l.statusText, t, {
          response: {
            url: d,
            status: t,
            headers: a,
            data: void 0
          },
          request: n
        });
      }
      if (t === 304)
        throw new ed("Not modified", t, {
          response: {
            url: d,
            status: t,
            headers: a,
            data: await Mo(l)
          },
          request: n
        });
      if (t >= 400) {
        const m = await Mo(l);
        throw new ed(cI(m), t, {
          response: {
            url: d,
            status: t,
            headers: a,
            data: m
          },
          request: n
        });
      }
      return i ? await Mo(l) : l.body;
    }
  }).then((l) => ({
    status: t,
    url: d,
    headers: a,
    data: l
  })).catch((l) => {
    if (l instanceof ed)
      throw l;
    if (l.name === "AbortError")
      throw l;
    let m = l.message;
    throw l.name === "TypeError" && "cause" in l && (l.cause instanceof Error ? m = l.cause.message : typeof l.cause == "string" && (m = l.cause)), new ed(m, 500, {
      request: n
    });
  });
}
async function Mo(n) {
  const e = n.headers.get("content-type");
  return /application\/json/.test(e) ? n.json().catch(() => n.text()).catch(() => "") : !e || /^text\/|charset=utf-8$/.test(e) ? n.text() : pI(n);
}
function cI(n) {
  return typeof n == "string" ? n : "message" in n ? Array.isArray(n.errors) ? `${n.message}: ${n.errors.map(JSON.stringify).join(", ")}` : n.message : `Unknown error: ${JSON.stringify(n)}`;
}
function Al(n, e) {
  const i = n.defaults(e);
  return Object.assign(function(t, d) {
    const r = i.merge(t, d);
    if (!r.request || !r.request.hook)
      return Xu(i.parse(r));
    const o = (s, A) => Xu(
      i.parse(i.merge(s, A))
    );
    return Object.assign(o, {
      endpoint: i,
      defaults: Al.bind(null, i)
    }), r.request.hook(o, r);
  }, {
    endpoint: i,
    defaults: Al.bind(null, i)
  });
}
var ml = Al(rI, {
  headers: {
    "user-agent": `octokit-request.js/${mI} ${Jr()}`
  }
}), kI = "7.0.2";
function vI(n) {
  return `Request failed due to following response errors:
` + n.errors.map((e) => ` - ${e.message}`).join(`
`);
}
var gI = class extends Error {
  constructor(n, e, i) {
    super(vI(i)), this.request = n, this.headers = e, this.response = i, this.name = "GraphqlResponseError", this.errors = i.errors, this.data = i.data, Error.captureStackTrace && Error.captureStackTrace(this, this.constructor);
  }
}, hI = [
  "method",
  "baseUrl",
  "url",
  "headers",
  "request",
  "query",
  "mediaType"
], fI = ["query", "method", "url"], $u = /\/api\/v3\/?$/;
function NI(n, e, i) {
  if (i) {
    if (typeof e == "string" && "query" in i)
      return Promise.reject(
        new Error('[@octokit/graphql] "query" cannot be used as variable name')
      );
    for (const r in i)
      if (fI.includes(r))
        return Promise.reject(
          new Error(
            `[@octokit/graphql] "${r}" cannot be used as variable name`
          )
        );
  }
  const a = typeof e == "string" ? Object.assign({ query: e }, i) : e, t = Object.keys(
    a
  ).reduce((r, o) => hI.includes(o) ? (r[o] = a[o], r) : (r.variables || (r.variables = {}), r.variables[o] = a[o], r), {}), d = a.baseUrl || n.endpoint.DEFAULTS.baseUrl;
  return $u.test(d) && (t.url = d.replace($u, "/api/graphql")), n(t).then((r) => {
    if (r.data.errors) {
      const o = {};
      for (const s of Object.keys(r.headers))
        o[s] = r.headers[s];
      throw new gI(
        t,
        o,
        r.data
      );
    }
    return r.data.data;
  });
}
function ql(n, e) {
  const i = n.defaults(e);
  return Object.assign((t, d) => NI(i, t, d), {
    defaults: ql.bind(null, i),
    endpoint: i.endpoint
  });
}
ql(ml, {
  headers: {
    "user-agent": `octokit-graphql.js/${kI} ${Jr()}`
  },
  method: "POST",
  url: "/graphql"
});
function EI(n) {
  return ql(n, {
    method: "POST",
    url: "/graphql"
  });
}
var yI = /^v1\./, bI = /^ghs_/, II = /^ghu_/;
async function CI(n) {
  const e = n.split(/\./).length === 3, i = yI.test(n) || bI.test(n), a = II.test(n);
  return {
    type: "token",
    token: n,
    tokenType: e ? "app" : i ? "installation" : a ? "user-to-server" : "oauth"
  };
}
function BI(n) {
  return n.split(/\./).length === 3 ? `bearer ${n}` : `token ${n}`;
}
async function QI(n, e, i, a) {
  const t = e.endpoint.merge(
    i,
    a
  );
  return t.headers.authorization = BI(n), e(t);
}
var SI = function(e) {
  if (!e)
    throw new Error("[@octokit/auth-token] No token passed to createTokenAuth");
  if (typeof e != "string")
    throw new Error(
      "[@octokit/auth-token] Token passed to createTokenAuth is not a string"
    );
  return e = e.replace(/^(token|bearer) +/i, ""), Object.assign(CI.bind(null, e), {
    hook: QI.bind(null, e)
  });
}, c1 = "5.0.2", ep = () => {
}, DI = console.warn.bind(console), wI = console.error.bind(console), ip = `octokit-core.js/${c1} ${Jr()}`, Bt, FI = (Bt = class {
  static defaults(e) {
    return class extends this {
      constructor(...a) {
        const t = a[0] || {};
        if (typeof e == "function") {
          super(e(t));
          return;
        }
        super(
          Object.assign(
            {},
            e,
            t,
            t.userAgent && e.userAgent ? {
              userAgent: `${t.userAgent} ${e.userAgent}`
            } : null
          )
        );
      }
    };
  }
  /**
   * Attach a plugin (or many) to your Octokit instance.
   *
   * @example
   * const API = Octokit.plugin(plugin1, plugin2, plugin3, ...)
   */
  static plugin(...e) {
    var t;
    const i = this.plugins;
    return t = class extends this {
    }, t.plugins = i.concat(
      e.filter((r) => !i.includes(r))
    ), t;
  }
  constructor(e = {}) {
    const i = new Hb(), a = {
      baseUrl: ml.endpoint.DEFAULTS.baseUrl,
      headers: {},
      request: Object.assign({}, e.request, {
        // @ts-ignore internal usage only, no need to type
        hook: i.bind(null, "request")
      }),
      mediaType: {
        previews: [],
        format: ""
      }
    };
    if (a.headers["user-agent"] = e.userAgent ? `${e.userAgent} ${ip}` : ip, e.baseUrl && (a.baseUrl = e.baseUrl), e.previews && (a.mediaType.previews = e.previews), e.timeZone && (a.headers["time-zone"] = e.timeZone), this.request = ml.defaults(a), this.graphql = EI(this.request).defaults(a), this.log = Object.assign(
      {
        debug: ep,
        info: ep,
        warn: DI,
        error: wI
      },
      e.log
    ), this.hook = i, e.authStrategy) {
      const { authStrategy: d, ...r } = e, o = d(
        Object.assign(
          {
            request: this.request,
            log: this.log,
            // we pass the current octokit instance as well as its constructor options
            // to allow for authentication strategies that return a new octokit instance
            // that shares the same internal state as the current one. The original
            // requirement for this was the "event-octokit" authentication strategy
            // of https://github.com/probot/octokit-auth-probot.
            octokit: this,
            octokitOptions: r
          },
          e.auth
        )
      );
      i.wrap("request", o.hook), this.auth = o;
    } else if (!e.auth)
      this.auth = async () => ({
        type: "unauthenticated"
      });
    else {
      const d = SI(e.auth);
      i.wrap("request", d.hook), this.auth = d;
    }
    const t = this.constructor;
    for (let d = 0; d < t.plugins.length; ++d)
      Object.assign(this, t.plugins[d](this, e));
  }
}, Bt.VERSION = c1, Bt.plugins = [], Bt);
const VI = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  Octokit: FI
}, Symbol.toStringTag, { value: "Module" })), TI = /* @__PURE__ */ cd(VI);
var k1 = "10.2.0", _I = {
  actions: {
    addCustomLabelsToSelfHostedRunnerForOrg: [
      "POST /orgs/{org}/actions/runners/{runner_id}/labels"
    ],
    addCustomLabelsToSelfHostedRunnerForRepo: [
      "POST /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"
    ],
    addSelectedRepoToOrgSecret: [
      "PUT /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}"
    ],
    addSelectedRepoToOrgVariable: [
      "PUT /orgs/{org}/actions/variables/{name}/repositories/{repository_id}"
    ],
    approveWorkflowRun: [
      "POST /repos/{owner}/{repo}/actions/runs/{run_id}/approve"
    ],
    cancelWorkflowRun: [
      "POST /repos/{owner}/{repo}/actions/runs/{run_id}/cancel"
    ],
    createEnvironmentVariable: [
      "POST /repositories/{repository_id}/environments/{environment_name}/variables"
    ],
    createOrUpdateEnvironmentSecret: [
      "PUT /repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}"
    ],
    createOrUpdateOrgSecret: ["PUT /orgs/{org}/actions/secrets/{secret_name}"],
    createOrUpdateRepoSecret: [
      "PUT /repos/{owner}/{repo}/actions/secrets/{secret_name}"
    ],
    createOrgVariable: ["POST /orgs/{org}/actions/variables"],
    createRegistrationTokenForOrg: [
      "POST /orgs/{org}/actions/runners/registration-token"
    ],
    createRegistrationTokenForRepo: [
      "POST /repos/{owner}/{repo}/actions/runners/registration-token"
    ],
    createRemoveTokenForOrg: ["POST /orgs/{org}/actions/runners/remove-token"],
    createRemoveTokenForRepo: [
      "POST /repos/{owner}/{repo}/actions/runners/remove-token"
    ],
    createRepoVariable: ["POST /repos/{owner}/{repo}/actions/variables"],
    createWorkflowDispatch: [
      "POST /repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches"
    ],
    deleteActionsCacheById: [
      "DELETE /repos/{owner}/{repo}/actions/caches/{cache_id}"
    ],
    deleteActionsCacheByKey: [
      "DELETE /repos/{owner}/{repo}/actions/caches{?key,ref}"
    ],
    deleteArtifact: [
      "DELETE /repos/{owner}/{repo}/actions/artifacts/{artifact_id}"
    ],
    deleteEnvironmentSecret: [
      "DELETE /repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}"
    ],
    deleteEnvironmentVariable: [
      "DELETE /repositories/{repository_id}/environments/{environment_name}/variables/{name}"
    ],
    deleteOrgSecret: ["DELETE /orgs/{org}/actions/secrets/{secret_name}"],
    deleteOrgVariable: ["DELETE /orgs/{org}/actions/variables/{name}"],
    deleteRepoSecret: [
      "DELETE /repos/{owner}/{repo}/actions/secrets/{secret_name}"
    ],
    deleteRepoVariable: [
      "DELETE /repos/{owner}/{repo}/actions/variables/{name}"
    ],
    deleteSelfHostedRunnerFromOrg: [
      "DELETE /orgs/{org}/actions/runners/{runner_id}"
    ],
    deleteSelfHostedRunnerFromRepo: [
      "DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}"
    ],
    deleteWorkflowRun: ["DELETE /repos/{owner}/{repo}/actions/runs/{run_id}"],
    deleteWorkflowRunLogs: [
      "DELETE /repos/{owner}/{repo}/actions/runs/{run_id}/logs"
    ],
    disableSelectedRepositoryGithubActionsOrganization: [
      "DELETE /orgs/{org}/actions/permissions/repositories/{repository_id}"
    ],
    disableWorkflow: [
      "PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/disable"
    ],
    downloadArtifact: [
      "GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}"
    ],
    downloadJobLogsForWorkflowRun: [
      "GET /repos/{owner}/{repo}/actions/jobs/{job_id}/logs"
    ],
    downloadWorkflowRunAttemptLogs: [
      "GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/logs"
    ],
    downloadWorkflowRunLogs: [
      "GET /repos/{owner}/{repo}/actions/runs/{run_id}/logs"
    ],
    enableSelectedRepositoryGithubActionsOrganization: [
      "PUT /orgs/{org}/actions/permissions/repositories/{repository_id}"
    ],
    enableWorkflow: [
      "PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/enable"
    ],
    forceCancelWorkflowRun: [
      "POST /repos/{owner}/{repo}/actions/runs/{run_id}/force-cancel"
    ],
    generateRunnerJitconfigForOrg: [
      "POST /orgs/{org}/actions/runners/generate-jitconfig"
    ],
    generateRunnerJitconfigForRepo: [
      "POST /repos/{owner}/{repo}/actions/runners/generate-jitconfig"
    ],
    getActionsCacheList: ["GET /repos/{owner}/{repo}/actions/caches"],
    getActionsCacheUsage: ["GET /repos/{owner}/{repo}/actions/cache/usage"],
    getActionsCacheUsageByRepoForOrg: [
      "GET /orgs/{org}/actions/cache/usage-by-repository"
    ],
    getActionsCacheUsageForOrg: ["GET /orgs/{org}/actions/cache/usage"],
    getAllowedActionsOrganization: [
      "GET /orgs/{org}/actions/permissions/selected-actions"
    ],
    getAllowedActionsRepository: [
      "GET /repos/{owner}/{repo}/actions/permissions/selected-actions"
    ],
    getArtifact: ["GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}"],
    getEnvironmentPublicKey: [
      "GET /repositories/{repository_id}/environments/{environment_name}/secrets/public-key"
    ],
    getEnvironmentSecret: [
      "GET /repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}"
    ],
    getEnvironmentVariable: [
      "GET /repositories/{repository_id}/environments/{environment_name}/variables/{name}"
    ],
    getGithubActionsDefaultWorkflowPermissionsOrganization: [
      "GET /orgs/{org}/actions/permissions/workflow"
    ],
    getGithubActionsDefaultWorkflowPermissionsRepository: [
      "GET /repos/{owner}/{repo}/actions/permissions/workflow"
    ],
    getGithubActionsPermissionsOrganization: [
      "GET /orgs/{org}/actions/permissions"
    ],
    getGithubActionsPermissionsRepository: [
      "GET /repos/{owner}/{repo}/actions/permissions"
    ],
    getJobForWorkflowRun: ["GET /repos/{owner}/{repo}/actions/jobs/{job_id}"],
    getOrgPublicKey: ["GET /orgs/{org}/actions/secrets/public-key"],
    getOrgSecret: ["GET /orgs/{org}/actions/secrets/{secret_name}"],
    getOrgVariable: ["GET /orgs/{org}/actions/variables/{name}"],
    getPendingDeploymentsForRun: [
      "GET /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments"
    ],
    getRepoPermissions: [
      "GET /repos/{owner}/{repo}/actions/permissions",
      {},
      { renamed: ["actions", "getGithubActionsPermissionsRepository"] }
    ],
    getRepoPublicKey: ["GET /repos/{owner}/{repo}/actions/secrets/public-key"],
    getRepoSecret: ["GET /repos/{owner}/{repo}/actions/secrets/{secret_name}"],
    getRepoVariable: ["GET /repos/{owner}/{repo}/actions/variables/{name}"],
    getReviewsForRun: [
      "GET /repos/{owner}/{repo}/actions/runs/{run_id}/approvals"
    ],
    getSelfHostedRunnerForOrg: ["GET /orgs/{org}/actions/runners/{runner_id}"],
    getSelfHostedRunnerForRepo: [
      "GET /repos/{owner}/{repo}/actions/runners/{runner_id}"
    ],
    getWorkflow: ["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}"],
    getWorkflowAccessToRepository: [
      "GET /repos/{owner}/{repo}/actions/permissions/access"
    ],
    getWorkflowRun: ["GET /repos/{owner}/{repo}/actions/runs/{run_id}"],
    getWorkflowRunAttempt: [
      "GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}"
    ],
    getWorkflowRunUsage: [
      "GET /repos/{owner}/{repo}/actions/runs/{run_id}/timing"
    ],
    getWorkflowUsage: [
      "GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing"
    ],
    listArtifactsForRepo: ["GET /repos/{owner}/{repo}/actions/artifacts"],
    listEnvironmentSecrets: [
      "GET /repositories/{repository_id}/environments/{environment_name}/secrets"
    ],
    listEnvironmentVariables: [
      "GET /repositories/{repository_id}/environments/{environment_name}/variables"
    ],
    listJobsForWorkflowRun: [
      "GET /repos/{owner}/{repo}/actions/runs/{run_id}/jobs"
    ],
    listJobsForWorkflowRunAttempt: [
      "GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs"
    ],
    listLabelsForSelfHostedRunnerForOrg: [
      "GET /orgs/{org}/actions/runners/{runner_id}/labels"
    ],
    listLabelsForSelfHostedRunnerForRepo: [
      "GET /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"
    ],
    listOrgSecrets: ["GET /orgs/{org}/actions/secrets"],
    listOrgVariables: ["GET /orgs/{org}/actions/variables"],
    listRepoOrganizationSecrets: [
      "GET /repos/{owner}/{repo}/actions/organization-secrets"
    ],
    listRepoOrganizationVariables: [
      "GET /repos/{owner}/{repo}/actions/organization-variables"
    ],
    listRepoSecrets: ["GET /repos/{owner}/{repo}/actions/secrets"],
    listRepoVariables: ["GET /repos/{owner}/{repo}/actions/variables"],
    listRepoWorkflows: ["GET /repos/{owner}/{repo}/actions/workflows"],
    listRunnerApplicationsForOrg: ["GET /orgs/{org}/actions/runners/downloads"],
    listRunnerApplicationsForRepo: [
      "GET /repos/{owner}/{repo}/actions/runners/downloads"
    ],
    listSelectedReposForOrgSecret: [
      "GET /orgs/{org}/actions/secrets/{secret_name}/repositories"
    ],
    listSelectedReposForOrgVariable: [
      "GET /orgs/{org}/actions/variables/{name}/repositories"
    ],
    listSelectedRepositoriesEnabledGithubActionsOrganization: [
      "GET /orgs/{org}/actions/permissions/repositories"
    ],
    listSelfHostedRunnersForOrg: ["GET /orgs/{org}/actions/runners"],
    listSelfHostedRunnersForRepo: ["GET /repos/{owner}/{repo}/actions/runners"],
    listWorkflowRunArtifacts: [
      "GET /repos/{owner}/{repo}/actions/runs/{run_id}/artifacts"
    ],
    listWorkflowRuns: [
      "GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs"
    ],
    listWorkflowRunsForRepo: ["GET /repos/{owner}/{repo}/actions/runs"],
    reRunJobForWorkflowRun: [
      "POST /repos/{owner}/{repo}/actions/jobs/{job_id}/rerun"
    ],
    reRunWorkflow: ["POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun"],
    reRunWorkflowFailedJobs: [
      "POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun-failed-jobs"
    ],
    removeAllCustomLabelsFromSelfHostedRunnerForOrg: [
      "DELETE /orgs/{org}/actions/runners/{runner_id}/labels"
    ],
    removeAllCustomLabelsFromSelfHostedRunnerForRepo: [
      "DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"
    ],
    removeCustomLabelFromSelfHostedRunnerForOrg: [
      "DELETE /orgs/{org}/actions/runners/{runner_id}/labels/{name}"
    ],
    removeCustomLabelFromSelfHostedRunnerForRepo: [
      "DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}/labels/{name}"
    ],
    removeSelectedRepoFromOrgSecret: [
      "DELETE /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}"
    ],
    removeSelectedRepoFromOrgVariable: [
      "DELETE /orgs/{org}/actions/variables/{name}/repositories/{repository_id}"
    ],
    reviewCustomGatesForRun: [
      "POST /repos/{owner}/{repo}/actions/runs/{run_id}/deployment_protection_rule"
    ],
    reviewPendingDeploymentsForRun: [
      "POST /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments"
    ],
    setAllowedActionsOrganization: [
      "PUT /orgs/{org}/actions/permissions/selected-actions"
    ],
    setAllowedActionsRepository: [
      "PUT /repos/{owner}/{repo}/actions/permissions/selected-actions"
    ],
    setCustomLabelsForSelfHostedRunnerForOrg: [
      "PUT /orgs/{org}/actions/runners/{runner_id}/labels"
    ],
    setCustomLabelsForSelfHostedRunnerForRepo: [
      "PUT /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"
    ],
    setGithubActionsDefaultWorkflowPermissionsOrganization: [
      "PUT /orgs/{org}/actions/permissions/workflow"
    ],
    setGithubActionsDefaultWorkflowPermissionsRepository: [
      "PUT /repos/{owner}/{repo}/actions/permissions/workflow"
    ],
    setGithubActionsPermissionsOrganization: [
      "PUT /orgs/{org}/actions/permissions"
    ],
    setGithubActionsPermissionsRepository: [
      "PUT /repos/{owner}/{repo}/actions/permissions"
    ],
    setSelectedReposForOrgSecret: [
      "PUT /orgs/{org}/actions/secrets/{secret_name}/repositories"
    ],
    setSelectedReposForOrgVariable: [
      "PUT /orgs/{org}/actions/variables/{name}/repositories"
    ],
    setSelectedRepositoriesEnabledGithubActionsOrganization: [
      "PUT /orgs/{org}/actions/permissions/repositories"
    ],
    setWorkflowAccessToRepository: [
      "PUT /repos/{owner}/{repo}/actions/permissions/access"
    ],
    updateEnvironmentVariable: [
      "PATCH /repositories/{repository_id}/environments/{environment_name}/variables/{name}"
    ],
    updateOrgVariable: ["PATCH /orgs/{org}/actions/variables/{name}"],
    updateRepoVariable: [
      "PATCH /repos/{owner}/{repo}/actions/variables/{name}"
    ]
  },
  activity: {
    checkRepoIsStarredByAuthenticatedUser: ["GET /user/starred/{owner}/{repo}"],
    deleteRepoSubscription: ["DELETE /repos/{owner}/{repo}/subscription"],
    deleteThreadSubscription: [
      "DELETE /notifications/threads/{thread_id}/subscription"
    ],
    getFeeds: ["GET /feeds"],
    getRepoSubscription: ["GET /repos/{owner}/{repo}/subscription"],
    getThread: ["GET /notifications/threads/{thread_id}"],
    getThreadSubscriptionForAuthenticatedUser: [
      "GET /notifications/threads/{thread_id}/subscription"
    ],
    listEventsForAuthenticatedUser: ["GET /users/{username}/events"],
    listNotificationsForAuthenticatedUser: ["GET /notifications"],
    listOrgEventsForAuthenticatedUser: [
      "GET /users/{username}/events/orgs/{org}"
    ],
    listPublicEvents: ["GET /events"],
    listPublicEventsForRepoNetwork: ["GET /networks/{owner}/{repo}/events"],
    listPublicEventsForUser: ["GET /users/{username}/events/public"],
    listPublicOrgEvents: ["GET /orgs/{org}/events"],
    listReceivedEventsForUser: ["GET /users/{username}/received_events"],
    listReceivedPublicEventsForUser: [
      "GET /users/{username}/received_events/public"
    ],
    listRepoEvents: ["GET /repos/{owner}/{repo}/events"],
    listRepoNotificationsForAuthenticatedUser: [
      "GET /repos/{owner}/{repo}/notifications"
    ],
    listReposStarredByAuthenticatedUser: ["GET /user/starred"],
    listReposStarredByUser: ["GET /users/{username}/starred"],
    listReposWatchedByUser: ["GET /users/{username}/subscriptions"],
    listStargazersForRepo: ["GET /repos/{owner}/{repo}/stargazers"],
    listWatchedReposForAuthenticatedUser: ["GET /user/subscriptions"],
    listWatchersForRepo: ["GET /repos/{owner}/{repo}/subscribers"],
    markNotificationsAsRead: ["PUT /notifications"],
    markRepoNotificationsAsRead: ["PUT /repos/{owner}/{repo}/notifications"],
    markThreadAsRead: ["PATCH /notifications/threads/{thread_id}"],
    setRepoSubscription: ["PUT /repos/{owner}/{repo}/subscription"],
    setThreadSubscription: [
      "PUT /notifications/threads/{thread_id}/subscription"
    ],
    starRepoForAuthenticatedUser: ["PUT /user/starred/{owner}/{repo}"],
    unstarRepoForAuthenticatedUser: ["DELETE /user/starred/{owner}/{repo}"]
  },
  apps: {
    addRepoToInstallation: [
      "PUT /user/installations/{installation_id}/repositories/{repository_id}",
      {},
      { renamed: ["apps", "addRepoToInstallationForAuthenticatedUser"] }
    ],
    addRepoToInstallationForAuthenticatedUser: [
      "PUT /user/installations/{installation_id}/repositories/{repository_id}"
    ],
    checkToken: ["POST /applications/{client_id}/token"],
    createFromManifest: ["POST /app-manifests/{code}/conversions"],
    createInstallationAccessToken: [
      "POST /app/installations/{installation_id}/access_tokens"
    ],
    deleteAuthorization: ["DELETE /applications/{client_id}/grant"],
    deleteInstallation: ["DELETE /app/installations/{installation_id}"],
    deleteToken: ["DELETE /applications/{client_id}/token"],
    getAuthenticated: ["GET /app"],
    getBySlug: ["GET /apps/{app_slug}"],
    getInstallation: ["GET /app/installations/{installation_id}"],
    getOrgInstallation: ["GET /orgs/{org}/installation"],
    getRepoInstallation: ["GET /repos/{owner}/{repo}/installation"],
    getSubscriptionPlanForAccount: [
      "GET /marketplace_listing/accounts/{account_id}"
    ],
    getSubscriptionPlanForAccountStubbed: [
      "GET /marketplace_listing/stubbed/accounts/{account_id}"
    ],
    getUserInstallation: ["GET /users/{username}/installation"],
    getWebhookConfigForApp: ["GET /app/hook/config"],
    getWebhookDelivery: ["GET /app/hook/deliveries/{delivery_id}"],
    listAccountsForPlan: ["GET /marketplace_listing/plans/{plan_id}/accounts"],
    listAccountsForPlanStubbed: [
      "GET /marketplace_listing/stubbed/plans/{plan_id}/accounts"
    ],
    listInstallationReposForAuthenticatedUser: [
      "GET /user/installations/{installation_id}/repositories"
    ],
    listInstallationRequestsForAuthenticatedApp: [
      "GET /app/installation-requests"
    ],
    listInstallations: ["GET /app/installations"],
    listInstallationsForAuthenticatedUser: ["GET /user/installations"],
    listPlans: ["GET /marketplace_listing/plans"],
    listPlansStubbed: ["GET /marketplace_listing/stubbed/plans"],
    listReposAccessibleToInstallation: ["GET /installation/repositories"],
    listSubscriptionsForAuthenticatedUser: ["GET /user/marketplace_purchases"],
    listSubscriptionsForAuthenticatedUserStubbed: [
      "GET /user/marketplace_purchases/stubbed"
    ],
    listWebhookDeliveries: ["GET /app/hook/deliveries"],
    redeliverWebhookDelivery: [
      "POST /app/hook/deliveries/{delivery_id}/attempts"
    ],
    removeRepoFromInstallation: [
      "DELETE /user/installations/{installation_id}/repositories/{repository_id}",
      {},
      { renamed: ["apps", "removeRepoFromInstallationForAuthenticatedUser"] }
    ],
    removeRepoFromInstallationForAuthenticatedUser: [
      "DELETE /user/installations/{installation_id}/repositories/{repository_id}"
    ],
    resetToken: ["PATCH /applications/{client_id}/token"],
    revokeInstallationAccessToken: ["DELETE /installation/token"],
    scopeToken: ["POST /applications/{client_id}/token/scoped"],
    suspendInstallation: ["PUT /app/installations/{installation_id}/suspended"],
    unsuspendInstallation: [
      "DELETE /app/installations/{installation_id}/suspended"
    ],
    updateWebhookConfigForApp: ["PATCH /app/hook/config"]
  },
  billing: {
    getGithubActionsBillingOrg: ["GET /orgs/{org}/settings/billing/actions"],
    getGithubActionsBillingUser: [
      "GET /users/{username}/settings/billing/actions"
    ],
    getGithubPackagesBillingOrg: ["GET /orgs/{org}/settings/billing/packages"],
    getGithubPackagesBillingUser: [
      "GET /users/{username}/settings/billing/packages"
    ],
    getSharedStorageBillingOrg: [
      "GET /orgs/{org}/settings/billing/shared-storage"
    ],
    getSharedStorageBillingUser: [
      "GET /users/{username}/settings/billing/shared-storage"
    ]
  },
  checks: {
    create: ["POST /repos/{owner}/{repo}/check-runs"],
    createSuite: ["POST /repos/{owner}/{repo}/check-suites"],
    get: ["GET /repos/{owner}/{repo}/check-runs/{check_run_id}"],
    getSuite: ["GET /repos/{owner}/{repo}/check-suites/{check_suite_id}"],
    listAnnotations: [
      "GET /repos/{owner}/{repo}/check-runs/{check_run_id}/annotations"
    ],
    listForRef: ["GET /repos/{owner}/{repo}/commits/{ref}/check-runs"],
    listForSuite: [
      "GET /repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs"
    ],
    listSuitesForRef: ["GET /repos/{owner}/{repo}/commits/{ref}/check-suites"],
    rerequestRun: [
      "POST /repos/{owner}/{repo}/check-runs/{check_run_id}/rerequest"
    ],
    rerequestSuite: [
      "POST /repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest"
    ],
    setSuitesPreferences: [
      "PATCH /repos/{owner}/{repo}/check-suites/preferences"
    ],
    update: ["PATCH /repos/{owner}/{repo}/check-runs/{check_run_id}"]
  },
  codeScanning: {
    deleteAnalysis: [
      "DELETE /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}{?confirm_delete}"
    ],
    getAlert: [
      "GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}",
      {},
      { renamedParameters: { alert_id: "alert_number" } }
    ],
    getAnalysis: [
      "GET /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}"
    ],
    getCodeqlDatabase: [
      "GET /repos/{owner}/{repo}/code-scanning/codeql/databases/{language}"
    ],
    getDefaultSetup: ["GET /repos/{owner}/{repo}/code-scanning/default-setup"],
    getSarif: ["GET /repos/{owner}/{repo}/code-scanning/sarifs/{sarif_id}"],
    listAlertInstances: [
      "GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances"
    ],
    listAlertsForOrg: ["GET /orgs/{org}/code-scanning/alerts"],
    listAlertsForRepo: ["GET /repos/{owner}/{repo}/code-scanning/alerts"],
    listAlertsInstances: [
      "GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances",
      {},
      { renamed: ["codeScanning", "listAlertInstances"] }
    ],
    listCodeqlDatabases: [
      "GET /repos/{owner}/{repo}/code-scanning/codeql/databases"
    ],
    listRecentAnalyses: ["GET /repos/{owner}/{repo}/code-scanning/analyses"],
    updateAlert: [
      "PATCH /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}"
    ],
    updateDefaultSetup: [
      "PATCH /repos/{owner}/{repo}/code-scanning/default-setup"
    ],
    uploadSarif: ["POST /repos/{owner}/{repo}/code-scanning/sarifs"]
  },
  codesOfConduct: {
    getAllCodesOfConduct: ["GET /codes_of_conduct"],
    getConductCode: ["GET /codes_of_conduct/{key}"]
  },
  codespaces: {
    addRepositoryForSecretForAuthenticatedUser: [
      "PUT /user/codespaces/secrets/{secret_name}/repositories/{repository_id}"
    ],
    addSelectedRepoToOrgSecret: [
      "PUT /orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}"
    ],
    checkPermissionsForDevcontainer: [
      "GET /repos/{owner}/{repo}/codespaces/permissions_check"
    ],
    codespaceMachinesForAuthenticatedUser: [
      "GET /user/codespaces/{codespace_name}/machines"
    ],
    createForAuthenticatedUser: ["POST /user/codespaces"],
    createOrUpdateOrgSecret: [
      "PUT /orgs/{org}/codespaces/secrets/{secret_name}"
    ],
    createOrUpdateRepoSecret: [
      "PUT /repos/{owner}/{repo}/codespaces/secrets/{secret_name}"
    ],
    createOrUpdateSecretForAuthenticatedUser: [
      "PUT /user/codespaces/secrets/{secret_name}"
    ],
    createWithPrForAuthenticatedUser: [
      "POST /repos/{owner}/{repo}/pulls/{pull_number}/codespaces"
    ],
    createWithRepoForAuthenticatedUser: [
      "POST /repos/{owner}/{repo}/codespaces"
    ],
    deleteForAuthenticatedUser: ["DELETE /user/codespaces/{codespace_name}"],
    deleteFromOrganization: [
      "DELETE /orgs/{org}/members/{username}/codespaces/{codespace_name}"
    ],
    deleteOrgSecret: ["DELETE /orgs/{org}/codespaces/secrets/{secret_name}"],
    deleteRepoSecret: [
      "DELETE /repos/{owner}/{repo}/codespaces/secrets/{secret_name}"
    ],
    deleteSecretForAuthenticatedUser: [
      "DELETE /user/codespaces/secrets/{secret_name}"
    ],
    exportForAuthenticatedUser: [
      "POST /user/codespaces/{codespace_name}/exports"
    ],
    getCodespacesForUserInOrg: [
      "GET /orgs/{org}/members/{username}/codespaces"
    ],
    getExportDetailsForAuthenticatedUser: [
      "GET /user/codespaces/{codespace_name}/exports/{export_id}"
    ],
    getForAuthenticatedUser: ["GET /user/codespaces/{codespace_name}"],
    getOrgPublicKey: ["GET /orgs/{org}/codespaces/secrets/public-key"],
    getOrgSecret: ["GET /orgs/{org}/codespaces/secrets/{secret_name}"],
    getPublicKeyForAuthenticatedUser: [
      "GET /user/codespaces/secrets/public-key"
    ],
    getRepoPublicKey: [
      "GET /repos/{owner}/{repo}/codespaces/secrets/public-key"
    ],
    getRepoSecret: [
      "GET /repos/{owner}/{repo}/codespaces/secrets/{secret_name}"
    ],
    getSecretForAuthenticatedUser: [
      "GET /user/codespaces/secrets/{secret_name}"
    ],
    listDevcontainersInRepositoryForAuthenticatedUser: [
      "GET /repos/{owner}/{repo}/codespaces/devcontainers"
    ],
    listForAuthenticatedUser: ["GET /user/codespaces"],
    listInOrganization: [
      "GET /orgs/{org}/codespaces",
      {},
      { renamedParameters: { org_id: "org" } }
    ],
    listInRepositoryForAuthenticatedUser: [
      "GET /repos/{owner}/{repo}/codespaces"
    ],
    listOrgSecrets: ["GET /orgs/{org}/codespaces/secrets"],
    listRepoSecrets: ["GET /repos/{owner}/{repo}/codespaces/secrets"],
    listRepositoriesForSecretForAuthenticatedUser: [
      "GET /user/codespaces/secrets/{secret_name}/repositories"
    ],
    listSecretsForAuthenticatedUser: ["GET /user/codespaces/secrets"],
    listSelectedReposForOrgSecret: [
      "GET /orgs/{org}/codespaces/secrets/{secret_name}/repositories"
    ],
    preFlightWithRepoForAuthenticatedUser: [
      "GET /repos/{owner}/{repo}/codespaces/new"
    ],
    publishForAuthenticatedUser: [
      "POST /user/codespaces/{codespace_name}/publish"
    ],
    removeRepositoryForSecretForAuthenticatedUser: [
      "DELETE /user/codespaces/secrets/{secret_name}/repositories/{repository_id}"
    ],
    removeSelectedRepoFromOrgSecret: [
      "DELETE /orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}"
    ],
    repoMachinesForAuthenticatedUser: [
      "GET /repos/{owner}/{repo}/codespaces/machines"
    ],
    setRepositoriesForSecretForAuthenticatedUser: [
      "PUT /user/codespaces/secrets/{secret_name}/repositories"
    ],
    setSelectedReposForOrgSecret: [
      "PUT /orgs/{org}/codespaces/secrets/{secret_name}/repositories"
    ],
    startForAuthenticatedUser: ["POST /user/codespaces/{codespace_name}/start"],
    stopForAuthenticatedUser: ["POST /user/codespaces/{codespace_name}/stop"],
    stopInOrganization: [
      "POST /orgs/{org}/members/{username}/codespaces/{codespace_name}/stop"
    ],
    updateForAuthenticatedUser: ["PATCH /user/codespaces/{codespace_name}"]
  },
  copilot: {
    addCopilotForBusinessSeatsForTeams: [
      "POST /orgs/{org}/copilot/billing/selected_teams"
    ],
    addCopilotForBusinessSeatsForUsers: [
      "POST /orgs/{org}/copilot/billing/selected_users"
    ],
    cancelCopilotSeatAssignmentForTeams: [
      "DELETE /orgs/{org}/copilot/billing/selected_teams"
    ],
    cancelCopilotSeatAssignmentForUsers: [
      "DELETE /orgs/{org}/copilot/billing/selected_users"
    ],
    getCopilotOrganizationDetails: ["GET /orgs/{org}/copilot/billing"],
    getCopilotSeatDetailsForUser: [
      "GET /orgs/{org}/members/{username}/copilot"
    ],
    listCopilotSeats: ["GET /orgs/{org}/copilot/billing/seats"]
  },
  dependabot: {
    addSelectedRepoToOrgSecret: [
      "PUT /orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}"
    ],
    createOrUpdateOrgSecret: [
      "PUT /orgs/{org}/dependabot/secrets/{secret_name}"
    ],
    createOrUpdateRepoSecret: [
      "PUT /repos/{owner}/{repo}/dependabot/secrets/{secret_name}"
    ],
    deleteOrgSecret: ["DELETE /orgs/{org}/dependabot/secrets/{secret_name}"],
    deleteRepoSecret: [
      "DELETE /repos/{owner}/{repo}/dependabot/secrets/{secret_name}"
    ],
    getAlert: ["GET /repos/{owner}/{repo}/dependabot/alerts/{alert_number}"],
    getOrgPublicKey: ["GET /orgs/{org}/dependabot/secrets/public-key"],
    getOrgSecret: ["GET /orgs/{org}/dependabot/secrets/{secret_name}"],
    getRepoPublicKey: [
      "GET /repos/{owner}/{repo}/dependabot/secrets/public-key"
    ],
    getRepoSecret: [
      "GET /repos/{owner}/{repo}/dependabot/secrets/{secret_name}"
    ],
    listAlertsForEnterprise: [
      "GET /enterprises/{enterprise}/dependabot/alerts"
    ],
    listAlertsForOrg: ["GET /orgs/{org}/dependabot/alerts"],
    listAlertsForRepo: ["GET /repos/{owner}/{repo}/dependabot/alerts"],
    listOrgSecrets: ["GET /orgs/{org}/dependabot/secrets"],
    listRepoSecrets: ["GET /repos/{owner}/{repo}/dependabot/secrets"],
    listSelectedReposForOrgSecret: [
      "GET /orgs/{org}/dependabot/secrets/{secret_name}/repositories"
    ],
    removeSelectedRepoFromOrgSecret: [
      "DELETE /orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}"
    ],
    setSelectedReposForOrgSecret: [
      "PUT /orgs/{org}/dependabot/secrets/{secret_name}/repositories"
    ],
    updateAlert: [
      "PATCH /repos/{owner}/{repo}/dependabot/alerts/{alert_number}"
    ]
  },
  dependencyGraph: {
    createRepositorySnapshot: [
      "POST /repos/{owner}/{repo}/dependency-graph/snapshots"
    ],
    diffRange: [
      "GET /repos/{owner}/{repo}/dependency-graph/compare/{basehead}"
    ],
    exportSbom: ["GET /repos/{owner}/{repo}/dependency-graph/sbom"]
  },
  emojis: { get: ["GET /emojis"] },
  gists: {
    checkIsStarred: ["GET /gists/{gist_id}/star"],
    create: ["POST /gists"],
    createComment: ["POST /gists/{gist_id}/comments"],
    delete: ["DELETE /gists/{gist_id}"],
    deleteComment: ["DELETE /gists/{gist_id}/comments/{comment_id}"],
    fork: ["POST /gists/{gist_id}/forks"],
    get: ["GET /gists/{gist_id}"],
    getComment: ["GET /gists/{gist_id}/comments/{comment_id}"],
    getRevision: ["GET /gists/{gist_id}/{sha}"],
    list: ["GET /gists"],
    listComments: ["GET /gists/{gist_id}/comments"],
    listCommits: ["GET /gists/{gist_id}/commits"],
    listForUser: ["GET /users/{username}/gists"],
    listForks: ["GET /gists/{gist_id}/forks"],
    listPublic: ["GET /gists/public"],
    listStarred: ["GET /gists/starred"],
    star: ["PUT /gists/{gist_id}/star"],
    unstar: ["DELETE /gists/{gist_id}/star"],
    update: ["PATCH /gists/{gist_id}"],
    updateComment: ["PATCH /gists/{gist_id}/comments/{comment_id}"]
  },
  git: {
    createBlob: ["POST /repos/{owner}/{repo}/git/blobs"],
    createCommit: ["POST /repos/{owner}/{repo}/git/commits"],
    createRef: ["POST /repos/{owner}/{repo}/git/refs"],
    createTag: ["POST /repos/{owner}/{repo}/git/tags"],
    createTree: ["POST /repos/{owner}/{repo}/git/trees"],
    deleteRef: ["DELETE /repos/{owner}/{repo}/git/refs/{ref}"],
    getBlob: ["GET /repos/{owner}/{repo}/git/blobs/{file_sha}"],
    getCommit: ["GET /repos/{owner}/{repo}/git/commits/{commit_sha}"],
    getRef: ["GET /repos/{owner}/{repo}/git/ref/{ref}"],
    getTag: ["GET /repos/{owner}/{repo}/git/tags/{tag_sha}"],
    getTree: ["GET /repos/{owner}/{repo}/git/trees/{tree_sha}"],
    listMatchingRefs: ["GET /repos/{owner}/{repo}/git/matching-refs/{ref}"],
    updateRef: ["PATCH /repos/{owner}/{repo}/git/refs/{ref}"]
  },
  gitignore: {
    getAllTemplates: ["GET /gitignore/templates"],
    getTemplate: ["GET /gitignore/templates/{name}"]
  },
  interactions: {
    getRestrictionsForAuthenticatedUser: ["GET /user/interaction-limits"],
    getRestrictionsForOrg: ["GET /orgs/{org}/interaction-limits"],
    getRestrictionsForRepo: ["GET /repos/{owner}/{repo}/interaction-limits"],
    getRestrictionsForYourPublicRepos: [
      "GET /user/interaction-limits",
      {},
      { renamed: ["interactions", "getRestrictionsForAuthenticatedUser"] }
    ],
    removeRestrictionsForAuthenticatedUser: ["DELETE /user/interaction-limits"],
    removeRestrictionsForOrg: ["DELETE /orgs/{org}/interaction-limits"],
    removeRestrictionsForRepo: [
      "DELETE /repos/{owner}/{repo}/interaction-limits"
    ],
    removeRestrictionsForYourPublicRepos: [
      "DELETE /user/interaction-limits",
      {},
      { renamed: ["interactions", "removeRestrictionsForAuthenticatedUser"] }
    ],
    setRestrictionsForAuthenticatedUser: ["PUT /user/interaction-limits"],
    setRestrictionsForOrg: ["PUT /orgs/{org}/interaction-limits"],
    setRestrictionsForRepo: ["PUT /repos/{owner}/{repo}/interaction-limits"],
    setRestrictionsForYourPublicRepos: [
      "PUT /user/interaction-limits",
      {},
      { renamed: ["interactions", "setRestrictionsForAuthenticatedUser"] }
    ]
  },
  issues: {
    addAssignees: [
      "POST /repos/{owner}/{repo}/issues/{issue_number}/assignees"
    ],
    addLabels: ["POST /repos/{owner}/{repo}/issues/{issue_number}/labels"],
    checkUserCanBeAssigned: ["GET /repos/{owner}/{repo}/assignees/{assignee}"],
    checkUserCanBeAssignedToIssue: [
      "GET /repos/{owner}/{repo}/issues/{issue_number}/assignees/{assignee}"
    ],
    create: ["POST /repos/{owner}/{repo}/issues"],
    createComment: [
      "POST /repos/{owner}/{repo}/issues/{issue_number}/comments"
    ],
    createLabel: ["POST /repos/{owner}/{repo}/labels"],
    createMilestone: ["POST /repos/{owner}/{repo}/milestones"],
    deleteComment: [
      "DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}"
    ],
    deleteLabel: ["DELETE /repos/{owner}/{repo}/labels/{name}"],
    deleteMilestone: [
      "DELETE /repos/{owner}/{repo}/milestones/{milestone_number}"
    ],
    get: ["GET /repos/{owner}/{repo}/issues/{issue_number}"],
    getComment: ["GET /repos/{owner}/{repo}/issues/comments/{comment_id}"],
    getEvent: ["GET /repos/{owner}/{repo}/issues/events/{event_id}"],
    getLabel: ["GET /repos/{owner}/{repo}/labels/{name}"],
    getMilestone: ["GET /repos/{owner}/{repo}/milestones/{milestone_number}"],
    list: ["GET /issues"],
    listAssignees: ["GET /repos/{owner}/{repo}/assignees"],
    listComments: ["GET /repos/{owner}/{repo}/issues/{issue_number}/comments"],
    listCommentsForRepo: ["GET /repos/{owner}/{repo}/issues/comments"],
    listEvents: ["GET /repos/{owner}/{repo}/issues/{issue_number}/events"],
    listEventsForRepo: ["GET /repos/{owner}/{repo}/issues/events"],
    listEventsForTimeline: [
      "GET /repos/{owner}/{repo}/issues/{issue_number}/timeline"
    ],
    listForAuthenticatedUser: ["GET /user/issues"],
    listForOrg: ["GET /orgs/{org}/issues"],
    listForRepo: ["GET /repos/{owner}/{repo}/issues"],
    listLabelsForMilestone: [
      "GET /repos/{owner}/{repo}/milestones/{milestone_number}/labels"
    ],
    listLabelsForRepo: ["GET /repos/{owner}/{repo}/labels"],
    listLabelsOnIssue: [
      "GET /repos/{owner}/{repo}/issues/{issue_number}/labels"
    ],
    listMilestones: ["GET /repos/{owner}/{repo}/milestones"],
    lock: ["PUT /repos/{owner}/{repo}/issues/{issue_number}/lock"],
    removeAllLabels: [
      "DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels"
    ],
    removeAssignees: [
      "DELETE /repos/{owner}/{repo}/issues/{issue_number}/assignees"
    ],
    removeLabel: [
      "DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels/{name}"
    ],
    setLabels: ["PUT /repos/{owner}/{repo}/issues/{issue_number}/labels"],
    unlock: ["DELETE /repos/{owner}/{repo}/issues/{issue_number}/lock"],
    update: ["PATCH /repos/{owner}/{repo}/issues/{issue_number}"],
    updateComment: ["PATCH /repos/{owner}/{repo}/issues/comments/{comment_id}"],
    updateLabel: ["PATCH /repos/{owner}/{repo}/labels/{name}"],
    updateMilestone: [
      "PATCH /repos/{owner}/{repo}/milestones/{milestone_number}"
    ]
  },
  licenses: {
    get: ["GET /licenses/{license}"],
    getAllCommonlyUsed: ["GET /licenses"],
    getForRepo: ["GET /repos/{owner}/{repo}/license"]
  },
  markdown: {
    render: ["POST /markdown"],
    renderRaw: [
      "POST /markdown/raw",
      { headers: { "content-type": "text/plain; charset=utf-8" } }
    ]
  },
  meta: {
    get: ["GET /meta"],
    getAllVersions: ["GET /versions"],
    getOctocat: ["GET /octocat"],
    getZen: ["GET /zen"],
    root: ["GET /"]
  },
  migrations: {
    cancelImport: [
      "DELETE /repos/{owner}/{repo}/import",
      {},
      {
        deprecated: "octokit.rest.migrations.cancelImport() is deprecated, see https://docs.github.com/rest/migrations/source-imports#cancel-an-import"
      }
    ],
    deleteArchiveForAuthenticatedUser: [
      "DELETE /user/migrations/{migration_id}/archive"
    ],
    deleteArchiveForOrg: [
      "DELETE /orgs/{org}/migrations/{migration_id}/archive"
    ],
    downloadArchiveForOrg: [
      "GET /orgs/{org}/migrations/{migration_id}/archive"
    ],
    getArchiveForAuthenticatedUser: [
      "GET /user/migrations/{migration_id}/archive"
    ],
    getCommitAuthors: [
      "GET /repos/{owner}/{repo}/import/authors",
      {},
      {
        deprecated: "octokit.rest.migrations.getCommitAuthors() is deprecated, see https://docs.github.com/rest/migrations/source-imports#get-commit-authors"
      }
    ],
    getImportStatus: [
      "GET /repos/{owner}/{repo}/import",
      {},
      {
        deprecated: "octokit.rest.migrations.getImportStatus() is deprecated, see https://docs.github.com/rest/migrations/source-imports#get-an-import-status"
      }
    ],
    getLargeFiles: [
      "GET /repos/{owner}/{repo}/import/large_files",
      {},
      {
        deprecated: "octokit.rest.migrations.getLargeFiles() is deprecated, see https://docs.github.com/rest/migrations/source-imports#get-large-files"
      }
    ],
    getStatusForAuthenticatedUser: ["GET /user/migrations/{migration_id}"],
    getStatusForOrg: ["GET /orgs/{org}/migrations/{migration_id}"],
    listForAuthenticatedUser: ["GET /user/migrations"],
    listForOrg: ["GET /orgs/{org}/migrations"],
    listReposForAuthenticatedUser: [
      "GET /user/migrations/{migration_id}/repositories"
    ],
    listReposForOrg: ["GET /orgs/{org}/migrations/{migration_id}/repositories"],
    listReposForUser: [
      "GET /user/migrations/{migration_id}/repositories",
      {},
      { renamed: ["migrations", "listReposForAuthenticatedUser"] }
    ],
    mapCommitAuthor: [
      "PATCH /repos/{owner}/{repo}/import/authors/{author_id}",
      {},
      {
        deprecated: "octokit.rest.migrations.mapCommitAuthor() is deprecated, see https://docs.github.com/rest/migrations/source-imports#map-a-commit-author"
      }
    ],
    setLfsPreference: [
      "PATCH /repos/{owner}/{repo}/import/lfs",
      {},
      {
        deprecated: "octokit.rest.migrations.setLfsPreference() is deprecated, see https://docs.github.com/rest/migrations/source-imports#update-git-lfs-preference"
      }
    ],
    startForAuthenticatedUser: ["POST /user/migrations"],
    startForOrg: ["POST /orgs/{org}/migrations"],
    startImport: [
      "PUT /repos/{owner}/{repo}/import",
      {},
      {
        deprecated: "octokit.rest.migrations.startImport() is deprecated, see https://docs.github.com/rest/migrations/source-imports#start-an-import"
      }
    ],
    unlockRepoForAuthenticatedUser: [
      "DELETE /user/migrations/{migration_id}/repos/{repo_name}/lock"
    ],
    unlockRepoForOrg: [
      "DELETE /orgs/{org}/migrations/{migration_id}/repos/{repo_name}/lock"
    ],
    updateImport: [
      "PATCH /repos/{owner}/{repo}/import",
      {},
      {
        deprecated: "octokit.rest.migrations.updateImport() is deprecated, see https://docs.github.com/rest/migrations/source-imports#update-an-import"
      }
    ]
  },
  orgs: {
    addSecurityManagerTeam: [
      "PUT /orgs/{org}/security-managers/teams/{team_slug}"
    ],
    blockUser: ["PUT /orgs/{org}/blocks/{username}"],
    cancelInvitation: ["DELETE /orgs/{org}/invitations/{invitation_id}"],
    checkBlockedUser: ["GET /orgs/{org}/blocks/{username}"],
    checkMembershipForUser: ["GET /orgs/{org}/members/{username}"],
    checkPublicMembershipForUser: ["GET /orgs/{org}/public_members/{username}"],
    convertMemberToOutsideCollaborator: [
      "PUT /orgs/{org}/outside_collaborators/{username}"
    ],
    createInvitation: ["POST /orgs/{org}/invitations"],
    createOrUpdateCustomProperties: ["PATCH /orgs/{org}/properties/schema"],
    createOrUpdateCustomPropertiesValuesForRepos: [
      "PATCH /orgs/{org}/properties/values"
    ],
    createOrUpdateCustomProperty: [
      "PUT /orgs/{org}/properties/schema/{custom_property_name}"
    ],
    createWebhook: ["POST /orgs/{org}/hooks"],
    delete: ["DELETE /orgs/{org}"],
    deleteWebhook: ["DELETE /orgs/{org}/hooks/{hook_id}"],
    enableOrDisableSecurityProductOnAllOrgRepos: [
      "POST /orgs/{org}/{security_product}/{enablement}"
    ],
    get: ["GET /orgs/{org}"],
    getAllCustomProperties: ["GET /orgs/{org}/properties/schema"],
    getCustomProperty: [
      "GET /orgs/{org}/properties/schema/{custom_property_name}"
    ],
    getMembershipForAuthenticatedUser: ["GET /user/memberships/orgs/{org}"],
    getMembershipForUser: ["GET /orgs/{org}/memberships/{username}"],
    getWebhook: ["GET /orgs/{org}/hooks/{hook_id}"],
    getWebhookConfigForOrg: ["GET /orgs/{org}/hooks/{hook_id}/config"],
    getWebhookDelivery: [
      "GET /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}"
    ],
    list: ["GET /organizations"],
    listAppInstallations: ["GET /orgs/{org}/installations"],
    listBlockedUsers: ["GET /orgs/{org}/blocks"],
    listCustomPropertiesValuesForRepos: ["GET /orgs/{org}/properties/values"],
    listFailedInvitations: ["GET /orgs/{org}/failed_invitations"],
    listForAuthenticatedUser: ["GET /user/orgs"],
    listForUser: ["GET /users/{username}/orgs"],
    listInvitationTeams: ["GET /orgs/{org}/invitations/{invitation_id}/teams"],
    listMembers: ["GET /orgs/{org}/members"],
    listMembershipsForAuthenticatedUser: ["GET /user/memberships/orgs"],
    listOutsideCollaborators: ["GET /orgs/{org}/outside_collaborators"],
    listPatGrantRepositories: [
      "GET /orgs/{org}/personal-access-tokens/{pat_id}/repositories"
    ],
    listPatGrantRequestRepositories: [
      "GET /orgs/{org}/personal-access-token-requests/{pat_request_id}/repositories"
    ],
    listPatGrantRequests: ["GET /orgs/{org}/personal-access-token-requests"],
    listPatGrants: ["GET /orgs/{org}/personal-access-tokens"],
    listPendingInvitations: ["GET /orgs/{org}/invitations"],
    listPublicMembers: ["GET /orgs/{org}/public_members"],
    listSecurityManagerTeams: ["GET /orgs/{org}/security-managers"],
    listWebhookDeliveries: ["GET /orgs/{org}/hooks/{hook_id}/deliveries"],
    listWebhooks: ["GET /orgs/{org}/hooks"],
    pingWebhook: ["POST /orgs/{org}/hooks/{hook_id}/pings"],
    redeliverWebhookDelivery: [
      "POST /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}/attempts"
    ],
    removeCustomProperty: [
      "DELETE /orgs/{org}/properties/schema/{custom_property_name}"
    ],
    removeMember: ["DELETE /orgs/{org}/members/{username}"],
    removeMembershipForUser: ["DELETE /orgs/{org}/memberships/{username}"],
    removeOutsideCollaborator: [
      "DELETE /orgs/{org}/outside_collaborators/{username}"
    ],
    removePublicMembershipForAuthenticatedUser: [
      "DELETE /orgs/{org}/public_members/{username}"
    ],
    removeSecurityManagerTeam: [
      "DELETE /orgs/{org}/security-managers/teams/{team_slug}"
    ],
    reviewPatGrantRequest: [
      "POST /orgs/{org}/personal-access-token-requests/{pat_request_id}"
    ],
    reviewPatGrantRequestsInBulk: [
      "POST /orgs/{org}/personal-access-token-requests"
    ],
    setMembershipForUser: ["PUT /orgs/{org}/memberships/{username}"],
    setPublicMembershipForAuthenticatedUser: [
      "PUT /orgs/{org}/public_members/{username}"
    ],
    unblockUser: ["DELETE /orgs/{org}/blocks/{username}"],
    update: ["PATCH /orgs/{org}"],
    updateMembershipForAuthenticatedUser: [
      "PATCH /user/memberships/orgs/{org}"
    ],
    updatePatAccess: ["POST /orgs/{org}/personal-access-tokens/{pat_id}"],
    updatePatAccesses: ["POST /orgs/{org}/personal-access-tokens"],
    updateWebhook: ["PATCH /orgs/{org}/hooks/{hook_id}"],
    updateWebhookConfigForOrg: ["PATCH /orgs/{org}/hooks/{hook_id}/config"]
  },
  packages: {
    deletePackageForAuthenticatedUser: [
      "DELETE /user/packages/{package_type}/{package_name}"
    ],
    deletePackageForOrg: [
      "DELETE /orgs/{org}/packages/{package_type}/{package_name}"
    ],
    deletePackageForUser: [
      "DELETE /users/{username}/packages/{package_type}/{package_name}"
    ],
    deletePackageVersionForAuthenticatedUser: [
      "DELETE /user/packages/{package_type}/{package_name}/versions/{package_version_id}"
    ],
    deletePackageVersionForOrg: [
      "DELETE /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}"
    ],
    deletePackageVersionForUser: [
      "DELETE /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}"
    ],
    getAllPackageVersionsForAPackageOwnedByAnOrg: [
      "GET /orgs/{org}/packages/{package_type}/{package_name}/versions",
      {},
      { renamed: ["packages", "getAllPackageVersionsForPackageOwnedByOrg"] }
    ],
    getAllPackageVersionsForAPackageOwnedByTheAuthenticatedUser: [
      "GET /user/packages/{package_type}/{package_name}/versions",
      {},
      {
        renamed: [
          "packages",
          "getAllPackageVersionsForPackageOwnedByAuthenticatedUser"
        ]
      }
    ],
    getAllPackageVersionsForPackageOwnedByAuthenticatedUser: [
      "GET /user/packages/{package_type}/{package_name}/versions"
    ],
    getAllPackageVersionsForPackageOwnedByOrg: [
      "GET /orgs/{org}/packages/{package_type}/{package_name}/versions"
    ],
    getAllPackageVersionsForPackageOwnedByUser: [
      "GET /users/{username}/packages/{package_type}/{package_name}/versions"
    ],
    getPackageForAuthenticatedUser: [
      "GET /user/packages/{package_type}/{package_name}"
    ],
    getPackageForOrganization: [
      "GET /orgs/{org}/packages/{package_type}/{package_name}"
    ],
    getPackageForUser: [
      "GET /users/{username}/packages/{package_type}/{package_name}"
    ],
    getPackageVersionForAuthenticatedUser: [
      "GET /user/packages/{package_type}/{package_name}/versions/{package_version_id}"
    ],
    getPackageVersionForOrganization: [
      "GET /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}"
    ],
    getPackageVersionForUser: [
      "GET /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}"
    ],
    listDockerMigrationConflictingPackagesForAuthenticatedUser: [
      "GET /user/docker/conflicts"
    ],
    listDockerMigrationConflictingPackagesForOrganization: [
      "GET /orgs/{org}/docker/conflicts"
    ],
    listDockerMigrationConflictingPackagesForUser: [
      "GET /users/{username}/docker/conflicts"
    ],
    listPackagesForAuthenticatedUser: ["GET /user/packages"],
    listPackagesForOrganization: ["GET /orgs/{org}/packages"],
    listPackagesForUser: ["GET /users/{username}/packages"],
    restorePackageForAuthenticatedUser: [
      "POST /user/packages/{package_type}/{package_name}/restore{?token}"
    ],
    restorePackageForOrg: [
      "POST /orgs/{org}/packages/{package_type}/{package_name}/restore{?token}"
    ],
    restorePackageForUser: [
      "POST /users/{username}/packages/{package_type}/{package_name}/restore{?token}"
    ],
    restorePackageVersionForAuthenticatedUser: [
      "POST /user/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"
    ],
    restorePackageVersionForOrg: [
      "POST /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"
    ],
    restorePackageVersionForUser: [
      "POST /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"
    ]
  },
  projects: {
    addCollaborator: ["PUT /projects/{project_id}/collaborators/{username}"],
    createCard: ["POST /projects/columns/{column_id}/cards"],
    createColumn: ["POST /projects/{project_id}/columns"],
    createForAuthenticatedUser: ["POST /user/projects"],
    createForOrg: ["POST /orgs/{org}/projects"],
    createForRepo: ["POST /repos/{owner}/{repo}/projects"],
    delete: ["DELETE /projects/{project_id}"],
    deleteCard: ["DELETE /projects/columns/cards/{card_id}"],
    deleteColumn: ["DELETE /projects/columns/{column_id}"],
    get: ["GET /projects/{project_id}"],
    getCard: ["GET /projects/columns/cards/{card_id}"],
    getColumn: ["GET /projects/columns/{column_id}"],
    getPermissionForUser: [
      "GET /projects/{project_id}/collaborators/{username}/permission"
    ],
    listCards: ["GET /projects/columns/{column_id}/cards"],
    listCollaborators: ["GET /projects/{project_id}/collaborators"],
    listColumns: ["GET /projects/{project_id}/columns"],
    listForOrg: ["GET /orgs/{org}/projects"],
    listForRepo: ["GET /repos/{owner}/{repo}/projects"],
    listForUser: ["GET /users/{username}/projects"],
    moveCard: ["POST /projects/columns/cards/{card_id}/moves"],
    moveColumn: ["POST /projects/columns/{column_id}/moves"],
    removeCollaborator: [
      "DELETE /projects/{project_id}/collaborators/{username}"
    ],
    update: ["PATCH /projects/{project_id}"],
    updateCard: ["PATCH /projects/columns/cards/{card_id}"],
    updateColumn: ["PATCH /projects/columns/{column_id}"]
  },
  pulls: {
    checkIfMerged: ["GET /repos/{owner}/{repo}/pulls/{pull_number}/merge"],
    create: ["POST /repos/{owner}/{repo}/pulls"],
    createReplyForReviewComment: [
      "POST /repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies"
    ],
    createReview: ["POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews"],
    createReviewComment: [
      "POST /repos/{owner}/{repo}/pulls/{pull_number}/comments"
    ],
    deletePendingReview: [
      "DELETE /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"
    ],
    deleteReviewComment: [
      "DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}"
    ],
    dismissReview: [
      "PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals"
    ],
    get: ["GET /repos/{owner}/{repo}/pulls/{pull_number}"],
    getReview: [
      "GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"
    ],
    getReviewComment: ["GET /repos/{owner}/{repo}/pulls/comments/{comment_id}"],
    list: ["GET /repos/{owner}/{repo}/pulls"],
    listCommentsForReview: [
      "GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments"
    ],
    listCommits: ["GET /repos/{owner}/{repo}/pulls/{pull_number}/commits"],
    listFiles: ["GET /repos/{owner}/{repo}/pulls/{pull_number}/files"],
    listRequestedReviewers: [
      "GET /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"
    ],
    listReviewComments: [
      "GET /repos/{owner}/{repo}/pulls/{pull_number}/comments"
    ],
    listReviewCommentsForRepo: ["GET /repos/{owner}/{repo}/pulls/comments"],
    listReviews: ["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews"],
    merge: ["PUT /repos/{owner}/{repo}/pulls/{pull_number}/merge"],
    removeRequestedReviewers: [
      "DELETE /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"
    ],
    requestReviewers: [
      "POST /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"
    ],
    submitReview: [
      "POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events"
    ],
    update: ["PATCH /repos/{owner}/{repo}/pulls/{pull_number}"],
    updateBranch: [
      "PUT /repos/{owner}/{repo}/pulls/{pull_number}/update-branch"
    ],
    updateReview: [
      "PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"
    ],
    updateReviewComment: [
      "PATCH /repos/{owner}/{repo}/pulls/comments/{comment_id}"
    ]
  },
  rateLimit: { get: ["GET /rate_limit"] },
  reactions: {
    createForCommitComment: [
      "POST /repos/{owner}/{repo}/comments/{comment_id}/reactions"
    ],
    createForIssue: [
      "POST /repos/{owner}/{repo}/issues/{issue_number}/reactions"
    ],
    createForIssueComment: [
      "POST /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions"
    ],
    createForPullRequestReviewComment: [
      "POST /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions"
    ],
    createForRelease: [
      "POST /repos/{owner}/{repo}/releases/{release_id}/reactions"
    ],
    createForTeamDiscussionCommentInOrg: [
      "POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions"
    ],
    createForTeamDiscussionInOrg: [
      "POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions"
    ],
    deleteForCommitComment: [
      "DELETE /repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}"
    ],
    deleteForIssue: [
      "DELETE /repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}"
    ],
    deleteForIssueComment: [
      "DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}"
    ],
    deleteForPullRequestComment: [
      "DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}"
    ],
    deleteForRelease: [
      "DELETE /repos/{owner}/{repo}/releases/{release_id}/reactions/{reaction_id}"
    ],
    deleteForTeamDiscussion: [
      "DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}"
    ],
    deleteForTeamDiscussionComment: [
      "DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}"
    ],
    listForCommitComment: [
      "GET /repos/{owner}/{repo}/comments/{comment_id}/reactions"
    ],
    listForIssue: ["GET /repos/{owner}/{repo}/issues/{issue_number}/reactions"],
    listForIssueComment: [
      "GET /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions"
    ],
    listForPullRequestReviewComment: [
      "GET /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions"
    ],
    listForRelease: [
      "GET /repos/{owner}/{repo}/releases/{release_id}/reactions"
    ],
    listForTeamDiscussionCommentInOrg: [
      "GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions"
    ],
    listForTeamDiscussionInOrg: [
      "GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions"
    ]
  },
  repos: {
    acceptInvitation: [
      "PATCH /user/repository_invitations/{invitation_id}",
      {},
      { renamed: ["repos", "acceptInvitationForAuthenticatedUser"] }
    ],
    acceptInvitationForAuthenticatedUser: [
      "PATCH /user/repository_invitations/{invitation_id}"
    ],
    addAppAccessRestrictions: [
      "POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",
      {},
      { mapToData: "apps" }
    ],
    addCollaborator: ["PUT /repos/{owner}/{repo}/collaborators/{username}"],
    addStatusCheckContexts: [
      "POST /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",
      {},
      { mapToData: "contexts" }
    ],
    addTeamAccessRestrictions: [
      "POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",
      {},
      { mapToData: "teams" }
    ],
    addUserAccessRestrictions: [
      "POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",
      {},
      { mapToData: "users" }
    ],
    checkAutomatedSecurityFixes: [
      "GET /repos/{owner}/{repo}/automated-security-fixes"
    ],
    checkCollaborator: ["GET /repos/{owner}/{repo}/collaborators/{username}"],
    checkVulnerabilityAlerts: [
      "GET /repos/{owner}/{repo}/vulnerability-alerts"
    ],
    codeownersErrors: ["GET /repos/{owner}/{repo}/codeowners/errors"],
    compareCommits: ["GET /repos/{owner}/{repo}/compare/{base}...{head}"],
    compareCommitsWithBasehead: [
      "GET /repos/{owner}/{repo}/compare/{basehead}"
    ],
    createAutolink: ["POST /repos/{owner}/{repo}/autolinks"],
    createCommitComment: [
      "POST /repos/{owner}/{repo}/commits/{commit_sha}/comments"
    ],
    createCommitSignatureProtection: [
      "POST /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"
    ],
    createCommitStatus: ["POST /repos/{owner}/{repo}/statuses/{sha}"],
    createDeployKey: ["POST /repos/{owner}/{repo}/keys"],
    createDeployment: ["POST /repos/{owner}/{repo}/deployments"],
    createDeploymentBranchPolicy: [
      "POST /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies"
    ],
    createDeploymentProtectionRule: [
      "POST /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules"
    ],
    createDeploymentStatus: [
      "POST /repos/{owner}/{repo}/deployments/{deployment_id}/statuses"
    ],
    createDispatchEvent: ["POST /repos/{owner}/{repo}/dispatches"],
    createForAuthenticatedUser: ["POST /user/repos"],
    createFork: ["POST /repos/{owner}/{repo}/forks"],
    createInOrg: ["POST /orgs/{org}/repos"],
    createOrUpdateEnvironment: [
      "PUT /repos/{owner}/{repo}/environments/{environment_name}"
    ],
    createOrUpdateFileContents: ["PUT /repos/{owner}/{repo}/contents/{path}"],
    createOrgRuleset: ["POST /orgs/{org}/rulesets"],
    createPagesDeployment: ["POST /repos/{owner}/{repo}/pages/deployment"],
    createPagesSite: ["POST /repos/{owner}/{repo}/pages"],
    createRelease: ["POST /repos/{owner}/{repo}/releases"],
    createRepoRuleset: ["POST /repos/{owner}/{repo}/rulesets"],
    createTagProtection: ["POST /repos/{owner}/{repo}/tags/protection"],
    createUsingTemplate: [
      "POST /repos/{template_owner}/{template_repo}/generate"
    ],
    createWebhook: ["POST /repos/{owner}/{repo}/hooks"],
    declineInvitation: [
      "DELETE /user/repository_invitations/{invitation_id}",
      {},
      { renamed: ["repos", "declineInvitationForAuthenticatedUser"] }
    ],
    declineInvitationForAuthenticatedUser: [
      "DELETE /user/repository_invitations/{invitation_id}"
    ],
    delete: ["DELETE /repos/{owner}/{repo}"],
    deleteAccessRestrictions: [
      "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions"
    ],
    deleteAdminBranchProtection: [
      "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"
    ],
    deleteAnEnvironment: [
      "DELETE /repos/{owner}/{repo}/environments/{environment_name}"
    ],
    deleteAutolink: ["DELETE /repos/{owner}/{repo}/autolinks/{autolink_id}"],
    deleteBranchProtection: [
      "DELETE /repos/{owner}/{repo}/branches/{branch}/protection"
    ],
    deleteCommitComment: ["DELETE /repos/{owner}/{repo}/comments/{comment_id}"],
    deleteCommitSignatureProtection: [
      "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"
    ],
    deleteDeployKey: ["DELETE /repos/{owner}/{repo}/keys/{key_id}"],
    deleteDeployment: [
      "DELETE /repos/{owner}/{repo}/deployments/{deployment_id}"
    ],
    deleteDeploymentBranchPolicy: [
      "DELETE /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}"
    ],
    deleteFile: ["DELETE /repos/{owner}/{repo}/contents/{path}"],
    deleteInvitation: [
      "DELETE /repos/{owner}/{repo}/invitations/{invitation_id}"
    ],
    deleteOrgRuleset: ["DELETE /orgs/{org}/rulesets/{ruleset_id}"],
    deletePagesSite: ["DELETE /repos/{owner}/{repo}/pages"],
    deletePullRequestReviewProtection: [
      "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"
    ],
    deleteRelease: ["DELETE /repos/{owner}/{repo}/releases/{release_id}"],
    deleteReleaseAsset: [
      "DELETE /repos/{owner}/{repo}/releases/assets/{asset_id}"
    ],
    deleteRepoRuleset: ["DELETE /repos/{owner}/{repo}/rulesets/{ruleset_id}"],
    deleteTagProtection: [
      "DELETE /repos/{owner}/{repo}/tags/protection/{tag_protection_id}"
    ],
    deleteWebhook: ["DELETE /repos/{owner}/{repo}/hooks/{hook_id}"],
    disableAutomatedSecurityFixes: [
      "DELETE /repos/{owner}/{repo}/automated-security-fixes"
    ],
    disableDeploymentProtectionRule: [
      "DELETE /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}"
    ],
    disablePrivateVulnerabilityReporting: [
      "DELETE /repos/{owner}/{repo}/private-vulnerability-reporting"
    ],
    disableVulnerabilityAlerts: [
      "DELETE /repos/{owner}/{repo}/vulnerability-alerts"
    ],
    downloadArchive: [
      "GET /repos/{owner}/{repo}/zipball/{ref}",
      {},
      { renamed: ["repos", "downloadZipballArchive"] }
    ],
    downloadTarballArchive: ["GET /repos/{owner}/{repo}/tarball/{ref}"],
    downloadZipballArchive: ["GET /repos/{owner}/{repo}/zipball/{ref}"],
    enableAutomatedSecurityFixes: [
      "PUT /repos/{owner}/{repo}/automated-security-fixes"
    ],
    enablePrivateVulnerabilityReporting: [
      "PUT /repos/{owner}/{repo}/private-vulnerability-reporting"
    ],
    enableVulnerabilityAlerts: [
      "PUT /repos/{owner}/{repo}/vulnerability-alerts"
    ],
    generateReleaseNotes: [
      "POST /repos/{owner}/{repo}/releases/generate-notes"
    ],
    get: ["GET /repos/{owner}/{repo}"],
    getAccessRestrictions: [
      "GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions"
    ],
    getAdminBranchProtection: [
      "GET /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"
    ],
    getAllDeploymentProtectionRules: [
      "GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules"
    ],
    getAllEnvironments: ["GET /repos/{owner}/{repo}/environments"],
    getAllStatusCheckContexts: [
      "GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts"
    ],
    getAllTopics: ["GET /repos/{owner}/{repo}/topics"],
    getAppsWithAccessToProtectedBranch: [
      "GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps"
    ],
    getAutolink: ["GET /repos/{owner}/{repo}/autolinks/{autolink_id}"],
    getBranch: ["GET /repos/{owner}/{repo}/branches/{branch}"],
    getBranchProtection: [
      "GET /repos/{owner}/{repo}/branches/{branch}/protection"
    ],
    getBranchRules: ["GET /repos/{owner}/{repo}/rules/branches/{branch}"],
    getClones: ["GET /repos/{owner}/{repo}/traffic/clones"],
    getCodeFrequencyStats: ["GET /repos/{owner}/{repo}/stats/code_frequency"],
    getCollaboratorPermissionLevel: [
      "GET /repos/{owner}/{repo}/collaborators/{username}/permission"
    ],
    getCombinedStatusForRef: ["GET /repos/{owner}/{repo}/commits/{ref}/status"],
    getCommit: ["GET /repos/{owner}/{repo}/commits/{ref}"],
    getCommitActivityStats: ["GET /repos/{owner}/{repo}/stats/commit_activity"],
    getCommitComment: ["GET /repos/{owner}/{repo}/comments/{comment_id}"],
    getCommitSignatureProtection: [
      "GET /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"
    ],
    getCommunityProfileMetrics: ["GET /repos/{owner}/{repo}/community/profile"],
    getContent: ["GET /repos/{owner}/{repo}/contents/{path}"],
    getContributorsStats: ["GET /repos/{owner}/{repo}/stats/contributors"],
    getCustomDeploymentProtectionRule: [
      "GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}"
    ],
    getCustomPropertiesValues: ["GET /repos/{owner}/{repo}/properties/values"],
    getDeployKey: ["GET /repos/{owner}/{repo}/keys/{key_id}"],
    getDeployment: ["GET /repos/{owner}/{repo}/deployments/{deployment_id}"],
    getDeploymentBranchPolicy: [
      "GET /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}"
    ],
    getDeploymentStatus: [
      "GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}"
    ],
    getEnvironment: [
      "GET /repos/{owner}/{repo}/environments/{environment_name}"
    ],
    getLatestPagesBuild: ["GET /repos/{owner}/{repo}/pages/builds/latest"],
    getLatestRelease: ["GET /repos/{owner}/{repo}/releases/latest"],
    getOrgRuleSuite: ["GET /orgs/{org}/rulesets/rule-suites/{rule_suite_id}"],
    getOrgRuleSuites: ["GET /orgs/{org}/rulesets/rule-suites"],
    getOrgRuleset: ["GET /orgs/{org}/rulesets/{ruleset_id}"],
    getOrgRulesets: ["GET /orgs/{org}/rulesets"],
    getPages: ["GET /repos/{owner}/{repo}/pages"],
    getPagesBuild: ["GET /repos/{owner}/{repo}/pages/builds/{build_id}"],
    getPagesHealthCheck: ["GET /repos/{owner}/{repo}/pages/health"],
    getParticipationStats: ["GET /repos/{owner}/{repo}/stats/participation"],
    getPullRequestReviewProtection: [
      "GET /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"
    ],
    getPunchCardStats: ["GET /repos/{owner}/{repo}/stats/punch_card"],
    getReadme: ["GET /repos/{owner}/{repo}/readme"],
    getReadmeInDirectory: ["GET /repos/{owner}/{repo}/readme/{dir}"],
    getRelease: ["GET /repos/{owner}/{repo}/releases/{release_id}"],
    getReleaseAsset: ["GET /repos/{owner}/{repo}/releases/assets/{asset_id}"],
    getReleaseByTag: ["GET /repos/{owner}/{repo}/releases/tags/{tag}"],
    getRepoRuleSuite: [
      "GET /repos/{owner}/{repo}/rulesets/rule-suites/{rule_suite_id}"
    ],
    getRepoRuleSuites: ["GET /repos/{owner}/{repo}/rulesets/rule-suites"],
    getRepoRuleset: ["GET /repos/{owner}/{repo}/rulesets/{ruleset_id}"],
    getRepoRulesets: ["GET /repos/{owner}/{repo}/rulesets"],
    getStatusChecksProtection: [
      "GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"
    ],
    getTeamsWithAccessToProtectedBranch: [
      "GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams"
    ],
    getTopPaths: ["GET /repos/{owner}/{repo}/traffic/popular/paths"],
    getTopReferrers: ["GET /repos/{owner}/{repo}/traffic/popular/referrers"],
    getUsersWithAccessToProtectedBranch: [
      "GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users"
    ],
    getViews: ["GET /repos/{owner}/{repo}/traffic/views"],
    getWebhook: ["GET /repos/{owner}/{repo}/hooks/{hook_id}"],
    getWebhookConfigForRepo: [
      "GET /repos/{owner}/{repo}/hooks/{hook_id}/config"
    ],
    getWebhookDelivery: [
      "GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}"
    ],
    listActivities: ["GET /repos/{owner}/{repo}/activity"],
    listAutolinks: ["GET /repos/{owner}/{repo}/autolinks"],
    listBranches: ["GET /repos/{owner}/{repo}/branches"],
    listBranchesForHeadCommit: [
      "GET /repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head"
    ],
    listCollaborators: ["GET /repos/{owner}/{repo}/collaborators"],
    listCommentsForCommit: [
      "GET /repos/{owner}/{repo}/commits/{commit_sha}/comments"
    ],
    listCommitCommentsForRepo: ["GET /repos/{owner}/{repo}/comments"],
    listCommitStatusesForRef: [
      "GET /repos/{owner}/{repo}/commits/{ref}/statuses"
    ],
    listCommits: ["GET /repos/{owner}/{repo}/commits"],
    listContributors: ["GET /repos/{owner}/{repo}/contributors"],
    listCustomDeploymentRuleIntegrations: [
      "GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/apps"
    ],
    listDeployKeys: ["GET /repos/{owner}/{repo}/keys"],
    listDeploymentBranchPolicies: [
      "GET /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies"
    ],
    listDeploymentStatuses: [
      "GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses"
    ],
    listDeployments: ["GET /repos/{owner}/{repo}/deployments"],
    listForAuthenticatedUser: ["GET /user/repos"],
    listForOrg: ["GET /orgs/{org}/repos"],
    listForUser: ["GET /users/{username}/repos"],
    listForks: ["GET /repos/{owner}/{repo}/forks"],
    listInvitations: ["GET /repos/{owner}/{repo}/invitations"],
    listInvitationsForAuthenticatedUser: ["GET /user/repository_invitations"],
    listLanguages: ["GET /repos/{owner}/{repo}/languages"],
    listPagesBuilds: ["GET /repos/{owner}/{repo}/pages/builds"],
    listPublic: ["GET /repositories"],
    listPullRequestsAssociatedWithCommit: [
      "GET /repos/{owner}/{repo}/commits/{commit_sha}/pulls"
    ],
    listReleaseAssets: [
      "GET /repos/{owner}/{repo}/releases/{release_id}/assets"
    ],
    listReleases: ["GET /repos/{owner}/{repo}/releases"],
    listTagProtection: ["GET /repos/{owner}/{repo}/tags/protection"],
    listTags: ["GET /repos/{owner}/{repo}/tags"],
    listTeams: ["GET /repos/{owner}/{repo}/teams"],
    listWebhookDeliveries: [
      "GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries"
    ],
    listWebhooks: ["GET /repos/{owner}/{repo}/hooks"],
    merge: ["POST /repos/{owner}/{repo}/merges"],
    mergeUpstream: ["POST /repos/{owner}/{repo}/merge-upstream"],
    pingWebhook: ["POST /repos/{owner}/{repo}/hooks/{hook_id}/pings"],
    redeliverWebhookDelivery: [
      "POST /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}/attempts"
    ],
    removeAppAccessRestrictions: [
      "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",
      {},
      { mapToData: "apps" }
    ],
    removeCollaborator: [
      "DELETE /repos/{owner}/{repo}/collaborators/{username}"
    ],
    removeStatusCheckContexts: [
      "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",
      {},
      { mapToData: "contexts" }
    ],
    removeStatusCheckProtection: [
      "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"
    ],
    removeTeamAccessRestrictions: [
      "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",
      {},
      { mapToData: "teams" }
    ],
    removeUserAccessRestrictions: [
      "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",
      {},
      { mapToData: "users" }
    ],
    renameBranch: ["POST /repos/{owner}/{repo}/branches/{branch}/rename"],
    replaceAllTopics: ["PUT /repos/{owner}/{repo}/topics"],
    requestPagesBuild: ["POST /repos/{owner}/{repo}/pages/builds"],
    setAdminBranchProtection: [
      "POST /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"
    ],
    setAppAccessRestrictions: [
      "PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",
      {},
      { mapToData: "apps" }
    ],
    setStatusCheckContexts: [
      "PUT /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",
      {},
      { mapToData: "contexts" }
    ],
    setTeamAccessRestrictions: [
      "PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",
      {},
      { mapToData: "teams" }
    ],
    setUserAccessRestrictions: [
      "PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",
      {},
      { mapToData: "users" }
    ],
    testPushWebhook: ["POST /repos/{owner}/{repo}/hooks/{hook_id}/tests"],
    transfer: ["POST /repos/{owner}/{repo}/transfer"],
    update: ["PATCH /repos/{owner}/{repo}"],
    updateBranchProtection: [
      "PUT /repos/{owner}/{repo}/branches/{branch}/protection"
    ],
    updateCommitComment: ["PATCH /repos/{owner}/{repo}/comments/{comment_id}"],
    updateDeploymentBranchPolicy: [
      "PUT /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}"
    ],
    updateInformationAboutPagesSite: ["PUT /repos/{owner}/{repo}/pages"],
    updateInvitation: [
      "PATCH /repos/{owner}/{repo}/invitations/{invitation_id}"
    ],
    updateOrgRuleset: ["PUT /orgs/{org}/rulesets/{ruleset_id}"],
    updatePullRequestReviewProtection: [
      "PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"
    ],
    updateRelease: ["PATCH /repos/{owner}/{repo}/releases/{release_id}"],
    updateReleaseAsset: [
      "PATCH /repos/{owner}/{repo}/releases/assets/{asset_id}"
    ],
    updateRepoRuleset: ["PUT /repos/{owner}/{repo}/rulesets/{ruleset_id}"],
    updateStatusCheckPotection: [
      "PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks",
      {},
      { renamed: ["repos", "updateStatusCheckProtection"] }
    ],
    updateStatusCheckProtection: [
      "PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"
    ],
    updateWebhook: ["PATCH /repos/{owner}/{repo}/hooks/{hook_id}"],
    updateWebhookConfigForRepo: [
      "PATCH /repos/{owner}/{repo}/hooks/{hook_id}/config"
    ],
    uploadReleaseAsset: [
      "POST /repos/{owner}/{repo}/releases/{release_id}/assets{?name,label}",
      { baseUrl: "https://uploads.github.com" }
    ]
  },
  search: {
    code: ["GET /search/code"],
    commits: ["GET /search/commits"],
    issuesAndPullRequests: ["GET /search/issues"],
    labels: ["GET /search/labels"],
    repos: ["GET /search/repositories"],
    topics: ["GET /search/topics"],
    users: ["GET /search/users"]
  },
  secretScanning: {
    getAlert: [
      "GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}"
    ],
    listAlertsForEnterprise: [
      "GET /enterprises/{enterprise}/secret-scanning/alerts"
    ],
    listAlertsForOrg: ["GET /orgs/{org}/secret-scanning/alerts"],
    listAlertsForRepo: ["GET /repos/{owner}/{repo}/secret-scanning/alerts"],
    listLocationsForAlert: [
      "GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/locations"
    ],
    updateAlert: [
      "PATCH /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}"
    ]
  },
  securityAdvisories: {
    createPrivateVulnerabilityReport: [
      "POST /repos/{owner}/{repo}/security-advisories/reports"
    ],
    createRepositoryAdvisory: [
      "POST /repos/{owner}/{repo}/security-advisories"
    ],
    createRepositoryAdvisoryCveRequest: [
      "POST /repos/{owner}/{repo}/security-advisories/{ghsa_id}/cve"
    ],
    getGlobalAdvisory: ["GET /advisories/{ghsa_id}"],
    getRepositoryAdvisory: [
      "GET /repos/{owner}/{repo}/security-advisories/{ghsa_id}"
    ],
    listGlobalAdvisories: ["GET /advisories"],
    listOrgRepositoryAdvisories: ["GET /orgs/{org}/security-advisories"],
    listRepositoryAdvisories: ["GET /repos/{owner}/{repo}/security-advisories"],
    updateRepositoryAdvisory: [
      "PATCH /repos/{owner}/{repo}/security-advisories/{ghsa_id}"
    ]
  },
  teams: {
    addOrUpdateMembershipForUserInOrg: [
      "PUT /orgs/{org}/teams/{team_slug}/memberships/{username}"
    ],
    addOrUpdateProjectPermissionsInOrg: [
      "PUT /orgs/{org}/teams/{team_slug}/projects/{project_id}"
    ],
    addOrUpdateRepoPermissionsInOrg: [
      "PUT /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"
    ],
    checkPermissionsForProjectInOrg: [
      "GET /orgs/{org}/teams/{team_slug}/projects/{project_id}"
    ],
    checkPermissionsForRepoInOrg: [
      "GET /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"
    ],
    create: ["POST /orgs/{org}/teams"],
    createDiscussionCommentInOrg: [
      "POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments"
    ],
    createDiscussionInOrg: ["POST /orgs/{org}/teams/{team_slug}/discussions"],
    deleteDiscussionCommentInOrg: [
      "DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"
    ],
    deleteDiscussionInOrg: [
      "DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"
    ],
    deleteInOrg: ["DELETE /orgs/{org}/teams/{team_slug}"],
    getByName: ["GET /orgs/{org}/teams/{team_slug}"],
    getDiscussionCommentInOrg: [
      "GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"
    ],
    getDiscussionInOrg: [
      "GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"
    ],
    getMembershipForUserInOrg: [
      "GET /orgs/{org}/teams/{team_slug}/memberships/{username}"
    ],
    list: ["GET /orgs/{org}/teams"],
    listChildInOrg: ["GET /orgs/{org}/teams/{team_slug}/teams"],
    listDiscussionCommentsInOrg: [
      "GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments"
    ],
    listDiscussionsInOrg: ["GET /orgs/{org}/teams/{team_slug}/discussions"],
    listForAuthenticatedUser: ["GET /user/teams"],
    listMembersInOrg: ["GET /orgs/{org}/teams/{team_slug}/members"],
    listPendingInvitationsInOrg: [
      "GET /orgs/{org}/teams/{team_slug}/invitations"
    ],
    listProjectsInOrg: ["GET /orgs/{org}/teams/{team_slug}/projects"],
    listReposInOrg: ["GET /orgs/{org}/teams/{team_slug}/repos"],
    removeMembershipForUserInOrg: [
      "DELETE /orgs/{org}/teams/{team_slug}/memberships/{username}"
    ],
    removeProjectInOrg: [
      "DELETE /orgs/{org}/teams/{team_slug}/projects/{project_id}"
    ],
    removeRepoInOrg: [
      "DELETE /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"
    ],
    updateDiscussionCommentInOrg: [
      "PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"
    ],
    updateDiscussionInOrg: [
      "PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"
    ],
    updateInOrg: ["PATCH /orgs/{org}/teams/{team_slug}"]
  },
  users: {
    addEmailForAuthenticated: [
      "POST /user/emails",
      {},
      { renamed: ["users", "addEmailForAuthenticatedUser"] }
    ],
    addEmailForAuthenticatedUser: ["POST /user/emails"],
    addSocialAccountForAuthenticatedUser: ["POST /user/social_accounts"],
    block: ["PUT /user/blocks/{username}"],
    checkBlocked: ["GET /user/blocks/{username}"],
    checkFollowingForUser: ["GET /users/{username}/following/{target_user}"],
    checkPersonIsFollowedByAuthenticated: ["GET /user/following/{username}"],
    createGpgKeyForAuthenticated: [
      "POST /user/gpg_keys",
      {},
      { renamed: ["users", "createGpgKeyForAuthenticatedUser"] }
    ],
    createGpgKeyForAuthenticatedUser: ["POST /user/gpg_keys"],
    createPublicSshKeyForAuthenticated: [
      "POST /user/keys",
      {},
      { renamed: ["users", "createPublicSshKeyForAuthenticatedUser"] }
    ],
    createPublicSshKeyForAuthenticatedUser: ["POST /user/keys"],
    createSshSigningKeyForAuthenticatedUser: ["POST /user/ssh_signing_keys"],
    deleteEmailForAuthenticated: [
      "DELETE /user/emails",
      {},
      { renamed: ["users", "deleteEmailForAuthenticatedUser"] }
    ],
    deleteEmailForAuthenticatedUser: ["DELETE /user/emails"],
    deleteGpgKeyForAuthenticated: [
      "DELETE /user/gpg_keys/{gpg_key_id}",
      {},
      { renamed: ["users", "deleteGpgKeyForAuthenticatedUser"] }
    ],
    deleteGpgKeyForAuthenticatedUser: ["DELETE /user/gpg_keys/{gpg_key_id}"],
    deletePublicSshKeyForAuthenticated: [
      "DELETE /user/keys/{key_id}",
      {},
      { renamed: ["users", "deletePublicSshKeyForAuthenticatedUser"] }
    ],
    deletePublicSshKeyForAuthenticatedUser: ["DELETE /user/keys/{key_id}"],
    deleteSocialAccountForAuthenticatedUser: ["DELETE /user/social_accounts"],
    deleteSshSigningKeyForAuthenticatedUser: [
      "DELETE /user/ssh_signing_keys/{ssh_signing_key_id}"
    ],
    follow: ["PUT /user/following/{username}"],
    getAuthenticated: ["GET /user"],
    getByUsername: ["GET /users/{username}"],
    getContextForUser: ["GET /users/{username}/hovercard"],
    getGpgKeyForAuthenticated: [
      "GET /user/gpg_keys/{gpg_key_id}",
      {},
      { renamed: ["users", "getGpgKeyForAuthenticatedUser"] }
    ],
    getGpgKeyForAuthenticatedUser: ["GET /user/gpg_keys/{gpg_key_id}"],
    getPublicSshKeyForAuthenticated: [
      "GET /user/keys/{key_id}",
      {},
      { renamed: ["users", "getPublicSshKeyForAuthenticatedUser"] }
    ],
    getPublicSshKeyForAuthenticatedUser: ["GET /user/keys/{key_id}"],
    getSshSigningKeyForAuthenticatedUser: [
      "GET /user/ssh_signing_keys/{ssh_signing_key_id}"
    ],
    list: ["GET /users"],
    listBlockedByAuthenticated: [
      "GET /user/blocks",
      {},
      { renamed: ["users", "listBlockedByAuthenticatedUser"] }
    ],
    listBlockedByAuthenticatedUser: ["GET /user/blocks"],
    listEmailsForAuthenticated: [
      "GET /user/emails",
      {},
      { renamed: ["users", "listEmailsForAuthenticatedUser"] }
    ],
    listEmailsForAuthenticatedUser: ["GET /user/emails"],
    listFollowedByAuthenticated: [
      "GET /user/following",
      {},
      { renamed: ["users", "listFollowedByAuthenticatedUser"] }
    ],
    listFollowedByAuthenticatedUser: ["GET /user/following"],
    listFollowersForAuthenticatedUser: ["GET /user/followers"],
    listFollowersForUser: ["GET /users/{username}/followers"],
    listFollowingForUser: ["GET /users/{username}/following"],
    listGpgKeysForAuthenticated: [
      "GET /user/gpg_keys",
      {},
      { renamed: ["users", "listGpgKeysForAuthenticatedUser"] }
    ],
    listGpgKeysForAuthenticatedUser: ["GET /user/gpg_keys"],
    listGpgKeysForUser: ["GET /users/{username}/gpg_keys"],
    listPublicEmailsForAuthenticated: [
      "GET /user/public_emails",
      {},
      { renamed: ["users", "listPublicEmailsForAuthenticatedUser"] }
    ],
    listPublicEmailsForAuthenticatedUser: ["GET /user/public_emails"],
    listPublicKeysForUser: ["GET /users/{username}/keys"],
    listPublicSshKeysForAuthenticated: [
      "GET /user/keys",
      {},
      { renamed: ["users", "listPublicSshKeysForAuthenticatedUser"] }
    ],
    listPublicSshKeysForAuthenticatedUser: ["GET /user/keys"],
    listSocialAccountsForAuthenticatedUser: ["GET /user/social_accounts"],
    listSocialAccountsForUser: ["GET /users/{username}/social_accounts"],
    listSshSigningKeysForAuthenticatedUser: ["GET /user/ssh_signing_keys"],
    listSshSigningKeysForUser: ["GET /users/{username}/ssh_signing_keys"],
    setPrimaryEmailVisibilityForAuthenticated: [
      "PATCH /user/email/visibility",
      {},
      { renamed: ["users", "setPrimaryEmailVisibilityForAuthenticatedUser"] }
    ],
    setPrimaryEmailVisibilityForAuthenticatedUser: [
      "PATCH /user/email/visibility"
    ],
    unblock: ["DELETE /user/blocks/{username}"],
    unfollow: ["DELETE /user/following/{username}"],
    updateAuthenticated: ["PATCH /user"]
  }
}, RI = _I, qa = /* @__PURE__ */ new Map();
for (const [n, e] of Object.entries(RI))
  for (const [i, a] of Object.entries(e)) {
    const [t, d, r] = a, [o, s] = t.split(/ /), A = Object.assign(
      {
        method: o,
        url: s
      },
      d
    );
    qa.has(n) || qa.set(n, /* @__PURE__ */ new Map()), qa.get(n).set(i, {
      scope: n,
      methodName: i,
      endpointDefaults: A,
      decorations: r
    });
  }
var UI = {
  has({ scope: n }, e) {
    return qa.get(n).has(e);
  },
  getOwnPropertyDescriptor(n, e) {
    return {
      value: this.get(n, e),
      // ensures method is in the cache
      configurable: !0,
      writable: !0,
      enumerable: !0
    };
  },
  defineProperty(n, e, i) {
    return Object.defineProperty(n.cache, e, i), !0;
  },
  deleteProperty(n, e) {
    return delete n.cache[e], !0;
  },
  ownKeys({ scope: n }) {
    return [...qa.get(n).keys()];
  },
  set(n, e, i) {
    return n.cache[e] = i;
  },
  get({ octokit: n, scope: e, cache: i }, a) {
    if (i[a])
      return i[a];
    const t = qa.get(e).get(a);
    if (!t)
      return;
    const { endpointDefaults: d, decorations: r } = t;
    return r ? i[a] = LI(
      n,
      e,
      a,
      d,
      r
    ) : i[a] = n.request.defaults(d), i[a];
  }
};
function v1(n) {
  const e = {};
  for (const i of qa.keys())
    e[i] = new Proxy({ octokit: n, scope: i, cache: {} }, UI);
  return e;
}
function LI(n, e, i, a, t) {
  const d = n.request.defaults(a);
  function r(...o) {
    let s = d.endpoint.merge(...o);
    if (t.mapToData)
      return s = Object.assign({}, s, {
        data: s[t.mapToData],
        [t.mapToData]: void 0
      }), d(s);
    if (t.renamed) {
      const [A, l] = t.renamed;
      n.log.warn(
        `octokit.${e}.${i}() has been renamed to octokit.${A}.${l}()`
      );
    }
    if (t.deprecated && n.log.warn(t.deprecated), t.renamedParameters) {
      const A = d.endpoint.merge(...o);
      for (const [l, m] of Object.entries(
        t.renamedParameters
      ))
        l in A && (n.log.warn(
          `"${l}" parameter is deprecated for "octokit.${e}.${i}()". Use "${m}" instead`
        ), m in A || (A[m] = A[l]), delete A[l]);
      return d(A);
    }
    return d(...o);
  }
  return Object.assign(r, d);
}
function g1(n) {
  return {
    rest: v1(n)
  };
}
g1.VERSION = k1;
function h1(n) {
  const e = v1(n);
  return {
    ...e,
    rest: e
  };
}
h1.VERSION = k1;
const qI = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  legacyRestEndpointMethods: h1,
  restEndpointMethods: g1
}, Symbol.toStringTag, { value: "Module" })), PI = /* @__PURE__ */ cd(qI);
var OI = "9.1.5";
function GI(n) {
  if (!n.data)
    return {
      ...n,
      data: []
    };
  if (!("total_count" in n.data && !("url" in n.data)))
    return n;
  const i = n.data.incomplete_results, a = n.data.repository_selection, t = n.data.total_count;
  delete n.data.incomplete_results, delete n.data.repository_selection, delete n.data.total_count;
  const d = Object.keys(n.data)[0], r = n.data[d];
  return n.data = r, typeof i < "u" && (n.data.incomplete_results = i), typeof a < "u" && (n.data.repository_selection = a), n.data.total_count = t, n;
}
function Pl(n, e, i) {
  const a = typeof e == "function" ? e.endpoint(i) : n.request.endpoint(e, i), t = typeof e == "function" ? e : n.request, d = a.method, r = a.headers;
  let o = a.url;
  return {
    [Symbol.asyncIterator]: () => ({
      async next() {
        if (!o)
          return { done: !0 };
        try {
          const s = await t({ method: d, url: o, headers: r }), A = GI(s);
          return o = ((A.headers.link || "").match(
            /<([^>]+)>;\s*rel="next"/
          ) || [])[1], { value: A };
        } catch (s) {
          if (s.status !== 409)
            throw s;
          return o = "", {
            value: {
              status: 200,
              headers: {},
              data: []
            }
          };
        }
      }
    })
  };
}
function f1(n, e, i, a) {
  return typeof i == "function" && (a = i, i = void 0), N1(
    n,
    [],
    Pl(n, e, i)[Symbol.asyncIterator](),
    a
  );
}
function N1(n, e, i, a) {
  return i.next().then((t) => {
    if (t.done)
      return e;
    let d = !1;
    function r() {
      d = !0;
    }
    return e = e.concat(
      a ? a(t.value, r) : t.value.data
    ), d ? e : N1(n, e, i, a);
  });
}
var MI = Object.assign(f1, {
  iterator: Pl
}), E1 = [
  "GET /advisories",
  "GET /app/hook/deliveries",
  "GET /app/installation-requests",
  "GET /app/installations",
  "GET /assignments/{assignment_id}/accepted_assignments",
  "GET /classrooms",
  "GET /classrooms/{classroom_id}/assignments",
  "GET /enterprises/{enterprise}/dependabot/alerts",
  "GET /enterprises/{enterprise}/secret-scanning/alerts",
  "GET /events",
  "GET /gists",
  "GET /gists/public",
  "GET /gists/starred",
  "GET /gists/{gist_id}/comments",
  "GET /gists/{gist_id}/commits",
  "GET /gists/{gist_id}/forks",
  "GET /installation/repositories",
  "GET /issues",
  "GET /licenses",
  "GET /marketplace_listing/plans",
  "GET /marketplace_listing/plans/{plan_id}/accounts",
  "GET /marketplace_listing/stubbed/plans",
  "GET /marketplace_listing/stubbed/plans/{plan_id}/accounts",
  "GET /networks/{owner}/{repo}/events",
  "GET /notifications",
  "GET /organizations",
  "GET /orgs/{org}/actions/cache/usage-by-repository",
  "GET /orgs/{org}/actions/permissions/repositories",
  "GET /orgs/{org}/actions/runners",
  "GET /orgs/{org}/actions/secrets",
  "GET /orgs/{org}/actions/secrets/{secret_name}/repositories",
  "GET /orgs/{org}/actions/variables",
  "GET /orgs/{org}/actions/variables/{name}/repositories",
  "GET /orgs/{org}/blocks",
  "GET /orgs/{org}/code-scanning/alerts",
  "GET /orgs/{org}/codespaces",
  "GET /orgs/{org}/codespaces/secrets",
  "GET /orgs/{org}/codespaces/secrets/{secret_name}/repositories",
  "GET /orgs/{org}/copilot/billing/seats",
  "GET /orgs/{org}/dependabot/alerts",
  "GET /orgs/{org}/dependabot/secrets",
  "GET /orgs/{org}/dependabot/secrets/{secret_name}/repositories",
  "GET /orgs/{org}/events",
  "GET /orgs/{org}/failed_invitations",
  "GET /orgs/{org}/hooks",
  "GET /orgs/{org}/hooks/{hook_id}/deliveries",
  "GET /orgs/{org}/installations",
  "GET /orgs/{org}/invitations",
  "GET /orgs/{org}/invitations/{invitation_id}/teams",
  "GET /orgs/{org}/issues",
  "GET /orgs/{org}/members",
  "GET /orgs/{org}/members/{username}/codespaces",
  "GET /orgs/{org}/migrations",
  "GET /orgs/{org}/migrations/{migration_id}/repositories",
  "GET /orgs/{org}/outside_collaborators",
  "GET /orgs/{org}/packages",
  "GET /orgs/{org}/packages/{package_type}/{package_name}/versions",
  "GET /orgs/{org}/personal-access-token-requests",
  "GET /orgs/{org}/personal-access-token-requests/{pat_request_id}/repositories",
  "GET /orgs/{org}/personal-access-tokens",
  "GET /orgs/{org}/personal-access-tokens/{pat_id}/repositories",
  "GET /orgs/{org}/projects",
  "GET /orgs/{org}/properties/values",
  "GET /orgs/{org}/public_members",
  "GET /orgs/{org}/repos",
  "GET /orgs/{org}/rulesets",
  "GET /orgs/{org}/rulesets/rule-suites",
  "GET /orgs/{org}/secret-scanning/alerts",
  "GET /orgs/{org}/security-advisories",
  "GET /orgs/{org}/teams",
  "GET /orgs/{org}/teams/{team_slug}/discussions",
  "GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments",
  "GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions",
  "GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions",
  "GET /orgs/{org}/teams/{team_slug}/invitations",
  "GET /orgs/{org}/teams/{team_slug}/members",
  "GET /orgs/{org}/teams/{team_slug}/projects",
  "GET /orgs/{org}/teams/{team_slug}/repos",
  "GET /orgs/{org}/teams/{team_slug}/teams",
  "GET /projects/columns/{column_id}/cards",
  "GET /projects/{project_id}/collaborators",
  "GET /projects/{project_id}/columns",
  "GET /repos/{owner}/{repo}/actions/artifacts",
  "GET /repos/{owner}/{repo}/actions/caches",
  "GET /repos/{owner}/{repo}/actions/organization-secrets",
  "GET /repos/{owner}/{repo}/actions/organization-variables",
  "GET /repos/{owner}/{repo}/actions/runners",
  "GET /repos/{owner}/{repo}/actions/runs",
  "GET /repos/{owner}/{repo}/actions/runs/{run_id}/artifacts",
  "GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs",
  "GET /repos/{owner}/{repo}/actions/runs/{run_id}/jobs",
  "GET /repos/{owner}/{repo}/actions/secrets",
  "GET /repos/{owner}/{repo}/actions/variables",
  "GET /repos/{owner}/{repo}/actions/workflows",
  "GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs",
  "GET /repos/{owner}/{repo}/activity",
  "GET /repos/{owner}/{repo}/assignees",
  "GET /repos/{owner}/{repo}/branches",
  "GET /repos/{owner}/{repo}/check-runs/{check_run_id}/annotations",
  "GET /repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs",
  "GET /repos/{owner}/{repo}/code-scanning/alerts",
  "GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances",
  "GET /repos/{owner}/{repo}/code-scanning/analyses",
  "GET /repos/{owner}/{repo}/codespaces",
  "GET /repos/{owner}/{repo}/codespaces/devcontainers",
  "GET /repos/{owner}/{repo}/codespaces/secrets",
  "GET /repos/{owner}/{repo}/collaborators",
  "GET /repos/{owner}/{repo}/comments",
  "GET /repos/{owner}/{repo}/comments/{comment_id}/reactions",
  "GET /repos/{owner}/{repo}/commits",
  "GET /repos/{owner}/{repo}/commits/{commit_sha}/comments",
  "GET /repos/{owner}/{repo}/commits/{commit_sha}/pulls",
  "GET /repos/{owner}/{repo}/commits/{ref}/check-runs",
  "GET /repos/{owner}/{repo}/commits/{ref}/check-suites",
  "GET /repos/{owner}/{repo}/commits/{ref}/status",
  "GET /repos/{owner}/{repo}/commits/{ref}/statuses",
  "GET /repos/{owner}/{repo}/contributors",
  "GET /repos/{owner}/{repo}/dependabot/alerts",
  "GET /repos/{owner}/{repo}/dependabot/secrets",
  "GET /repos/{owner}/{repo}/deployments",
  "GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses",
  "GET /repos/{owner}/{repo}/environments",
  "GET /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies",
  "GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/apps",
  "GET /repos/{owner}/{repo}/events",
  "GET /repos/{owner}/{repo}/forks",
  "GET /repos/{owner}/{repo}/hooks",
  "GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries",
  "GET /repos/{owner}/{repo}/invitations",
  "GET /repos/{owner}/{repo}/issues",
  "GET /repos/{owner}/{repo}/issues/comments",
  "GET /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions",
  "GET /repos/{owner}/{repo}/issues/events",
  "GET /repos/{owner}/{repo}/issues/{issue_number}/comments",
  "GET /repos/{owner}/{repo}/issues/{issue_number}/events",
  "GET /repos/{owner}/{repo}/issues/{issue_number}/labels",
  "GET /repos/{owner}/{repo}/issues/{issue_number}/reactions",
  "GET /repos/{owner}/{repo}/issues/{issue_number}/timeline",
  "GET /repos/{owner}/{repo}/keys",
  "GET /repos/{owner}/{repo}/labels",
  "GET /repos/{owner}/{repo}/milestones",
  "GET /repos/{owner}/{repo}/milestones/{milestone_number}/labels",
  "GET /repos/{owner}/{repo}/notifications",
  "GET /repos/{owner}/{repo}/pages/builds",
  "GET /repos/{owner}/{repo}/projects",
  "GET /repos/{owner}/{repo}/pulls",
  "GET /repos/{owner}/{repo}/pulls/comments",
  "GET /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions",
  "GET /repos/{owner}/{repo}/pulls/{pull_number}/comments",
  "GET /repos/{owner}/{repo}/pulls/{pull_number}/commits",
  "GET /repos/{owner}/{repo}/pulls/{pull_number}/files",
  "GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews",
  "GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments",
  "GET /repos/{owner}/{repo}/releases",
  "GET /repos/{owner}/{repo}/releases/{release_id}/assets",
  "GET /repos/{owner}/{repo}/releases/{release_id}/reactions",
  "GET /repos/{owner}/{repo}/rules/branches/{branch}",
  "GET /repos/{owner}/{repo}/rulesets",
  "GET /repos/{owner}/{repo}/rulesets/rule-suites",
  "GET /repos/{owner}/{repo}/secret-scanning/alerts",
  "GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/locations",
  "GET /repos/{owner}/{repo}/security-advisories",
  "GET /repos/{owner}/{repo}/stargazers",
  "GET /repos/{owner}/{repo}/subscribers",
  "GET /repos/{owner}/{repo}/tags",
  "GET /repos/{owner}/{repo}/teams",
  "GET /repos/{owner}/{repo}/topics",
  "GET /repositories",
  "GET /repositories/{repository_id}/environments/{environment_name}/secrets",
  "GET /repositories/{repository_id}/environments/{environment_name}/variables",
  "GET /search/code",
  "GET /search/commits",
  "GET /search/issues",
  "GET /search/labels",
  "GET /search/repositories",
  "GET /search/topics",
  "GET /search/users",
  "GET /teams/{team_id}/discussions",
  "GET /teams/{team_id}/discussions/{discussion_number}/comments",
  "GET /teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions",
  "GET /teams/{team_id}/discussions/{discussion_number}/reactions",
  "GET /teams/{team_id}/invitations",
  "GET /teams/{team_id}/members",
  "GET /teams/{team_id}/projects",
  "GET /teams/{team_id}/repos",
  "GET /teams/{team_id}/teams",
  "GET /user/blocks",
  "GET /user/codespaces",
  "GET /user/codespaces/secrets",
  "GET /user/emails",
  "GET /user/followers",
  "GET /user/following",
  "GET /user/gpg_keys",
  "GET /user/installations",
  "GET /user/installations/{installation_id}/repositories",
  "GET /user/issues",
  "GET /user/keys",
  "GET /user/marketplace_purchases",
  "GET /user/marketplace_purchases/stubbed",
  "GET /user/memberships/orgs",
  "GET /user/migrations",
  "GET /user/migrations/{migration_id}/repositories",
  "GET /user/orgs",
  "GET /user/packages",
  "GET /user/packages/{package_type}/{package_name}/versions",
  "GET /user/public_emails",
  "GET /user/repos",
  "GET /user/repository_invitations",
  "GET /user/social_accounts",
  "GET /user/ssh_signing_keys",
  "GET /user/starred",
  "GET /user/subscriptions",
  "GET /user/teams",
  "GET /users",
  "GET /users/{username}/events",
  "GET /users/{username}/events/orgs/{org}",
  "GET /users/{username}/events/public",
  "GET /users/{username}/followers",
  "GET /users/{username}/following",
  "GET /users/{username}/gists",
  "GET /users/{username}/gpg_keys",
  "GET /users/{username}/keys",
  "GET /users/{username}/orgs",
  "GET /users/{username}/packages",
  "GET /users/{username}/projects",
  "GET /users/{username}/received_events",
  "GET /users/{username}/received_events/public",
  "GET /users/{username}/repos",
  "GET /users/{username}/social_accounts",
  "GET /users/{username}/ssh_signing_keys",
  "GET /users/{username}/starred",
  "GET /users/{username}/subscriptions"
];
function xI(n) {
  return typeof n == "string" ? E1.includes(n) : !1;
}
function y1(n) {
  return {
    paginate: Object.assign(f1.bind(null, n), {
      iterator: Pl.bind(null, n)
    })
  };
}
y1.VERSION = OI;
const YI = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  composePaginateRest: MI,
  isPaginatingEndpoint: xI,
  paginateRest: y1,
  paginatingEndpoints: E1
}, Symbol.toStringTag, { value: "Module" })), JI = /* @__PURE__ */ cd(YI);
(function(n) {
  var e = me && me.__createBinding || (Object.create ? function(m, u, c, k) {
    k === void 0 && (k = c);
    var g = Object.getOwnPropertyDescriptor(u, c);
    (!g || ("get" in g ? !u.__esModule : g.writable || g.configurable)) && (g = { enumerable: !0, get: function() {
      return u[c];
    } }), Object.defineProperty(m, k, g);
  } : function(m, u, c, k) {
    k === void 0 && (k = c), m[k] = u[c];
  }), i = me && me.__setModuleDefault || (Object.create ? function(m, u) {
    Object.defineProperty(m, "default", { enumerable: !0, value: u });
  } : function(m, u) {
    m.default = u;
  }), a = me && me.__importStar || function(m) {
    if (m && m.__esModule)
      return m;
    var u = {};
    if (m != null)
      for (var c in m)
        c !== "default" && Object.prototype.hasOwnProperty.call(m, c) && e(u, m, c);
    return i(u, m), u;
  };
  Object.defineProperty(n, "__esModule", { value: !0 }), n.getOctokitOptions = n.GitHub = n.defaults = n.context = void 0;
  const t = a(yd), d = a(an), r = TI, o = PI, s = JI;
  n.context = new t.Context();
  const A = d.getApiBaseUrl();
  n.defaults = {
    baseUrl: A,
    request: {
      agent: d.getProxyAgent(A),
      fetch: d.getProxyFetch(A)
    }
  }, n.GitHub = r.Octokit.plugin(o.restEndpointMethods, s.paginateRest).defaults(n.defaults);
  function l(m, u) {
    const c = Object.assign({}, u || {}), k = d.getAuthString(m, c);
    return k && (c.auth = k), c;
  }
  n.getOctokitOptions = l;
})($k);
var HI = me && me.__createBinding || (Object.create ? function(n, e, i, a) {
  a === void 0 && (a = i);
  var t = Object.getOwnPropertyDescriptor(e, i);
  (!t || ("get" in t ? !e.__esModule : t.writable || t.configurable)) && (t = { enumerable: !0, get: function() {
    return e[i];
  } }), Object.defineProperty(n, a, t);
} : function(n, e, i, a) {
  a === void 0 && (a = i), n[a] = e[i];
}), jI = me && me.__setModuleDefault || (Object.create ? function(n, e) {
  Object.defineProperty(n, "default", { enumerable: !0, value: e });
} : function(n, e) {
  n.default = e;
}), WI = me && me.__importStar || function(n) {
  if (n && n.__esModule)
    return n;
  var e = {};
  if (n != null)
    for (var i in n)
      i !== "default" && Object.prototype.hasOwnProperty.call(n, i) && HI(e, n, i);
  return jI(e, n), e;
};
Object.defineProperty(md, "__esModule", { value: !0 });
md.getOctokit = pn = md.context = void 0;
const zI = WI(yd), np = $k;
var pn = md.context = new zI.Context();
function ZI(n, e, ...i) {
  const a = np.GitHub.plugin(...i);
  return new a((0, np.getOctokitOptions)(n, e));
}
md.getOctokit = ZI;
function ul(n, e) {
  var i = {};
  for (var a in n)
    Object.prototype.hasOwnProperty.call(n, a) && e.indexOf(a) < 0 && (i[a] = n[a]);
  if (n != null && typeof Object.getOwnPropertySymbols == "function") {
    var t = 0;
    for (a = Object.getOwnPropertySymbols(n); t < a.length; t++)
      e.indexOf(a[t]) < 0 && Object.prototype.propertyIsEnumerable.call(n, a[t]) && (i[a[t]] = n[a[t]]);
  }
  return i;
}
function f(n, e, i, a) {
  return new (i || (i = Promise))(function(t, d) {
    function r(A) {
      try {
        s(a.next(A));
      } catch (l) {
        d(l);
      }
    }
    function o(A) {
      try {
        s(a.throw(A));
      } catch (l) {
        d(l);
      }
    }
    function s(A) {
      var l;
      A.done ? t(A.value) : (l = A.value, l instanceof i ? l : new i(function(m) {
        m(l);
      })).then(r, o);
    }
    s((a = a.apply(n, e || [])).next());
  });
}
var ke;
function ap(n) {
  return n != null;
}
typeof SuppressedError == "function" && SuppressedError, function(n) {
  n.FeatureNotAccessible = "FeatureNotAccessible", n.InvalidInput = "InvalidInput", n.Ratelimited = "Ratelimited", n.NetworkError = "NetworkError", n.AuthenticationError = "AuthenticationError", n.Forbidden = "Forbidden", n.BootstrapError = "BootstrapError", n.Unknown = "Unknown", n.InternalError = "InternalError", n.Other = "Other", n.UserError = "UserError", n.GraphqlError = "GraphqlError", n.LockTimeout = "LockTimeout";
}(ke || (ke = {}));
const KI = { [ke.FeatureNotAccessible]: "feature not accessible", [ke.InvalidInput]: "invalid input", [ke.Ratelimited]: "ratelimited", [ke.NetworkError]: "network error", [ke.AuthenticationError]: "authentication error", [ke.Forbidden]: "forbidden", [ke.BootstrapError]: "bootstrap error", [ke.Unknown]: "unknown", [ke.InternalError]: "internal error", [ke.Other]: "other", [ke.UserError]: "user error", [ke.GraphqlError]: "graphql error", [ke.LockTimeout]: "lock timeout" };
function XI(n) {
  var e, i, a;
  return i = KI, a = n, (e = Object.keys(i).find((t) => i[t] === a)) !== null && e !== void 0 ? e : ke.Unknown;
}
const b1 = "Unknown error from LinearClient";
class $I {
  constructor(e) {
    var i, a, t, d, r, o, s;
    this.type = XI((i = e == null ? void 0 : e.extensions) === null || i === void 0 ? void 0 : i.type), this.userError = (a = e == null ? void 0 : e.extensions) === null || a === void 0 ? void 0 : a.userError, this.path = e == null ? void 0 : e.path, this.message = (s = (r = (d = (t = e == null ? void 0 : e.extensions) === null || t === void 0 ? void 0 : t.userPresentableMessage) !== null && d !== void 0 ? d : e == null ? void 0 : e.message) !== null && r !== void 0 ? r : (o = e == null ? void 0 : e.extensions) === null || o === void 0 ? void 0 : o.type) !== null && s !== void 0 ? s : b1;
  }
}
class Pi extends Error {
  constructor(e, i, a) {
    var t, d, r, o, s, A, l, m, u, c;
    super((s = Array.from(new Set([(c = (d = (t = e == null ? void 0 : e.message) === null || t === void 0 ? void 0 : t.split(": {")) === null || d === void 0 ? void 0 : d[0], c ? `${c.charAt(0).toUpperCase()}${c.slice(1)}` : void 0), (r = e == null ? void 0 : e.response) === null || r === void 0 ? void 0 : r.error, (o = i == null ? void 0 : i[0]) === null || o === void 0 ? void 0 : o.message].filter(ap))).filter(ap).join(" - ")) !== null && s !== void 0 ? s : b1), this.type = a, this.errors = i, this.query = (A = e == null ? void 0 : e.request) === null || A === void 0 ? void 0 : A.query, this.variables = (l = e == null ? void 0 : e.request) === null || l === void 0 ? void 0 : l.variables, this.status = (m = e == null ? void 0 : e.response) === null || m === void 0 ? void 0 : m.status, this.data = (u = e == null ? void 0 : e.response) === null || u === void 0 ? void 0 : u.data, this.raw = e;
  }
}
class eC extends Pi {
  constructor(e, i) {
    super(e, i, ke.FeatureNotAccessible);
  }
}
class iC extends Pi {
  constructor(e, i) {
    super(e, i, ke.InvalidInput);
  }
}
class nC extends Pi {
  constructor(e, i) {
    super(e, i, ke.Ratelimited);
  }
}
class aC extends Pi {
  constructor(e, i) {
    super(e, i, ke.NetworkError);
  }
}
class tC extends Pi {
  constructor(e, i) {
    super(e, i, ke.AuthenticationError);
  }
}
class dC extends Pi {
  constructor(e, i) {
    super(e, i, ke.Forbidden);
  }
}
class rC extends Pi {
  constructor(e, i) {
    super(e, i, ke.BootstrapError);
  }
}
class sC extends Pi {
  constructor(e, i) {
    super(e, i, ke.Unknown);
  }
}
class oC extends Pi {
  constructor(e, i) {
    super(e, i, ke.InternalError);
  }
}
class lC extends Pi {
  constructor(e, i) {
    super(e, i, ke.Other);
  }
}
class AC extends Pi {
  constructor(e, i) {
    super(e, i, ke.UserError);
  }
}
class mC extends Pi {
  constructor(e, i) {
    super(e, i, ke.GraphqlError);
  }
}
class uC extends Pi {
  constructor(e, i) {
    super(e, i, ke.LockTimeout);
  }
}
const pC = { [ke.FeatureNotAccessible]: eC, [ke.InvalidInput]: iC, [ke.Ratelimited]: nC, [ke.NetworkError]: aC, [ke.AuthenticationError]: tC, [ke.Forbidden]: dC, [ke.BootstrapError]: rC, [ke.Unknown]: sC, [ke.InternalError]: oC, [ke.Other]: lC, [ke.UserError]: AC, [ke.GraphqlError]: mC, [ke.LockTimeout]: uC };
function I1(n) {
  var e, i, a, t, d, r;
  if (n instanceof Pi)
    return n;
  const o = ((i = (e = n == null ? void 0 : n.response) === null || e === void 0 ? void 0 : e.errors) !== null && i !== void 0 ? i : []).map((l) => new $I(l)), s = (a = n == null ? void 0 : n.response) === null || a === void 0 ? void 0 : a.status, A = (d = (t = o[0]) === null || t === void 0 ? void 0 : t.type) !== null && d !== void 0 ? d : s === 403 ? ke.Forbidden : s === 429 ? ke.Ratelimited : `${s}`.startsWith("4") ? ke.AuthenticationError : s === 500 ? ke.InternalError : `${s}`.startsWith("5") ? ke.NetworkError : ke.Unknown;
  return new ((r = pC[A]) !== null && r !== void 0 ? r : Pi)(n, o);
}
var pl = typeof Symbol == "function" && typeof Symbol.for == "function" ? Symbol.for("nodejs.util.inspect.custom") : void 0;
function cl(n) {
  return cl = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(e) {
    return typeof e;
  } : function(e) {
    return e && typeof Symbol == "function" && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
  }, cl(n);
}
var cC = 10, tp = 2;
function Er(n, e) {
  switch (cl(n)) {
    case "string":
      return JSON.stringify(n);
    case "function":
      return n.name ? "[function ".concat(n.name, "]") : "[function]";
    case "object":
      return n === null ? "null" : function(i, a) {
        if (a.indexOf(i) !== -1)
          return "[Circular]";
        var t = [].concat(a, [i]), d = function(o) {
          var s = o[String(pl)];
          if (typeof s == "function")
            return s;
          if (typeof o.inspect == "function")
            return o.inspect;
        }(i);
        if (d !== void 0) {
          var r = d.call(i);
          if (r !== i)
            return typeof r == "string" ? r : Er(r, t);
        } else if (Array.isArray(i))
          return function(o, s) {
            if (o.length === 0)
              return "[]";
            if (s.length > tp)
              return "[Array]";
            for (var A = Math.min(cC, o.length), l = o.length - A, m = [], u = 0; u < A; ++u)
              m.push(Er(o[u], s));
            return l === 1 ? m.push("... 1 more item") : l > 1 && m.push("... ".concat(l, " more items")), "[" + m.join(", ") + "]";
          }(i, t);
        return function(o, s) {
          var A = Object.keys(o);
          if (A.length === 0)
            return "{}";
          if (s.length > tp)
            return "[" + function(m) {
              var u = Object.prototype.toString.call(m).replace(/^\[object /, "").replace(/]$/, "");
              if (u === "Object" && typeof m.constructor == "function") {
                var c = m.constructor.name;
                if (typeof c == "string" && c !== "")
                  return c;
              }
              return u;
            }(o) + "]";
          var l = A.map(function(m) {
            return m + ": " + Er(o[m], s);
          });
          return "{ " + l.join(", ") + " }";
        }(i, t);
      }(n, e);
    default:
      return String(n);
  }
}
function dp(n) {
  var e = n.prototype.toJSON;
  typeof e == "function" || function(i, a) {
    if (!i)
      throw new Error(a ?? "Unexpected invariant triggered.");
  }(0), n.prototype.inspect = e, pl && (n.prototype[pl] = e);
}
function rp(n) {
  return n != null && typeof n.kind == "string";
}
dp(function() {
  function n(e, i, a) {
    this.start = e.start, this.end = i.end, this.startToken = e, this.endToken = i, this.source = a;
  }
  return n.prototype.toJSON = function() {
    return { start: this.start, end: this.end };
  }, n;
}()), dp(function() {
  function n(e, i, a, t, d, r, o) {
    this.kind = e, this.start = i, this.end = a, this.line = t, this.column = d, this.value = o, this.prev = r, this.next = null;
  }
  return n.prototype.toJSON = function() {
    return { kind: this.kind, value: this.value, line: this.line, column: this.column };
  }, n;
}());
var kC = { Name: [], Document: ["definitions"], OperationDefinition: ["name", "variableDefinitions", "directives", "selectionSet"], VariableDefinition: ["variable", "type", "defaultValue", "directives"], Variable: ["name"], SelectionSet: ["selections"], Field: ["alias", "name", "arguments", "directives", "selectionSet"], Argument: ["name", "value"], FragmentSpread: ["name", "directives"], InlineFragment: ["typeCondition", "directives", "selectionSet"], FragmentDefinition: ["name", "variableDefinitions", "typeCondition", "directives", "selectionSet"], IntValue: [], FloatValue: [], StringValue: [], BooleanValue: [], NullValue: [], EnumValue: [], ListValue: ["values"], ObjectValue: ["fields"], ObjectField: ["name", "value"], Directive: ["name", "arguments"], NamedType: ["name"], ListType: ["type"], NonNullType: ["type"], SchemaDefinition: ["description", "directives", "operationTypes"], OperationTypeDefinition: ["type"], ScalarTypeDefinition: ["description", "name", "directives"], ObjectTypeDefinition: ["description", "name", "interfaces", "directives", "fields"], FieldDefinition: ["description", "name", "arguments", "type", "directives"], InputValueDefinition: ["description", "name", "type", "defaultValue", "directives"], InterfaceTypeDefinition: ["description", "name", "interfaces", "directives", "fields"], UnionTypeDefinition: ["description", "name", "directives", "types"], EnumTypeDefinition: ["description", "name", "directives", "values"], EnumValueDefinition: ["description", "name", "directives"], InputObjectTypeDefinition: ["description", "name", "directives", "fields"], DirectiveDefinition: ["description", "name", "arguments", "locations"], SchemaExtension: ["directives", "operationTypes"], ScalarTypeExtension: ["name", "directives"], ObjectTypeExtension: ["name", "interfaces", "directives", "fields"], InterfaceTypeExtension: ["name", "interfaces", "directives", "fields"], UnionTypeExtension: ["name", "directives", "types"], EnumTypeExtension: ["name", "directives", "values"], InputObjectTypeExtension: ["name", "directives", "fields"] }, vC = Object.freeze({});
function gC(n, e, i) {
  var a = n[e];
  if (a) {
    if (!i && typeof a == "function")
      return a;
    var t = i ? a.leave : a.enter;
    if (typeof t == "function")
      return t;
  } else {
    var d = i ? n.leave : n.enter;
    if (d) {
      if (typeof d == "function")
        return d;
      var r = d[e];
      if (typeof r == "function")
        return r;
    }
  }
}
function hC(n) {
  return function(e, i) {
    var a = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : kC, t = void 0, d = Array.isArray(e), r = [e], o = -1, s = [], A = void 0, l = void 0, m = void 0, u = [], c = [], k = e;
    do {
      var g = ++o === r.length, N = g && s.length !== 0;
      if (g) {
        if (l = c.length === 0 ? void 0 : u[u.length - 1], A = m, m = c.pop(), N) {
          if (d)
            A = A.slice();
          else {
            for (var y = {}, h = 0, E = Object.keys(A); h < E.length; h++) {
              var S = E[h];
              y[S] = A[S];
            }
            A = y;
          }
          for (var b = 0, I = 0; I < s.length; I++) {
            var D = s[I][0], B = s[I][1];
            d && (D -= b), d && B === null ? (A.splice(D, 1), b++) : A[D] = B;
          }
        }
        o = t.index, r = t.keys, s = t.edits, d = t.inArray, t = t.prev;
      } else {
        if (l = m ? d ? o : r[o] : void 0, (A = m ? m[l] : k) == null)
          continue;
        m && u.push(l);
      }
      var q, v = void 0;
      if (!Array.isArray(A)) {
        if (!rp(A))
          throw new Error("Invalid AST Node: ".concat(Er(A, []), "."));
        var Q = gC(i, A.kind, g);
        if (Q) {
          if ((v = Q.call(i, A, l, m, u, c)) === vC)
            break;
          if (v === !1) {
            if (!g) {
              u.pop();
              continue;
            }
          } else if (v !== void 0 && (s.push([l, v]), !g)) {
            if (!rp(v)) {
              u.pop();
              continue;
            }
            A = v;
          }
        }
      }
      v === void 0 && N && s.push([l, A]), g ? u.pop() : (t = { inArray: d, index: o, keys: r, edits: s, prev: t }, r = (d = Array.isArray(A)) ? A : (q = a[A.kind]) !== null && q !== void 0 ? q : [], o = -1, s = [], m && c.push(m), m = A);
    } while (t !== void 0);
    return s.length !== 0 && (k = s[s.length - 1][1]), k;
  }(n, { leave: fC });
}
var fC = { Name: function(n) {
  return n.value;
}, Variable: function(n) {
  return "$" + n.name;
}, Document: function(n) {
  return Ae(n.definitions, `

`) + `
`;
}, OperationDefinition: function(n) {
  var e = n.operation, i = n.name, a = Ze("(", Ae(n.variableDefinitions, ", "), ")"), t = Ae(n.directives, " "), d = n.selectionSet;
  return i || t || a || e !== "query" ? Ae([e, Ae([i, a]), t, d], " ") : d;
}, VariableDefinition: function(n) {
  var e = n.variable, i = n.type, a = n.defaultValue, t = n.directives;
  return e + ": " + i + Ze(" = ", a) + Ze(" ", Ae(t, " "));
}, SelectionSet: function(n) {
  return un(n.selections);
}, Field: function(n) {
  var e = n.alias, i = n.name, a = n.arguments, t = n.directives, d = n.selectionSet, r = Ze("", e, ": ") + i, o = r + Ze("(", Ae(a, ", "), ")");
  return o.length > 80 && (o = r + Ze(`(
`, yr(Ae(a, `
`)), `
)`)), Ae([o, Ae(t, " "), d], " ");
}, Argument: function(n) {
  return n.name + ": " + n.value;
}, FragmentSpread: function(n) {
  return "..." + n.name + Ze(" ", Ae(n.directives, " "));
}, InlineFragment: function(n) {
  var e = n.typeCondition, i = n.directives, a = n.selectionSet;
  return Ae(["...", Ze("on ", e), Ae(i, " "), a], " ");
}, FragmentDefinition: function(n) {
  var e = n.name, i = n.typeCondition, a = n.variableDefinitions, t = n.directives, d = n.selectionSet;
  return "fragment ".concat(e).concat(Ze("(", Ae(a, ", "), ")"), " ") + "on ".concat(i, " ").concat(Ze("", Ae(t, " "), " ")) + d;
}, IntValue: function(n) {
  return n.value;
}, FloatValue: function(n) {
  return n.value;
}, StringValue: function(n, e) {
  var i = n.value;
  return n.block ? function(a) {
    var t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "", d = arguments.length > 2 && arguments[2] !== void 0 && arguments[2], r = a.indexOf(`
`) === -1, o = a[0] === " " || a[0] === "	", s = a[a.length - 1] === '"', A = a[a.length - 1] === "\\", l = !r || s || A || d, m = "";
    return !l || r && o || (m += `
` + t), m += t ? a.replace(/\n/g, `
` + t) : a, l && (m += `
`), '"""' + m.replace(/"""/g, '\\"""') + '"""';
  }(i, e === "description" ? "" : "  ") : JSON.stringify(i);
}, BooleanValue: function(n) {
  return n.value ? "true" : "false";
}, NullValue: function() {
  return "null";
}, EnumValue: function(n) {
  return n.value;
}, ListValue: function(n) {
  return "[" + Ae(n.values, ", ") + "]";
}, ObjectValue: function(n) {
  return "{" + Ae(n.fields, ", ") + "}";
}, ObjectField: function(n) {
  return n.name + ": " + n.value;
}, Directive: function(n) {
  return "@" + n.name + Ze("(", Ae(n.arguments, ", "), ")");
}, NamedType: function(n) {
  return n.name;
}, ListType: function(n) {
  return "[" + n.type + "]";
}, NonNullType: function(n) {
  return n.type + "!";
}, SchemaDefinition: mn(function(n) {
  var e = n.directives, i = n.operationTypes;
  return Ae(["schema", Ae(e, " "), un(i)], " ");
}), OperationTypeDefinition: function(n) {
  return n.operation + ": " + n.type;
}, ScalarTypeDefinition: mn(function(n) {
  return Ae(["scalar", n.name, Ae(n.directives, " ")], " ");
}), ObjectTypeDefinition: mn(function(n) {
  var e = n.name, i = n.interfaces, a = n.directives, t = n.fields;
  return Ae(["type", e, Ze("implements ", Ae(i, " & ")), Ae(a, " "), un(t)], " ");
}), FieldDefinition: mn(function(n) {
  var e = n.name, i = n.arguments, a = n.type, t = n.directives;
  return e + (sp(i) ? Ze(`(
`, yr(Ae(i, `
`)), `
)`) : Ze("(", Ae(i, ", "), ")")) + ": " + a + Ze(" ", Ae(t, " "));
}), InputValueDefinition: mn(function(n) {
  var e = n.name, i = n.type, a = n.defaultValue, t = n.directives;
  return Ae([e + ": " + i, Ze("= ", a), Ae(t, " ")], " ");
}), InterfaceTypeDefinition: mn(function(n) {
  var e = n.name, i = n.interfaces, a = n.directives, t = n.fields;
  return Ae(["interface", e, Ze("implements ", Ae(i, " & ")), Ae(a, " "), un(t)], " ");
}), UnionTypeDefinition: mn(function(n) {
  var e = n.name, i = n.directives, a = n.types;
  return Ae(["union", e, Ae(i, " "), a && a.length !== 0 ? "= " + Ae(a, " | ") : ""], " ");
}), EnumTypeDefinition: mn(function(n) {
  var e = n.name, i = n.directives, a = n.values;
  return Ae(["enum", e, Ae(i, " "), un(a)], " ");
}), EnumValueDefinition: mn(function(n) {
  return Ae([n.name, Ae(n.directives, " ")], " ");
}), InputObjectTypeDefinition: mn(function(n) {
  var e = n.name, i = n.directives, a = n.fields;
  return Ae(["input", e, Ae(i, " "), un(a)], " ");
}), DirectiveDefinition: mn(function(n) {
  var e = n.name, i = n.arguments, a = n.repeatable, t = n.locations;
  return "directive @" + e + (sp(i) ? Ze(`(
`, yr(Ae(i, `
`)), `
)`) : Ze("(", Ae(i, ", "), ")")) + (a ? " repeatable" : "") + " on " + Ae(t, " | ");
}), SchemaExtension: function(n) {
  var e = n.directives, i = n.operationTypes;
  return Ae(["extend schema", Ae(e, " "), un(i)], " ");
}, ScalarTypeExtension: function(n) {
  return Ae(["extend scalar", n.name, Ae(n.directives, " ")], " ");
}, ObjectTypeExtension: function(n) {
  var e = n.name, i = n.interfaces, a = n.directives, t = n.fields;
  return Ae(["extend type", e, Ze("implements ", Ae(i, " & ")), Ae(a, " "), un(t)], " ");
}, InterfaceTypeExtension: function(n) {
  var e = n.name, i = n.interfaces, a = n.directives, t = n.fields;
  return Ae(["extend interface", e, Ze("implements ", Ae(i, " & ")), Ae(a, " "), un(t)], " ");
}, UnionTypeExtension: function(n) {
  var e = n.name, i = n.directives, a = n.types;
  return Ae(["extend union", e, Ae(i, " "), a && a.length !== 0 ? "= " + Ae(a, " | ") : ""], " ");
}, EnumTypeExtension: function(n) {
  var e = n.name, i = n.directives, a = n.values;
  return Ae(["extend enum", e, Ae(i, " "), un(a)], " ");
}, InputObjectTypeExtension: function(n) {
  var e = n.name, i = n.directives, a = n.fields;
  return Ae(["extend input", e, Ae(i, " "), un(a)], " ");
} };
function mn(n) {
  return function(e) {
    return Ae([e.description, n(e)], `
`);
  };
}
function Ae(n) {
  var e, i = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "";
  return (e = n == null ? void 0 : n.filter(function(a) {
    return a;
  }).join(i)) !== null && e !== void 0 ? e : "";
}
function un(n) {
  return Ze(`{
`, yr(Ae(n, `
`)), `
}`);
}
function Ze(n, e) {
  return e != null && e !== "" ? n + e + (arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : "") : "";
}
function yr(n) {
  return Ze("  ", n.replace(/\n/g, `
  `));
}
function NC(n) {
  return n.indexOf(`
`) !== -1;
}
function sp(n) {
  return n != null && n.some(NC);
}
var op = typeof globalThis < "u" ? globalThis : typeof window < "u" ? window : typeof global < "u" ? global : typeof self < "u" ? self : {};
function C1(n) {
  if (n.__esModule)
    return n;
  var e = Object.defineProperty({}, "__esModule", { value: !0 });
  return Object.keys(n).forEach(function(i) {
    var a = Object.getOwnPropertyDescriptor(n, i);
    Object.defineProperty(e, i, a.get ? a : { enumerable: !0, get: function() {
      return n[i];
    } });
  }), e;
}
function Ol(n) {
  var e = { exports: {} };
  return n(e, e.exports), e.exports;
}
var EC = Object.freeze({ __proto__: null, default: function(n, e) {
  return e = e || {}, new Promise(function(i, a) {
    var t = new XMLHttpRequest(), d = [], r = [], o = {}, s = function() {
      return { ok: (t.status / 100 | 0) == 2, statusText: t.statusText, status: t.status, url: t.responseURL, text: function() {
        return Promise.resolve(t.responseText);
      }, json: function() {
        return Promise.resolve(t.responseText).then(JSON.parse);
      }, blob: function() {
        return Promise.resolve(new Blob([t.response]));
      }, clone: s, headers: { keys: function() {
        return d;
      }, entries: function() {
        return r;
      }, get: function(l) {
        return o[l.toLowerCase()];
      }, has: function(l) {
        return l.toLowerCase() in o;
      } } };
    };
    for (var A in t.open(e.method || "get", n, !0), t.onload = function() {
      t.getAllResponseHeaders().replace(/^(.*?):[^\S\n]*([\s\S]*?)$/gm, function(l, m, u) {
        d.push(m = m.toLowerCase()), r.push([m, u]), o[m] = o[m] ? o[m] + "," + u : u;
      }), i(s());
    }, t.onerror = a, t.withCredentials = e.credentials == "include", e.headers)
      t.setRequestHeader(A, e.headers[A]);
    t.send(e.body || null);
  });
} }), $e = {}, $i = $e;
function lp(n) {
  return n < 0 ? -1 : 1;
}
function ta(n, e) {
  e.unsigned || --n;
  const i = e.unsigned ? 0 : -Math.pow(2, n), a = Math.pow(2, n) - 1, t = e.moduloBitLength ? Math.pow(2, e.moduloBitLength) : Math.pow(2, n), d = e.moduloBitLength ? Math.pow(2, e.moduloBitLength - 1) : Math.pow(2, n - 1);
  return function(r, o) {
    o || (o = {});
    let s = +r;
    if (o.enforceRange) {
      if (!Number.isFinite(s))
        throw new TypeError("Argument is not a finite number");
      if (s = lp(s) * Math.floor(Math.abs(s)), s < i || s > a)
        throw new TypeError("Argument is not in byte range");
      return s;
    }
    if (!isNaN(s) && o.clamp)
      return s = function(A) {
        return A % 1 == 0.5 && !(1 & A) ? Math.floor(A) : Math.round(A);
      }(s), s < i && (s = i), s > a && (s = a), s;
    if (!Number.isFinite(s) || s === 0)
      return 0;
    if (s = lp(s) * Math.floor(Math.abs(s)), s %= t, !e.unsigned && s >= d)
      return s - t;
    if (e.unsigned) {
      if (s < 0)
        s += t;
      else if (s === -0)
        return 0;
    }
    return s;
  };
}
$e.void = function() {
}, $e.boolean = function(n) {
  return !!n;
}, $e.byte = ta(8, { unsigned: !1 }), $e.octet = ta(8, { unsigned: !0 }), $e.short = ta(16, { unsigned: !1 }), $e["unsigned short"] = ta(16, { unsigned: !0 }), $e.long = ta(32, { unsigned: !1 }), $e["unsigned long"] = ta(32, { unsigned: !0 }), $e["long long"] = ta(32, { unsigned: !1, moduloBitLength: 64 }), $e["unsigned long long"] = ta(32, { unsigned: !0, moduloBitLength: 64 }), $e.double = function(n) {
  const e = +n;
  if (!Number.isFinite(e))
    throw new TypeError("Argument is not a finite floating-point value");
  return e;
}, $e["unrestricted double"] = function(n) {
  const e = +n;
  if (isNaN(e))
    throw new TypeError("Argument is NaN");
  return e;
}, $e.float = $e.double, $e["unrestricted float"] = $e["unrestricted double"], $e.DOMString = function(n, e) {
  return e || (e = {}), e.treatNullAsEmptyString && n === null ? "" : String(n);
}, $e.ByteString = function(n, e) {
  const i = String(n);
  let a;
  for (let t = 0; (a = i.codePointAt(t)) !== void 0; ++t)
    if (a > 255)
      throw new TypeError("Argument is not a valid bytestring");
  return i;
}, $e.USVString = function(n) {
  const e = String(n), i = e.length, a = [];
  for (let t = 0; t < i; ++t) {
    const d = e.charCodeAt(t);
    if (d < 55296 || d > 57343)
      a.push(String.fromCodePoint(d));
    else if (56320 <= d && d <= 57343)
      a.push(String.fromCodePoint(65533));
    else if (t === i - 1)
      a.push(String.fromCodePoint(65533));
    else {
      const r = e.charCodeAt(t + 1);
      if (56320 <= r && r <= 57343) {
        const o = 1023 & d, s = 1023 & r;
        a.push(String.fromCodePoint(65536 + 1024 * o + s)), ++t;
      } else
        a.push(String.fromCodePoint(65533));
    }
  }
  return a.join("");
}, $e.Date = function(n, e) {
  if (!(n instanceof Date))
    throw new TypeError("Argument is not a Date object");
  if (!isNaN(n))
    return n;
}, $e.RegExp = function(n, e) {
  return n instanceof RegExp || (n = new RegExp(n)), n;
};
var Ap = Ol(function(n) {
  n.exports.mixin = function(e, i) {
    const a = Object.getOwnPropertyNames(i);
    for (let t = 0; t < a.length; ++t)
      Object.defineProperty(e, a[t], Object.getOwnPropertyDescriptor(i, a[t]));
  }, n.exports.wrapperSymbol = Symbol("wrapper"), n.exports.implSymbol = Symbol("impl"), n.exports.wrapperForImpl = function(e) {
    return e[n.exports.wrapperSymbol];
  }, n.exports.implForWrapper = function(e) {
    return e[n.exports.implSymbol];
  };
});
const vt = 2147483647, Hn = 36, yC = /^xn--/, bC = /[^\0-\x7F]/, IC = /[\x2E\u3002\uFF0E\uFF61]/g, CC = { overflow: "Overflow: input needs wider integers to process", "not-basic": "Illegal input >= 0x80 (not a basic code point)", "invalid-input": "Invalid input" }, Sn = Math.floor, xo = String.fromCharCode;
function la(n) {
  throw new RangeError(CC[n]);
}
function mp(n, e) {
  const i = n.split("@");
  let a = "";
  i.length > 1 && (a = i[0] + "@", n = i[1]);
  const t = function(d, r) {
    const o = [];
    let s = d.length;
    for (; s--; )
      o[s] = r(d[s]);
    return o;
  }((n = n.replace(IC, ".")).split("."), e).join(".");
  return a + t;
}
function B1(n) {
  const e = [];
  let i = 0;
  const a = n.length;
  for (; i < a; ) {
    const t = n.charCodeAt(i++);
    if (t >= 55296 && t <= 56319 && i < a) {
      const d = n.charCodeAt(i++);
      (64512 & d) == 56320 ? e.push(((1023 & t) << 10) + (1023 & d) + 65536) : (e.push(t), i--);
    } else
      e.push(t);
  }
  return e;
}
const up = function(n, e) {
  return n + 22 + 75 * (n < 26) - ((e != 0) << 5);
}, Q1 = function(n, e, i) {
  let a = 0;
  for (n = i ? Sn(n / 700) : n >> 1, n += Sn(n / e); n > 455; a += Hn)
    n = Sn(n / 35);
  return Sn(a + 36 * n / (n + 38));
}, pp = function(n) {
  const e = [], i = n.length;
  let a = 0, t = 128, d = 72, r = n.lastIndexOf("-");
  r < 0 && (r = 0);
  for (let s = 0; s < r; ++s)
    n.charCodeAt(s) >= 128 && la("not-basic"), e.push(n.charCodeAt(s));
  for (let s = r > 0 ? r + 1 : 0; s < i; ) {
    const A = a;
    for (let m = 1, u = Hn; ; u += Hn) {
      s >= i && la("invalid-input");
      const c = (o = n.charCodeAt(s++)) >= 48 && o < 58 ? o - 48 + 26 : o >= 65 && o < 91 ? o - 65 : o >= 97 && o < 123 ? o - 97 : Hn;
      c >= Hn && la("invalid-input"), c > Sn((vt - a) / m) && la("overflow"), a += c * m;
      const k = u <= d ? 1 : u >= d + 26 ? 26 : u - d;
      if (c < k)
        break;
      const g = Hn - k;
      m > Sn(vt / g) && la("overflow"), m *= g;
    }
    const l = e.length + 1;
    d = Q1(a - A, l, A == 0), Sn(a / l) > vt - t && la("overflow"), t += Sn(a / l), a %= l, e.splice(a++, 0, t);
  }
  var o;
  return String.fromCodePoint(...e);
}, cp = function(n) {
  const e = [], i = (n = B1(n)).length;
  let a = 128, t = 0, d = 72;
  for (const s of n)
    s < 128 && e.push(xo(s));
  const r = e.length;
  let o = r;
  for (r && e.push("-"); o < i; ) {
    let s = vt;
    for (const l of n)
      l >= a && l < s && (s = l);
    const A = o + 1;
    s - a > Sn((vt - t) / A) && la("overflow"), t += (s - a) * A, a = s;
    for (const l of n)
      if (l < a && ++t > vt && la("overflow"), l === a) {
        let m = t;
        for (let u = Hn; ; u += Hn) {
          const c = u <= d ? 1 : u >= d + 26 ? 26 : u - d;
          if (m < c)
            break;
          const k = m - c, g = Hn - c;
          e.push(xo(up(c + k % g, 0))), m = Sn(k / g);
        }
        e.push(xo(up(m, 0))), d = Q1(t, A, o === r), t = 0, ++o;
      }
    ++t, ++a;
  }
  return e.join("");
};
var Aa = { version: "2.3.1", ucs2: { decode: B1, encode: (n) => String.fromCodePoint(...n) }, decode: pp, encode: cp, toASCII: function(n) {
  return mp(n, function(e) {
    return bC.test(e) ? "xn--" + cp(e) : e;
  });
}, toUnicode: function(n) {
  return mp(n, function(e) {
    return yC.test(e) ? pp(e.slice(4).toLowerCase()) : e;
  });
} }, kp = [[[0, 44], "disallowed_STD3_valid"], [[45, 46], "valid"], [[47, 47], "disallowed_STD3_valid"], [[48, 57], "valid"], [[58, 64], "disallowed_STD3_valid"], [[65, 65], "mapped", [97]], [[66, 66], "mapped", [98]], [[67, 67], "mapped", [99]], [[68, 68], "mapped", [100]], [[69, 69], "mapped", [101]], [[70, 70], "mapped", [102]], [[71, 71], "mapped", [103]], [[72, 72], "mapped", [104]], [[73, 73], "mapped", [105]], [[74, 74], "mapped", [106]], [[75, 75], "mapped", [107]], [[76, 76], "mapped", [108]], [[77, 77], "mapped", [109]], [[78, 78], "mapped", [110]], [[79, 79], "mapped", [111]], [[80, 80], "mapped", [112]], [[81, 81], "mapped", [113]], [[82, 82], "mapped", [114]], [[83, 83], "mapped", [115]], [[84, 84], "mapped", [116]], [[85, 85], "mapped", [117]], [[86, 86], "mapped", [118]], [[87, 87], "mapped", [119]], [[88, 88], "mapped", [120]], [[89, 89], "mapped", [121]], [[90, 90], "mapped", [122]], [[91, 96], "disallowed_STD3_valid"], [[97, 122], "valid"], [[123, 127], "disallowed_STD3_valid"], [[128, 159], "disallowed"], [[160, 160], "disallowed_STD3_mapped", [32]], [[161, 167], "valid", [], "NV8"], [[168, 168], "disallowed_STD3_mapped", [32, 776]], [[169, 169], "valid", [], "NV8"], [[170, 170], "mapped", [97]], [[171, 172], "valid", [], "NV8"], [[173, 173], "ignored"], [[174, 174], "valid", [], "NV8"], [[175, 175], "disallowed_STD3_mapped", [32, 772]], [[176, 177], "valid", [], "NV8"], [[178, 178], "mapped", [50]], [[179, 179], "mapped", [51]], [[180, 180], "disallowed_STD3_mapped", [32, 769]], [[181, 181], "mapped", [956]], [[182, 182], "valid", [], "NV8"], [[183, 183], "valid"], [[184, 184], "disallowed_STD3_mapped", [32, 807]], [[185, 185], "mapped", [49]], [[186, 186], "mapped", [111]], [[187, 187], "valid", [], "NV8"], [[188, 188], "mapped", [49, 8260, 52]], [[189, 189], "mapped", [49, 8260, 50]], [[190, 190], "mapped", [51, 8260, 52]], [[191, 191], "valid", [], "NV8"], [[192, 192], "mapped", [224]], [[193, 193], "mapped", [225]], [[194, 194], "mapped", [226]], [[195, 195], "mapped", [227]], [[196, 196], "mapped", [228]], [[197, 197], "mapped", [229]], [[198, 198], "mapped", [230]], [[199, 199], "mapped", [231]], [[200, 200], "mapped", [232]], [[201, 201], "mapped", [233]], [[202, 202], "mapped", [234]], [[203, 203], "mapped", [235]], [[204, 204], "mapped", [236]], [[205, 205], "mapped", [237]], [[206, 206], "mapped", [238]], [[207, 207], "mapped", [239]], [[208, 208], "mapped", [240]], [[209, 209], "mapped", [241]], [[210, 210], "mapped", [242]], [[211, 211], "mapped", [243]], [[212, 212], "mapped", [244]], [[213, 213], "mapped", [245]], [[214, 214], "mapped", [246]], [[215, 215], "valid", [], "NV8"], [[216, 216], "mapped", [248]], [[217, 217], "mapped", [249]], [[218, 218], "mapped", [250]], [[219, 219], "mapped", [251]], [[220, 220], "mapped", [252]], [[221, 221], "mapped", [253]], [[222, 222], "mapped", [254]], [[223, 223], "deviation", [115, 115]], [[224, 246], "valid"], [[247, 247], "valid", [], "NV8"], [[248, 255], "valid"], [[256, 256], "mapped", [257]], [[257, 257], "valid"], [[258, 258], "mapped", [259]], [[259, 259], "valid"], [[260, 260], "mapped", [261]], [[261, 261], "valid"], [[262, 262], "mapped", [263]], [[263, 263], "valid"], [[264, 264], "mapped", [265]], [[265, 265], "valid"], [[266, 266], "mapped", [267]], [[267, 267], "valid"], [[268, 268], "mapped", [269]], [[269, 269], "valid"], [[270, 270], "mapped", [271]], [[271, 271], "valid"], [[272, 272], "mapped", [273]], [[273, 273], "valid"], [[274, 274], "mapped", [275]], [[275, 275], "valid"], [[276, 276], "mapped", [277]], [[277, 277], "valid"], [[278, 278], "mapped", [279]], [[279, 279], "valid"], [[280, 280], "mapped", [281]], [[281, 281], "valid"], [[282, 282], "mapped", [283]], [[283, 283], "valid"], [[284, 284], "mapped", [285]], [[285, 285], "valid"], [[286, 286], "mapped", [287]], [[287, 287], "valid"], [[288, 288], "mapped", [289]], [[289, 289], "valid"], [[290, 290], "mapped", [291]], [[291, 291], "valid"], [[292, 292], "mapped", [293]], [[293, 293], "valid"], [[294, 294], "mapped", [295]], [[295, 295], "valid"], [[296, 296], "mapped", [297]], [[297, 297], "valid"], [[298, 298], "mapped", [299]], [[299, 299], "valid"], [[300, 300], "mapped", [301]], [[301, 301], "valid"], [[302, 302], "mapped", [303]], [[303, 303], "valid"], [[304, 304], "mapped", [105, 775]], [[305, 305], "valid"], [[306, 307], "mapped", [105, 106]], [[308, 308], "mapped", [309]], [[309, 309], "valid"], [[310, 310], "mapped", [311]], [[311, 312], "valid"], [[313, 313], "mapped", [314]], [[314, 314], "valid"], [[315, 315], "mapped", [316]], [[316, 316], "valid"], [[317, 317], "mapped", [318]], [[318, 318], "valid"], [[319, 320], "mapped", [108, 183]], [[321, 321], "mapped", [322]], [[322, 322], "valid"], [[323, 323], "mapped", [324]], [[324, 324], "valid"], [[325, 325], "mapped", [326]], [[326, 326], "valid"], [[327, 327], "mapped", [328]], [[328, 328], "valid"], [[329, 329], "mapped", [700, 110]], [[330, 330], "mapped", [331]], [[331, 331], "valid"], [[332, 332], "mapped", [333]], [[333, 333], "valid"], [[334, 334], "mapped", [335]], [[335, 335], "valid"], [[336, 336], "mapped", [337]], [[337, 337], "valid"], [[338, 338], "mapped", [339]], [[339, 339], "valid"], [[340, 340], "mapped", [341]], [[341, 341], "valid"], [[342, 342], "mapped", [343]], [[343, 343], "valid"], [[344, 344], "mapped", [345]], [[345, 345], "valid"], [[346, 346], "mapped", [347]], [[347, 347], "valid"], [[348, 348], "mapped", [349]], [[349, 349], "valid"], [[350, 350], "mapped", [351]], [[351, 351], "valid"], [[352, 352], "mapped", [353]], [[353, 353], "valid"], [[354, 354], "mapped", [355]], [[355, 355], "valid"], [[356, 356], "mapped", [357]], [[357, 357], "valid"], [[358, 358], "mapped", [359]], [[359, 359], "valid"], [[360, 360], "mapped", [361]], [[361, 361], "valid"], [[362, 362], "mapped", [363]], [[363, 363], "valid"], [[364, 364], "mapped", [365]], [[365, 365], "valid"], [[366, 366], "mapped", [367]], [[367, 367], "valid"], [[368, 368], "mapped", [369]], [[369, 369], "valid"], [[370, 370], "mapped", [371]], [[371, 371], "valid"], [[372, 372], "mapped", [373]], [[373, 373], "valid"], [[374, 374], "mapped", [375]], [[375, 375], "valid"], [[376, 376], "mapped", [255]], [[377, 377], "mapped", [378]], [[378, 378], "valid"], [[379, 379], "mapped", [380]], [[380, 380], "valid"], [[381, 381], "mapped", [382]], [[382, 382], "valid"], [[383, 383], "mapped", [115]], [[384, 384], "valid"], [[385, 385], "mapped", [595]], [[386, 386], "mapped", [387]], [[387, 387], "valid"], [[388, 388], "mapped", [389]], [[389, 389], "valid"], [[390, 390], "mapped", [596]], [[391, 391], "mapped", [392]], [[392, 392], "valid"], [[393, 393], "mapped", [598]], [[394, 394], "mapped", [599]], [[395, 395], "mapped", [396]], [[396, 397], "valid"], [[398, 398], "mapped", [477]], [[399, 399], "mapped", [601]], [[400, 400], "mapped", [603]], [[401, 401], "mapped", [402]], [[402, 402], "valid"], [[403, 403], "mapped", [608]], [[404, 404], "mapped", [611]], [[405, 405], "valid"], [[406, 406], "mapped", [617]], [[407, 407], "mapped", [616]], [[408, 408], "mapped", [409]], [[409, 411], "valid"], [[412, 412], "mapped", [623]], [[413, 413], "mapped", [626]], [[414, 414], "valid"], [[415, 415], "mapped", [629]], [[416, 416], "mapped", [417]], [[417, 417], "valid"], [[418, 418], "mapped", [419]], [[419, 419], "valid"], [[420, 420], "mapped", [421]], [[421, 421], "valid"], [[422, 422], "mapped", [640]], [[423, 423], "mapped", [424]], [[424, 424], "valid"], [[425, 425], "mapped", [643]], [[426, 427], "valid"], [[428, 428], "mapped", [429]], [[429, 429], "valid"], [[430, 430], "mapped", [648]], [[431, 431], "mapped", [432]], [[432, 432], "valid"], [[433, 433], "mapped", [650]], [[434, 434], "mapped", [651]], [[435, 435], "mapped", [436]], [[436, 436], "valid"], [[437, 437], "mapped", [438]], [[438, 438], "valid"], [[439, 439], "mapped", [658]], [[440, 440], "mapped", [441]], [[441, 443], "valid"], [[444, 444], "mapped", [445]], [[445, 451], "valid"], [[452, 454], "mapped", [100, 382]], [[455, 457], "mapped", [108, 106]], [[458, 460], "mapped", [110, 106]], [[461, 461], "mapped", [462]], [[462, 462], "valid"], [[463, 463], "mapped", [464]], [[464, 464], "valid"], [[465, 465], "mapped", [466]], [[466, 466], "valid"], [[467, 467], "mapped", [468]], [[468, 468], "valid"], [[469, 469], "mapped", [470]], [[470, 470], "valid"], [[471, 471], "mapped", [472]], [[472, 472], "valid"], [[473, 473], "mapped", [474]], [[474, 474], "valid"], [[475, 475], "mapped", [476]], [[476, 477], "valid"], [[478, 478], "mapped", [479]], [[479, 479], "valid"], [[480, 480], "mapped", [481]], [[481, 481], "valid"], [[482, 482], "mapped", [483]], [[483, 483], "valid"], [[484, 484], "mapped", [485]], [[485, 485], "valid"], [[486, 486], "mapped", [487]], [[487, 487], "valid"], [[488, 488], "mapped", [489]], [[489, 489], "valid"], [[490, 490], "mapped", [491]], [[491, 491], "valid"], [[492, 492], "mapped", [493]], [[493, 493], "valid"], [[494, 494], "mapped", [495]], [[495, 496], "valid"], [[497, 499], "mapped", [100, 122]], [[500, 500], "mapped", [501]], [[501, 501], "valid"], [[502, 502], "mapped", [405]], [[503, 503], "mapped", [447]], [[504, 504], "mapped", [505]], [[505, 505], "valid"], [[506, 506], "mapped", [507]], [[507, 507], "valid"], [[508, 508], "mapped", [509]], [[509, 509], "valid"], [[510, 510], "mapped", [511]], [[511, 511], "valid"], [[512, 512], "mapped", [513]], [[513, 513], "valid"], [[514, 514], "mapped", [515]], [[515, 515], "valid"], [[516, 516], "mapped", [517]], [[517, 517], "valid"], [[518, 518], "mapped", [519]], [[519, 519], "valid"], [[520, 520], "mapped", [521]], [[521, 521], "valid"], [[522, 522], "mapped", [523]], [[523, 523], "valid"], [[524, 524], "mapped", [525]], [[525, 525], "valid"], [[526, 526], "mapped", [527]], [[527, 527], "valid"], [[528, 528], "mapped", [529]], [[529, 529], "valid"], [[530, 530], "mapped", [531]], [[531, 531], "valid"], [[532, 532], "mapped", [533]], [[533, 533], "valid"], [[534, 534], "mapped", [535]], [[535, 535], "valid"], [[536, 536], "mapped", [537]], [[537, 537], "valid"], [[538, 538], "mapped", [539]], [[539, 539], "valid"], [[540, 540], "mapped", [541]], [[541, 541], "valid"], [[542, 542], "mapped", [543]], [[543, 543], "valid"], [[544, 544], "mapped", [414]], [[545, 545], "valid"], [[546, 546], "mapped", [547]], [[547, 547], "valid"], [[548, 548], "mapped", [549]], [[549, 549], "valid"], [[550, 550], "mapped", [551]], [[551, 551], "valid"], [[552, 552], "mapped", [553]], [[553, 553], "valid"], [[554, 554], "mapped", [555]], [[555, 555], "valid"], [[556, 556], "mapped", [557]], [[557, 557], "valid"], [[558, 558], "mapped", [559]], [[559, 559], "valid"], [[560, 560], "mapped", [561]], [[561, 561], "valid"], [[562, 562], "mapped", [563]], [[563, 563], "valid"], [[564, 566], "valid"], [[567, 569], "valid"], [[570, 570], "mapped", [11365]], [[571, 571], "mapped", [572]], [[572, 572], "valid"], [[573, 573], "mapped", [410]], [[574, 574], "mapped", [11366]], [[575, 576], "valid"], [[577, 577], "mapped", [578]], [[578, 578], "valid"], [[579, 579], "mapped", [384]], [[580, 580], "mapped", [649]], [[581, 581], "mapped", [652]], [[582, 582], "mapped", [583]], [[583, 583], "valid"], [[584, 584], "mapped", [585]], [[585, 585], "valid"], [[586, 586], "mapped", [587]], [[587, 587], "valid"], [[588, 588], "mapped", [589]], [[589, 589], "valid"], [[590, 590], "mapped", [591]], [[591, 591], "valid"], [[592, 680], "valid"], [[681, 685], "valid"], [[686, 687], "valid"], [[688, 688], "mapped", [104]], [[689, 689], "mapped", [614]], [[690, 690], "mapped", [106]], [[691, 691], "mapped", [114]], [[692, 692], "mapped", [633]], [[693, 693], "mapped", [635]], [[694, 694], "mapped", [641]], [[695, 695], "mapped", [119]], [[696, 696], "mapped", [121]], [[697, 705], "valid"], [[706, 709], "valid", [], "NV8"], [[710, 721], "valid"], [[722, 727], "valid", [], "NV8"], [[728, 728], "disallowed_STD3_mapped", [32, 774]], [[729, 729], "disallowed_STD3_mapped", [32, 775]], [[730, 730], "disallowed_STD3_mapped", [32, 778]], [[731, 731], "disallowed_STD3_mapped", [32, 808]], [[732, 732], "disallowed_STD3_mapped", [32, 771]], [[733, 733], "disallowed_STD3_mapped", [32, 779]], [[734, 734], "valid", [], "NV8"], [[735, 735], "valid", [], "NV8"], [[736, 736], "mapped", [611]], [[737, 737], "mapped", [108]], [[738, 738], "mapped", [115]], [[739, 739], "mapped", [120]], [[740, 740], "mapped", [661]], [[741, 745], "valid", [], "NV8"], [[746, 747], "valid", [], "NV8"], [[748, 748], "valid"], [[749, 749], "valid", [], "NV8"], [[750, 750], "valid"], [[751, 767], "valid", [], "NV8"], [[768, 831], "valid"], [[832, 832], "mapped", [768]], [[833, 833], "mapped", [769]], [[834, 834], "valid"], [[835, 835], "mapped", [787]], [[836, 836], "mapped", [776, 769]], [[837, 837], "mapped", [953]], [[838, 846], "valid"], [[847, 847], "ignored"], [[848, 855], "valid"], [[856, 860], "valid"], [[861, 863], "valid"], [[864, 865], "valid"], [[866, 866], "valid"], [[867, 879], "valid"], [[880, 880], "mapped", [881]], [[881, 881], "valid"], [[882, 882], "mapped", [883]], [[883, 883], "valid"], [[884, 884], "mapped", [697]], [[885, 885], "valid"], [[886, 886], "mapped", [887]], [[887, 887], "valid"], [[888, 889], "disallowed"], [[890, 890], "disallowed_STD3_mapped", [32, 953]], [[891, 893], "valid"], [[894, 894], "disallowed_STD3_mapped", [59]], [[895, 895], "mapped", [1011]], [[896, 899], "disallowed"], [[900, 900], "disallowed_STD3_mapped", [32, 769]], [[901, 901], "disallowed_STD3_mapped", [32, 776, 769]], [[902, 902], "mapped", [940]], [[903, 903], "mapped", [183]], [[904, 904], "mapped", [941]], [[905, 905], "mapped", [942]], [[906, 906], "mapped", [943]], [[907, 907], "disallowed"], [[908, 908], "mapped", [972]], [[909, 909], "disallowed"], [[910, 910], "mapped", [973]], [[911, 911], "mapped", [974]], [[912, 912], "valid"], [[913, 913], "mapped", [945]], [[914, 914], "mapped", [946]], [[915, 915], "mapped", [947]], [[916, 916], "mapped", [948]], [[917, 917], "mapped", [949]], [[918, 918], "mapped", [950]], [[919, 919], "mapped", [951]], [[920, 920], "mapped", [952]], [[921, 921], "mapped", [953]], [[922, 922], "mapped", [954]], [[923, 923], "mapped", [955]], [[924, 924], "mapped", [956]], [[925, 925], "mapped", [957]], [[926, 926], "mapped", [958]], [[927, 927], "mapped", [959]], [[928, 928], "mapped", [960]], [[929, 929], "mapped", [961]], [[930, 930], "disallowed"], [[931, 931], "mapped", [963]], [[932, 932], "mapped", [964]], [[933, 933], "mapped", [965]], [[934, 934], "mapped", [966]], [[935, 935], "mapped", [967]], [[936, 936], "mapped", [968]], [[937, 937], "mapped", [969]], [[938, 938], "mapped", [970]], [[939, 939], "mapped", [971]], [[940, 961], "valid"], [[962, 962], "deviation", [963]], [[963, 974], "valid"], [[975, 975], "mapped", [983]], [[976, 976], "mapped", [946]], [[977, 977], "mapped", [952]], [[978, 978], "mapped", [965]], [[979, 979], "mapped", [973]], [[980, 980], "mapped", [971]], [[981, 981], "mapped", [966]], [[982, 982], "mapped", [960]], [[983, 983], "valid"], [[984, 984], "mapped", [985]], [[985, 985], "valid"], [[986, 986], "mapped", [987]], [[987, 987], "valid"], [[988, 988], "mapped", [989]], [[989, 989], "valid"], [[990, 990], "mapped", [991]], [[991, 991], "valid"], [[992, 992], "mapped", [993]], [[993, 993], "valid"], [[994, 994], "mapped", [995]], [[995, 995], "valid"], [[996, 996], "mapped", [997]], [[997, 997], "valid"], [[998, 998], "mapped", [999]], [[999, 999], "valid"], [[1e3, 1e3], "mapped", [1001]], [[1001, 1001], "valid"], [[1002, 1002], "mapped", [1003]], [[1003, 1003], "valid"], [[1004, 1004], "mapped", [1005]], [[1005, 1005], "valid"], [[1006, 1006], "mapped", [1007]], [[1007, 1007], "valid"], [[1008, 1008], "mapped", [954]], [[1009, 1009], "mapped", [961]], [[1010, 1010], "mapped", [963]], [[1011, 1011], "valid"], [[1012, 1012], "mapped", [952]], [[1013, 1013], "mapped", [949]], [[1014, 1014], "valid", [], "NV8"], [[1015, 1015], "mapped", [1016]], [[1016, 1016], "valid"], [[1017, 1017], "mapped", [963]], [[1018, 1018], "mapped", [1019]], [[1019, 1019], "valid"], [[1020, 1020], "valid"], [[1021, 1021], "mapped", [891]], [[1022, 1022], "mapped", [892]], [[1023, 1023], "mapped", [893]], [[1024, 1024], "mapped", [1104]], [[1025, 1025], "mapped", [1105]], [[1026, 1026], "mapped", [1106]], [[1027, 1027], "mapped", [1107]], [[1028, 1028], "mapped", [1108]], [[1029, 1029], "mapped", [1109]], [[1030, 1030], "mapped", [1110]], [[1031, 1031], "mapped", [1111]], [[1032, 1032], "mapped", [1112]], [[1033, 1033], "mapped", [1113]], [[1034, 1034], "mapped", [1114]], [[1035, 1035], "mapped", [1115]], [[1036, 1036], "mapped", [1116]], [[1037, 1037], "mapped", [1117]], [[1038, 1038], "mapped", [1118]], [[1039, 1039], "mapped", [1119]], [[1040, 1040], "mapped", [1072]], [[1041, 1041], "mapped", [1073]], [[1042, 1042], "mapped", [1074]], [[1043, 1043], "mapped", [1075]], [[1044, 1044], "mapped", [1076]], [[1045, 1045], "mapped", [1077]], [[1046, 1046], "mapped", [1078]], [[1047, 1047], "mapped", [1079]], [[1048, 1048], "mapped", [1080]], [[1049, 1049], "mapped", [1081]], [[1050, 1050], "mapped", [1082]], [[1051, 1051], "mapped", [1083]], [[1052, 1052], "mapped", [1084]], [[1053, 1053], "mapped", [1085]], [[1054, 1054], "mapped", [1086]], [[1055, 1055], "mapped", [1087]], [[1056, 1056], "mapped", [1088]], [[1057, 1057], "mapped", [1089]], [[1058, 1058], "mapped", [1090]], [[1059, 1059], "mapped", [1091]], [[1060, 1060], "mapped", [1092]], [[1061, 1061], "mapped", [1093]], [[1062, 1062], "mapped", [1094]], [[1063, 1063], "mapped", [1095]], [[1064, 1064], "mapped", [1096]], [[1065, 1065], "mapped", [1097]], [[1066, 1066], "mapped", [1098]], [[1067, 1067], "mapped", [1099]], [[1068, 1068], "mapped", [1100]], [[1069, 1069], "mapped", [1101]], [[1070, 1070], "mapped", [1102]], [[1071, 1071], "mapped", [1103]], [[1072, 1103], "valid"], [[1104, 1104], "valid"], [[1105, 1116], "valid"], [[1117, 1117], "valid"], [[1118, 1119], "valid"], [[1120, 1120], "mapped", [1121]], [[1121, 1121], "valid"], [[1122, 1122], "mapped", [1123]], [[1123, 1123], "valid"], [[1124, 1124], "mapped", [1125]], [[1125, 1125], "valid"], [[1126, 1126], "mapped", [1127]], [[1127, 1127], "valid"], [[1128, 1128], "mapped", [1129]], [[1129, 1129], "valid"], [[1130, 1130], "mapped", [1131]], [[1131, 1131], "valid"], [[1132, 1132], "mapped", [1133]], [[1133, 1133], "valid"], [[1134, 1134], "mapped", [1135]], [[1135, 1135], "valid"], [[1136, 1136], "mapped", [1137]], [[1137, 1137], "valid"], [[1138, 1138], "mapped", [1139]], [[1139, 1139], "valid"], [[1140, 1140], "mapped", [1141]], [[1141, 1141], "valid"], [[1142, 1142], "mapped", [1143]], [[1143, 1143], "valid"], [[1144, 1144], "mapped", [1145]], [[1145, 1145], "valid"], [[1146, 1146], "mapped", [1147]], [[1147, 1147], "valid"], [[1148, 1148], "mapped", [1149]], [[1149, 1149], "valid"], [[1150, 1150], "mapped", [1151]], [[1151, 1151], "valid"], [[1152, 1152], "mapped", [1153]], [[1153, 1153], "valid"], [[1154, 1154], "valid", [], "NV8"], [[1155, 1158], "valid"], [[1159, 1159], "valid"], [[1160, 1161], "valid", [], "NV8"], [[1162, 1162], "mapped", [1163]], [[1163, 1163], "valid"], [[1164, 1164], "mapped", [1165]], [[1165, 1165], "valid"], [[1166, 1166], "mapped", [1167]], [[1167, 1167], "valid"], [[1168, 1168], "mapped", [1169]], [[1169, 1169], "valid"], [[1170, 1170], "mapped", [1171]], [[1171, 1171], "valid"], [[1172, 1172], "mapped", [1173]], [[1173, 1173], "valid"], [[1174, 1174], "mapped", [1175]], [[1175, 1175], "valid"], [[1176, 1176], "mapped", [1177]], [[1177, 1177], "valid"], [[1178, 1178], "mapped", [1179]], [[1179, 1179], "valid"], [[1180, 1180], "mapped", [1181]], [[1181, 1181], "valid"], [[1182, 1182], "mapped", [1183]], [[1183, 1183], "valid"], [[1184, 1184], "mapped", [1185]], [[1185, 1185], "valid"], [[1186, 1186], "mapped", [1187]], [[1187, 1187], "valid"], [[1188, 1188], "mapped", [1189]], [[1189, 1189], "valid"], [[1190, 1190], "mapped", [1191]], [[1191, 1191], "valid"], [[1192, 1192], "mapped", [1193]], [[1193, 1193], "valid"], [[1194, 1194], "mapped", [1195]], [[1195, 1195], "valid"], [[1196, 1196], "mapped", [1197]], [[1197, 1197], "valid"], [[1198, 1198], "mapped", [1199]], [[1199, 1199], "valid"], [[1200, 1200], "mapped", [1201]], [[1201, 1201], "valid"], [[1202, 1202], "mapped", [1203]], [[1203, 1203], "valid"], [[1204, 1204], "mapped", [1205]], [[1205, 1205], "valid"], [[1206, 1206], "mapped", [1207]], [[1207, 1207], "valid"], [[1208, 1208], "mapped", [1209]], [[1209, 1209], "valid"], [[1210, 1210], "mapped", [1211]], [[1211, 1211], "valid"], [[1212, 1212], "mapped", [1213]], [[1213, 1213], "valid"], [[1214, 1214], "mapped", [1215]], [[1215, 1215], "valid"], [[1216, 1216], "disallowed"], [[1217, 1217], "mapped", [1218]], [[1218, 1218], "valid"], [[1219, 1219], "mapped", [1220]], [[1220, 1220], "valid"], [[1221, 1221], "mapped", [1222]], [[1222, 1222], "valid"], [[1223, 1223], "mapped", [1224]], [[1224, 1224], "valid"], [[1225, 1225], "mapped", [1226]], [[1226, 1226], "valid"], [[1227, 1227], "mapped", [1228]], [[1228, 1228], "valid"], [[1229, 1229], "mapped", [1230]], [[1230, 1230], "valid"], [[1231, 1231], "valid"], [[1232, 1232], "mapped", [1233]], [[1233, 1233], "valid"], [[1234, 1234], "mapped", [1235]], [[1235, 1235], "valid"], [[1236, 1236], "mapped", [1237]], [[1237, 1237], "valid"], [[1238, 1238], "mapped", [1239]], [[1239, 1239], "valid"], [[1240, 1240], "mapped", [1241]], [[1241, 1241], "valid"], [[1242, 1242], "mapped", [1243]], [[1243, 1243], "valid"], [[1244, 1244], "mapped", [1245]], [[1245, 1245], "valid"], [[1246, 1246], "mapped", [1247]], [[1247, 1247], "valid"], [[1248, 1248], "mapped", [1249]], [[1249, 1249], "valid"], [[1250, 1250], "mapped", [1251]], [[1251, 1251], "valid"], [[1252, 1252], "mapped", [1253]], [[1253, 1253], "valid"], [[1254, 1254], "mapped", [1255]], [[1255, 1255], "valid"], [[1256, 1256], "mapped", [1257]], [[1257, 1257], "valid"], [[1258, 1258], "mapped", [1259]], [[1259, 1259], "valid"], [[1260, 1260], "mapped", [1261]], [[1261, 1261], "valid"], [[1262, 1262], "mapped", [1263]], [[1263, 1263], "valid"], [[1264, 1264], "mapped", [1265]], [[1265, 1265], "valid"], [[1266, 1266], "mapped", [1267]], [[1267, 1267], "valid"], [[1268, 1268], "mapped", [1269]], [[1269, 1269], "valid"], [[1270, 1270], "mapped", [1271]], [[1271, 1271], "valid"], [[1272, 1272], "mapped", [1273]], [[1273, 1273], "valid"], [[1274, 1274], "mapped", [1275]], [[1275, 1275], "valid"], [[1276, 1276], "mapped", [1277]], [[1277, 1277], "valid"], [[1278, 1278], "mapped", [1279]], [[1279, 1279], "valid"], [[1280, 1280], "mapped", [1281]], [[1281, 1281], "valid"], [[1282, 1282], "mapped", [1283]], [[1283, 1283], "valid"], [[1284, 1284], "mapped", [1285]], [[1285, 1285], "valid"], [[1286, 1286], "mapped", [1287]], [[1287, 1287], "valid"], [[1288, 1288], "mapped", [1289]], [[1289, 1289], "valid"], [[1290, 1290], "mapped", [1291]], [[1291, 1291], "valid"], [[1292, 1292], "mapped", [1293]], [[1293, 1293], "valid"], [[1294, 1294], "mapped", [1295]], [[1295, 1295], "valid"], [[1296, 1296], "mapped", [1297]], [[1297, 1297], "valid"], [[1298, 1298], "mapped", [1299]], [[1299, 1299], "valid"], [[1300, 1300], "mapped", [1301]], [[1301, 1301], "valid"], [[1302, 1302], "mapped", [1303]], [[1303, 1303], "valid"], [[1304, 1304], "mapped", [1305]], [[1305, 1305], "valid"], [[1306, 1306], "mapped", [1307]], [[1307, 1307], "valid"], [[1308, 1308], "mapped", [1309]], [[1309, 1309], "valid"], [[1310, 1310], "mapped", [1311]], [[1311, 1311], "valid"], [[1312, 1312], "mapped", [1313]], [[1313, 1313], "valid"], [[1314, 1314], "mapped", [1315]], [[1315, 1315], "valid"], [[1316, 1316], "mapped", [1317]], [[1317, 1317], "valid"], [[1318, 1318], "mapped", [1319]], [[1319, 1319], "valid"], [[1320, 1320], "mapped", [1321]], [[1321, 1321], "valid"], [[1322, 1322], "mapped", [1323]], [[1323, 1323], "valid"], [[1324, 1324], "mapped", [1325]], [[1325, 1325], "valid"], [[1326, 1326], "mapped", [1327]], [[1327, 1327], "valid"], [[1328, 1328], "disallowed"], [[1329, 1329], "mapped", [1377]], [[1330, 1330], "mapped", [1378]], [[1331, 1331], "mapped", [1379]], [[1332, 1332], "mapped", [1380]], [[1333, 1333], "mapped", [1381]], [[1334, 1334], "mapped", [1382]], [[1335, 1335], "mapped", [1383]], [[1336, 1336], "mapped", [1384]], [[1337, 1337], "mapped", [1385]], [[1338, 1338], "mapped", [1386]], [[1339, 1339], "mapped", [1387]], [[1340, 1340], "mapped", [1388]], [[1341, 1341], "mapped", [1389]], [[1342, 1342], "mapped", [1390]], [[1343, 1343], "mapped", [1391]], [[1344, 1344], "mapped", [1392]], [[1345, 1345], "mapped", [1393]], [[1346, 1346], "mapped", [1394]], [[1347, 1347], "mapped", [1395]], [[1348, 1348], "mapped", [1396]], [[1349, 1349], "mapped", [1397]], [[1350, 1350], "mapped", [1398]], [[1351, 1351], "mapped", [1399]], [[1352, 1352], "mapped", [1400]], [[1353, 1353], "mapped", [1401]], [[1354, 1354], "mapped", [1402]], [[1355, 1355], "mapped", [1403]], [[1356, 1356], "mapped", [1404]], [[1357, 1357], "mapped", [1405]], [[1358, 1358], "mapped", [1406]], [[1359, 1359], "mapped", [1407]], [[1360, 1360], "mapped", [1408]], [[1361, 1361], "mapped", [1409]], [[1362, 1362], "mapped", [1410]], [[1363, 1363], "mapped", [1411]], [[1364, 1364], "mapped", [1412]], [[1365, 1365], "mapped", [1413]], [[1366, 1366], "mapped", [1414]], [[1367, 1368], "disallowed"], [[1369, 1369], "valid"], [[1370, 1375], "valid", [], "NV8"], [[1376, 1376], "disallowed"], [[1377, 1414], "valid"], [[1415, 1415], "mapped", [1381, 1410]], [[1416, 1416], "disallowed"], [[1417, 1417], "valid", [], "NV8"], [[1418, 1418], "valid", [], "NV8"], [[1419, 1420], "disallowed"], [[1421, 1422], "valid", [], "NV8"], [[1423, 1423], "valid", [], "NV8"], [[1424, 1424], "disallowed"], [[1425, 1441], "valid"], [[1442, 1442], "valid"], [[1443, 1455], "valid"], [[1456, 1465], "valid"], [[1466, 1466], "valid"], [[1467, 1469], "valid"], [[1470, 1470], "valid", [], "NV8"], [[1471, 1471], "valid"], [[1472, 1472], "valid", [], "NV8"], [[1473, 1474], "valid"], [[1475, 1475], "valid", [], "NV8"], [[1476, 1476], "valid"], [[1477, 1477], "valid"], [[1478, 1478], "valid", [], "NV8"], [[1479, 1479], "valid"], [[1480, 1487], "disallowed"], [[1488, 1514], "valid"], [[1515, 1519], "disallowed"], [[1520, 1524], "valid"], [[1525, 1535], "disallowed"], [[1536, 1539], "disallowed"], [[1540, 1540], "disallowed"], [[1541, 1541], "disallowed"], [[1542, 1546], "valid", [], "NV8"], [[1547, 1547], "valid", [], "NV8"], [[1548, 1548], "valid", [], "NV8"], [[1549, 1551], "valid", [], "NV8"], [[1552, 1557], "valid"], [[1558, 1562], "valid"], [[1563, 1563], "valid", [], "NV8"], [[1564, 1564], "disallowed"], [[1565, 1565], "disallowed"], [[1566, 1566], "valid", [], "NV8"], [[1567, 1567], "valid", [], "NV8"], [[1568, 1568], "valid"], [[1569, 1594], "valid"], [[1595, 1599], "valid"], [[1600, 1600], "valid", [], "NV8"], [[1601, 1618], "valid"], [[1619, 1621], "valid"], [[1622, 1624], "valid"], [[1625, 1630], "valid"], [[1631, 1631], "valid"], [[1632, 1641], "valid"], [[1642, 1645], "valid", [], "NV8"], [[1646, 1647], "valid"], [[1648, 1652], "valid"], [[1653, 1653], "mapped", [1575, 1652]], [[1654, 1654], "mapped", [1608, 1652]], [[1655, 1655], "mapped", [1735, 1652]], [[1656, 1656], "mapped", [1610, 1652]], [[1657, 1719], "valid"], [[1720, 1721], "valid"], [[1722, 1726], "valid"], [[1727, 1727], "valid"], [[1728, 1742], "valid"], [[1743, 1743], "valid"], [[1744, 1747], "valid"], [[1748, 1748], "valid", [], "NV8"], [[1749, 1756], "valid"], [[1757, 1757], "disallowed"], [[1758, 1758], "valid", [], "NV8"], [[1759, 1768], "valid"], [[1769, 1769], "valid", [], "NV8"], [[1770, 1773], "valid"], [[1774, 1775], "valid"], [[1776, 1785], "valid"], [[1786, 1790], "valid"], [[1791, 1791], "valid"], [[1792, 1805], "valid", [], "NV8"], [[1806, 1806], "disallowed"], [[1807, 1807], "disallowed"], [[1808, 1836], "valid"], [[1837, 1839], "valid"], [[1840, 1866], "valid"], [[1867, 1868], "disallowed"], [[1869, 1871], "valid"], [[1872, 1901], "valid"], [[1902, 1919], "valid"], [[1920, 1968], "valid"], [[1969, 1969], "valid"], [[1970, 1983], "disallowed"], [[1984, 2037], "valid"], [[2038, 2042], "valid", [], "NV8"], [[2043, 2047], "disallowed"], [[2048, 2093], "valid"], [[2094, 2095], "disallowed"], [[2096, 2110], "valid", [], "NV8"], [[2111, 2111], "disallowed"], [[2112, 2139], "valid"], [[2140, 2141], "disallowed"], [[2142, 2142], "valid", [], "NV8"], [[2143, 2207], "disallowed"], [[2208, 2208], "valid"], [[2209, 2209], "valid"], [[2210, 2220], "valid"], [[2221, 2226], "valid"], [[2227, 2228], "valid"], [[2229, 2274], "disallowed"], [[2275, 2275], "valid"], [[2276, 2302], "valid"], [[2303, 2303], "valid"], [[2304, 2304], "valid"], [[2305, 2307], "valid"], [[2308, 2308], "valid"], [[2309, 2361], "valid"], [[2362, 2363], "valid"], [[2364, 2381], "valid"], [[2382, 2382], "valid"], [[2383, 2383], "valid"], [[2384, 2388], "valid"], [[2389, 2389], "valid"], [[2390, 2391], "valid"], [[2392, 2392], "mapped", [2325, 2364]], [[2393, 2393], "mapped", [2326, 2364]], [[2394, 2394], "mapped", [2327, 2364]], [[2395, 2395], "mapped", [2332, 2364]], [[2396, 2396], "mapped", [2337, 2364]], [[2397, 2397], "mapped", [2338, 2364]], [[2398, 2398], "mapped", [2347, 2364]], [[2399, 2399], "mapped", [2351, 2364]], [[2400, 2403], "valid"], [[2404, 2405], "valid", [], "NV8"], [[2406, 2415], "valid"], [[2416, 2416], "valid", [], "NV8"], [[2417, 2418], "valid"], [[2419, 2423], "valid"], [[2424, 2424], "valid"], [[2425, 2426], "valid"], [[2427, 2428], "valid"], [[2429, 2429], "valid"], [[2430, 2431], "valid"], [[2432, 2432], "valid"], [[2433, 2435], "valid"], [[2436, 2436], "disallowed"], [[2437, 2444], "valid"], [[2445, 2446], "disallowed"], [[2447, 2448], "valid"], [[2449, 2450], "disallowed"], [[2451, 2472], "valid"], [[2473, 2473], "disallowed"], [[2474, 2480], "valid"], [[2481, 2481], "disallowed"], [[2482, 2482], "valid"], [[2483, 2485], "disallowed"], [[2486, 2489], "valid"], [[2490, 2491], "disallowed"], [[2492, 2492], "valid"], [[2493, 2493], "valid"], [[2494, 2500], "valid"], [[2501, 2502], "disallowed"], [[2503, 2504], "valid"], [[2505, 2506], "disallowed"], [[2507, 2509], "valid"], [[2510, 2510], "valid"], [[2511, 2518], "disallowed"], [[2519, 2519], "valid"], [[2520, 2523], "disallowed"], [[2524, 2524], "mapped", [2465, 2492]], [[2525, 2525], "mapped", [2466, 2492]], [[2526, 2526], "disallowed"], [[2527, 2527], "mapped", [2479, 2492]], [[2528, 2531], "valid"], [[2532, 2533], "disallowed"], [[2534, 2545], "valid"], [[2546, 2554], "valid", [], "NV8"], [[2555, 2555], "valid", [], "NV8"], [[2556, 2560], "disallowed"], [[2561, 2561], "valid"], [[2562, 2562], "valid"], [[2563, 2563], "valid"], [[2564, 2564], "disallowed"], [[2565, 2570], "valid"], [[2571, 2574], "disallowed"], [[2575, 2576], "valid"], [[2577, 2578], "disallowed"], [[2579, 2600], "valid"], [[2601, 2601], "disallowed"], [[2602, 2608], "valid"], [[2609, 2609], "disallowed"], [[2610, 2610], "valid"], [[2611, 2611], "mapped", [2610, 2620]], [[2612, 2612], "disallowed"], [[2613, 2613], "valid"], [[2614, 2614], "mapped", [2616, 2620]], [[2615, 2615], "disallowed"], [[2616, 2617], "valid"], [[2618, 2619], "disallowed"], [[2620, 2620], "valid"], [[2621, 2621], "disallowed"], [[2622, 2626], "valid"], [[2627, 2630], "disallowed"], [[2631, 2632], "valid"], [[2633, 2634], "disallowed"], [[2635, 2637], "valid"], [[2638, 2640], "disallowed"], [[2641, 2641], "valid"], [[2642, 2648], "disallowed"], [[2649, 2649], "mapped", [2582, 2620]], [[2650, 2650], "mapped", [2583, 2620]], [[2651, 2651], "mapped", [2588, 2620]], [[2652, 2652], "valid"], [[2653, 2653], "disallowed"], [[2654, 2654], "mapped", [2603, 2620]], [[2655, 2661], "disallowed"], [[2662, 2676], "valid"], [[2677, 2677], "valid"], [[2678, 2688], "disallowed"], [[2689, 2691], "valid"], [[2692, 2692], "disallowed"], [[2693, 2699], "valid"], [[2700, 2700], "valid"], [[2701, 2701], "valid"], [[2702, 2702], "disallowed"], [[2703, 2705], "valid"], [[2706, 2706], "disallowed"], [[2707, 2728], "valid"], [[2729, 2729], "disallowed"], [[2730, 2736], "valid"], [[2737, 2737], "disallowed"], [[2738, 2739], "valid"], [[2740, 2740], "disallowed"], [[2741, 2745], "valid"], [[2746, 2747], "disallowed"], [[2748, 2757], "valid"], [[2758, 2758], "disallowed"], [[2759, 2761], "valid"], [[2762, 2762], "disallowed"], [[2763, 2765], "valid"], [[2766, 2767], "disallowed"], [[2768, 2768], "valid"], [[2769, 2783], "disallowed"], [[2784, 2784], "valid"], [[2785, 2787], "valid"], [[2788, 2789], "disallowed"], [[2790, 2799], "valid"], [[2800, 2800], "valid", [], "NV8"], [[2801, 2801], "valid", [], "NV8"], [[2802, 2808], "disallowed"], [[2809, 2809], "valid"], [[2810, 2816], "disallowed"], [[2817, 2819], "valid"], [[2820, 2820], "disallowed"], [[2821, 2828], "valid"], [[2829, 2830], "disallowed"], [[2831, 2832], "valid"], [[2833, 2834], "disallowed"], [[2835, 2856], "valid"], [[2857, 2857], "disallowed"], [[2858, 2864], "valid"], [[2865, 2865], "disallowed"], [[2866, 2867], "valid"], [[2868, 2868], "disallowed"], [[2869, 2869], "valid"], [[2870, 2873], "valid"], [[2874, 2875], "disallowed"], [[2876, 2883], "valid"], [[2884, 2884], "valid"], [[2885, 2886], "disallowed"], [[2887, 2888], "valid"], [[2889, 2890], "disallowed"], [[2891, 2893], "valid"], [[2894, 2901], "disallowed"], [[2902, 2903], "valid"], [[2904, 2907], "disallowed"], [[2908, 2908], "mapped", [2849, 2876]], [[2909, 2909], "mapped", [2850, 2876]], [[2910, 2910], "disallowed"], [[2911, 2913], "valid"], [[2914, 2915], "valid"], [[2916, 2917], "disallowed"], [[2918, 2927], "valid"], [[2928, 2928], "valid", [], "NV8"], [[2929, 2929], "valid"], [[2930, 2935], "valid", [], "NV8"], [[2936, 2945], "disallowed"], [[2946, 2947], "valid"], [[2948, 2948], "disallowed"], [[2949, 2954], "valid"], [[2955, 2957], "disallowed"], [[2958, 2960], "valid"], [[2961, 2961], "disallowed"], [[2962, 2965], "valid"], [[2966, 2968], "disallowed"], [[2969, 2970], "valid"], [[2971, 2971], "disallowed"], [[2972, 2972], "valid"], [[2973, 2973], "disallowed"], [[2974, 2975], "valid"], [[2976, 2978], "disallowed"], [[2979, 2980], "valid"], [[2981, 2983], "disallowed"], [[2984, 2986], "valid"], [[2987, 2989], "disallowed"], [[2990, 2997], "valid"], [[2998, 2998], "valid"], [[2999, 3001], "valid"], [[3002, 3005], "disallowed"], [[3006, 3010], "valid"], [[3011, 3013], "disallowed"], [[3014, 3016], "valid"], [[3017, 3017], "disallowed"], [[3018, 3021], "valid"], [[3022, 3023], "disallowed"], [[3024, 3024], "valid"], [[3025, 3030], "disallowed"], [[3031, 3031], "valid"], [[3032, 3045], "disallowed"], [[3046, 3046], "valid"], [[3047, 3055], "valid"], [[3056, 3058], "valid", [], "NV8"], [[3059, 3066], "valid", [], "NV8"], [[3067, 3071], "disallowed"], [[3072, 3072], "valid"], [[3073, 3075], "valid"], [[3076, 3076], "disallowed"], [[3077, 3084], "valid"], [[3085, 3085], "disallowed"], [[3086, 3088], "valid"], [[3089, 3089], "disallowed"], [[3090, 3112], "valid"], [[3113, 3113], "disallowed"], [[3114, 3123], "valid"], [[3124, 3124], "valid"], [[3125, 3129], "valid"], [[3130, 3132], "disallowed"], [[3133, 3133], "valid"], [[3134, 3140], "valid"], [[3141, 3141], "disallowed"], [[3142, 3144], "valid"], [[3145, 3145], "disallowed"], [[3146, 3149], "valid"], [[3150, 3156], "disallowed"], [[3157, 3158], "valid"], [[3159, 3159], "disallowed"], [[3160, 3161], "valid"], [[3162, 3162], "valid"], [[3163, 3167], "disallowed"], [[3168, 3169], "valid"], [[3170, 3171], "valid"], [[3172, 3173], "disallowed"], [[3174, 3183], "valid"], [[3184, 3191], "disallowed"], [[3192, 3199], "valid", [], "NV8"], [[3200, 3200], "disallowed"], [[3201, 3201], "valid"], [[3202, 3203], "valid"], [[3204, 3204], "disallowed"], [[3205, 3212], "valid"], [[3213, 3213], "disallowed"], [[3214, 3216], "valid"], [[3217, 3217], "disallowed"], [[3218, 3240], "valid"], [[3241, 3241], "disallowed"], [[3242, 3251], "valid"], [[3252, 3252], "disallowed"], [[3253, 3257], "valid"], [[3258, 3259], "disallowed"], [[3260, 3261], "valid"], [[3262, 3268], "valid"], [[3269, 3269], "disallowed"], [[3270, 3272], "valid"], [[3273, 3273], "disallowed"], [[3274, 3277], "valid"], [[3278, 3284], "disallowed"], [[3285, 3286], "valid"], [[3287, 3293], "disallowed"], [[3294, 3294], "valid"], [[3295, 3295], "disallowed"], [[3296, 3297], "valid"], [[3298, 3299], "valid"], [[3300, 3301], "disallowed"], [[3302, 3311], "valid"], [[3312, 3312], "disallowed"], [[3313, 3314], "valid"], [[3315, 3328], "disallowed"], [[3329, 3329], "valid"], [[3330, 3331], "valid"], [[3332, 3332], "disallowed"], [[3333, 3340], "valid"], [[3341, 3341], "disallowed"], [[3342, 3344], "valid"], [[3345, 3345], "disallowed"], [[3346, 3368], "valid"], [[3369, 3369], "valid"], [[3370, 3385], "valid"], [[3386, 3386], "valid"], [[3387, 3388], "disallowed"], [[3389, 3389], "valid"], [[3390, 3395], "valid"], [[3396, 3396], "valid"], [[3397, 3397], "disallowed"], [[3398, 3400], "valid"], [[3401, 3401], "disallowed"], [[3402, 3405], "valid"], [[3406, 3406], "valid"], [[3407, 3414], "disallowed"], [[3415, 3415], "valid"], [[3416, 3422], "disallowed"], [[3423, 3423], "valid"], [[3424, 3425], "valid"], [[3426, 3427], "valid"], [[3428, 3429], "disallowed"], [[3430, 3439], "valid"], [[3440, 3445], "valid", [], "NV8"], [[3446, 3448], "disallowed"], [[3449, 3449], "valid", [], "NV8"], [[3450, 3455], "valid"], [[3456, 3457], "disallowed"], [[3458, 3459], "valid"], [[3460, 3460], "disallowed"], [[3461, 3478], "valid"], [[3479, 3481], "disallowed"], [[3482, 3505], "valid"], [[3506, 3506], "disallowed"], [[3507, 3515], "valid"], [[3516, 3516], "disallowed"], [[3517, 3517], "valid"], [[3518, 3519], "disallowed"], [[3520, 3526], "valid"], [[3527, 3529], "disallowed"], [[3530, 3530], "valid"], [[3531, 3534], "disallowed"], [[3535, 3540], "valid"], [[3541, 3541], "disallowed"], [[3542, 3542], "valid"], [[3543, 3543], "disallowed"], [[3544, 3551], "valid"], [[3552, 3557], "disallowed"], [[3558, 3567], "valid"], [[3568, 3569], "disallowed"], [[3570, 3571], "valid"], [[3572, 3572], "valid", [], "NV8"], [[3573, 3584], "disallowed"], [[3585, 3634], "valid"], [[3635, 3635], "mapped", [3661, 3634]], [[3636, 3642], "valid"], [[3643, 3646], "disallowed"], [[3647, 3647], "valid", [], "NV8"], [[3648, 3662], "valid"], [[3663, 3663], "valid", [], "NV8"], [[3664, 3673], "valid"], [[3674, 3675], "valid", [], "NV8"], [[3676, 3712], "disallowed"], [[3713, 3714], "valid"], [[3715, 3715], "disallowed"], [[3716, 3716], "valid"], [[3717, 3718], "disallowed"], [[3719, 3720], "valid"], [[3721, 3721], "disallowed"], [[3722, 3722], "valid"], [[3723, 3724], "disallowed"], [[3725, 3725], "valid"], [[3726, 3731], "disallowed"], [[3732, 3735], "valid"], [[3736, 3736], "disallowed"], [[3737, 3743], "valid"], [[3744, 3744], "disallowed"], [[3745, 3747], "valid"], [[3748, 3748], "disallowed"], [[3749, 3749], "valid"], [[3750, 3750], "disallowed"], [[3751, 3751], "valid"], [[3752, 3753], "disallowed"], [[3754, 3755], "valid"], [[3756, 3756], "disallowed"], [[3757, 3762], "valid"], [[3763, 3763], "mapped", [3789, 3762]], [[3764, 3769], "valid"], [[3770, 3770], "disallowed"], [[3771, 3773], "valid"], [[3774, 3775], "disallowed"], [[3776, 3780], "valid"], [[3781, 3781], "disallowed"], [[3782, 3782], "valid"], [[3783, 3783], "disallowed"], [[3784, 3789], "valid"], [[3790, 3791], "disallowed"], [[3792, 3801], "valid"], [[3802, 3803], "disallowed"], [[3804, 3804], "mapped", [3755, 3737]], [[3805, 3805], "mapped", [3755, 3745]], [[3806, 3807], "valid"], [[3808, 3839], "disallowed"], [[3840, 3840], "valid"], [[3841, 3850], "valid", [], "NV8"], [[3851, 3851], "valid"], [[3852, 3852], "mapped", [3851]], [[3853, 3863], "valid", [], "NV8"], [[3864, 3865], "valid"], [[3866, 3871], "valid", [], "NV8"], [[3872, 3881], "valid"], [[3882, 3892], "valid", [], "NV8"], [[3893, 3893], "valid"], [[3894, 3894], "valid", [], "NV8"], [[3895, 3895], "valid"], [[3896, 3896], "valid", [], "NV8"], [[3897, 3897], "valid"], [[3898, 3901], "valid", [], "NV8"], [[3902, 3906], "valid"], [[3907, 3907], "mapped", [3906, 4023]], [[3908, 3911], "valid"], [[3912, 3912], "disallowed"], [[3913, 3916], "valid"], [[3917, 3917], "mapped", [3916, 4023]], [[3918, 3921], "valid"], [[3922, 3922], "mapped", [3921, 4023]], [[3923, 3926], "valid"], [[3927, 3927], "mapped", [3926, 4023]], [[3928, 3931], "valid"], [[3932, 3932], "mapped", [3931, 4023]], [[3933, 3944], "valid"], [[3945, 3945], "mapped", [3904, 4021]], [[3946, 3946], "valid"], [[3947, 3948], "valid"], [[3949, 3952], "disallowed"], [[3953, 3954], "valid"], [[3955, 3955], "mapped", [3953, 3954]], [[3956, 3956], "valid"], [[3957, 3957], "mapped", [3953, 3956]], [[3958, 3958], "mapped", [4018, 3968]], [[3959, 3959], "mapped", [4018, 3953, 3968]], [[3960, 3960], "mapped", [4019, 3968]], [[3961, 3961], "mapped", [4019, 3953, 3968]], [[3962, 3968], "valid"], [[3969, 3969], "mapped", [3953, 3968]], [[3970, 3972], "valid"], [[3973, 3973], "valid", [], "NV8"], [[3974, 3979], "valid"], [[3980, 3983], "valid"], [[3984, 3986], "valid"], [[3987, 3987], "mapped", [3986, 4023]], [[3988, 3989], "valid"], [[3990, 3990], "valid"], [[3991, 3991], "valid"], [[3992, 3992], "disallowed"], [[3993, 3996], "valid"], [[3997, 3997], "mapped", [3996, 4023]], [[3998, 4001], "valid"], [[4002, 4002], "mapped", [4001, 4023]], [[4003, 4006], "valid"], [[4007, 4007], "mapped", [4006, 4023]], [[4008, 4011], "valid"], [[4012, 4012], "mapped", [4011, 4023]], [[4013, 4013], "valid"], [[4014, 4016], "valid"], [[4017, 4023], "valid"], [[4024, 4024], "valid"], [[4025, 4025], "mapped", [3984, 4021]], [[4026, 4028], "valid"], [[4029, 4029], "disallowed"], [[4030, 4037], "valid", [], "NV8"], [[4038, 4038], "valid"], [[4039, 4044], "valid", [], "NV8"], [[4045, 4045], "disallowed"], [[4046, 4046], "valid", [], "NV8"], [[4047, 4047], "valid", [], "NV8"], [[4048, 4049], "valid", [], "NV8"], [[4050, 4052], "valid", [], "NV8"], [[4053, 4056], "valid", [], "NV8"], [[4057, 4058], "valid", [], "NV8"], [[4059, 4095], "disallowed"], [[4096, 4129], "valid"], [[4130, 4130], "valid"], [[4131, 4135], "valid"], [[4136, 4136], "valid"], [[4137, 4138], "valid"], [[4139, 4139], "valid"], [[4140, 4146], "valid"], [[4147, 4149], "valid"], [[4150, 4153], "valid"], [[4154, 4159], "valid"], [[4160, 4169], "valid"], [[4170, 4175], "valid", [], "NV8"], [[4176, 4185], "valid"], [[4186, 4249], "valid"], [[4250, 4253], "valid"], [[4254, 4255], "valid", [], "NV8"], [[4256, 4293], "disallowed"], [[4294, 4294], "disallowed"], [[4295, 4295], "mapped", [11559]], [[4296, 4300], "disallowed"], [[4301, 4301], "mapped", [11565]], [[4302, 4303], "disallowed"], [[4304, 4342], "valid"], [[4343, 4344], "valid"], [[4345, 4346], "valid"], [[4347, 4347], "valid", [], "NV8"], [[4348, 4348], "mapped", [4316]], [[4349, 4351], "valid"], [[4352, 4441], "valid", [], "NV8"], [[4442, 4446], "valid", [], "NV8"], [[4447, 4448], "disallowed"], [[4449, 4514], "valid", [], "NV8"], [[4515, 4519], "valid", [], "NV8"], [[4520, 4601], "valid", [], "NV8"], [[4602, 4607], "valid", [], "NV8"], [[4608, 4614], "valid"], [[4615, 4615], "valid"], [[4616, 4678], "valid"], [[4679, 4679], "valid"], [[4680, 4680], "valid"], [[4681, 4681], "disallowed"], [[4682, 4685], "valid"], [[4686, 4687], "disallowed"], [[4688, 4694], "valid"], [[4695, 4695], "disallowed"], [[4696, 4696], "valid"], [[4697, 4697], "disallowed"], [[4698, 4701], "valid"], [[4702, 4703], "disallowed"], [[4704, 4742], "valid"], [[4743, 4743], "valid"], [[4744, 4744], "valid"], [[4745, 4745], "disallowed"], [[4746, 4749], "valid"], [[4750, 4751], "disallowed"], [[4752, 4782], "valid"], [[4783, 4783], "valid"], [[4784, 4784], "valid"], [[4785, 4785], "disallowed"], [[4786, 4789], "valid"], [[4790, 4791], "disallowed"], [[4792, 4798], "valid"], [[4799, 4799], "disallowed"], [[4800, 4800], "valid"], [[4801, 4801], "disallowed"], [[4802, 4805], "valid"], [[4806, 4807], "disallowed"], [[4808, 4814], "valid"], [[4815, 4815], "valid"], [[4816, 4822], "valid"], [[4823, 4823], "disallowed"], [[4824, 4846], "valid"], [[4847, 4847], "valid"], [[4848, 4878], "valid"], [[4879, 4879], "valid"], [[4880, 4880], "valid"], [[4881, 4881], "disallowed"], [[4882, 4885], "valid"], [[4886, 4887], "disallowed"], [[4888, 4894], "valid"], [[4895, 4895], "valid"], [[4896, 4934], "valid"], [[4935, 4935], "valid"], [[4936, 4954], "valid"], [[4955, 4956], "disallowed"], [[4957, 4958], "valid"], [[4959, 4959], "valid"], [[4960, 4960], "valid", [], "NV8"], [[4961, 4988], "valid", [], "NV8"], [[4989, 4991], "disallowed"], [[4992, 5007], "valid"], [[5008, 5017], "valid", [], "NV8"], [[5018, 5023], "disallowed"], [[5024, 5108], "valid"], [[5109, 5109], "valid"], [[5110, 5111], "disallowed"], [[5112, 5112], "mapped", [5104]], [[5113, 5113], "mapped", [5105]], [[5114, 5114], "mapped", [5106]], [[5115, 5115], "mapped", [5107]], [[5116, 5116], "mapped", [5108]], [[5117, 5117], "mapped", [5109]], [[5118, 5119], "disallowed"], [[5120, 5120], "valid", [], "NV8"], [[5121, 5740], "valid"], [[5741, 5742], "valid", [], "NV8"], [[5743, 5750], "valid"], [[5751, 5759], "valid"], [[5760, 5760], "disallowed"], [[5761, 5786], "valid"], [[5787, 5788], "valid", [], "NV8"], [[5789, 5791], "disallowed"], [[5792, 5866], "valid"], [[5867, 5872], "valid", [], "NV8"], [[5873, 5880], "valid"], [[5881, 5887], "disallowed"], [[5888, 5900], "valid"], [[5901, 5901], "disallowed"], [[5902, 5908], "valid"], [[5909, 5919], "disallowed"], [[5920, 5940], "valid"], [[5941, 5942], "valid", [], "NV8"], [[5943, 5951], "disallowed"], [[5952, 5971], "valid"], [[5972, 5983], "disallowed"], [[5984, 5996], "valid"], [[5997, 5997], "disallowed"], [[5998, 6e3], "valid"], [[6001, 6001], "disallowed"], [[6002, 6003], "valid"], [[6004, 6015], "disallowed"], [[6016, 6067], "valid"], [[6068, 6069], "disallowed"], [[6070, 6099], "valid"], [[6100, 6102], "valid", [], "NV8"], [[6103, 6103], "valid"], [[6104, 6107], "valid", [], "NV8"], [[6108, 6108], "valid"], [[6109, 6109], "valid"], [[6110, 6111], "disallowed"], [[6112, 6121], "valid"], [[6122, 6127], "disallowed"], [[6128, 6137], "valid", [], "NV8"], [[6138, 6143], "disallowed"], [[6144, 6149], "valid", [], "NV8"], [[6150, 6150], "disallowed"], [[6151, 6154], "valid", [], "NV8"], [[6155, 6157], "ignored"], [[6158, 6158], "disallowed"], [[6159, 6159], "disallowed"], [[6160, 6169], "valid"], [[6170, 6175], "disallowed"], [[6176, 6263], "valid"], [[6264, 6271], "disallowed"], [[6272, 6313], "valid"], [[6314, 6314], "valid"], [[6315, 6319], "disallowed"], [[6320, 6389], "valid"], [[6390, 6399], "disallowed"], [[6400, 6428], "valid"], [[6429, 6430], "valid"], [[6431, 6431], "disallowed"], [[6432, 6443], "valid"], [[6444, 6447], "disallowed"], [[6448, 6459], "valid"], [[6460, 6463], "disallowed"], [[6464, 6464], "valid", [], "NV8"], [[6465, 6467], "disallowed"], [[6468, 6469], "valid", [], "NV8"], [[6470, 6509], "valid"], [[6510, 6511], "disallowed"], [[6512, 6516], "valid"], [[6517, 6527], "disallowed"], [[6528, 6569], "valid"], [[6570, 6571], "valid"], [[6572, 6575], "disallowed"], [[6576, 6601], "valid"], [[6602, 6607], "disallowed"], [[6608, 6617], "valid"], [[6618, 6618], "valid", [], "XV8"], [[6619, 6621], "disallowed"], [[6622, 6623], "valid", [], "NV8"], [[6624, 6655], "valid", [], "NV8"], [[6656, 6683], "valid"], [[6684, 6685], "disallowed"], [[6686, 6687], "valid", [], "NV8"], [[6688, 6750], "valid"], [[6751, 6751], "disallowed"], [[6752, 6780], "valid"], [[6781, 6782], "disallowed"], [[6783, 6793], "valid"], [[6794, 6799], "disallowed"], [[6800, 6809], "valid"], [[6810, 6815], "disallowed"], [[6816, 6822], "valid", [], "NV8"], [[6823, 6823], "valid"], [[6824, 6829], "valid", [], "NV8"], [[6830, 6831], "disallowed"], [[6832, 6845], "valid"], [[6846, 6846], "valid", [], "NV8"], [[6847, 6911], "disallowed"], [[6912, 6987], "valid"], [[6988, 6991], "disallowed"], [[6992, 7001], "valid"], [[7002, 7018], "valid", [], "NV8"], [[7019, 7027], "valid"], [[7028, 7036], "valid", [], "NV8"], [[7037, 7039], "disallowed"], [[7040, 7082], "valid"], [[7083, 7085], "valid"], [[7086, 7097], "valid"], [[7098, 7103], "valid"], [[7104, 7155], "valid"], [[7156, 7163], "disallowed"], [[7164, 7167], "valid", [], "NV8"], [[7168, 7223], "valid"], [[7224, 7226], "disallowed"], [[7227, 7231], "valid", [], "NV8"], [[7232, 7241], "valid"], [[7242, 7244], "disallowed"], [[7245, 7293], "valid"], [[7294, 7295], "valid", [], "NV8"], [[7296, 7359], "disallowed"], [[7360, 7367], "valid", [], "NV8"], [[7368, 7375], "disallowed"], [[7376, 7378], "valid"], [[7379, 7379], "valid", [], "NV8"], [[7380, 7410], "valid"], [[7411, 7414], "valid"], [[7415, 7415], "disallowed"], [[7416, 7417], "valid"], [[7418, 7423], "disallowed"], [[7424, 7467], "valid"], [[7468, 7468], "mapped", [97]], [[7469, 7469], "mapped", [230]], [[7470, 7470], "mapped", [98]], [[7471, 7471], "valid"], [[7472, 7472], "mapped", [100]], [[7473, 7473], "mapped", [101]], [[7474, 7474], "mapped", [477]], [[7475, 7475], "mapped", [103]], [[7476, 7476], "mapped", [104]], [[7477, 7477], "mapped", [105]], [[7478, 7478], "mapped", [106]], [[7479, 7479], "mapped", [107]], [[7480, 7480], "mapped", [108]], [[7481, 7481], "mapped", [109]], [[7482, 7482], "mapped", [110]], [[7483, 7483], "valid"], [[7484, 7484], "mapped", [111]], [[7485, 7485], "mapped", [547]], [[7486, 7486], "mapped", [112]], [[7487, 7487], "mapped", [114]], [[7488, 7488], "mapped", [116]], [[7489, 7489], "mapped", [117]], [[7490, 7490], "mapped", [119]], [[7491, 7491], "mapped", [97]], [[7492, 7492], "mapped", [592]], [[7493, 7493], "mapped", [593]], [[7494, 7494], "mapped", [7426]], [[7495, 7495], "mapped", [98]], [[7496, 7496], "mapped", [100]], [[7497, 7497], "mapped", [101]], [[7498, 7498], "mapped", [601]], [[7499, 7499], "mapped", [603]], [[7500, 7500], "mapped", [604]], [[7501, 7501], "mapped", [103]], [[7502, 7502], "valid"], [[7503, 7503], "mapped", [107]], [[7504, 7504], "mapped", [109]], [[7505, 7505], "mapped", [331]], [[7506, 7506], "mapped", [111]], [[7507, 7507], "mapped", [596]], [[7508, 7508], "mapped", [7446]], [[7509, 7509], "mapped", [7447]], [[7510, 7510], "mapped", [112]], [[7511, 7511], "mapped", [116]], [[7512, 7512], "mapped", [117]], [[7513, 7513], "mapped", [7453]], [[7514, 7514], "mapped", [623]], [[7515, 7515], "mapped", [118]], [[7516, 7516], "mapped", [7461]], [[7517, 7517], "mapped", [946]], [[7518, 7518], "mapped", [947]], [[7519, 7519], "mapped", [948]], [[7520, 7520], "mapped", [966]], [[7521, 7521], "mapped", [967]], [[7522, 7522], "mapped", [105]], [[7523, 7523], "mapped", [114]], [[7524, 7524], "mapped", [117]], [[7525, 7525], "mapped", [118]], [[7526, 7526], "mapped", [946]], [[7527, 7527], "mapped", [947]], [[7528, 7528], "mapped", [961]], [[7529, 7529], "mapped", [966]], [[7530, 7530], "mapped", [967]], [[7531, 7531], "valid"], [[7532, 7543], "valid"], [[7544, 7544], "mapped", [1085]], [[7545, 7578], "valid"], [[7579, 7579], "mapped", [594]], [[7580, 7580], "mapped", [99]], [[7581, 7581], "mapped", [597]], [[7582, 7582], "mapped", [240]], [[7583, 7583], "mapped", [604]], [[7584, 7584], "mapped", [102]], [[7585, 7585], "mapped", [607]], [[7586, 7586], "mapped", [609]], [[7587, 7587], "mapped", [613]], [[7588, 7588], "mapped", [616]], [[7589, 7589], "mapped", [617]], [[7590, 7590], "mapped", [618]], [[7591, 7591], "mapped", [7547]], [[7592, 7592], "mapped", [669]], [[7593, 7593], "mapped", [621]], [[7594, 7594], "mapped", [7557]], [[7595, 7595], "mapped", [671]], [[7596, 7596], "mapped", [625]], [[7597, 7597], "mapped", [624]], [[7598, 7598], "mapped", [626]], [[7599, 7599], "mapped", [627]], [[7600, 7600], "mapped", [628]], [[7601, 7601], "mapped", [629]], [[7602, 7602], "mapped", [632]], [[7603, 7603], "mapped", [642]], [[7604, 7604], "mapped", [643]], [[7605, 7605], "mapped", [427]], [[7606, 7606], "mapped", [649]], [[7607, 7607], "mapped", [650]], [[7608, 7608], "mapped", [7452]], [[7609, 7609], "mapped", [651]], [[7610, 7610], "mapped", [652]], [[7611, 7611], "mapped", [122]], [[7612, 7612], "mapped", [656]], [[7613, 7613], "mapped", [657]], [[7614, 7614], "mapped", [658]], [[7615, 7615], "mapped", [952]], [[7616, 7619], "valid"], [[7620, 7626], "valid"], [[7627, 7654], "valid"], [[7655, 7669], "valid"], [[7670, 7675], "disallowed"], [[7676, 7676], "valid"], [[7677, 7677], "valid"], [[7678, 7679], "valid"], [[7680, 7680], "mapped", [7681]], [[7681, 7681], "valid"], [[7682, 7682], "mapped", [7683]], [[7683, 7683], "valid"], [[7684, 7684], "mapped", [7685]], [[7685, 7685], "valid"], [[7686, 7686], "mapped", [7687]], [[7687, 7687], "valid"], [[7688, 7688], "mapped", [7689]], [[7689, 7689], "valid"], [[7690, 7690], "mapped", [7691]], [[7691, 7691], "valid"], [[7692, 7692], "mapped", [7693]], [[7693, 7693], "valid"], [[7694, 7694], "mapped", [7695]], [[7695, 7695], "valid"], [[7696, 7696], "mapped", [7697]], [[7697, 7697], "valid"], [[7698, 7698], "mapped", [7699]], [[7699, 7699], "valid"], [[7700, 7700], "mapped", [7701]], [[7701, 7701], "valid"], [[7702, 7702], "mapped", [7703]], [[7703, 7703], "valid"], [[7704, 7704], "mapped", [7705]], [[7705, 7705], "valid"], [[7706, 7706], "mapped", [7707]], [[7707, 7707], "valid"], [[7708, 7708], "mapped", [7709]], [[7709, 7709], "valid"], [[7710, 7710], "mapped", [7711]], [[7711, 7711], "valid"], [[7712, 7712], "mapped", [7713]], [[7713, 7713], "valid"], [[7714, 7714], "mapped", [7715]], [[7715, 7715], "valid"], [[7716, 7716], "mapped", [7717]], [[7717, 7717], "valid"], [[7718, 7718], "mapped", [7719]], [[7719, 7719], "valid"], [[7720, 7720], "mapped", [7721]], [[7721, 7721], "valid"], [[7722, 7722], "mapped", [7723]], [[7723, 7723], "valid"], [[7724, 7724], "mapped", [7725]], [[7725, 7725], "valid"], [[7726, 7726], "mapped", [7727]], [[7727, 7727], "valid"], [[7728, 7728], "mapped", [7729]], [[7729, 7729], "valid"], [[7730, 7730], "mapped", [7731]], [[7731, 7731], "valid"], [[7732, 7732], "mapped", [7733]], [[7733, 7733], "valid"], [[7734, 7734], "mapped", [7735]], [[7735, 7735], "valid"], [[7736, 7736], "mapped", [7737]], [[7737, 7737], "valid"], [[7738, 7738], "mapped", [7739]], [[7739, 7739], "valid"], [[7740, 7740], "mapped", [7741]], [[7741, 7741], "valid"], [[7742, 7742], "mapped", [7743]], [[7743, 7743], "valid"], [[7744, 7744], "mapped", [7745]], [[7745, 7745], "valid"], [[7746, 7746], "mapped", [7747]], [[7747, 7747], "valid"], [[7748, 7748], "mapped", [7749]], [[7749, 7749], "valid"], [[7750, 7750], "mapped", [7751]], [[7751, 7751], "valid"], [[7752, 7752], "mapped", [7753]], [[7753, 7753], "valid"], [[7754, 7754], "mapped", [7755]], [[7755, 7755], "valid"], [[7756, 7756], "mapped", [7757]], [[7757, 7757], "valid"], [[7758, 7758], "mapped", [7759]], [[7759, 7759], "valid"], [[7760, 7760], "mapped", [7761]], [[7761, 7761], "valid"], [[7762, 7762], "mapped", [7763]], [[7763, 7763], "valid"], [[7764, 7764], "mapped", [7765]], [[7765, 7765], "valid"], [[7766, 7766], "mapped", [7767]], [[7767, 7767], "valid"], [[7768, 7768], "mapped", [7769]], [[7769, 7769], "valid"], [[7770, 7770], "mapped", [7771]], [[7771, 7771], "valid"], [[7772, 7772], "mapped", [7773]], [[7773, 7773], "valid"], [[7774, 7774], "mapped", [7775]], [[7775, 7775], "valid"], [[7776, 7776], "mapped", [7777]], [[7777, 7777], "valid"], [[7778, 7778], "mapped", [7779]], [[7779, 7779], "valid"], [[7780, 7780], "mapped", [7781]], [[7781, 7781], "valid"], [[7782, 7782], "mapped", [7783]], [[7783, 7783], "valid"], [[7784, 7784], "mapped", [7785]], [[7785, 7785], "valid"], [[7786, 7786], "mapped", [7787]], [[7787, 7787], "valid"], [[7788, 7788], "mapped", [7789]], [[7789, 7789], "valid"], [[7790, 7790], "mapped", [7791]], [[7791, 7791], "valid"], [[7792, 7792], "mapped", [7793]], [[7793, 7793], "valid"], [[7794, 7794], "mapped", [7795]], [[7795, 7795], "valid"], [[7796, 7796], "mapped", [7797]], [[7797, 7797], "valid"], [[7798, 7798], "mapped", [7799]], [[7799, 7799], "valid"], [[7800, 7800], "mapped", [7801]], [[7801, 7801], "valid"], [[7802, 7802], "mapped", [7803]], [[7803, 7803], "valid"], [[7804, 7804], "mapped", [7805]], [[7805, 7805], "valid"], [[7806, 7806], "mapped", [7807]], [[7807, 7807], "valid"], [[7808, 7808], "mapped", [7809]], [[7809, 7809], "valid"], [[7810, 7810], "mapped", [7811]], [[7811, 7811], "valid"], [[7812, 7812], "mapped", [7813]], [[7813, 7813], "valid"], [[7814, 7814], "mapped", [7815]], [[7815, 7815], "valid"], [[7816, 7816], "mapped", [7817]], [[7817, 7817], "valid"], [[7818, 7818], "mapped", [7819]], [[7819, 7819], "valid"], [[7820, 7820], "mapped", [7821]], [[7821, 7821], "valid"], [[7822, 7822], "mapped", [7823]], [[7823, 7823], "valid"], [[7824, 7824], "mapped", [7825]], [[7825, 7825], "valid"], [[7826, 7826], "mapped", [7827]], [[7827, 7827], "valid"], [[7828, 7828], "mapped", [7829]], [[7829, 7833], "valid"], [[7834, 7834], "mapped", [97, 702]], [[7835, 7835], "mapped", [7777]], [[7836, 7837], "valid"], [[7838, 7838], "mapped", [115, 115]], [[7839, 7839], "valid"], [[7840, 7840], "mapped", [7841]], [[7841, 7841], "valid"], [[7842, 7842], "mapped", [7843]], [[7843, 7843], "valid"], [[7844, 7844], "mapped", [7845]], [[7845, 7845], "valid"], [[7846, 7846], "mapped", [7847]], [[7847, 7847], "valid"], [[7848, 7848], "mapped", [7849]], [[7849, 7849], "valid"], [[7850, 7850], "mapped", [7851]], [[7851, 7851], "valid"], [[7852, 7852], "mapped", [7853]], [[7853, 7853], "valid"], [[7854, 7854], "mapped", [7855]], [[7855, 7855], "valid"], [[7856, 7856], "mapped", [7857]], [[7857, 7857], "valid"], [[7858, 7858], "mapped", [7859]], [[7859, 7859], "valid"], [[7860, 7860], "mapped", [7861]], [[7861, 7861], "valid"], [[7862, 7862], "mapped", [7863]], [[7863, 7863], "valid"], [[7864, 7864], "mapped", [7865]], [[7865, 7865], "valid"], [[7866, 7866], "mapped", [7867]], [[7867, 7867], "valid"], [[7868, 7868], "mapped", [7869]], [[7869, 7869], "valid"], [[7870, 7870], "mapped", [7871]], [[7871, 7871], "valid"], [[7872, 7872], "mapped", [7873]], [[7873, 7873], "valid"], [[7874, 7874], "mapped", [7875]], [[7875, 7875], "valid"], [[7876, 7876], "mapped", [7877]], [[7877, 7877], "valid"], [[7878, 7878], "mapped", [7879]], [[7879, 7879], "valid"], [[7880, 7880], "mapped", [7881]], [[7881, 7881], "valid"], [[7882, 7882], "mapped", [7883]], [[7883, 7883], "valid"], [[7884, 7884], "mapped", [7885]], [[7885, 7885], "valid"], [[7886, 7886], "mapped", [7887]], [[7887, 7887], "valid"], [[7888, 7888], "mapped", [7889]], [[7889, 7889], "valid"], [[7890, 7890], "mapped", [7891]], [[7891, 7891], "valid"], [[7892, 7892], "mapped", [7893]], [[7893, 7893], "valid"], [[7894, 7894], "mapped", [7895]], [[7895, 7895], "valid"], [[7896, 7896], "mapped", [7897]], [[7897, 7897], "valid"], [[7898, 7898], "mapped", [7899]], [[7899, 7899], "valid"], [[7900, 7900], "mapped", [7901]], [[7901, 7901], "valid"], [[7902, 7902], "mapped", [7903]], [[7903, 7903], "valid"], [[7904, 7904], "mapped", [7905]], [[7905, 7905], "valid"], [[7906, 7906], "mapped", [7907]], [[7907, 7907], "valid"], [[7908, 7908], "mapped", [7909]], [[7909, 7909], "valid"], [[7910, 7910], "mapped", [7911]], [[7911, 7911], "valid"], [[7912, 7912], "mapped", [7913]], [[7913, 7913], "valid"], [[7914, 7914], "mapped", [7915]], [[7915, 7915], "valid"], [[7916, 7916], "mapped", [7917]], [[7917, 7917], "valid"], [[7918, 7918], "mapped", [7919]], [[7919, 7919], "valid"], [[7920, 7920], "mapped", [7921]], [[7921, 7921], "valid"], [[7922, 7922], "mapped", [7923]], [[7923, 7923], "valid"], [[7924, 7924], "mapped", [7925]], [[7925, 7925], "valid"], [[7926, 7926], "mapped", [7927]], [[7927, 7927], "valid"], [[7928, 7928], "mapped", [7929]], [[7929, 7929], "valid"], [[7930, 7930], "mapped", [7931]], [[7931, 7931], "valid"], [[7932, 7932], "mapped", [7933]], [[7933, 7933], "valid"], [[7934, 7934], "mapped", [7935]], [[7935, 7935], "valid"], [[7936, 7943], "valid"], [[7944, 7944], "mapped", [7936]], [[7945, 7945], "mapped", [7937]], [[7946, 7946], "mapped", [7938]], [[7947, 7947], "mapped", [7939]], [[7948, 7948], "mapped", [7940]], [[7949, 7949], "mapped", [7941]], [[7950, 7950], "mapped", [7942]], [[7951, 7951], "mapped", [7943]], [[7952, 7957], "valid"], [[7958, 7959], "disallowed"], [[7960, 7960], "mapped", [7952]], [[7961, 7961], "mapped", [7953]], [[7962, 7962], "mapped", [7954]], [[7963, 7963], "mapped", [7955]], [[7964, 7964], "mapped", [7956]], [[7965, 7965], "mapped", [7957]], [[7966, 7967], "disallowed"], [[7968, 7975], "valid"], [[7976, 7976], "mapped", [7968]], [[7977, 7977], "mapped", [7969]], [[7978, 7978], "mapped", [7970]], [[7979, 7979], "mapped", [7971]], [[7980, 7980], "mapped", [7972]], [[7981, 7981], "mapped", [7973]], [[7982, 7982], "mapped", [7974]], [[7983, 7983], "mapped", [7975]], [[7984, 7991], "valid"], [[7992, 7992], "mapped", [7984]], [[7993, 7993], "mapped", [7985]], [[7994, 7994], "mapped", [7986]], [[7995, 7995], "mapped", [7987]], [[7996, 7996], "mapped", [7988]], [[7997, 7997], "mapped", [7989]], [[7998, 7998], "mapped", [7990]], [[7999, 7999], "mapped", [7991]], [[8e3, 8005], "valid"], [[8006, 8007], "disallowed"], [[8008, 8008], "mapped", [8e3]], [[8009, 8009], "mapped", [8001]], [[8010, 8010], "mapped", [8002]], [[8011, 8011], "mapped", [8003]], [[8012, 8012], "mapped", [8004]], [[8013, 8013], "mapped", [8005]], [[8014, 8015], "disallowed"], [[8016, 8023], "valid"], [[8024, 8024], "disallowed"], [[8025, 8025], "mapped", [8017]], [[8026, 8026], "disallowed"], [[8027, 8027], "mapped", [8019]], [[8028, 8028], "disallowed"], [[8029, 8029], "mapped", [8021]], [[8030, 8030], "disallowed"], [[8031, 8031], "mapped", [8023]], [[8032, 8039], "valid"], [[8040, 8040], "mapped", [8032]], [[8041, 8041], "mapped", [8033]], [[8042, 8042], "mapped", [8034]], [[8043, 8043], "mapped", [8035]], [[8044, 8044], "mapped", [8036]], [[8045, 8045], "mapped", [8037]], [[8046, 8046], "mapped", [8038]], [[8047, 8047], "mapped", [8039]], [[8048, 8048], "valid"], [[8049, 8049], "mapped", [940]], [[8050, 8050], "valid"], [[8051, 8051], "mapped", [941]], [[8052, 8052], "valid"], [[8053, 8053], "mapped", [942]], [[8054, 8054], "valid"], [[8055, 8055], "mapped", [943]], [[8056, 8056], "valid"], [[8057, 8057], "mapped", [972]], [[8058, 8058], "valid"], [[8059, 8059], "mapped", [973]], [[8060, 8060], "valid"], [[8061, 8061], "mapped", [974]], [[8062, 8063], "disallowed"], [[8064, 8064], "mapped", [7936, 953]], [[8065, 8065], "mapped", [7937, 953]], [[8066, 8066], "mapped", [7938, 953]], [[8067, 8067], "mapped", [7939, 953]], [[8068, 8068], "mapped", [7940, 953]], [[8069, 8069], "mapped", [7941, 953]], [[8070, 8070], "mapped", [7942, 953]], [[8071, 8071], "mapped", [7943, 953]], [[8072, 8072], "mapped", [7936, 953]], [[8073, 8073], "mapped", [7937, 953]], [[8074, 8074], "mapped", [7938, 953]], [[8075, 8075], "mapped", [7939, 953]], [[8076, 8076], "mapped", [7940, 953]], [[8077, 8077], "mapped", [7941, 953]], [[8078, 8078], "mapped", [7942, 953]], [[8079, 8079], "mapped", [7943, 953]], [[8080, 8080], "mapped", [7968, 953]], [[8081, 8081], "mapped", [7969, 953]], [[8082, 8082], "mapped", [7970, 953]], [[8083, 8083], "mapped", [7971, 953]], [[8084, 8084], "mapped", [7972, 953]], [[8085, 8085], "mapped", [7973, 953]], [[8086, 8086], "mapped", [7974, 953]], [[8087, 8087], "mapped", [7975, 953]], [[8088, 8088], "mapped", [7968, 953]], [[8089, 8089], "mapped", [7969, 953]], [[8090, 8090], "mapped", [7970, 953]], [[8091, 8091], "mapped", [7971, 953]], [[8092, 8092], "mapped", [7972, 953]], [[8093, 8093], "mapped", [7973, 953]], [[8094, 8094], "mapped", [7974, 953]], [[8095, 8095], "mapped", [7975, 953]], [[8096, 8096], "mapped", [8032, 953]], [[8097, 8097], "mapped", [8033, 953]], [[8098, 8098], "mapped", [8034, 953]], [[8099, 8099], "mapped", [8035, 953]], [[8100, 8100], "mapped", [8036, 953]], [[8101, 8101], "mapped", [8037, 953]], [[8102, 8102], "mapped", [8038, 953]], [[8103, 8103], "mapped", [8039, 953]], [[8104, 8104], "mapped", [8032, 953]], [[8105, 8105], "mapped", [8033, 953]], [[8106, 8106], "mapped", [8034, 953]], [[8107, 8107], "mapped", [8035, 953]], [[8108, 8108], "mapped", [8036, 953]], [[8109, 8109], "mapped", [8037, 953]], [[8110, 8110], "mapped", [8038, 953]], [[8111, 8111], "mapped", [8039, 953]], [[8112, 8113], "valid"], [[8114, 8114], "mapped", [8048, 953]], [[8115, 8115], "mapped", [945, 953]], [[8116, 8116], "mapped", [940, 953]], [[8117, 8117], "disallowed"], [[8118, 8118], "valid"], [[8119, 8119], "mapped", [8118, 953]], [[8120, 8120], "mapped", [8112]], [[8121, 8121], "mapped", [8113]], [[8122, 8122], "mapped", [8048]], [[8123, 8123], "mapped", [940]], [[8124, 8124], "mapped", [945, 953]], [[8125, 8125], "disallowed_STD3_mapped", [32, 787]], [[8126, 8126], "mapped", [953]], [[8127, 8127], "disallowed_STD3_mapped", [32, 787]], [[8128, 8128], "disallowed_STD3_mapped", [32, 834]], [[8129, 8129], "disallowed_STD3_mapped", [32, 776, 834]], [[8130, 8130], "mapped", [8052, 953]], [[8131, 8131], "mapped", [951, 953]], [[8132, 8132], "mapped", [942, 953]], [[8133, 8133], "disallowed"], [[8134, 8134], "valid"], [[8135, 8135], "mapped", [8134, 953]], [[8136, 8136], "mapped", [8050]], [[8137, 8137], "mapped", [941]], [[8138, 8138], "mapped", [8052]], [[8139, 8139], "mapped", [942]], [[8140, 8140], "mapped", [951, 953]], [[8141, 8141], "disallowed_STD3_mapped", [32, 787, 768]], [[8142, 8142], "disallowed_STD3_mapped", [32, 787, 769]], [[8143, 8143], "disallowed_STD3_mapped", [32, 787, 834]], [[8144, 8146], "valid"], [[8147, 8147], "mapped", [912]], [[8148, 8149], "disallowed"], [[8150, 8151], "valid"], [[8152, 8152], "mapped", [8144]], [[8153, 8153], "mapped", [8145]], [[8154, 8154], "mapped", [8054]], [[8155, 8155], "mapped", [943]], [[8156, 8156], "disallowed"], [[8157, 8157], "disallowed_STD3_mapped", [32, 788, 768]], [[8158, 8158], "disallowed_STD3_mapped", [32, 788, 769]], [[8159, 8159], "disallowed_STD3_mapped", [32, 788, 834]], [[8160, 8162], "valid"], [[8163, 8163], "mapped", [944]], [[8164, 8167], "valid"], [[8168, 8168], "mapped", [8160]], [[8169, 8169], "mapped", [8161]], [[8170, 8170], "mapped", [8058]], [[8171, 8171], "mapped", [973]], [[8172, 8172], "mapped", [8165]], [[8173, 8173], "disallowed_STD3_mapped", [32, 776, 768]], [[8174, 8174], "disallowed_STD3_mapped", [32, 776, 769]], [[8175, 8175], "disallowed_STD3_mapped", [96]], [[8176, 8177], "disallowed"], [[8178, 8178], "mapped", [8060, 953]], [[8179, 8179], "mapped", [969, 953]], [[8180, 8180], "mapped", [974, 953]], [[8181, 8181], "disallowed"], [[8182, 8182], "valid"], [[8183, 8183], "mapped", [8182, 953]], [[8184, 8184], "mapped", [8056]], [[8185, 8185], "mapped", [972]], [[8186, 8186], "mapped", [8060]], [[8187, 8187], "mapped", [974]], [[8188, 8188], "mapped", [969, 953]], [[8189, 8189], "disallowed_STD3_mapped", [32, 769]], [[8190, 8190], "disallowed_STD3_mapped", [32, 788]], [[8191, 8191], "disallowed"], [[8192, 8202], "disallowed_STD3_mapped", [32]], [[8203, 8203], "ignored"], [[8204, 8205], "deviation", []], [[8206, 8207], "disallowed"], [[8208, 8208], "valid", [], "NV8"], [[8209, 8209], "mapped", [8208]], [[8210, 8214], "valid", [], "NV8"], [[8215, 8215], "disallowed_STD3_mapped", [32, 819]], [[8216, 8227], "valid", [], "NV8"], [[8228, 8230], "disallowed"], [[8231, 8231], "valid", [], "NV8"], [[8232, 8238], "disallowed"], [[8239, 8239], "disallowed_STD3_mapped", [32]], [[8240, 8242], "valid", [], "NV8"], [[8243, 8243], "mapped", [8242, 8242]], [[8244, 8244], "mapped", [8242, 8242, 8242]], [[8245, 8245], "valid", [], "NV8"], [[8246, 8246], "mapped", [8245, 8245]], [[8247, 8247], "mapped", [8245, 8245, 8245]], [[8248, 8251], "valid", [], "NV8"], [[8252, 8252], "disallowed_STD3_mapped", [33, 33]], [[8253, 8253], "valid", [], "NV8"], [[8254, 8254], "disallowed_STD3_mapped", [32, 773]], [[8255, 8262], "valid", [], "NV8"], [[8263, 8263], "disallowed_STD3_mapped", [63, 63]], [[8264, 8264], "disallowed_STD3_mapped", [63, 33]], [[8265, 8265], "disallowed_STD3_mapped", [33, 63]], [[8266, 8269], "valid", [], "NV8"], [[8270, 8274], "valid", [], "NV8"], [[8275, 8276], "valid", [], "NV8"], [[8277, 8278], "valid", [], "NV8"], [[8279, 8279], "mapped", [8242, 8242, 8242, 8242]], [[8280, 8286], "valid", [], "NV8"], [[8287, 8287], "disallowed_STD3_mapped", [32]], [[8288, 8288], "ignored"], [[8289, 8291], "disallowed"], [[8292, 8292], "ignored"], [[8293, 8293], "disallowed"], [[8294, 8297], "disallowed"], [[8298, 8303], "disallowed"], [[8304, 8304], "mapped", [48]], [[8305, 8305], "mapped", [105]], [[8306, 8307], "disallowed"], [[8308, 8308], "mapped", [52]], [[8309, 8309], "mapped", [53]], [[8310, 8310], "mapped", [54]], [[8311, 8311], "mapped", [55]], [[8312, 8312], "mapped", [56]], [[8313, 8313], "mapped", [57]], [[8314, 8314], "disallowed_STD3_mapped", [43]], [[8315, 8315], "mapped", [8722]], [[8316, 8316], "disallowed_STD3_mapped", [61]], [[8317, 8317], "disallowed_STD3_mapped", [40]], [[8318, 8318], "disallowed_STD3_mapped", [41]], [[8319, 8319], "mapped", [110]], [[8320, 8320], "mapped", [48]], [[8321, 8321], "mapped", [49]], [[8322, 8322], "mapped", [50]], [[8323, 8323], "mapped", [51]], [[8324, 8324], "mapped", [52]], [[8325, 8325], "mapped", [53]], [[8326, 8326], "mapped", [54]], [[8327, 8327], "mapped", [55]], [[8328, 8328], "mapped", [56]], [[8329, 8329], "mapped", [57]], [[8330, 8330], "disallowed_STD3_mapped", [43]], [[8331, 8331], "mapped", [8722]], [[8332, 8332], "disallowed_STD3_mapped", [61]], [[8333, 8333], "disallowed_STD3_mapped", [40]], [[8334, 8334], "disallowed_STD3_mapped", [41]], [[8335, 8335], "disallowed"], [[8336, 8336], "mapped", [97]], [[8337, 8337], "mapped", [101]], [[8338, 8338], "mapped", [111]], [[8339, 8339], "mapped", [120]], [[8340, 8340], "mapped", [601]], [[8341, 8341], "mapped", [104]], [[8342, 8342], "mapped", [107]], [[8343, 8343], "mapped", [108]], [[8344, 8344], "mapped", [109]], [[8345, 8345], "mapped", [110]], [[8346, 8346], "mapped", [112]], [[8347, 8347], "mapped", [115]], [[8348, 8348], "mapped", [116]], [[8349, 8351], "disallowed"], [[8352, 8359], "valid", [], "NV8"], [[8360, 8360], "mapped", [114, 115]], [[8361, 8362], "valid", [], "NV8"], [[8363, 8363], "valid", [], "NV8"], [[8364, 8364], "valid", [], "NV8"], [[8365, 8367], "valid", [], "NV8"], [[8368, 8369], "valid", [], "NV8"], [[8370, 8373], "valid", [], "NV8"], [[8374, 8376], "valid", [], "NV8"], [[8377, 8377], "valid", [], "NV8"], [[8378, 8378], "valid", [], "NV8"], [[8379, 8381], "valid", [], "NV8"], [[8382, 8382], "valid", [], "NV8"], [[8383, 8399], "disallowed"], [[8400, 8417], "valid", [], "NV8"], [[8418, 8419], "valid", [], "NV8"], [[8420, 8426], "valid", [], "NV8"], [[8427, 8427], "valid", [], "NV8"], [[8428, 8431], "valid", [], "NV8"], [[8432, 8432], "valid", [], "NV8"], [[8433, 8447], "disallowed"], [[8448, 8448], "disallowed_STD3_mapped", [97, 47, 99]], [[8449, 8449], "disallowed_STD3_mapped", [97, 47, 115]], [[8450, 8450], "mapped", [99]], [[8451, 8451], "mapped", [176, 99]], [[8452, 8452], "valid", [], "NV8"], [[8453, 8453], "disallowed_STD3_mapped", [99, 47, 111]], [[8454, 8454], "disallowed_STD3_mapped", [99, 47, 117]], [[8455, 8455], "mapped", [603]], [[8456, 8456], "valid", [], "NV8"], [[8457, 8457], "mapped", [176, 102]], [[8458, 8458], "mapped", [103]], [[8459, 8462], "mapped", [104]], [[8463, 8463], "mapped", [295]], [[8464, 8465], "mapped", [105]], [[8466, 8467], "mapped", [108]], [[8468, 8468], "valid", [], "NV8"], [[8469, 8469], "mapped", [110]], [[8470, 8470], "mapped", [110, 111]], [[8471, 8472], "valid", [], "NV8"], [[8473, 8473], "mapped", [112]], [[8474, 8474], "mapped", [113]], [[8475, 8477], "mapped", [114]], [[8478, 8479], "valid", [], "NV8"], [[8480, 8480], "mapped", [115, 109]], [[8481, 8481], "mapped", [116, 101, 108]], [[8482, 8482], "mapped", [116, 109]], [[8483, 8483], "valid", [], "NV8"], [[8484, 8484], "mapped", [122]], [[8485, 8485], "valid", [], "NV8"], [[8486, 8486], "mapped", [969]], [[8487, 8487], "valid", [], "NV8"], [[8488, 8488], "mapped", [122]], [[8489, 8489], "valid", [], "NV8"], [[8490, 8490], "mapped", [107]], [[8491, 8491], "mapped", [229]], [[8492, 8492], "mapped", [98]], [[8493, 8493], "mapped", [99]], [[8494, 8494], "valid", [], "NV8"], [[8495, 8496], "mapped", [101]], [[8497, 8497], "mapped", [102]], [[8498, 8498], "disallowed"], [[8499, 8499], "mapped", [109]], [[8500, 8500], "mapped", [111]], [[8501, 8501], "mapped", [1488]], [[8502, 8502], "mapped", [1489]], [[8503, 8503], "mapped", [1490]], [[8504, 8504], "mapped", [1491]], [[8505, 8505], "mapped", [105]], [[8506, 8506], "valid", [], "NV8"], [[8507, 8507], "mapped", [102, 97, 120]], [[8508, 8508], "mapped", [960]], [[8509, 8510], "mapped", [947]], [[8511, 8511], "mapped", [960]], [[8512, 8512], "mapped", [8721]], [[8513, 8516], "valid", [], "NV8"], [[8517, 8518], "mapped", [100]], [[8519, 8519], "mapped", [101]], [[8520, 8520], "mapped", [105]], [[8521, 8521], "mapped", [106]], [[8522, 8523], "valid", [], "NV8"], [[8524, 8524], "valid", [], "NV8"], [[8525, 8525], "valid", [], "NV8"], [[8526, 8526], "valid"], [[8527, 8527], "valid", [], "NV8"], [[8528, 8528], "mapped", [49, 8260, 55]], [[8529, 8529], "mapped", [49, 8260, 57]], [[8530, 8530], "mapped", [49, 8260, 49, 48]], [[8531, 8531], "mapped", [49, 8260, 51]], [[8532, 8532], "mapped", [50, 8260, 51]], [[8533, 8533], "mapped", [49, 8260, 53]], [[8534, 8534], "mapped", [50, 8260, 53]], [[8535, 8535], "mapped", [51, 8260, 53]], [[8536, 8536], "mapped", [52, 8260, 53]], [[8537, 8537], "mapped", [49, 8260, 54]], [[8538, 8538], "mapped", [53, 8260, 54]], [[8539, 8539], "mapped", [49, 8260, 56]], [[8540, 8540], "mapped", [51, 8260, 56]], [[8541, 8541], "mapped", [53, 8260, 56]], [[8542, 8542], "mapped", [55, 8260, 56]], [[8543, 8543], "mapped", [49, 8260]], [[8544, 8544], "mapped", [105]], [[8545, 8545], "mapped", [105, 105]], [[8546, 8546], "mapped", [105, 105, 105]], [[8547, 8547], "mapped", [105, 118]], [[8548, 8548], "mapped", [118]], [[8549, 8549], "mapped", [118, 105]], [[8550, 8550], "mapped", [118, 105, 105]], [[8551, 8551], "mapped", [118, 105, 105, 105]], [[8552, 8552], "mapped", [105, 120]], [[8553, 8553], "mapped", [120]], [[8554, 8554], "mapped", [120, 105]], [[8555, 8555], "mapped", [120, 105, 105]], [[8556, 8556], "mapped", [108]], [[8557, 8557], "mapped", [99]], [[8558, 8558], "mapped", [100]], [[8559, 8559], "mapped", [109]], [[8560, 8560], "mapped", [105]], [[8561, 8561], "mapped", [105, 105]], [[8562, 8562], "mapped", [105, 105, 105]], [[8563, 8563], "mapped", [105, 118]], [[8564, 8564], "mapped", [118]], [[8565, 8565], "mapped", [118, 105]], [[8566, 8566], "mapped", [118, 105, 105]], [[8567, 8567], "mapped", [118, 105, 105, 105]], [[8568, 8568], "mapped", [105, 120]], [[8569, 8569], "mapped", [120]], [[8570, 8570], "mapped", [120, 105]], [[8571, 8571], "mapped", [120, 105, 105]], [[8572, 8572], "mapped", [108]], [[8573, 8573], "mapped", [99]], [[8574, 8574], "mapped", [100]], [[8575, 8575], "mapped", [109]], [[8576, 8578], "valid", [], "NV8"], [[8579, 8579], "disallowed"], [[8580, 8580], "valid"], [[8581, 8584], "valid", [], "NV8"], [[8585, 8585], "mapped", [48, 8260, 51]], [[8586, 8587], "valid", [], "NV8"], [[8588, 8591], "disallowed"], [[8592, 8682], "valid", [], "NV8"], [[8683, 8691], "valid", [], "NV8"], [[8692, 8703], "valid", [], "NV8"], [[8704, 8747], "valid", [], "NV8"], [[8748, 8748], "mapped", [8747, 8747]], [[8749, 8749], "mapped", [8747, 8747, 8747]], [[8750, 8750], "valid", [], "NV8"], [[8751, 8751], "mapped", [8750, 8750]], [[8752, 8752], "mapped", [8750, 8750, 8750]], [[8753, 8799], "valid", [], "NV8"], [[8800, 8800], "disallowed_STD3_valid"], [[8801, 8813], "valid", [], "NV8"], [[8814, 8815], "disallowed_STD3_valid"], [[8816, 8945], "valid", [], "NV8"], [[8946, 8959], "valid", [], "NV8"], [[8960, 8960], "valid", [], "NV8"], [[8961, 8961], "valid", [], "NV8"], [[8962, 9e3], "valid", [], "NV8"], [[9001, 9001], "mapped", [12296]], [[9002, 9002], "mapped", [12297]], [[9003, 9082], "valid", [], "NV8"], [[9083, 9083], "valid", [], "NV8"], [[9084, 9084], "valid", [], "NV8"], [[9085, 9114], "valid", [], "NV8"], [[9115, 9166], "valid", [], "NV8"], [[9167, 9168], "valid", [], "NV8"], [[9169, 9179], "valid", [], "NV8"], [[9180, 9191], "valid", [], "NV8"], [[9192, 9192], "valid", [], "NV8"], [[9193, 9203], "valid", [], "NV8"], [[9204, 9210], "valid", [], "NV8"], [[9211, 9215], "disallowed"], [[9216, 9252], "valid", [], "NV8"], [[9253, 9254], "valid", [], "NV8"], [[9255, 9279], "disallowed"], [[9280, 9290], "valid", [], "NV8"], [[9291, 9311], "disallowed"], [[9312, 9312], "mapped", [49]], [[9313, 9313], "mapped", [50]], [[9314, 9314], "mapped", [51]], [[9315, 9315], "mapped", [52]], [[9316, 9316], "mapped", [53]], [[9317, 9317], "mapped", [54]], [[9318, 9318], "mapped", [55]], [[9319, 9319], "mapped", [56]], [[9320, 9320], "mapped", [57]], [[9321, 9321], "mapped", [49, 48]], [[9322, 9322], "mapped", [49, 49]], [[9323, 9323], "mapped", [49, 50]], [[9324, 9324], "mapped", [49, 51]], [[9325, 9325], "mapped", [49, 52]], [[9326, 9326], "mapped", [49, 53]], [[9327, 9327], "mapped", [49, 54]], [[9328, 9328], "mapped", [49, 55]], [[9329, 9329], "mapped", [49, 56]], [[9330, 9330], "mapped", [49, 57]], [[9331, 9331], "mapped", [50, 48]], [[9332, 9332], "disallowed_STD3_mapped", [40, 49, 41]], [[9333, 9333], "disallowed_STD3_mapped", [40, 50, 41]], [[9334, 9334], "disallowed_STD3_mapped", [40, 51, 41]], [[9335, 9335], "disallowed_STD3_mapped", [40, 52, 41]], [[9336, 9336], "disallowed_STD3_mapped", [40, 53, 41]], [[9337, 9337], "disallowed_STD3_mapped", [40, 54, 41]], [[9338, 9338], "disallowed_STD3_mapped", [40, 55, 41]], [[9339, 9339], "disallowed_STD3_mapped", [40, 56, 41]], [[9340, 9340], "disallowed_STD3_mapped", [40, 57, 41]], [[9341, 9341], "disallowed_STD3_mapped", [40, 49, 48, 41]], [[9342, 9342], "disallowed_STD3_mapped", [40, 49, 49, 41]], [[9343, 9343], "disallowed_STD3_mapped", [40, 49, 50, 41]], [[9344, 9344], "disallowed_STD3_mapped", [40, 49, 51, 41]], [[9345, 9345], "disallowed_STD3_mapped", [40, 49, 52, 41]], [[9346, 9346], "disallowed_STD3_mapped", [40, 49, 53, 41]], [[9347, 9347], "disallowed_STD3_mapped", [40, 49, 54, 41]], [[9348, 9348], "disallowed_STD3_mapped", [40, 49, 55, 41]], [[9349, 9349], "disallowed_STD3_mapped", [40, 49, 56, 41]], [[9350, 9350], "disallowed_STD3_mapped", [40, 49, 57, 41]], [[9351, 9351], "disallowed_STD3_mapped", [40, 50, 48, 41]], [[9352, 9371], "disallowed"], [[9372, 9372], "disallowed_STD3_mapped", [40, 97, 41]], [[9373, 9373], "disallowed_STD3_mapped", [40, 98, 41]], [[9374, 9374], "disallowed_STD3_mapped", [40, 99, 41]], [[9375, 9375], "disallowed_STD3_mapped", [40, 100, 41]], [[9376, 9376], "disallowed_STD3_mapped", [40, 101, 41]], [[9377, 9377], "disallowed_STD3_mapped", [40, 102, 41]], [[9378, 9378], "disallowed_STD3_mapped", [40, 103, 41]], [[9379, 9379], "disallowed_STD3_mapped", [40, 104, 41]], [[9380, 9380], "disallowed_STD3_mapped", [40, 105, 41]], [[9381, 9381], "disallowed_STD3_mapped", [40, 106, 41]], [[9382, 9382], "disallowed_STD3_mapped", [40, 107, 41]], [[9383, 9383], "disallowed_STD3_mapped", [40, 108, 41]], [[9384, 9384], "disallowed_STD3_mapped", [40, 109, 41]], [[9385, 9385], "disallowed_STD3_mapped", [40, 110, 41]], [[9386, 9386], "disallowed_STD3_mapped", [40, 111, 41]], [[9387, 9387], "disallowed_STD3_mapped", [40, 112, 41]], [[9388, 9388], "disallowed_STD3_mapped", [40, 113, 41]], [[9389, 9389], "disallowed_STD3_mapped", [40, 114, 41]], [[9390, 9390], "disallowed_STD3_mapped", [40, 115, 41]], [[9391, 9391], "disallowed_STD3_mapped", [40, 116, 41]], [[9392, 9392], "disallowed_STD3_mapped", [40, 117, 41]], [[9393, 9393], "disallowed_STD3_mapped", [40, 118, 41]], [[9394, 9394], "disallowed_STD3_mapped", [40, 119, 41]], [[9395, 9395], "disallowed_STD3_mapped", [40, 120, 41]], [[9396, 9396], "disallowed_STD3_mapped", [40, 121, 41]], [[9397, 9397], "disallowed_STD3_mapped", [40, 122, 41]], [[9398, 9398], "mapped", [97]], [[9399, 9399], "mapped", [98]], [[9400, 9400], "mapped", [99]], [[9401, 9401], "mapped", [100]], [[9402, 9402], "mapped", [101]], [[9403, 9403], "mapped", [102]], [[9404, 9404], "mapped", [103]], [[9405, 9405], "mapped", [104]], [[9406, 9406], "mapped", [105]], [[9407, 9407], "mapped", [106]], [[9408, 9408], "mapped", [107]], [[9409, 9409], "mapped", [108]], [[9410, 9410], "mapped", [109]], [[9411, 9411], "mapped", [110]], [[9412, 9412], "mapped", [111]], [[9413, 9413], "mapped", [112]], [[9414, 9414], "mapped", [113]], [[9415, 9415], "mapped", [114]], [[9416, 9416], "mapped", [115]], [[9417, 9417], "mapped", [116]], [[9418, 9418], "mapped", [117]], [[9419, 9419], "mapped", [118]], [[9420, 9420], "mapped", [119]], [[9421, 9421], "mapped", [120]], [[9422, 9422], "mapped", [121]], [[9423, 9423], "mapped", [122]], [[9424, 9424], "mapped", [97]], [[9425, 9425], "mapped", [98]], [[9426, 9426], "mapped", [99]], [[9427, 9427], "mapped", [100]], [[9428, 9428], "mapped", [101]], [[9429, 9429], "mapped", [102]], [[9430, 9430], "mapped", [103]], [[9431, 9431], "mapped", [104]], [[9432, 9432], "mapped", [105]], [[9433, 9433], "mapped", [106]], [[9434, 9434], "mapped", [107]], [[9435, 9435], "mapped", [108]], [[9436, 9436], "mapped", [109]], [[9437, 9437], "mapped", [110]], [[9438, 9438], "mapped", [111]], [[9439, 9439], "mapped", [112]], [[9440, 9440], "mapped", [113]], [[9441, 9441], "mapped", [114]], [[9442, 9442], "mapped", [115]], [[9443, 9443], "mapped", [116]], [[9444, 9444], "mapped", [117]], [[9445, 9445], "mapped", [118]], [[9446, 9446], "mapped", [119]], [[9447, 9447], "mapped", [120]], [[9448, 9448], "mapped", [121]], [[9449, 9449], "mapped", [122]], [[9450, 9450], "mapped", [48]], [[9451, 9470], "valid", [], "NV8"], [[9471, 9471], "valid", [], "NV8"], [[9472, 9621], "valid", [], "NV8"], [[9622, 9631], "valid", [], "NV8"], [[9632, 9711], "valid", [], "NV8"], [[9712, 9719], "valid", [], "NV8"], [[9720, 9727], "valid", [], "NV8"], [[9728, 9747], "valid", [], "NV8"], [[9748, 9749], "valid", [], "NV8"], [[9750, 9751], "valid", [], "NV8"], [[9752, 9752], "valid", [], "NV8"], [[9753, 9753], "valid", [], "NV8"], [[9754, 9839], "valid", [], "NV8"], [[9840, 9841], "valid", [], "NV8"], [[9842, 9853], "valid", [], "NV8"], [[9854, 9855], "valid", [], "NV8"], [[9856, 9865], "valid", [], "NV8"], [[9866, 9873], "valid", [], "NV8"], [[9874, 9884], "valid", [], "NV8"], [[9885, 9885], "valid", [], "NV8"], [[9886, 9887], "valid", [], "NV8"], [[9888, 9889], "valid", [], "NV8"], [[9890, 9905], "valid", [], "NV8"], [[9906, 9906], "valid", [], "NV8"], [[9907, 9916], "valid", [], "NV8"], [[9917, 9919], "valid", [], "NV8"], [[9920, 9923], "valid", [], "NV8"], [[9924, 9933], "valid", [], "NV8"], [[9934, 9934], "valid", [], "NV8"], [[9935, 9953], "valid", [], "NV8"], [[9954, 9954], "valid", [], "NV8"], [[9955, 9955], "valid", [], "NV8"], [[9956, 9959], "valid", [], "NV8"], [[9960, 9983], "valid", [], "NV8"], [[9984, 9984], "valid", [], "NV8"], [[9985, 9988], "valid", [], "NV8"], [[9989, 9989], "valid", [], "NV8"], [[9990, 9993], "valid", [], "NV8"], [[9994, 9995], "valid", [], "NV8"], [[9996, 10023], "valid", [], "NV8"], [[10024, 10024], "valid", [], "NV8"], [[10025, 10059], "valid", [], "NV8"], [[10060, 10060], "valid", [], "NV8"], [[10061, 10061], "valid", [], "NV8"], [[10062, 10062], "valid", [], "NV8"], [[10063, 10066], "valid", [], "NV8"], [[10067, 10069], "valid", [], "NV8"], [[10070, 10070], "valid", [], "NV8"], [[10071, 10071], "valid", [], "NV8"], [[10072, 10078], "valid", [], "NV8"], [[10079, 10080], "valid", [], "NV8"], [[10081, 10087], "valid", [], "NV8"], [[10088, 10101], "valid", [], "NV8"], [[10102, 10132], "valid", [], "NV8"], [[10133, 10135], "valid", [], "NV8"], [[10136, 10159], "valid", [], "NV8"], [[10160, 10160], "valid", [], "NV8"], [[10161, 10174], "valid", [], "NV8"], [[10175, 10175], "valid", [], "NV8"], [[10176, 10182], "valid", [], "NV8"], [[10183, 10186], "valid", [], "NV8"], [[10187, 10187], "valid", [], "NV8"], [[10188, 10188], "valid", [], "NV8"], [[10189, 10189], "valid", [], "NV8"], [[10190, 10191], "valid", [], "NV8"], [[10192, 10219], "valid", [], "NV8"], [[10220, 10223], "valid", [], "NV8"], [[10224, 10239], "valid", [], "NV8"], [[10240, 10495], "valid", [], "NV8"], [[10496, 10763], "valid", [], "NV8"], [[10764, 10764], "mapped", [8747, 8747, 8747, 8747]], [[10765, 10867], "valid", [], "NV8"], [[10868, 10868], "disallowed_STD3_mapped", [58, 58, 61]], [[10869, 10869], "disallowed_STD3_mapped", [61, 61]], [[10870, 10870], "disallowed_STD3_mapped", [61, 61, 61]], [[10871, 10971], "valid", [], "NV8"], [[10972, 10972], "mapped", [10973, 824]], [[10973, 11007], "valid", [], "NV8"], [[11008, 11021], "valid", [], "NV8"], [[11022, 11027], "valid", [], "NV8"], [[11028, 11034], "valid", [], "NV8"], [[11035, 11039], "valid", [], "NV8"], [[11040, 11043], "valid", [], "NV8"], [[11044, 11084], "valid", [], "NV8"], [[11085, 11087], "valid", [], "NV8"], [[11088, 11092], "valid", [], "NV8"], [[11093, 11097], "valid", [], "NV8"], [[11098, 11123], "valid", [], "NV8"], [[11124, 11125], "disallowed"], [[11126, 11157], "valid", [], "NV8"], [[11158, 11159], "disallowed"], [[11160, 11193], "valid", [], "NV8"], [[11194, 11196], "disallowed"], [[11197, 11208], "valid", [], "NV8"], [[11209, 11209], "disallowed"], [[11210, 11217], "valid", [], "NV8"], [[11218, 11243], "disallowed"], [[11244, 11247], "valid", [], "NV8"], [[11248, 11263], "disallowed"], [[11264, 11264], "mapped", [11312]], [[11265, 11265], "mapped", [11313]], [[11266, 11266], "mapped", [11314]], [[11267, 11267], "mapped", [11315]], [[11268, 11268], "mapped", [11316]], [[11269, 11269], "mapped", [11317]], [[11270, 11270], "mapped", [11318]], [[11271, 11271], "mapped", [11319]], [[11272, 11272], "mapped", [11320]], [[11273, 11273], "mapped", [11321]], [[11274, 11274], "mapped", [11322]], [[11275, 11275], "mapped", [11323]], [[11276, 11276], "mapped", [11324]], [[11277, 11277], "mapped", [11325]], [[11278, 11278], "mapped", [11326]], [[11279, 11279], "mapped", [11327]], [[11280, 11280], "mapped", [11328]], [[11281, 11281], "mapped", [11329]], [[11282, 11282], "mapped", [11330]], [[11283, 11283], "mapped", [11331]], [[11284, 11284], "mapped", [11332]], [[11285, 11285], "mapped", [11333]], [[11286, 11286], "mapped", [11334]], [[11287, 11287], "mapped", [11335]], [[11288, 11288], "mapped", [11336]], [[11289, 11289], "mapped", [11337]], [[11290, 11290], "mapped", [11338]], [[11291, 11291], "mapped", [11339]], [[11292, 11292], "mapped", [11340]], [[11293, 11293], "mapped", [11341]], [[11294, 11294], "mapped", [11342]], [[11295, 11295], "mapped", [11343]], [[11296, 11296], "mapped", [11344]], [[11297, 11297], "mapped", [11345]], [[11298, 11298], "mapped", [11346]], [[11299, 11299], "mapped", [11347]], [[11300, 11300], "mapped", [11348]], [[11301, 11301], "mapped", [11349]], [[11302, 11302], "mapped", [11350]], [[11303, 11303], "mapped", [11351]], [[11304, 11304], "mapped", [11352]], [[11305, 11305], "mapped", [11353]], [[11306, 11306], "mapped", [11354]], [[11307, 11307], "mapped", [11355]], [[11308, 11308], "mapped", [11356]], [[11309, 11309], "mapped", [11357]], [[11310, 11310], "mapped", [11358]], [[11311, 11311], "disallowed"], [[11312, 11358], "valid"], [[11359, 11359], "disallowed"], [[11360, 11360], "mapped", [11361]], [[11361, 11361], "valid"], [[11362, 11362], "mapped", [619]], [[11363, 11363], "mapped", [7549]], [[11364, 11364], "mapped", [637]], [[11365, 11366], "valid"], [[11367, 11367], "mapped", [11368]], [[11368, 11368], "valid"], [[11369, 11369], "mapped", [11370]], [[11370, 11370], "valid"], [[11371, 11371], "mapped", [11372]], [[11372, 11372], "valid"], [[11373, 11373], "mapped", [593]], [[11374, 11374], "mapped", [625]], [[11375, 11375], "mapped", [592]], [[11376, 11376], "mapped", [594]], [[11377, 11377], "valid"], [[11378, 11378], "mapped", [11379]], [[11379, 11379], "valid"], [[11380, 11380], "valid"], [[11381, 11381], "mapped", [11382]], [[11382, 11383], "valid"], [[11384, 11387], "valid"], [[11388, 11388], "mapped", [106]], [[11389, 11389], "mapped", [118]], [[11390, 11390], "mapped", [575]], [[11391, 11391], "mapped", [576]], [[11392, 11392], "mapped", [11393]], [[11393, 11393], "valid"], [[11394, 11394], "mapped", [11395]], [[11395, 11395], "valid"], [[11396, 11396], "mapped", [11397]], [[11397, 11397], "valid"], [[11398, 11398], "mapped", [11399]], [[11399, 11399], "valid"], [[11400, 11400], "mapped", [11401]], [[11401, 11401], "valid"], [[11402, 11402], "mapped", [11403]], [[11403, 11403], "valid"], [[11404, 11404], "mapped", [11405]], [[11405, 11405], "valid"], [[11406, 11406], "mapped", [11407]], [[11407, 11407], "valid"], [[11408, 11408], "mapped", [11409]], [[11409, 11409], "valid"], [[11410, 11410], "mapped", [11411]], [[11411, 11411], "valid"], [[11412, 11412], "mapped", [11413]], [[11413, 11413], "valid"], [[11414, 11414], "mapped", [11415]], [[11415, 11415], "valid"], [[11416, 11416], "mapped", [11417]], [[11417, 11417], "valid"], [[11418, 11418], "mapped", [11419]], [[11419, 11419], "valid"], [[11420, 11420], "mapped", [11421]], [[11421, 11421], "valid"], [[11422, 11422], "mapped", [11423]], [[11423, 11423], "valid"], [[11424, 11424], "mapped", [11425]], [[11425, 11425], "valid"], [[11426, 11426], "mapped", [11427]], [[11427, 11427], "valid"], [[11428, 11428], "mapped", [11429]], [[11429, 11429], "valid"], [[11430, 11430], "mapped", [11431]], [[11431, 11431], "valid"], [[11432, 11432], "mapped", [11433]], [[11433, 11433], "valid"], [[11434, 11434], "mapped", [11435]], [[11435, 11435], "valid"], [[11436, 11436], "mapped", [11437]], [[11437, 11437], "valid"], [[11438, 11438], "mapped", [11439]], [[11439, 11439], "valid"], [[11440, 11440], "mapped", [11441]], [[11441, 11441], "valid"], [[11442, 11442], "mapped", [11443]], [[11443, 11443], "valid"], [[11444, 11444], "mapped", [11445]], [[11445, 11445], "valid"], [[11446, 11446], "mapped", [11447]], [[11447, 11447], "valid"], [[11448, 11448], "mapped", [11449]], [[11449, 11449], "valid"], [[11450, 11450], "mapped", [11451]], [[11451, 11451], "valid"], [[11452, 11452], "mapped", [11453]], [[11453, 11453], "valid"], [[11454, 11454], "mapped", [11455]], [[11455, 11455], "valid"], [[11456, 11456], "mapped", [11457]], [[11457, 11457], "valid"], [[11458, 11458], "mapped", [11459]], [[11459, 11459], "valid"], [[11460, 11460], "mapped", [11461]], [[11461, 11461], "valid"], [[11462, 11462], "mapped", [11463]], [[11463, 11463], "valid"], [[11464, 11464], "mapped", [11465]], [[11465, 11465], "valid"], [[11466, 11466], "mapped", [11467]], [[11467, 11467], "valid"], [[11468, 11468], "mapped", [11469]], [[11469, 11469], "valid"], [[11470, 11470], "mapped", [11471]], [[11471, 11471], "valid"], [[11472, 11472], "mapped", [11473]], [[11473, 11473], "valid"], [[11474, 11474], "mapped", [11475]], [[11475, 11475], "valid"], [[11476, 11476], "mapped", [11477]], [[11477, 11477], "valid"], [[11478, 11478], "mapped", [11479]], [[11479, 11479], "valid"], [[11480, 11480], "mapped", [11481]], [[11481, 11481], "valid"], [[11482, 11482], "mapped", [11483]], [[11483, 11483], "valid"], [[11484, 11484], "mapped", [11485]], [[11485, 11485], "valid"], [[11486, 11486], "mapped", [11487]], [[11487, 11487], "valid"], [[11488, 11488], "mapped", [11489]], [[11489, 11489], "valid"], [[11490, 11490], "mapped", [11491]], [[11491, 11492], "valid"], [[11493, 11498], "valid", [], "NV8"], [[11499, 11499], "mapped", [11500]], [[11500, 11500], "valid"], [[11501, 11501], "mapped", [11502]], [[11502, 11505], "valid"], [[11506, 11506], "mapped", [11507]], [[11507, 11507], "valid"], [[11508, 11512], "disallowed"], [[11513, 11519], "valid", [], "NV8"], [[11520, 11557], "valid"], [[11558, 11558], "disallowed"], [[11559, 11559], "valid"], [[11560, 11564], "disallowed"], [[11565, 11565], "valid"], [[11566, 11567], "disallowed"], [[11568, 11621], "valid"], [[11622, 11623], "valid"], [[11624, 11630], "disallowed"], [[11631, 11631], "mapped", [11617]], [[11632, 11632], "valid", [], "NV8"], [[11633, 11646], "disallowed"], [[11647, 11647], "valid"], [[11648, 11670], "valid"], [[11671, 11679], "disallowed"], [[11680, 11686], "valid"], [[11687, 11687], "disallowed"], [[11688, 11694], "valid"], [[11695, 11695], "disallowed"], [[11696, 11702], "valid"], [[11703, 11703], "disallowed"], [[11704, 11710], "valid"], [[11711, 11711], "disallowed"], [[11712, 11718], "valid"], [[11719, 11719], "disallowed"], [[11720, 11726], "valid"], [[11727, 11727], "disallowed"], [[11728, 11734], "valid"], [[11735, 11735], "disallowed"], [[11736, 11742], "valid"], [[11743, 11743], "disallowed"], [[11744, 11775], "valid"], [[11776, 11799], "valid", [], "NV8"], [[11800, 11803], "valid", [], "NV8"], [[11804, 11805], "valid", [], "NV8"], [[11806, 11822], "valid", [], "NV8"], [[11823, 11823], "valid"], [[11824, 11824], "valid", [], "NV8"], [[11825, 11825], "valid", [], "NV8"], [[11826, 11835], "valid", [], "NV8"], [[11836, 11842], "valid", [], "NV8"], [[11843, 11903], "disallowed"], [[11904, 11929], "valid", [], "NV8"], [[11930, 11930], "disallowed"], [[11931, 11934], "valid", [], "NV8"], [[11935, 11935], "mapped", [27597]], [[11936, 12018], "valid", [], "NV8"], [[12019, 12019], "mapped", [40863]], [[12020, 12031], "disallowed"], [[12032, 12032], "mapped", [19968]], [[12033, 12033], "mapped", [20008]], [[12034, 12034], "mapped", [20022]], [[12035, 12035], "mapped", [20031]], [[12036, 12036], "mapped", [20057]], [[12037, 12037], "mapped", [20101]], [[12038, 12038], "mapped", [20108]], [[12039, 12039], "mapped", [20128]], [[12040, 12040], "mapped", [20154]], [[12041, 12041], "mapped", [20799]], [[12042, 12042], "mapped", [20837]], [[12043, 12043], "mapped", [20843]], [[12044, 12044], "mapped", [20866]], [[12045, 12045], "mapped", [20886]], [[12046, 12046], "mapped", [20907]], [[12047, 12047], "mapped", [20960]], [[12048, 12048], "mapped", [20981]], [[12049, 12049], "mapped", [20992]], [[12050, 12050], "mapped", [21147]], [[12051, 12051], "mapped", [21241]], [[12052, 12052], "mapped", [21269]], [[12053, 12053], "mapped", [21274]], [[12054, 12054], "mapped", [21304]], [[12055, 12055], "mapped", [21313]], [[12056, 12056], "mapped", [21340]], [[12057, 12057], "mapped", [21353]], [[12058, 12058], "mapped", [21378]], [[12059, 12059], "mapped", [21430]], [[12060, 12060], "mapped", [21448]], [[12061, 12061], "mapped", [21475]], [[12062, 12062], "mapped", [22231]], [[12063, 12063], "mapped", [22303]], [[12064, 12064], "mapped", [22763]], [[12065, 12065], "mapped", [22786]], [[12066, 12066], "mapped", [22794]], [[12067, 12067], "mapped", [22805]], [[12068, 12068], "mapped", [22823]], [[12069, 12069], "mapped", [22899]], [[12070, 12070], "mapped", [23376]], [[12071, 12071], "mapped", [23424]], [[12072, 12072], "mapped", [23544]], [[12073, 12073], "mapped", [23567]], [[12074, 12074], "mapped", [23586]], [[12075, 12075], "mapped", [23608]], [[12076, 12076], "mapped", [23662]], [[12077, 12077], "mapped", [23665]], [[12078, 12078], "mapped", [24027]], [[12079, 12079], "mapped", [24037]], [[12080, 12080], "mapped", [24049]], [[12081, 12081], "mapped", [24062]], [[12082, 12082], "mapped", [24178]], [[12083, 12083], "mapped", [24186]], [[12084, 12084], "mapped", [24191]], [[12085, 12085], "mapped", [24308]], [[12086, 12086], "mapped", [24318]], [[12087, 12087], "mapped", [24331]], [[12088, 12088], "mapped", [24339]], [[12089, 12089], "mapped", [24400]], [[12090, 12090], "mapped", [24417]], [[12091, 12091], "mapped", [24435]], [[12092, 12092], "mapped", [24515]], [[12093, 12093], "mapped", [25096]], [[12094, 12094], "mapped", [25142]], [[12095, 12095], "mapped", [25163]], [[12096, 12096], "mapped", [25903]], [[12097, 12097], "mapped", [25908]], [[12098, 12098], "mapped", [25991]], [[12099, 12099], "mapped", [26007]], [[12100, 12100], "mapped", [26020]], [[12101, 12101], "mapped", [26041]], [[12102, 12102], "mapped", [26080]], [[12103, 12103], "mapped", [26085]], [[12104, 12104], "mapped", [26352]], [[12105, 12105], "mapped", [26376]], [[12106, 12106], "mapped", [26408]], [[12107, 12107], "mapped", [27424]], [[12108, 12108], "mapped", [27490]], [[12109, 12109], "mapped", [27513]], [[12110, 12110], "mapped", [27571]], [[12111, 12111], "mapped", [27595]], [[12112, 12112], "mapped", [27604]], [[12113, 12113], "mapped", [27611]], [[12114, 12114], "mapped", [27663]], [[12115, 12115], "mapped", [27668]], [[12116, 12116], "mapped", [27700]], [[12117, 12117], "mapped", [28779]], [[12118, 12118], "mapped", [29226]], [[12119, 12119], "mapped", [29238]], [[12120, 12120], "mapped", [29243]], [[12121, 12121], "mapped", [29247]], [[12122, 12122], "mapped", [29255]], [[12123, 12123], "mapped", [29273]], [[12124, 12124], "mapped", [29275]], [[12125, 12125], "mapped", [29356]], [[12126, 12126], "mapped", [29572]], [[12127, 12127], "mapped", [29577]], [[12128, 12128], "mapped", [29916]], [[12129, 12129], "mapped", [29926]], [[12130, 12130], "mapped", [29976]], [[12131, 12131], "mapped", [29983]], [[12132, 12132], "mapped", [29992]], [[12133, 12133], "mapped", [3e4]], [[12134, 12134], "mapped", [30091]], [[12135, 12135], "mapped", [30098]], [[12136, 12136], "mapped", [30326]], [[12137, 12137], "mapped", [30333]], [[12138, 12138], "mapped", [30382]], [[12139, 12139], "mapped", [30399]], [[12140, 12140], "mapped", [30446]], [[12141, 12141], "mapped", [30683]], [[12142, 12142], "mapped", [30690]], [[12143, 12143], "mapped", [30707]], [[12144, 12144], "mapped", [31034]], [[12145, 12145], "mapped", [31160]], [[12146, 12146], "mapped", [31166]], [[12147, 12147], "mapped", [31348]], [[12148, 12148], "mapped", [31435]], [[12149, 12149], "mapped", [31481]], [[12150, 12150], "mapped", [31859]], [[12151, 12151], "mapped", [31992]], [[12152, 12152], "mapped", [32566]], [[12153, 12153], "mapped", [32593]], [[12154, 12154], "mapped", [32650]], [[12155, 12155], "mapped", [32701]], [[12156, 12156], "mapped", [32769]], [[12157, 12157], "mapped", [32780]], [[12158, 12158], "mapped", [32786]], [[12159, 12159], "mapped", [32819]], [[12160, 12160], "mapped", [32895]], [[12161, 12161], "mapped", [32905]], [[12162, 12162], "mapped", [33251]], [[12163, 12163], "mapped", [33258]], [[12164, 12164], "mapped", [33267]], [[12165, 12165], "mapped", [33276]], [[12166, 12166], "mapped", [33292]], [[12167, 12167], "mapped", [33307]], [[12168, 12168], "mapped", [33311]], [[12169, 12169], "mapped", [33390]], [[12170, 12170], "mapped", [33394]], [[12171, 12171], "mapped", [33400]], [[12172, 12172], "mapped", [34381]], [[12173, 12173], "mapped", [34411]], [[12174, 12174], "mapped", [34880]], [[12175, 12175], "mapped", [34892]], [[12176, 12176], "mapped", [34915]], [[12177, 12177], "mapped", [35198]], [[12178, 12178], "mapped", [35211]], [[12179, 12179], "mapped", [35282]], [[12180, 12180], "mapped", [35328]], [[12181, 12181], "mapped", [35895]], [[12182, 12182], "mapped", [35910]], [[12183, 12183], "mapped", [35925]], [[12184, 12184], "mapped", [35960]], [[12185, 12185], "mapped", [35997]], [[12186, 12186], "mapped", [36196]], [[12187, 12187], "mapped", [36208]], [[12188, 12188], "mapped", [36275]], [[12189, 12189], "mapped", [36523]], [[12190, 12190], "mapped", [36554]], [[12191, 12191], "mapped", [36763]], [[12192, 12192], "mapped", [36784]], [[12193, 12193], "mapped", [36789]], [[12194, 12194], "mapped", [37009]], [[12195, 12195], "mapped", [37193]], [[12196, 12196], "mapped", [37318]], [[12197, 12197], "mapped", [37324]], [[12198, 12198], "mapped", [37329]], [[12199, 12199], "mapped", [38263]], [[12200, 12200], "mapped", [38272]], [[12201, 12201], "mapped", [38428]], [[12202, 12202], "mapped", [38582]], [[12203, 12203], "mapped", [38585]], [[12204, 12204], "mapped", [38632]], [[12205, 12205], "mapped", [38737]], [[12206, 12206], "mapped", [38750]], [[12207, 12207], "mapped", [38754]], [[12208, 12208], "mapped", [38761]], [[12209, 12209], "mapped", [38859]], [[12210, 12210], "mapped", [38893]], [[12211, 12211], "mapped", [38899]], [[12212, 12212], "mapped", [38913]], [[12213, 12213], "mapped", [39080]], [[12214, 12214], "mapped", [39131]], [[12215, 12215], "mapped", [39135]], [[12216, 12216], "mapped", [39318]], [[12217, 12217], "mapped", [39321]], [[12218, 12218], "mapped", [39340]], [[12219, 12219], "mapped", [39592]], [[12220, 12220], "mapped", [39640]], [[12221, 12221], "mapped", [39647]], [[12222, 12222], "mapped", [39717]], [[12223, 12223], "mapped", [39727]], [[12224, 12224], "mapped", [39730]], [[12225, 12225], "mapped", [39740]], [[12226, 12226], "mapped", [39770]], [[12227, 12227], "mapped", [40165]], [[12228, 12228], "mapped", [40565]], [[12229, 12229], "mapped", [40575]], [[12230, 12230], "mapped", [40613]], [[12231, 12231], "mapped", [40635]], [[12232, 12232], "mapped", [40643]], [[12233, 12233], "mapped", [40653]], [[12234, 12234], "mapped", [40657]], [[12235, 12235], "mapped", [40697]], [[12236, 12236], "mapped", [40701]], [[12237, 12237], "mapped", [40718]], [[12238, 12238], "mapped", [40723]], [[12239, 12239], "mapped", [40736]], [[12240, 12240], "mapped", [40763]], [[12241, 12241], "mapped", [40778]], [[12242, 12242], "mapped", [40786]], [[12243, 12243], "mapped", [40845]], [[12244, 12244], "mapped", [40860]], [[12245, 12245], "mapped", [40864]], [[12246, 12271], "disallowed"], [[12272, 12283], "disallowed"], [[12284, 12287], "disallowed"], [[12288, 12288], "disallowed_STD3_mapped", [32]], [[12289, 12289], "valid", [], "NV8"], [[12290, 12290], "mapped", [46]], [[12291, 12292], "valid", [], "NV8"], [[12293, 12295], "valid"], [[12296, 12329], "valid", [], "NV8"], [[12330, 12333], "valid"], [[12334, 12341], "valid", [], "NV8"], [[12342, 12342], "mapped", [12306]], [[12343, 12343], "valid", [], "NV8"], [[12344, 12344], "mapped", [21313]], [[12345, 12345], "mapped", [21316]], [[12346, 12346], "mapped", [21317]], [[12347, 12347], "valid", [], "NV8"], [[12348, 12348], "valid"], [[12349, 12349], "valid", [], "NV8"], [[12350, 12350], "valid", [], "NV8"], [[12351, 12351], "valid", [], "NV8"], [[12352, 12352], "disallowed"], [[12353, 12436], "valid"], [[12437, 12438], "valid"], [[12439, 12440], "disallowed"], [[12441, 12442], "valid"], [[12443, 12443], "disallowed_STD3_mapped", [32, 12441]], [[12444, 12444], "disallowed_STD3_mapped", [32, 12442]], [[12445, 12446], "valid"], [[12447, 12447], "mapped", [12424, 12426]], [[12448, 12448], "valid", [], "NV8"], [[12449, 12542], "valid"], [[12543, 12543], "mapped", [12467, 12488]], [[12544, 12548], "disallowed"], [[12549, 12588], "valid"], [[12589, 12589], "valid"], [[12590, 12592], "disallowed"], [[12593, 12593], "mapped", [4352]], [[12594, 12594], "mapped", [4353]], [[12595, 12595], "mapped", [4522]], [[12596, 12596], "mapped", [4354]], [[12597, 12597], "mapped", [4524]], [[12598, 12598], "mapped", [4525]], [[12599, 12599], "mapped", [4355]], [[12600, 12600], "mapped", [4356]], [[12601, 12601], "mapped", [4357]], [[12602, 12602], "mapped", [4528]], [[12603, 12603], "mapped", [4529]], [[12604, 12604], "mapped", [4530]], [[12605, 12605], "mapped", [4531]], [[12606, 12606], "mapped", [4532]], [[12607, 12607], "mapped", [4533]], [[12608, 12608], "mapped", [4378]], [[12609, 12609], "mapped", [4358]], [[12610, 12610], "mapped", [4359]], [[12611, 12611], "mapped", [4360]], [[12612, 12612], "mapped", [4385]], [[12613, 12613], "mapped", [4361]], [[12614, 12614], "mapped", [4362]], [[12615, 12615], "mapped", [4363]], [[12616, 12616], "mapped", [4364]], [[12617, 12617], "mapped", [4365]], [[12618, 12618], "mapped", [4366]], [[12619, 12619], "mapped", [4367]], [[12620, 12620], "mapped", [4368]], [[12621, 12621], "mapped", [4369]], [[12622, 12622], "mapped", [4370]], [[12623, 12623], "mapped", [4449]], [[12624, 12624], "mapped", [4450]], [[12625, 12625], "mapped", [4451]], [[12626, 12626], "mapped", [4452]], [[12627, 12627], "mapped", [4453]], [[12628, 12628], "mapped", [4454]], [[12629, 12629], "mapped", [4455]], [[12630, 12630], "mapped", [4456]], [[12631, 12631], "mapped", [4457]], [[12632, 12632], "mapped", [4458]], [[12633, 12633], "mapped", [4459]], [[12634, 12634], "mapped", [4460]], [[12635, 12635], "mapped", [4461]], [[12636, 12636], "mapped", [4462]], [[12637, 12637], "mapped", [4463]], [[12638, 12638], "mapped", [4464]], [[12639, 12639], "mapped", [4465]], [[12640, 12640], "mapped", [4466]], [[12641, 12641], "mapped", [4467]], [[12642, 12642], "mapped", [4468]], [[12643, 12643], "mapped", [4469]], [[12644, 12644], "disallowed"], [[12645, 12645], "mapped", [4372]], [[12646, 12646], "mapped", [4373]], [[12647, 12647], "mapped", [4551]], [[12648, 12648], "mapped", [4552]], [[12649, 12649], "mapped", [4556]], [[12650, 12650], "mapped", [4558]], [[12651, 12651], "mapped", [4563]], [[12652, 12652], "mapped", [4567]], [[12653, 12653], "mapped", [4569]], [[12654, 12654], "mapped", [4380]], [[12655, 12655], "mapped", [4573]], [[12656, 12656], "mapped", [4575]], [[12657, 12657], "mapped", [4381]], [[12658, 12658], "mapped", [4382]], [[12659, 12659], "mapped", [4384]], [[12660, 12660], "mapped", [4386]], [[12661, 12661], "mapped", [4387]], [[12662, 12662], "mapped", [4391]], [[12663, 12663], "mapped", [4393]], [[12664, 12664], "mapped", [4395]], [[12665, 12665], "mapped", [4396]], [[12666, 12666], "mapped", [4397]], [[12667, 12667], "mapped", [4398]], [[12668, 12668], "mapped", [4399]], [[12669, 12669], "mapped", [4402]], [[12670, 12670], "mapped", [4406]], [[12671, 12671], "mapped", [4416]], [[12672, 12672], "mapped", [4423]], [[12673, 12673], "mapped", [4428]], [[12674, 12674], "mapped", [4593]], [[12675, 12675], "mapped", [4594]], [[12676, 12676], "mapped", [4439]], [[12677, 12677], "mapped", [4440]], [[12678, 12678], "mapped", [4441]], [[12679, 12679], "mapped", [4484]], [[12680, 12680], "mapped", [4485]], [[12681, 12681], "mapped", [4488]], [[12682, 12682], "mapped", [4497]], [[12683, 12683], "mapped", [4498]], [[12684, 12684], "mapped", [4500]], [[12685, 12685], "mapped", [4510]], [[12686, 12686], "mapped", [4513]], [[12687, 12687], "disallowed"], [[12688, 12689], "valid", [], "NV8"], [[12690, 12690], "mapped", [19968]], [[12691, 12691], "mapped", [20108]], [[12692, 12692], "mapped", [19977]], [[12693, 12693], "mapped", [22235]], [[12694, 12694], "mapped", [19978]], [[12695, 12695], "mapped", [20013]], [[12696, 12696], "mapped", [19979]], [[12697, 12697], "mapped", [30002]], [[12698, 12698], "mapped", [20057]], [[12699, 12699], "mapped", [19993]], [[12700, 12700], "mapped", [19969]], [[12701, 12701], "mapped", [22825]], [[12702, 12702], "mapped", [22320]], [[12703, 12703], "mapped", [20154]], [[12704, 12727], "valid"], [[12728, 12730], "valid"], [[12731, 12735], "disallowed"], [[12736, 12751], "valid", [], "NV8"], [[12752, 12771], "valid", [], "NV8"], [[12772, 12783], "disallowed"], [[12784, 12799], "valid"], [[12800, 12800], "disallowed_STD3_mapped", [40, 4352, 41]], [[12801, 12801], "disallowed_STD3_mapped", [40, 4354, 41]], [[12802, 12802], "disallowed_STD3_mapped", [40, 4355, 41]], [[12803, 12803], "disallowed_STD3_mapped", [40, 4357, 41]], [[12804, 12804], "disallowed_STD3_mapped", [40, 4358, 41]], [[12805, 12805], "disallowed_STD3_mapped", [40, 4359, 41]], [[12806, 12806], "disallowed_STD3_mapped", [40, 4361, 41]], [[12807, 12807], "disallowed_STD3_mapped", [40, 4363, 41]], [[12808, 12808], "disallowed_STD3_mapped", [40, 4364, 41]], [[12809, 12809], "disallowed_STD3_mapped", [40, 4366, 41]], [[12810, 12810], "disallowed_STD3_mapped", [40, 4367, 41]], [[12811, 12811], "disallowed_STD3_mapped", [40, 4368, 41]], [[12812, 12812], "disallowed_STD3_mapped", [40, 4369, 41]], [[12813, 12813], "disallowed_STD3_mapped", [40, 4370, 41]], [[12814, 12814], "disallowed_STD3_mapped", [40, 44032, 41]], [[12815, 12815], "disallowed_STD3_mapped", [40, 45208, 41]], [[12816, 12816], "disallowed_STD3_mapped", [40, 45796, 41]], [[12817, 12817], "disallowed_STD3_mapped", [40, 46972, 41]], [[12818, 12818], "disallowed_STD3_mapped", [40, 47560, 41]], [[12819, 12819], "disallowed_STD3_mapped", [40, 48148, 41]], [[12820, 12820], "disallowed_STD3_mapped", [40, 49324, 41]], [[12821, 12821], "disallowed_STD3_mapped", [40, 50500, 41]], [[12822, 12822], "disallowed_STD3_mapped", [40, 51088, 41]], [[12823, 12823], "disallowed_STD3_mapped", [40, 52264, 41]], [[12824, 12824], "disallowed_STD3_mapped", [40, 52852, 41]], [[12825, 12825], "disallowed_STD3_mapped", [40, 53440, 41]], [[12826, 12826], "disallowed_STD3_mapped", [40, 54028, 41]], [[12827, 12827], "disallowed_STD3_mapped", [40, 54616, 41]], [[12828, 12828], "disallowed_STD3_mapped", [40, 51452, 41]], [[12829, 12829], "disallowed_STD3_mapped", [40, 50724, 51204, 41]], [[12830, 12830], "disallowed_STD3_mapped", [40, 50724, 54980, 41]], [[12831, 12831], "disallowed"], [[12832, 12832], "disallowed_STD3_mapped", [40, 19968, 41]], [[12833, 12833], "disallowed_STD3_mapped", [40, 20108, 41]], [[12834, 12834], "disallowed_STD3_mapped", [40, 19977, 41]], [[12835, 12835], "disallowed_STD3_mapped", [40, 22235, 41]], [[12836, 12836], "disallowed_STD3_mapped", [40, 20116, 41]], [[12837, 12837], "disallowed_STD3_mapped", [40, 20845, 41]], [[12838, 12838], "disallowed_STD3_mapped", [40, 19971, 41]], [[12839, 12839], "disallowed_STD3_mapped", [40, 20843, 41]], [[12840, 12840], "disallowed_STD3_mapped", [40, 20061, 41]], [[12841, 12841], "disallowed_STD3_mapped", [40, 21313, 41]], [[12842, 12842], "disallowed_STD3_mapped", [40, 26376, 41]], [[12843, 12843], "disallowed_STD3_mapped", [40, 28779, 41]], [[12844, 12844], "disallowed_STD3_mapped", [40, 27700, 41]], [[12845, 12845], "disallowed_STD3_mapped", [40, 26408, 41]], [[12846, 12846], "disallowed_STD3_mapped", [40, 37329, 41]], [[12847, 12847], "disallowed_STD3_mapped", [40, 22303, 41]], [[12848, 12848], "disallowed_STD3_mapped", [40, 26085, 41]], [[12849, 12849], "disallowed_STD3_mapped", [40, 26666, 41]], [[12850, 12850], "disallowed_STD3_mapped", [40, 26377, 41]], [[12851, 12851], "disallowed_STD3_mapped", [40, 31038, 41]], [[12852, 12852], "disallowed_STD3_mapped", [40, 21517, 41]], [[12853, 12853], "disallowed_STD3_mapped", [40, 29305, 41]], [[12854, 12854], "disallowed_STD3_mapped", [40, 36001, 41]], [[12855, 12855], "disallowed_STD3_mapped", [40, 31069, 41]], [[12856, 12856], "disallowed_STD3_mapped", [40, 21172, 41]], [[12857, 12857], "disallowed_STD3_mapped", [40, 20195, 41]], [[12858, 12858], "disallowed_STD3_mapped", [40, 21628, 41]], [[12859, 12859], "disallowed_STD3_mapped", [40, 23398, 41]], [[12860, 12860], "disallowed_STD3_mapped", [40, 30435, 41]], [[12861, 12861], "disallowed_STD3_mapped", [40, 20225, 41]], [[12862, 12862], "disallowed_STD3_mapped", [40, 36039, 41]], [[12863, 12863], "disallowed_STD3_mapped", [40, 21332, 41]], [[12864, 12864], "disallowed_STD3_mapped", [40, 31085, 41]], [[12865, 12865], "disallowed_STD3_mapped", [40, 20241, 41]], [[12866, 12866], "disallowed_STD3_mapped", [40, 33258, 41]], [[12867, 12867], "disallowed_STD3_mapped", [40, 33267, 41]], [[12868, 12868], "mapped", [21839]], [[12869, 12869], "mapped", [24188]], [[12870, 12870], "mapped", [25991]], [[12871, 12871], "mapped", [31631]], [[12872, 12879], "valid", [], "NV8"], [[12880, 12880], "mapped", [112, 116, 101]], [[12881, 12881], "mapped", [50, 49]], [[12882, 12882], "mapped", [50, 50]], [[12883, 12883], "mapped", [50, 51]], [[12884, 12884], "mapped", [50, 52]], [[12885, 12885], "mapped", [50, 53]], [[12886, 12886], "mapped", [50, 54]], [[12887, 12887], "mapped", [50, 55]], [[12888, 12888], "mapped", [50, 56]], [[12889, 12889], "mapped", [50, 57]], [[12890, 12890], "mapped", [51, 48]], [[12891, 12891], "mapped", [51, 49]], [[12892, 12892], "mapped", [51, 50]], [[12893, 12893], "mapped", [51, 51]], [[12894, 12894], "mapped", [51, 52]], [[12895, 12895], "mapped", [51, 53]], [[12896, 12896], "mapped", [4352]], [[12897, 12897], "mapped", [4354]], [[12898, 12898], "mapped", [4355]], [[12899, 12899], "mapped", [4357]], [[12900, 12900], "mapped", [4358]], [[12901, 12901], "mapped", [4359]], [[12902, 12902], "mapped", [4361]], [[12903, 12903], "mapped", [4363]], [[12904, 12904], "mapped", [4364]], [[12905, 12905], "mapped", [4366]], [[12906, 12906], "mapped", [4367]], [[12907, 12907], "mapped", [4368]], [[12908, 12908], "mapped", [4369]], [[12909, 12909], "mapped", [4370]], [[12910, 12910], "mapped", [44032]], [[12911, 12911], "mapped", [45208]], [[12912, 12912], "mapped", [45796]], [[12913, 12913], "mapped", [46972]], [[12914, 12914], "mapped", [47560]], [[12915, 12915], "mapped", [48148]], [[12916, 12916], "mapped", [49324]], [[12917, 12917], "mapped", [50500]], [[12918, 12918], "mapped", [51088]], [[12919, 12919], "mapped", [52264]], [[12920, 12920], "mapped", [52852]], [[12921, 12921], "mapped", [53440]], [[12922, 12922], "mapped", [54028]], [[12923, 12923], "mapped", [54616]], [[12924, 12924], "mapped", [52280, 44256]], [[12925, 12925], "mapped", [51452, 51032]], [[12926, 12926], "mapped", [50864]], [[12927, 12927], "valid", [], "NV8"], [[12928, 12928], "mapped", [19968]], [[12929, 12929], "mapped", [20108]], [[12930, 12930], "mapped", [19977]], [[12931, 12931], "mapped", [22235]], [[12932, 12932], "mapped", [20116]], [[12933, 12933], "mapped", [20845]], [[12934, 12934], "mapped", [19971]], [[12935, 12935], "mapped", [20843]], [[12936, 12936], "mapped", [20061]], [[12937, 12937], "mapped", [21313]], [[12938, 12938], "mapped", [26376]], [[12939, 12939], "mapped", [28779]], [[12940, 12940], "mapped", [27700]], [[12941, 12941], "mapped", [26408]], [[12942, 12942], "mapped", [37329]], [[12943, 12943], "mapped", [22303]], [[12944, 12944], "mapped", [26085]], [[12945, 12945], "mapped", [26666]], [[12946, 12946], "mapped", [26377]], [[12947, 12947], "mapped", [31038]], [[12948, 12948], "mapped", [21517]], [[12949, 12949], "mapped", [29305]], [[12950, 12950], "mapped", [36001]], [[12951, 12951], "mapped", [31069]], [[12952, 12952], "mapped", [21172]], [[12953, 12953], "mapped", [31192]], [[12954, 12954], "mapped", [30007]], [[12955, 12955], "mapped", [22899]], [[12956, 12956], "mapped", [36969]], [[12957, 12957], "mapped", [20778]], [[12958, 12958], "mapped", [21360]], [[12959, 12959], "mapped", [27880]], [[12960, 12960], "mapped", [38917]], [[12961, 12961], "mapped", [20241]], [[12962, 12962], "mapped", [20889]], [[12963, 12963], "mapped", [27491]], [[12964, 12964], "mapped", [19978]], [[12965, 12965], "mapped", [20013]], [[12966, 12966], "mapped", [19979]], [[12967, 12967], "mapped", [24038]], [[12968, 12968], "mapped", [21491]], [[12969, 12969], "mapped", [21307]], [[12970, 12970], "mapped", [23447]], [[12971, 12971], "mapped", [23398]], [[12972, 12972], "mapped", [30435]], [[12973, 12973], "mapped", [20225]], [[12974, 12974], "mapped", [36039]], [[12975, 12975], "mapped", [21332]], [[12976, 12976], "mapped", [22812]], [[12977, 12977], "mapped", [51, 54]], [[12978, 12978], "mapped", [51, 55]], [[12979, 12979], "mapped", [51, 56]], [[12980, 12980], "mapped", [51, 57]], [[12981, 12981], "mapped", [52, 48]], [[12982, 12982], "mapped", [52, 49]], [[12983, 12983], "mapped", [52, 50]], [[12984, 12984], "mapped", [52, 51]], [[12985, 12985], "mapped", [52, 52]], [[12986, 12986], "mapped", [52, 53]], [[12987, 12987], "mapped", [52, 54]], [[12988, 12988], "mapped", [52, 55]], [[12989, 12989], "mapped", [52, 56]], [[12990, 12990], "mapped", [52, 57]], [[12991, 12991], "mapped", [53, 48]], [[12992, 12992], "mapped", [49, 26376]], [[12993, 12993], "mapped", [50, 26376]], [[12994, 12994], "mapped", [51, 26376]], [[12995, 12995], "mapped", [52, 26376]], [[12996, 12996], "mapped", [53, 26376]], [[12997, 12997], "mapped", [54, 26376]], [[12998, 12998], "mapped", [55, 26376]], [[12999, 12999], "mapped", [56, 26376]], [[13e3, 13e3], "mapped", [57, 26376]], [[13001, 13001], "mapped", [49, 48, 26376]], [[13002, 13002], "mapped", [49, 49, 26376]], [[13003, 13003], "mapped", [49, 50, 26376]], [[13004, 13004], "mapped", [104, 103]], [[13005, 13005], "mapped", [101, 114, 103]], [[13006, 13006], "mapped", [101, 118]], [[13007, 13007], "mapped", [108, 116, 100]], [[13008, 13008], "mapped", [12450]], [[13009, 13009], "mapped", [12452]], [[13010, 13010], "mapped", [12454]], [[13011, 13011], "mapped", [12456]], [[13012, 13012], "mapped", [12458]], [[13013, 13013], "mapped", [12459]], [[13014, 13014], "mapped", [12461]], [[13015, 13015], "mapped", [12463]], [[13016, 13016], "mapped", [12465]], [[13017, 13017], "mapped", [12467]], [[13018, 13018], "mapped", [12469]], [[13019, 13019], "mapped", [12471]], [[13020, 13020], "mapped", [12473]], [[13021, 13021], "mapped", [12475]], [[13022, 13022], "mapped", [12477]], [[13023, 13023], "mapped", [12479]], [[13024, 13024], "mapped", [12481]], [[13025, 13025], "mapped", [12484]], [[13026, 13026], "mapped", [12486]], [[13027, 13027], "mapped", [12488]], [[13028, 13028], "mapped", [12490]], [[13029, 13029], "mapped", [12491]], [[13030, 13030], "mapped", [12492]], [[13031, 13031], "mapped", [12493]], [[13032, 13032], "mapped", [12494]], [[13033, 13033], "mapped", [12495]], [[13034, 13034], "mapped", [12498]], [[13035, 13035], "mapped", [12501]], [[13036, 13036], "mapped", [12504]], [[13037, 13037], "mapped", [12507]], [[13038, 13038], "mapped", [12510]], [[13039, 13039], "mapped", [12511]], [[13040, 13040], "mapped", [12512]], [[13041, 13041], "mapped", [12513]], [[13042, 13042], "mapped", [12514]], [[13043, 13043], "mapped", [12516]], [[13044, 13044], "mapped", [12518]], [[13045, 13045], "mapped", [12520]], [[13046, 13046], "mapped", [12521]], [[13047, 13047], "mapped", [12522]], [[13048, 13048], "mapped", [12523]], [[13049, 13049], "mapped", [12524]], [[13050, 13050], "mapped", [12525]], [[13051, 13051], "mapped", [12527]], [[13052, 13052], "mapped", [12528]], [[13053, 13053], "mapped", [12529]], [[13054, 13054], "mapped", [12530]], [[13055, 13055], "disallowed"], [[13056, 13056], "mapped", [12450, 12497, 12540, 12488]], [[13057, 13057], "mapped", [12450, 12523, 12501, 12449]], [[13058, 13058], "mapped", [12450, 12531, 12506, 12450]], [[13059, 13059], "mapped", [12450, 12540, 12523]], [[13060, 13060], "mapped", [12452, 12491, 12531, 12464]], [[13061, 13061], "mapped", [12452, 12531, 12481]], [[13062, 13062], "mapped", [12454, 12457, 12531]], [[13063, 13063], "mapped", [12456, 12473, 12463, 12540, 12489]], [[13064, 13064], "mapped", [12456, 12540, 12459, 12540]], [[13065, 13065], "mapped", [12458, 12531, 12473]], [[13066, 13066], "mapped", [12458, 12540, 12512]], [[13067, 13067], "mapped", [12459, 12452, 12522]], [[13068, 13068], "mapped", [12459, 12521, 12483, 12488]], [[13069, 13069], "mapped", [12459, 12525, 12522, 12540]], [[13070, 13070], "mapped", [12460, 12525, 12531]], [[13071, 13071], "mapped", [12460, 12531, 12510]], [[13072, 13072], "mapped", [12462, 12460]], [[13073, 13073], "mapped", [12462, 12491, 12540]], [[13074, 13074], "mapped", [12461, 12517, 12522, 12540]], [[13075, 13075], "mapped", [12462, 12523, 12480, 12540]], [[13076, 13076], "mapped", [12461, 12525]], [[13077, 13077], "mapped", [12461, 12525, 12464, 12521, 12512]], [[13078, 13078], "mapped", [12461, 12525, 12513, 12540, 12488, 12523]], [[13079, 13079], "mapped", [12461, 12525, 12527, 12483, 12488]], [[13080, 13080], "mapped", [12464, 12521, 12512]], [[13081, 13081], "mapped", [12464, 12521, 12512, 12488, 12531]], [[13082, 13082], "mapped", [12463, 12523, 12476, 12452, 12525]], [[13083, 13083], "mapped", [12463, 12525, 12540, 12493]], [[13084, 13084], "mapped", [12465, 12540, 12473]], [[13085, 13085], "mapped", [12467, 12523, 12490]], [[13086, 13086], "mapped", [12467, 12540, 12509]], [[13087, 13087], "mapped", [12469, 12452, 12463, 12523]], [[13088, 13088], "mapped", [12469, 12531, 12481, 12540, 12512]], [[13089, 13089], "mapped", [12471, 12522, 12531, 12464]], [[13090, 13090], "mapped", [12475, 12531, 12481]], [[13091, 13091], "mapped", [12475, 12531, 12488]], [[13092, 13092], "mapped", [12480, 12540, 12473]], [[13093, 13093], "mapped", [12487, 12471]], [[13094, 13094], "mapped", [12489, 12523]], [[13095, 13095], "mapped", [12488, 12531]], [[13096, 13096], "mapped", [12490, 12494]], [[13097, 13097], "mapped", [12494, 12483, 12488]], [[13098, 13098], "mapped", [12495, 12452, 12484]], [[13099, 13099], "mapped", [12497, 12540, 12475, 12531, 12488]], [[13100, 13100], "mapped", [12497, 12540, 12484]], [[13101, 13101], "mapped", [12496, 12540, 12524, 12523]], [[13102, 13102], "mapped", [12500, 12450, 12473, 12488, 12523]], [[13103, 13103], "mapped", [12500, 12463, 12523]], [[13104, 13104], "mapped", [12500, 12467]], [[13105, 13105], "mapped", [12499, 12523]], [[13106, 13106], "mapped", [12501, 12449, 12521, 12483, 12489]], [[13107, 13107], "mapped", [12501, 12451, 12540, 12488]], [[13108, 13108], "mapped", [12502, 12483, 12471, 12455, 12523]], [[13109, 13109], "mapped", [12501, 12521, 12531]], [[13110, 13110], "mapped", [12504, 12463, 12479, 12540, 12523]], [[13111, 13111], "mapped", [12506, 12477]], [[13112, 13112], "mapped", [12506, 12491, 12498]], [[13113, 13113], "mapped", [12504, 12523, 12484]], [[13114, 13114], "mapped", [12506, 12531, 12473]], [[13115, 13115], "mapped", [12506, 12540, 12472]], [[13116, 13116], "mapped", [12505, 12540, 12479]], [[13117, 13117], "mapped", [12509, 12452, 12531, 12488]], [[13118, 13118], "mapped", [12508, 12523, 12488]], [[13119, 13119], "mapped", [12507, 12531]], [[13120, 13120], "mapped", [12509, 12531, 12489]], [[13121, 13121], "mapped", [12507, 12540, 12523]], [[13122, 13122], "mapped", [12507, 12540, 12531]], [[13123, 13123], "mapped", [12510, 12452, 12463, 12525]], [[13124, 13124], "mapped", [12510, 12452, 12523]], [[13125, 13125], "mapped", [12510, 12483, 12495]], [[13126, 13126], "mapped", [12510, 12523, 12463]], [[13127, 13127], "mapped", [12510, 12531, 12471, 12519, 12531]], [[13128, 13128], "mapped", [12511, 12463, 12525, 12531]], [[13129, 13129], "mapped", [12511, 12522]], [[13130, 13130], "mapped", [12511, 12522, 12496, 12540, 12523]], [[13131, 13131], "mapped", [12513, 12460]], [[13132, 13132], "mapped", [12513, 12460, 12488, 12531]], [[13133, 13133], "mapped", [12513, 12540, 12488, 12523]], [[13134, 13134], "mapped", [12516, 12540, 12489]], [[13135, 13135], "mapped", [12516, 12540, 12523]], [[13136, 13136], "mapped", [12518, 12450, 12531]], [[13137, 13137], "mapped", [12522, 12483, 12488, 12523]], [[13138, 13138], "mapped", [12522, 12521]], [[13139, 13139], "mapped", [12523, 12500, 12540]], [[13140, 13140], "mapped", [12523, 12540, 12502, 12523]], [[13141, 13141], "mapped", [12524, 12512]], [[13142, 13142], "mapped", [12524, 12531, 12488, 12466, 12531]], [[13143, 13143], "mapped", [12527, 12483, 12488]], [[13144, 13144], "mapped", [48, 28857]], [[13145, 13145], "mapped", [49, 28857]], [[13146, 13146], "mapped", [50, 28857]], [[13147, 13147], "mapped", [51, 28857]], [[13148, 13148], "mapped", [52, 28857]], [[13149, 13149], "mapped", [53, 28857]], [[13150, 13150], "mapped", [54, 28857]], [[13151, 13151], "mapped", [55, 28857]], [[13152, 13152], "mapped", [56, 28857]], [[13153, 13153], "mapped", [57, 28857]], [[13154, 13154], "mapped", [49, 48, 28857]], [[13155, 13155], "mapped", [49, 49, 28857]], [[13156, 13156], "mapped", [49, 50, 28857]], [[13157, 13157], "mapped", [49, 51, 28857]], [[13158, 13158], "mapped", [49, 52, 28857]], [[13159, 13159], "mapped", [49, 53, 28857]], [[13160, 13160], "mapped", [49, 54, 28857]], [[13161, 13161], "mapped", [49, 55, 28857]], [[13162, 13162], "mapped", [49, 56, 28857]], [[13163, 13163], "mapped", [49, 57, 28857]], [[13164, 13164], "mapped", [50, 48, 28857]], [[13165, 13165], "mapped", [50, 49, 28857]], [[13166, 13166], "mapped", [50, 50, 28857]], [[13167, 13167], "mapped", [50, 51, 28857]], [[13168, 13168], "mapped", [50, 52, 28857]], [[13169, 13169], "mapped", [104, 112, 97]], [[13170, 13170], "mapped", [100, 97]], [[13171, 13171], "mapped", [97, 117]], [[13172, 13172], "mapped", [98, 97, 114]], [[13173, 13173], "mapped", [111, 118]], [[13174, 13174], "mapped", [112, 99]], [[13175, 13175], "mapped", [100, 109]], [[13176, 13176], "mapped", [100, 109, 50]], [[13177, 13177], "mapped", [100, 109, 51]], [[13178, 13178], "mapped", [105, 117]], [[13179, 13179], "mapped", [24179, 25104]], [[13180, 13180], "mapped", [26157, 21644]], [[13181, 13181], "mapped", [22823, 27491]], [[13182, 13182], "mapped", [26126, 27835]], [[13183, 13183], "mapped", [26666, 24335, 20250, 31038]], [[13184, 13184], "mapped", [112, 97]], [[13185, 13185], "mapped", [110, 97]], [[13186, 13186], "mapped", [956, 97]], [[13187, 13187], "mapped", [109, 97]], [[13188, 13188], "mapped", [107, 97]], [[13189, 13189], "mapped", [107, 98]], [[13190, 13190], "mapped", [109, 98]], [[13191, 13191], "mapped", [103, 98]], [[13192, 13192], "mapped", [99, 97, 108]], [[13193, 13193], "mapped", [107, 99, 97, 108]], [[13194, 13194], "mapped", [112, 102]], [[13195, 13195], "mapped", [110, 102]], [[13196, 13196], "mapped", [956, 102]], [[13197, 13197], "mapped", [956, 103]], [[13198, 13198], "mapped", [109, 103]], [[13199, 13199], "mapped", [107, 103]], [[13200, 13200], "mapped", [104, 122]], [[13201, 13201], "mapped", [107, 104, 122]], [[13202, 13202], "mapped", [109, 104, 122]], [[13203, 13203], "mapped", [103, 104, 122]], [[13204, 13204], "mapped", [116, 104, 122]], [[13205, 13205], "mapped", [956, 108]], [[13206, 13206], "mapped", [109, 108]], [[13207, 13207], "mapped", [100, 108]], [[13208, 13208], "mapped", [107, 108]], [[13209, 13209], "mapped", [102, 109]], [[13210, 13210], "mapped", [110, 109]], [[13211, 13211], "mapped", [956, 109]], [[13212, 13212], "mapped", [109, 109]], [[13213, 13213], "mapped", [99, 109]], [[13214, 13214], "mapped", [107, 109]], [[13215, 13215], "mapped", [109, 109, 50]], [[13216, 13216], "mapped", [99, 109, 50]], [[13217, 13217], "mapped", [109, 50]], [[13218, 13218], "mapped", [107, 109, 50]], [[13219, 13219], "mapped", [109, 109, 51]], [[13220, 13220], "mapped", [99, 109, 51]], [[13221, 13221], "mapped", [109, 51]], [[13222, 13222], "mapped", [107, 109, 51]], [[13223, 13223], "mapped", [109, 8725, 115]], [[13224, 13224], "mapped", [109, 8725, 115, 50]], [[13225, 13225], "mapped", [112, 97]], [[13226, 13226], "mapped", [107, 112, 97]], [[13227, 13227], "mapped", [109, 112, 97]], [[13228, 13228], "mapped", [103, 112, 97]], [[13229, 13229], "mapped", [114, 97, 100]], [[13230, 13230], "mapped", [114, 97, 100, 8725, 115]], [[13231, 13231], "mapped", [114, 97, 100, 8725, 115, 50]], [[13232, 13232], "mapped", [112, 115]], [[13233, 13233], "mapped", [110, 115]], [[13234, 13234], "mapped", [956, 115]], [[13235, 13235], "mapped", [109, 115]], [[13236, 13236], "mapped", [112, 118]], [[13237, 13237], "mapped", [110, 118]], [[13238, 13238], "mapped", [956, 118]], [[13239, 13239], "mapped", [109, 118]], [[13240, 13240], "mapped", [107, 118]], [[13241, 13241], "mapped", [109, 118]], [[13242, 13242], "mapped", [112, 119]], [[13243, 13243], "mapped", [110, 119]], [[13244, 13244], "mapped", [956, 119]], [[13245, 13245], "mapped", [109, 119]], [[13246, 13246], "mapped", [107, 119]], [[13247, 13247], "mapped", [109, 119]], [[13248, 13248], "mapped", [107, 969]], [[13249, 13249], "mapped", [109, 969]], [[13250, 13250], "disallowed"], [[13251, 13251], "mapped", [98, 113]], [[13252, 13252], "mapped", [99, 99]], [[13253, 13253], "mapped", [99, 100]], [[13254, 13254], "mapped", [99, 8725, 107, 103]], [[13255, 13255], "disallowed"], [[13256, 13256], "mapped", [100, 98]], [[13257, 13257], "mapped", [103, 121]], [[13258, 13258], "mapped", [104, 97]], [[13259, 13259], "mapped", [104, 112]], [[13260, 13260], "mapped", [105, 110]], [[13261, 13261], "mapped", [107, 107]], [[13262, 13262], "mapped", [107, 109]], [[13263, 13263], "mapped", [107, 116]], [[13264, 13264], "mapped", [108, 109]], [[13265, 13265], "mapped", [108, 110]], [[13266, 13266], "mapped", [108, 111, 103]], [[13267, 13267], "mapped", [108, 120]], [[13268, 13268], "mapped", [109, 98]], [[13269, 13269], "mapped", [109, 105, 108]], [[13270, 13270], "mapped", [109, 111, 108]], [[13271, 13271], "mapped", [112, 104]], [[13272, 13272], "disallowed"], [[13273, 13273], "mapped", [112, 112, 109]], [[13274, 13274], "mapped", [112, 114]], [[13275, 13275], "mapped", [115, 114]], [[13276, 13276], "mapped", [115, 118]], [[13277, 13277], "mapped", [119, 98]], [[13278, 13278], "mapped", [118, 8725, 109]], [[13279, 13279], "mapped", [97, 8725, 109]], [[13280, 13280], "mapped", [49, 26085]], [[13281, 13281], "mapped", [50, 26085]], [[13282, 13282], "mapped", [51, 26085]], [[13283, 13283], "mapped", [52, 26085]], [[13284, 13284], "mapped", [53, 26085]], [[13285, 13285], "mapped", [54, 26085]], [[13286, 13286], "mapped", [55, 26085]], [[13287, 13287], "mapped", [56, 26085]], [[13288, 13288], "mapped", [57, 26085]], [[13289, 13289], "mapped", [49, 48, 26085]], [[13290, 13290], "mapped", [49, 49, 26085]], [[13291, 13291], "mapped", [49, 50, 26085]], [[13292, 13292], "mapped", [49, 51, 26085]], [[13293, 13293], "mapped", [49, 52, 26085]], [[13294, 13294], "mapped", [49, 53, 26085]], [[13295, 13295], "mapped", [49, 54, 26085]], [[13296, 13296], "mapped", [49, 55, 26085]], [[13297, 13297], "mapped", [49, 56, 26085]], [[13298, 13298], "mapped", [49, 57, 26085]], [[13299, 13299], "mapped", [50, 48, 26085]], [[13300, 13300], "mapped", [50, 49, 26085]], [[13301, 13301], "mapped", [50, 50, 26085]], [[13302, 13302], "mapped", [50, 51, 26085]], [[13303, 13303], "mapped", [50, 52, 26085]], [[13304, 13304], "mapped", [50, 53, 26085]], [[13305, 13305], "mapped", [50, 54, 26085]], [[13306, 13306], "mapped", [50, 55, 26085]], [[13307, 13307], "mapped", [50, 56, 26085]], [[13308, 13308], "mapped", [50, 57, 26085]], [[13309, 13309], "mapped", [51, 48, 26085]], [[13310, 13310], "mapped", [51, 49, 26085]], [[13311, 13311], "mapped", [103, 97, 108]], [[13312, 19893], "valid"], [[19894, 19903], "disallowed"], [[19904, 19967], "valid", [], "NV8"], [[19968, 40869], "valid"], [[40870, 40891], "valid"], [[40892, 40899], "valid"], [[40900, 40907], "valid"], [[40908, 40908], "valid"], [[40909, 40917], "valid"], [[40918, 40959], "disallowed"], [[40960, 42124], "valid"], [[42125, 42127], "disallowed"], [[42128, 42145], "valid", [], "NV8"], [[42146, 42147], "valid", [], "NV8"], [[42148, 42163], "valid", [], "NV8"], [[42164, 42164], "valid", [], "NV8"], [[42165, 42176], "valid", [], "NV8"], [[42177, 42177], "valid", [], "NV8"], [[42178, 42180], "valid", [], "NV8"], [[42181, 42181], "valid", [], "NV8"], [[42182, 42182], "valid", [], "NV8"], [[42183, 42191], "disallowed"], [[42192, 42237], "valid"], [[42238, 42239], "valid", [], "NV8"], [[42240, 42508], "valid"], [[42509, 42511], "valid", [], "NV8"], [[42512, 42539], "valid"], [[42540, 42559], "disallowed"], [[42560, 42560], "mapped", [42561]], [[42561, 42561], "valid"], [[42562, 42562], "mapped", [42563]], [[42563, 42563], "valid"], [[42564, 42564], "mapped", [42565]], [[42565, 42565], "valid"], [[42566, 42566], "mapped", [42567]], [[42567, 42567], "valid"], [[42568, 42568], "mapped", [42569]], [[42569, 42569], "valid"], [[42570, 42570], "mapped", [42571]], [[42571, 42571], "valid"], [[42572, 42572], "mapped", [42573]], [[42573, 42573], "valid"], [[42574, 42574], "mapped", [42575]], [[42575, 42575], "valid"], [[42576, 42576], "mapped", [42577]], [[42577, 42577], "valid"], [[42578, 42578], "mapped", [42579]], [[42579, 42579], "valid"], [[42580, 42580], "mapped", [42581]], [[42581, 42581], "valid"], [[42582, 42582], "mapped", [42583]], [[42583, 42583], "valid"], [[42584, 42584], "mapped", [42585]], [[42585, 42585], "valid"], [[42586, 42586], "mapped", [42587]], [[42587, 42587], "valid"], [[42588, 42588], "mapped", [42589]], [[42589, 42589], "valid"], [[42590, 42590], "mapped", [42591]], [[42591, 42591], "valid"], [[42592, 42592], "mapped", [42593]], [[42593, 42593], "valid"], [[42594, 42594], "mapped", [42595]], [[42595, 42595], "valid"], [[42596, 42596], "mapped", [42597]], [[42597, 42597], "valid"], [[42598, 42598], "mapped", [42599]], [[42599, 42599], "valid"], [[42600, 42600], "mapped", [42601]], [[42601, 42601], "valid"], [[42602, 42602], "mapped", [42603]], [[42603, 42603], "valid"], [[42604, 42604], "mapped", [42605]], [[42605, 42607], "valid"], [[42608, 42611], "valid", [], "NV8"], [[42612, 42619], "valid"], [[42620, 42621], "valid"], [[42622, 42622], "valid", [], "NV8"], [[42623, 42623], "valid"], [[42624, 42624], "mapped", [42625]], [[42625, 42625], "valid"], [[42626, 42626], "mapped", [42627]], [[42627, 42627], "valid"], [[42628, 42628], "mapped", [42629]], [[42629, 42629], "valid"], [[42630, 42630], "mapped", [42631]], [[42631, 42631], "valid"], [[42632, 42632], "mapped", [42633]], [[42633, 42633], "valid"], [[42634, 42634], "mapped", [42635]], [[42635, 42635], "valid"], [[42636, 42636], "mapped", [42637]], [[42637, 42637], "valid"], [[42638, 42638], "mapped", [42639]], [[42639, 42639], "valid"], [[42640, 42640], "mapped", [42641]], [[42641, 42641], "valid"], [[42642, 42642], "mapped", [42643]], [[42643, 42643], "valid"], [[42644, 42644], "mapped", [42645]], [[42645, 42645], "valid"], [[42646, 42646], "mapped", [42647]], [[42647, 42647], "valid"], [[42648, 42648], "mapped", [42649]], [[42649, 42649], "valid"], [[42650, 42650], "mapped", [42651]], [[42651, 42651], "valid"], [[42652, 42652], "mapped", [1098]], [[42653, 42653], "mapped", [1100]], [[42654, 42654], "valid"], [[42655, 42655], "valid"], [[42656, 42725], "valid"], [[42726, 42735], "valid", [], "NV8"], [[42736, 42737], "valid"], [[42738, 42743], "valid", [], "NV8"], [[42744, 42751], "disallowed"], [[42752, 42774], "valid", [], "NV8"], [[42775, 42778], "valid"], [[42779, 42783], "valid"], [[42784, 42785], "valid", [], "NV8"], [[42786, 42786], "mapped", [42787]], [[42787, 42787], "valid"], [[42788, 42788], "mapped", [42789]], [[42789, 42789], "valid"], [[42790, 42790], "mapped", [42791]], [[42791, 42791], "valid"], [[42792, 42792], "mapped", [42793]], [[42793, 42793], "valid"], [[42794, 42794], "mapped", [42795]], [[42795, 42795], "valid"], [[42796, 42796], "mapped", [42797]], [[42797, 42797], "valid"], [[42798, 42798], "mapped", [42799]], [[42799, 42801], "valid"], [[42802, 42802], "mapped", [42803]], [[42803, 42803], "valid"], [[42804, 42804], "mapped", [42805]], [[42805, 42805], "valid"], [[42806, 42806], "mapped", [42807]], [[42807, 42807], "valid"], [[42808, 42808], "mapped", [42809]], [[42809, 42809], "valid"], [[42810, 42810], "mapped", [42811]], [[42811, 42811], "valid"], [[42812, 42812], "mapped", [42813]], [[42813, 42813], "valid"], [[42814, 42814], "mapped", [42815]], [[42815, 42815], "valid"], [[42816, 42816], "mapped", [42817]], [[42817, 42817], "valid"], [[42818, 42818], "mapped", [42819]], [[42819, 42819], "valid"], [[42820, 42820], "mapped", [42821]], [[42821, 42821], "valid"], [[42822, 42822], "mapped", [42823]], [[42823, 42823], "valid"], [[42824, 42824], "mapped", [42825]], [[42825, 42825], "valid"], [[42826, 42826], "mapped", [42827]], [[42827, 42827], "valid"], [[42828, 42828], "mapped", [42829]], [[42829, 42829], "valid"], [[42830, 42830], "mapped", [42831]], [[42831, 42831], "valid"], [[42832, 42832], "mapped", [42833]], [[42833, 42833], "valid"], [[42834, 42834], "mapped", [42835]], [[42835, 42835], "valid"], [[42836, 42836], "mapped", [42837]], [[42837, 42837], "valid"], [[42838, 42838], "mapped", [42839]], [[42839, 42839], "valid"], [[42840, 42840], "mapped", [42841]], [[42841, 42841], "valid"], [[42842, 42842], "mapped", [42843]], [[42843, 42843], "valid"], [[42844, 42844], "mapped", [42845]], [[42845, 42845], "valid"], [[42846, 42846], "mapped", [42847]], [[42847, 42847], "valid"], [[42848, 42848], "mapped", [42849]], [[42849, 42849], "valid"], [[42850, 42850], "mapped", [42851]], [[42851, 42851], "valid"], [[42852, 42852], "mapped", [42853]], [[42853, 42853], "valid"], [[42854, 42854], "mapped", [42855]], [[42855, 42855], "valid"], [[42856, 42856], "mapped", [42857]], [[42857, 42857], "valid"], [[42858, 42858], "mapped", [42859]], [[42859, 42859], "valid"], [[42860, 42860], "mapped", [42861]], [[42861, 42861], "valid"], [[42862, 42862], "mapped", [42863]], [[42863, 42863], "valid"], [[42864, 42864], "mapped", [42863]], [[42865, 42872], "valid"], [[42873, 42873], "mapped", [42874]], [[42874, 42874], "valid"], [[42875, 42875], "mapped", [42876]], [[42876, 42876], "valid"], [[42877, 42877], "mapped", [7545]], [[42878, 42878], "mapped", [42879]], [[42879, 42879], "valid"], [[42880, 42880], "mapped", [42881]], [[42881, 42881], "valid"], [[42882, 42882], "mapped", [42883]], [[42883, 42883], "valid"], [[42884, 42884], "mapped", [42885]], [[42885, 42885], "valid"], [[42886, 42886], "mapped", [42887]], [[42887, 42888], "valid"], [[42889, 42890], "valid", [], "NV8"], [[42891, 42891], "mapped", [42892]], [[42892, 42892], "valid"], [[42893, 42893], "mapped", [613]], [[42894, 42894], "valid"], [[42895, 42895], "valid"], [[42896, 42896], "mapped", [42897]], [[42897, 42897], "valid"], [[42898, 42898], "mapped", [42899]], [[42899, 42899], "valid"], [[42900, 42901], "valid"], [[42902, 42902], "mapped", [42903]], [[42903, 42903], "valid"], [[42904, 42904], "mapped", [42905]], [[42905, 42905], "valid"], [[42906, 42906], "mapped", [42907]], [[42907, 42907], "valid"], [[42908, 42908], "mapped", [42909]], [[42909, 42909], "valid"], [[42910, 42910], "mapped", [42911]], [[42911, 42911], "valid"], [[42912, 42912], "mapped", [42913]], [[42913, 42913], "valid"], [[42914, 42914], "mapped", [42915]], [[42915, 42915], "valid"], [[42916, 42916], "mapped", [42917]], [[42917, 42917], "valid"], [[42918, 42918], "mapped", [42919]], [[42919, 42919], "valid"], [[42920, 42920], "mapped", [42921]], [[42921, 42921], "valid"], [[42922, 42922], "mapped", [614]], [[42923, 42923], "mapped", [604]], [[42924, 42924], "mapped", [609]], [[42925, 42925], "mapped", [620]], [[42926, 42927], "disallowed"], [[42928, 42928], "mapped", [670]], [[42929, 42929], "mapped", [647]], [[42930, 42930], "mapped", [669]], [[42931, 42931], "mapped", [43859]], [[42932, 42932], "mapped", [42933]], [[42933, 42933], "valid"], [[42934, 42934], "mapped", [42935]], [[42935, 42935], "valid"], [[42936, 42998], "disallowed"], [[42999, 42999], "valid"], [[43e3, 43e3], "mapped", [295]], [[43001, 43001], "mapped", [339]], [[43002, 43002], "valid"], [[43003, 43007], "valid"], [[43008, 43047], "valid"], [[43048, 43051], "valid", [], "NV8"], [[43052, 43055], "disallowed"], [[43056, 43065], "valid", [], "NV8"], [[43066, 43071], "disallowed"], [[43072, 43123], "valid"], [[43124, 43127], "valid", [], "NV8"], [[43128, 43135], "disallowed"], [[43136, 43204], "valid"], [[43205, 43213], "disallowed"], [[43214, 43215], "valid", [], "NV8"], [[43216, 43225], "valid"], [[43226, 43231], "disallowed"], [[43232, 43255], "valid"], [[43256, 43258], "valid", [], "NV8"], [[43259, 43259], "valid"], [[43260, 43260], "valid", [], "NV8"], [[43261, 43261], "valid"], [[43262, 43263], "disallowed"], [[43264, 43309], "valid"], [[43310, 43311], "valid", [], "NV8"], [[43312, 43347], "valid"], [[43348, 43358], "disallowed"], [[43359, 43359], "valid", [], "NV8"], [[43360, 43388], "valid", [], "NV8"], [[43389, 43391], "disallowed"], [[43392, 43456], "valid"], [[43457, 43469], "valid", [], "NV8"], [[43470, 43470], "disallowed"], [[43471, 43481], "valid"], [[43482, 43485], "disallowed"], [[43486, 43487], "valid", [], "NV8"], [[43488, 43518], "valid"], [[43519, 43519], "disallowed"], [[43520, 43574], "valid"], [[43575, 43583], "disallowed"], [[43584, 43597], "valid"], [[43598, 43599], "disallowed"], [[43600, 43609], "valid"], [[43610, 43611], "disallowed"], [[43612, 43615], "valid", [], "NV8"], [[43616, 43638], "valid"], [[43639, 43641], "valid", [], "NV8"], [[43642, 43643], "valid"], [[43644, 43647], "valid"], [[43648, 43714], "valid"], [[43715, 43738], "disallowed"], [[43739, 43741], "valid"], [[43742, 43743], "valid", [], "NV8"], [[43744, 43759], "valid"], [[43760, 43761], "valid", [], "NV8"], [[43762, 43766], "valid"], [[43767, 43776], "disallowed"], [[43777, 43782], "valid"], [[43783, 43784], "disallowed"], [[43785, 43790], "valid"], [[43791, 43792], "disallowed"], [[43793, 43798], "valid"], [[43799, 43807], "disallowed"], [[43808, 43814], "valid"], [[43815, 43815], "disallowed"], [[43816, 43822], "valid"], [[43823, 43823], "disallowed"], [[43824, 43866], "valid"], [[43867, 43867], "valid", [], "NV8"], [[43868, 43868], "mapped", [42791]], [[43869, 43869], "mapped", [43831]], [[43870, 43870], "mapped", [619]], [[43871, 43871], "mapped", [43858]], [[43872, 43875], "valid"], [[43876, 43877], "valid"], [[43878, 43887], "disallowed"], [[43888, 43888], "mapped", [5024]], [[43889, 43889], "mapped", [5025]], [[43890, 43890], "mapped", [5026]], [[43891, 43891], "mapped", [5027]], [[43892, 43892], "mapped", [5028]], [[43893, 43893], "mapped", [5029]], [[43894, 43894], "mapped", [5030]], [[43895, 43895], "mapped", [5031]], [[43896, 43896], "mapped", [5032]], [[43897, 43897], "mapped", [5033]], [[43898, 43898], "mapped", [5034]], [[43899, 43899], "mapped", [5035]], [[43900, 43900], "mapped", [5036]], [[43901, 43901], "mapped", [5037]], [[43902, 43902], "mapped", [5038]], [[43903, 43903], "mapped", [5039]], [[43904, 43904], "mapped", [5040]], [[43905, 43905], "mapped", [5041]], [[43906, 43906], "mapped", [5042]], [[43907, 43907], "mapped", [5043]], [[43908, 43908], "mapped", [5044]], [[43909, 43909], "mapped", [5045]], [[43910, 43910], "mapped", [5046]], [[43911, 43911], "mapped", [5047]], [[43912, 43912], "mapped", [5048]], [[43913, 43913], "mapped", [5049]], [[43914, 43914], "mapped", [5050]], [[43915, 43915], "mapped", [5051]], [[43916, 43916], "mapped", [5052]], [[43917, 43917], "mapped", [5053]], [[43918, 43918], "mapped", [5054]], [[43919, 43919], "mapped", [5055]], [[43920, 43920], "mapped", [5056]], [[43921, 43921], "mapped", [5057]], [[43922, 43922], "mapped", [5058]], [[43923, 43923], "mapped", [5059]], [[43924, 43924], "mapped", [5060]], [[43925, 43925], "mapped", [5061]], [[43926, 43926], "mapped", [5062]], [[43927, 43927], "mapped", [5063]], [[43928, 43928], "mapped", [5064]], [[43929, 43929], "mapped", [5065]], [[43930, 43930], "mapped", [5066]], [[43931, 43931], "mapped", [5067]], [[43932, 43932], "mapped", [5068]], [[43933, 43933], "mapped", [5069]], [[43934, 43934], "mapped", [5070]], [[43935, 43935], "mapped", [5071]], [[43936, 43936], "mapped", [5072]], [[43937, 43937], "mapped", [5073]], [[43938, 43938], "mapped", [5074]], [[43939, 43939], "mapped", [5075]], [[43940, 43940], "mapped", [5076]], [[43941, 43941], "mapped", [5077]], [[43942, 43942], "mapped", [5078]], [[43943, 43943], "mapped", [5079]], [[43944, 43944], "mapped", [5080]], [[43945, 43945], "mapped", [5081]], [[43946, 43946], "mapped", [5082]], [[43947, 43947], "mapped", [5083]], [[43948, 43948], "mapped", [5084]], [[43949, 43949], "mapped", [5085]], [[43950, 43950], "mapped", [5086]], [[43951, 43951], "mapped", [5087]], [[43952, 43952], "mapped", [5088]], [[43953, 43953], "mapped", [5089]], [[43954, 43954], "mapped", [5090]], [[43955, 43955], "mapped", [5091]], [[43956, 43956], "mapped", [5092]], [[43957, 43957], "mapped", [5093]], [[43958, 43958], "mapped", [5094]], [[43959, 43959], "mapped", [5095]], [[43960, 43960], "mapped", [5096]], [[43961, 43961], "mapped", [5097]], [[43962, 43962], "mapped", [5098]], [[43963, 43963], "mapped", [5099]], [[43964, 43964], "mapped", [5100]], [[43965, 43965], "mapped", [5101]], [[43966, 43966], "mapped", [5102]], [[43967, 43967], "mapped", [5103]], [[43968, 44010], "valid"], [[44011, 44011], "valid", [], "NV8"], [[44012, 44013], "valid"], [[44014, 44015], "disallowed"], [[44016, 44025], "valid"], [[44026, 44031], "disallowed"], [[44032, 55203], "valid"], [[55204, 55215], "disallowed"], [[55216, 55238], "valid", [], "NV8"], [[55239, 55242], "disallowed"], [[55243, 55291], "valid", [], "NV8"], [[55292, 55295], "disallowed"], [[55296, 57343], "disallowed"], [[57344, 63743], "disallowed"], [[63744, 63744], "mapped", [35912]], [[63745, 63745], "mapped", [26356]], [[63746, 63746], "mapped", [36554]], [[63747, 63747], "mapped", [36040]], [[63748, 63748], "mapped", [28369]], [[63749, 63749], "mapped", [20018]], [[63750, 63750], "mapped", [21477]], [[63751, 63752], "mapped", [40860]], [[63753, 63753], "mapped", [22865]], [[63754, 63754], "mapped", [37329]], [[63755, 63755], "mapped", [21895]], [[63756, 63756], "mapped", [22856]], [[63757, 63757], "mapped", [25078]], [[63758, 63758], "mapped", [30313]], [[63759, 63759], "mapped", [32645]], [[63760, 63760], "mapped", [34367]], [[63761, 63761], "mapped", [34746]], [[63762, 63762], "mapped", [35064]], [[63763, 63763], "mapped", [37007]], [[63764, 63764], "mapped", [27138]], [[63765, 63765], "mapped", [27931]], [[63766, 63766], "mapped", [28889]], [[63767, 63767], "mapped", [29662]], [[63768, 63768], "mapped", [33853]], [[63769, 63769], "mapped", [37226]], [[63770, 63770], "mapped", [39409]], [[63771, 63771], "mapped", [20098]], [[63772, 63772], "mapped", [21365]], [[63773, 63773], "mapped", [27396]], [[63774, 63774], "mapped", [29211]], [[63775, 63775], "mapped", [34349]], [[63776, 63776], "mapped", [40478]], [[63777, 63777], "mapped", [23888]], [[63778, 63778], "mapped", [28651]], [[63779, 63779], "mapped", [34253]], [[63780, 63780], "mapped", [35172]], [[63781, 63781], "mapped", [25289]], [[63782, 63782], "mapped", [33240]], [[63783, 63783], "mapped", [34847]], [[63784, 63784], "mapped", [24266]], [[63785, 63785], "mapped", [26391]], [[63786, 63786], "mapped", [28010]], [[63787, 63787], "mapped", [29436]], [[63788, 63788], "mapped", [37070]], [[63789, 63789], "mapped", [20358]], [[63790, 63790], "mapped", [20919]], [[63791, 63791], "mapped", [21214]], [[63792, 63792], "mapped", [25796]], [[63793, 63793], "mapped", [27347]], [[63794, 63794], "mapped", [29200]], [[63795, 63795], "mapped", [30439]], [[63796, 63796], "mapped", [32769]], [[63797, 63797], "mapped", [34310]], [[63798, 63798], "mapped", [34396]], [[63799, 63799], "mapped", [36335]], [[63800, 63800], "mapped", [38706]], [[63801, 63801], "mapped", [39791]], [[63802, 63802], "mapped", [40442]], [[63803, 63803], "mapped", [30860]], [[63804, 63804], "mapped", [31103]], [[63805, 63805], "mapped", [32160]], [[63806, 63806], "mapped", [33737]], [[63807, 63807], "mapped", [37636]], [[63808, 63808], "mapped", [40575]], [[63809, 63809], "mapped", [35542]], [[63810, 63810], "mapped", [22751]], [[63811, 63811], "mapped", [24324]], [[63812, 63812], "mapped", [31840]], [[63813, 63813], "mapped", [32894]], [[63814, 63814], "mapped", [29282]], [[63815, 63815], "mapped", [30922]], [[63816, 63816], "mapped", [36034]], [[63817, 63817], "mapped", [38647]], [[63818, 63818], "mapped", [22744]], [[63819, 63819], "mapped", [23650]], [[63820, 63820], "mapped", [27155]], [[63821, 63821], "mapped", [28122]], [[63822, 63822], "mapped", [28431]], [[63823, 63823], "mapped", [32047]], [[63824, 63824], "mapped", [32311]], [[63825, 63825], "mapped", [38475]], [[63826, 63826], "mapped", [21202]], [[63827, 63827], "mapped", [32907]], [[63828, 63828], "mapped", [20956]], [[63829, 63829], "mapped", [20940]], [[63830, 63830], "mapped", [31260]], [[63831, 63831], "mapped", [32190]], [[63832, 63832], "mapped", [33777]], [[63833, 63833], "mapped", [38517]], [[63834, 63834], "mapped", [35712]], [[63835, 63835], "mapped", [25295]], [[63836, 63836], "mapped", [27138]], [[63837, 63837], "mapped", [35582]], [[63838, 63838], "mapped", [20025]], [[63839, 63839], "mapped", [23527]], [[63840, 63840], "mapped", [24594]], [[63841, 63841], "mapped", [29575]], [[63842, 63842], "mapped", [30064]], [[63843, 63843], "mapped", [21271]], [[63844, 63844], "mapped", [30971]], [[63845, 63845], "mapped", [20415]], [[63846, 63846], "mapped", [24489]], [[63847, 63847], "mapped", [19981]], [[63848, 63848], "mapped", [27852]], [[63849, 63849], "mapped", [25976]], [[63850, 63850], "mapped", [32034]], [[63851, 63851], "mapped", [21443]], [[63852, 63852], "mapped", [22622]], [[63853, 63853], "mapped", [30465]], [[63854, 63854], "mapped", [33865]], [[63855, 63855], "mapped", [35498]], [[63856, 63856], "mapped", [27578]], [[63857, 63857], "mapped", [36784]], [[63858, 63858], "mapped", [27784]], [[63859, 63859], "mapped", [25342]], [[63860, 63860], "mapped", [33509]], [[63861, 63861], "mapped", [25504]], [[63862, 63862], "mapped", [30053]], [[63863, 63863], "mapped", [20142]], [[63864, 63864], "mapped", [20841]], [[63865, 63865], "mapped", [20937]], [[63866, 63866], "mapped", [26753]], [[63867, 63867], "mapped", [31975]], [[63868, 63868], "mapped", [33391]], [[63869, 63869], "mapped", [35538]], [[63870, 63870], "mapped", [37327]], [[63871, 63871], "mapped", [21237]], [[63872, 63872], "mapped", [21570]], [[63873, 63873], "mapped", [22899]], [[63874, 63874], "mapped", [24300]], [[63875, 63875], "mapped", [26053]], [[63876, 63876], "mapped", [28670]], [[63877, 63877], "mapped", [31018]], [[63878, 63878], "mapped", [38317]], [[63879, 63879], "mapped", [39530]], [[63880, 63880], "mapped", [40599]], [[63881, 63881], "mapped", [40654]], [[63882, 63882], "mapped", [21147]], [[63883, 63883], "mapped", [26310]], [[63884, 63884], "mapped", [27511]], [[63885, 63885], "mapped", [36706]], [[63886, 63886], "mapped", [24180]], [[63887, 63887], "mapped", [24976]], [[63888, 63888], "mapped", [25088]], [[63889, 63889], "mapped", [25754]], [[63890, 63890], "mapped", [28451]], [[63891, 63891], "mapped", [29001]], [[63892, 63892], "mapped", [29833]], [[63893, 63893], "mapped", [31178]], [[63894, 63894], "mapped", [32244]], [[63895, 63895], "mapped", [32879]], [[63896, 63896], "mapped", [36646]], [[63897, 63897], "mapped", [34030]], [[63898, 63898], "mapped", [36899]], [[63899, 63899], "mapped", [37706]], [[63900, 63900], "mapped", [21015]], [[63901, 63901], "mapped", [21155]], [[63902, 63902], "mapped", [21693]], [[63903, 63903], "mapped", [28872]], [[63904, 63904], "mapped", [35010]], [[63905, 63905], "mapped", [35498]], [[63906, 63906], "mapped", [24265]], [[63907, 63907], "mapped", [24565]], [[63908, 63908], "mapped", [25467]], [[63909, 63909], "mapped", [27566]], [[63910, 63910], "mapped", [31806]], [[63911, 63911], "mapped", [29557]], [[63912, 63912], "mapped", [20196]], [[63913, 63913], "mapped", [22265]], [[63914, 63914], "mapped", [23527]], [[63915, 63915], "mapped", [23994]], [[63916, 63916], "mapped", [24604]], [[63917, 63917], "mapped", [29618]], [[63918, 63918], "mapped", [29801]], [[63919, 63919], "mapped", [32666]], [[63920, 63920], "mapped", [32838]], [[63921, 63921], "mapped", [37428]], [[63922, 63922], "mapped", [38646]], [[63923, 63923], "mapped", [38728]], [[63924, 63924], "mapped", [38936]], [[63925, 63925], "mapped", [20363]], [[63926, 63926], "mapped", [31150]], [[63927, 63927], "mapped", [37300]], [[63928, 63928], "mapped", [38584]], [[63929, 63929], "mapped", [24801]], [[63930, 63930], "mapped", [20102]], [[63931, 63931], "mapped", [20698]], [[63932, 63932], "mapped", [23534]], [[63933, 63933], "mapped", [23615]], [[63934, 63934], "mapped", [26009]], [[63935, 63935], "mapped", [27138]], [[63936, 63936], "mapped", [29134]], [[63937, 63937], "mapped", [30274]], [[63938, 63938], "mapped", [34044]], [[63939, 63939], "mapped", [36988]], [[63940, 63940], "mapped", [40845]], [[63941, 63941], "mapped", [26248]], [[63942, 63942], "mapped", [38446]], [[63943, 63943], "mapped", [21129]], [[63944, 63944], "mapped", [26491]], [[63945, 63945], "mapped", [26611]], [[63946, 63946], "mapped", [27969]], [[63947, 63947], "mapped", [28316]], [[63948, 63948], "mapped", [29705]], [[63949, 63949], "mapped", [30041]], [[63950, 63950], "mapped", [30827]], [[63951, 63951], "mapped", [32016]], [[63952, 63952], "mapped", [39006]], [[63953, 63953], "mapped", [20845]], [[63954, 63954], "mapped", [25134]], [[63955, 63955], "mapped", [38520]], [[63956, 63956], "mapped", [20523]], [[63957, 63957], "mapped", [23833]], [[63958, 63958], "mapped", [28138]], [[63959, 63959], "mapped", [36650]], [[63960, 63960], "mapped", [24459]], [[63961, 63961], "mapped", [24900]], [[63962, 63962], "mapped", [26647]], [[63963, 63963], "mapped", [29575]], [[63964, 63964], "mapped", [38534]], [[63965, 63965], "mapped", [21033]], [[63966, 63966], "mapped", [21519]], [[63967, 63967], "mapped", [23653]], [[63968, 63968], "mapped", [26131]], [[63969, 63969], "mapped", [26446]], [[63970, 63970], "mapped", [26792]], [[63971, 63971], "mapped", [27877]], [[63972, 63972], "mapped", [29702]], [[63973, 63973], "mapped", [30178]], [[63974, 63974], "mapped", [32633]], [[63975, 63975], "mapped", [35023]], [[63976, 63976], "mapped", [35041]], [[63977, 63977], "mapped", [37324]], [[63978, 63978], "mapped", [38626]], [[63979, 63979], "mapped", [21311]], [[63980, 63980], "mapped", [28346]], [[63981, 63981], "mapped", [21533]], [[63982, 63982], "mapped", [29136]], [[63983, 63983], "mapped", [29848]], [[63984, 63984], "mapped", [34298]], [[63985, 63985], "mapped", [38563]], [[63986, 63986], "mapped", [40023]], [[63987, 63987], "mapped", [40607]], [[63988, 63988], "mapped", [26519]], [[63989, 63989], "mapped", [28107]], [[63990, 63990], "mapped", [33256]], [[63991, 63991], "mapped", [31435]], [[63992, 63992], "mapped", [31520]], [[63993, 63993], "mapped", [31890]], [[63994, 63994], "mapped", [29376]], [[63995, 63995], "mapped", [28825]], [[63996, 63996], "mapped", [35672]], [[63997, 63997], "mapped", [20160]], [[63998, 63998], "mapped", [33590]], [[63999, 63999], "mapped", [21050]], [[64e3, 64e3], "mapped", [20999]], [[64001, 64001], "mapped", [24230]], [[64002, 64002], "mapped", [25299]], [[64003, 64003], "mapped", [31958]], [[64004, 64004], "mapped", [23429]], [[64005, 64005], "mapped", [27934]], [[64006, 64006], "mapped", [26292]], [[64007, 64007], "mapped", [36667]], [[64008, 64008], "mapped", [34892]], [[64009, 64009], "mapped", [38477]], [[64010, 64010], "mapped", [35211]], [[64011, 64011], "mapped", [24275]], [[64012, 64012], "mapped", [20800]], [[64013, 64013], "mapped", [21952]], [[64014, 64015], "valid"], [[64016, 64016], "mapped", [22618]], [[64017, 64017], "valid"], [[64018, 64018], "mapped", [26228]], [[64019, 64020], "valid"], [[64021, 64021], "mapped", [20958]], [[64022, 64022], "mapped", [29482]], [[64023, 64023], "mapped", [30410]], [[64024, 64024], "mapped", [31036]], [[64025, 64025], "mapped", [31070]], [[64026, 64026], "mapped", [31077]], [[64027, 64027], "mapped", [31119]], [[64028, 64028], "mapped", [38742]], [[64029, 64029], "mapped", [31934]], [[64030, 64030], "mapped", [32701]], [[64031, 64031], "valid"], [[64032, 64032], "mapped", [34322]], [[64033, 64033], "valid"], [[64034, 64034], "mapped", [35576]], [[64035, 64036], "valid"], [[64037, 64037], "mapped", [36920]], [[64038, 64038], "mapped", [37117]], [[64039, 64041], "valid"], [[64042, 64042], "mapped", [39151]], [[64043, 64043], "mapped", [39164]], [[64044, 64044], "mapped", [39208]], [[64045, 64045], "mapped", [40372]], [[64046, 64046], "mapped", [37086]], [[64047, 64047], "mapped", [38583]], [[64048, 64048], "mapped", [20398]], [[64049, 64049], "mapped", [20711]], [[64050, 64050], "mapped", [20813]], [[64051, 64051], "mapped", [21193]], [[64052, 64052], "mapped", [21220]], [[64053, 64053], "mapped", [21329]], [[64054, 64054], "mapped", [21917]], [[64055, 64055], "mapped", [22022]], [[64056, 64056], "mapped", [22120]], [[64057, 64057], "mapped", [22592]], [[64058, 64058], "mapped", [22696]], [[64059, 64059], "mapped", [23652]], [[64060, 64060], "mapped", [23662]], [[64061, 64061], "mapped", [24724]], [[64062, 64062], "mapped", [24936]], [[64063, 64063], "mapped", [24974]], [[64064, 64064], "mapped", [25074]], [[64065, 64065], "mapped", [25935]], [[64066, 64066], "mapped", [26082]], [[64067, 64067], "mapped", [26257]], [[64068, 64068], "mapped", [26757]], [[64069, 64069], "mapped", [28023]], [[64070, 64070], "mapped", [28186]], [[64071, 64071], "mapped", [28450]], [[64072, 64072], "mapped", [29038]], [[64073, 64073], "mapped", [29227]], [[64074, 64074], "mapped", [29730]], [[64075, 64075], "mapped", [30865]], [[64076, 64076], "mapped", [31038]], [[64077, 64077], "mapped", [31049]], [[64078, 64078], "mapped", [31048]], [[64079, 64079], "mapped", [31056]], [[64080, 64080], "mapped", [31062]], [[64081, 64081], "mapped", [31069]], [[64082, 64082], "mapped", [31117]], [[64083, 64083], "mapped", [31118]], [[64084, 64084], "mapped", [31296]], [[64085, 64085], "mapped", [31361]], [[64086, 64086], "mapped", [31680]], [[64087, 64087], "mapped", [32244]], [[64088, 64088], "mapped", [32265]], [[64089, 64089], "mapped", [32321]], [[64090, 64090], "mapped", [32626]], [[64091, 64091], "mapped", [32773]], [[64092, 64092], "mapped", [33261]], [[64093, 64094], "mapped", [33401]], [[64095, 64095], "mapped", [33879]], [[64096, 64096], "mapped", [35088]], [[64097, 64097], "mapped", [35222]], [[64098, 64098], "mapped", [35585]], [[64099, 64099], "mapped", [35641]], [[64100, 64100], "mapped", [36051]], [[64101, 64101], "mapped", [36104]], [[64102, 64102], "mapped", [36790]], [[64103, 64103], "mapped", [36920]], [[64104, 64104], "mapped", [38627]], [[64105, 64105], "mapped", [38911]], [[64106, 64106], "mapped", [38971]], [[64107, 64107], "mapped", [24693]], [[64108, 64108], "mapped", [148206]], [[64109, 64109], "mapped", [33304]], [[64110, 64111], "disallowed"], [[64112, 64112], "mapped", [20006]], [[64113, 64113], "mapped", [20917]], [[64114, 64114], "mapped", [20840]], [[64115, 64115], "mapped", [20352]], [[64116, 64116], "mapped", [20805]], [[64117, 64117], "mapped", [20864]], [[64118, 64118], "mapped", [21191]], [[64119, 64119], "mapped", [21242]], [[64120, 64120], "mapped", [21917]], [[64121, 64121], "mapped", [21845]], [[64122, 64122], "mapped", [21913]], [[64123, 64123], "mapped", [21986]], [[64124, 64124], "mapped", [22618]], [[64125, 64125], "mapped", [22707]], [[64126, 64126], "mapped", [22852]], [[64127, 64127], "mapped", [22868]], [[64128, 64128], "mapped", [23138]], [[64129, 64129], "mapped", [23336]], [[64130, 64130], "mapped", [24274]], [[64131, 64131], "mapped", [24281]], [[64132, 64132], "mapped", [24425]], [[64133, 64133], "mapped", [24493]], [[64134, 64134], "mapped", [24792]], [[64135, 64135], "mapped", [24910]], [[64136, 64136], "mapped", [24840]], [[64137, 64137], "mapped", [24974]], [[64138, 64138], "mapped", [24928]], [[64139, 64139], "mapped", [25074]], [[64140, 64140], "mapped", [25140]], [[64141, 64141], "mapped", [25540]], [[64142, 64142], "mapped", [25628]], [[64143, 64143], "mapped", [25682]], [[64144, 64144], "mapped", [25942]], [[64145, 64145], "mapped", [26228]], [[64146, 64146], "mapped", [26391]], [[64147, 64147], "mapped", [26395]], [[64148, 64148], "mapped", [26454]], [[64149, 64149], "mapped", [27513]], [[64150, 64150], "mapped", [27578]], [[64151, 64151], "mapped", [27969]], [[64152, 64152], "mapped", [28379]], [[64153, 64153], "mapped", [28363]], [[64154, 64154], "mapped", [28450]], [[64155, 64155], "mapped", [28702]], [[64156, 64156], "mapped", [29038]], [[64157, 64157], "mapped", [30631]], [[64158, 64158], "mapped", [29237]], [[64159, 64159], "mapped", [29359]], [[64160, 64160], "mapped", [29482]], [[64161, 64161], "mapped", [29809]], [[64162, 64162], "mapped", [29958]], [[64163, 64163], "mapped", [30011]], [[64164, 64164], "mapped", [30237]], [[64165, 64165], "mapped", [30239]], [[64166, 64166], "mapped", [30410]], [[64167, 64167], "mapped", [30427]], [[64168, 64168], "mapped", [30452]], [[64169, 64169], "mapped", [30538]], [[64170, 64170], "mapped", [30528]], [[64171, 64171], "mapped", [30924]], [[64172, 64172], "mapped", [31409]], [[64173, 64173], "mapped", [31680]], [[64174, 64174], "mapped", [31867]], [[64175, 64175], "mapped", [32091]], [[64176, 64176], "mapped", [32244]], [[64177, 64177], "mapped", [32574]], [[64178, 64178], "mapped", [32773]], [[64179, 64179], "mapped", [33618]], [[64180, 64180], "mapped", [33775]], [[64181, 64181], "mapped", [34681]], [[64182, 64182], "mapped", [35137]], [[64183, 64183], "mapped", [35206]], [[64184, 64184], "mapped", [35222]], [[64185, 64185], "mapped", [35519]], [[64186, 64186], "mapped", [35576]], [[64187, 64187], "mapped", [35531]], [[64188, 64188], "mapped", [35585]], [[64189, 64189], "mapped", [35582]], [[64190, 64190], "mapped", [35565]], [[64191, 64191], "mapped", [35641]], [[64192, 64192], "mapped", [35722]], [[64193, 64193], "mapped", [36104]], [[64194, 64194], "mapped", [36664]], [[64195, 64195], "mapped", [36978]], [[64196, 64196], "mapped", [37273]], [[64197, 64197], "mapped", [37494]], [[64198, 64198], "mapped", [38524]], [[64199, 64199], "mapped", [38627]], [[64200, 64200], "mapped", [38742]], [[64201, 64201], "mapped", [38875]], [[64202, 64202], "mapped", [38911]], [[64203, 64203], "mapped", [38923]], [[64204, 64204], "mapped", [38971]], [[64205, 64205], "mapped", [39698]], [[64206, 64206], "mapped", [40860]], [[64207, 64207], "mapped", [141386]], [[64208, 64208], "mapped", [141380]], [[64209, 64209], "mapped", [144341]], [[64210, 64210], "mapped", [15261]], [[64211, 64211], "mapped", [16408]], [[64212, 64212], "mapped", [16441]], [[64213, 64213], "mapped", [152137]], [[64214, 64214], "mapped", [154832]], [[64215, 64215], "mapped", [163539]], [[64216, 64216], "mapped", [40771]], [[64217, 64217], "mapped", [40846]], [[64218, 64255], "disallowed"], [[64256, 64256], "mapped", [102, 102]], [[64257, 64257], "mapped", [102, 105]], [[64258, 64258], "mapped", [102, 108]], [[64259, 64259], "mapped", [102, 102, 105]], [[64260, 64260], "mapped", [102, 102, 108]], [[64261, 64262], "mapped", [115, 116]], [[64263, 64274], "disallowed"], [[64275, 64275], "mapped", [1396, 1398]], [[64276, 64276], "mapped", [1396, 1381]], [[64277, 64277], "mapped", [1396, 1387]], [[64278, 64278], "mapped", [1406, 1398]], [[64279, 64279], "mapped", [1396, 1389]], [[64280, 64284], "disallowed"], [[64285, 64285], "mapped", [1497, 1460]], [[64286, 64286], "valid"], [[64287, 64287], "mapped", [1522, 1463]], [[64288, 64288], "mapped", [1506]], [[64289, 64289], "mapped", [1488]], [[64290, 64290], "mapped", [1491]], [[64291, 64291], "mapped", [1492]], [[64292, 64292], "mapped", [1499]], [[64293, 64293], "mapped", [1500]], [[64294, 64294], "mapped", [1501]], [[64295, 64295], "mapped", [1512]], [[64296, 64296], "mapped", [1514]], [[64297, 64297], "disallowed_STD3_mapped", [43]], [[64298, 64298], "mapped", [1513, 1473]], [[64299, 64299], "mapped", [1513, 1474]], [[64300, 64300], "mapped", [1513, 1468, 1473]], [[64301, 64301], "mapped", [1513, 1468, 1474]], [[64302, 64302], "mapped", [1488, 1463]], [[64303, 64303], "mapped", [1488, 1464]], [[64304, 64304], "mapped", [1488, 1468]], [[64305, 64305], "mapped", [1489, 1468]], [[64306, 64306], "mapped", [1490, 1468]], [[64307, 64307], "mapped", [1491, 1468]], [[64308, 64308], "mapped", [1492, 1468]], [[64309, 64309], "mapped", [1493, 1468]], [[64310, 64310], "mapped", [1494, 1468]], [[64311, 64311], "disallowed"], [[64312, 64312], "mapped", [1496, 1468]], [[64313, 64313], "mapped", [1497, 1468]], [[64314, 64314], "mapped", [1498, 1468]], [[64315, 64315], "mapped", [1499, 1468]], [[64316, 64316], "mapped", [1500, 1468]], [[64317, 64317], "disallowed"], [[64318, 64318], "mapped", [1502, 1468]], [[64319, 64319], "disallowed"], [[64320, 64320], "mapped", [1504, 1468]], [[64321, 64321], "mapped", [1505, 1468]], [[64322, 64322], "disallowed"], [[64323, 64323], "mapped", [1507, 1468]], [[64324, 64324], "mapped", [1508, 1468]], [[64325, 64325], "disallowed"], [[64326, 64326], "mapped", [1510, 1468]], [[64327, 64327], "mapped", [1511, 1468]], [[64328, 64328], "mapped", [1512, 1468]], [[64329, 64329], "mapped", [1513, 1468]], [[64330, 64330], "mapped", [1514, 1468]], [[64331, 64331], "mapped", [1493, 1465]], [[64332, 64332], "mapped", [1489, 1471]], [[64333, 64333], "mapped", [1499, 1471]], [[64334, 64334], "mapped", [1508, 1471]], [[64335, 64335], "mapped", [1488, 1500]], [[64336, 64337], "mapped", [1649]], [[64338, 64341], "mapped", [1659]], [[64342, 64345], "mapped", [1662]], [[64346, 64349], "mapped", [1664]], [[64350, 64353], "mapped", [1658]], [[64354, 64357], "mapped", [1663]], [[64358, 64361], "mapped", [1657]], [[64362, 64365], "mapped", [1700]], [[64366, 64369], "mapped", [1702]], [[64370, 64373], "mapped", [1668]], [[64374, 64377], "mapped", [1667]], [[64378, 64381], "mapped", [1670]], [[64382, 64385], "mapped", [1671]], [[64386, 64387], "mapped", [1677]], [[64388, 64389], "mapped", [1676]], [[64390, 64391], "mapped", [1678]], [[64392, 64393], "mapped", [1672]], [[64394, 64395], "mapped", [1688]], [[64396, 64397], "mapped", [1681]], [[64398, 64401], "mapped", [1705]], [[64402, 64405], "mapped", [1711]], [[64406, 64409], "mapped", [1715]], [[64410, 64413], "mapped", [1713]], [[64414, 64415], "mapped", [1722]], [[64416, 64419], "mapped", [1723]], [[64420, 64421], "mapped", [1728]], [[64422, 64425], "mapped", [1729]], [[64426, 64429], "mapped", [1726]], [[64430, 64431], "mapped", [1746]], [[64432, 64433], "mapped", [1747]], [[64434, 64449], "valid", [], "NV8"], [[64450, 64466], "disallowed"], [[64467, 64470], "mapped", [1709]], [[64471, 64472], "mapped", [1735]], [[64473, 64474], "mapped", [1734]], [[64475, 64476], "mapped", [1736]], [[64477, 64477], "mapped", [1735, 1652]], [[64478, 64479], "mapped", [1739]], [[64480, 64481], "mapped", [1733]], [[64482, 64483], "mapped", [1737]], [[64484, 64487], "mapped", [1744]], [[64488, 64489], "mapped", [1609]], [[64490, 64491], "mapped", [1574, 1575]], [[64492, 64493], "mapped", [1574, 1749]], [[64494, 64495], "mapped", [1574, 1608]], [[64496, 64497], "mapped", [1574, 1735]], [[64498, 64499], "mapped", [1574, 1734]], [[64500, 64501], "mapped", [1574, 1736]], [[64502, 64504], "mapped", [1574, 1744]], [[64505, 64507], "mapped", [1574, 1609]], [[64508, 64511], "mapped", [1740]], [[64512, 64512], "mapped", [1574, 1580]], [[64513, 64513], "mapped", [1574, 1581]], [[64514, 64514], "mapped", [1574, 1605]], [[64515, 64515], "mapped", [1574, 1609]], [[64516, 64516], "mapped", [1574, 1610]], [[64517, 64517], "mapped", [1576, 1580]], [[64518, 64518], "mapped", [1576, 1581]], [[64519, 64519], "mapped", [1576, 1582]], [[64520, 64520], "mapped", [1576, 1605]], [[64521, 64521], "mapped", [1576, 1609]], [[64522, 64522], "mapped", [1576, 1610]], [[64523, 64523], "mapped", [1578, 1580]], [[64524, 64524], "mapped", [1578, 1581]], [[64525, 64525], "mapped", [1578, 1582]], [[64526, 64526], "mapped", [1578, 1605]], [[64527, 64527], "mapped", [1578, 1609]], [[64528, 64528], "mapped", [1578, 1610]], [[64529, 64529], "mapped", [1579, 1580]], [[64530, 64530], "mapped", [1579, 1605]], [[64531, 64531], "mapped", [1579, 1609]], [[64532, 64532], "mapped", [1579, 1610]], [[64533, 64533], "mapped", [1580, 1581]], [[64534, 64534], "mapped", [1580, 1605]], [[64535, 64535], "mapped", [1581, 1580]], [[64536, 64536], "mapped", [1581, 1605]], [[64537, 64537], "mapped", [1582, 1580]], [[64538, 64538], "mapped", [1582, 1581]], [[64539, 64539], "mapped", [1582, 1605]], [[64540, 64540], "mapped", [1587, 1580]], [[64541, 64541], "mapped", [1587, 1581]], [[64542, 64542], "mapped", [1587, 1582]], [[64543, 64543], "mapped", [1587, 1605]], [[64544, 64544], "mapped", [1589, 1581]], [[64545, 64545], "mapped", [1589, 1605]], [[64546, 64546], "mapped", [1590, 1580]], [[64547, 64547], "mapped", [1590, 1581]], [[64548, 64548], "mapped", [1590, 1582]], [[64549, 64549], "mapped", [1590, 1605]], [[64550, 64550], "mapped", [1591, 1581]], [[64551, 64551], "mapped", [1591, 1605]], [[64552, 64552], "mapped", [1592, 1605]], [[64553, 64553], "mapped", [1593, 1580]], [[64554, 64554], "mapped", [1593, 1605]], [[64555, 64555], "mapped", [1594, 1580]], [[64556, 64556], "mapped", [1594, 1605]], [[64557, 64557], "mapped", [1601, 1580]], [[64558, 64558], "mapped", [1601, 1581]], [[64559, 64559], "mapped", [1601, 1582]], [[64560, 64560], "mapped", [1601, 1605]], [[64561, 64561], "mapped", [1601, 1609]], [[64562, 64562], "mapped", [1601, 1610]], [[64563, 64563], "mapped", [1602, 1581]], [[64564, 64564], "mapped", [1602, 1605]], [[64565, 64565], "mapped", [1602, 1609]], [[64566, 64566], "mapped", [1602, 1610]], [[64567, 64567], "mapped", [1603, 1575]], [[64568, 64568], "mapped", [1603, 1580]], [[64569, 64569], "mapped", [1603, 1581]], [[64570, 64570], "mapped", [1603, 1582]], [[64571, 64571], "mapped", [1603, 1604]], [[64572, 64572], "mapped", [1603, 1605]], [[64573, 64573], "mapped", [1603, 1609]], [[64574, 64574], "mapped", [1603, 1610]], [[64575, 64575], "mapped", [1604, 1580]], [[64576, 64576], "mapped", [1604, 1581]], [[64577, 64577], "mapped", [1604, 1582]], [[64578, 64578], "mapped", [1604, 1605]], [[64579, 64579], "mapped", [1604, 1609]], [[64580, 64580], "mapped", [1604, 1610]], [[64581, 64581], "mapped", [1605, 1580]], [[64582, 64582], "mapped", [1605, 1581]], [[64583, 64583], "mapped", [1605, 1582]], [[64584, 64584], "mapped", [1605, 1605]], [[64585, 64585], "mapped", [1605, 1609]], [[64586, 64586], "mapped", [1605, 1610]], [[64587, 64587], "mapped", [1606, 1580]], [[64588, 64588], "mapped", [1606, 1581]], [[64589, 64589], "mapped", [1606, 1582]], [[64590, 64590], "mapped", [1606, 1605]], [[64591, 64591], "mapped", [1606, 1609]], [[64592, 64592], "mapped", [1606, 1610]], [[64593, 64593], "mapped", [1607, 1580]], [[64594, 64594], "mapped", [1607, 1605]], [[64595, 64595], "mapped", [1607, 1609]], [[64596, 64596], "mapped", [1607, 1610]], [[64597, 64597], "mapped", [1610, 1580]], [[64598, 64598], "mapped", [1610, 1581]], [[64599, 64599], "mapped", [1610, 1582]], [[64600, 64600], "mapped", [1610, 1605]], [[64601, 64601], "mapped", [1610, 1609]], [[64602, 64602], "mapped", [1610, 1610]], [[64603, 64603], "mapped", [1584, 1648]], [[64604, 64604], "mapped", [1585, 1648]], [[64605, 64605], "mapped", [1609, 1648]], [[64606, 64606], "disallowed_STD3_mapped", [32, 1612, 1617]], [[64607, 64607], "disallowed_STD3_mapped", [32, 1613, 1617]], [[64608, 64608], "disallowed_STD3_mapped", [32, 1614, 1617]], [[64609, 64609], "disallowed_STD3_mapped", [32, 1615, 1617]], [[64610, 64610], "disallowed_STD3_mapped", [32, 1616, 1617]], [[64611, 64611], "disallowed_STD3_mapped", [32, 1617, 1648]], [[64612, 64612], "mapped", [1574, 1585]], [[64613, 64613], "mapped", [1574, 1586]], [[64614, 64614], "mapped", [1574, 1605]], [[64615, 64615], "mapped", [1574, 1606]], [[64616, 64616], "mapped", [1574, 1609]], [[64617, 64617], "mapped", [1574, 1610]], [[64618, 64618], "mapped", [1576, 1585]], [[64619, 64619], "mapped", [1576, 1586]], [[64620, 64620], "mapped", [1576, 1605]], [[64621, 64621], "mapped", [1576, 1606]], [[64622, 64622], "mapped", [1576, 1609]], [[64623, 64623], "mapped", [1576, 1610]], [[64624, 64624], "mapped", [1578, 1585]], [[64625, 64625], "mapped", [1578, 1586]], [[64626, 64626], "mapped", [1578, 1605]], [[64627, 64627], "mapped", [1578, 1606]], [[64628, 64628], "mapped", [1578, 1609]], [[64629, 64629], "mapped", [1578, 1610]], [[64630, 64630], "mapped", [1579, 1585]], [[64631, 64631], "mapped", [1579, 1586]], [[64632, 64632], "mapped", [1579, 1605]], [[64633, 64633], "mapped", [1579, 1606]], [[64634, 64634], "mapped", [1579, 1609]], [[64635, 64635], "mapped", [1579, 1610]], [[64636, 64636], "mapped", [1601, 1609]], [[64637, 64637], "mapped", [1601, 1610]], [[64638, 64638], "mapped", [1602, 1609]], [[64639, 64639], "mapped", [1602, 1610]], [[64640, 64640], "mapped", [1603, 1575]], [[64641, 64641], "mapped", [1603, 1604]], [[64642, 64642], "mapped", [1603, 1605]], [[64643, 64643], "mapped", [1603, 1609]], [[64644, 64644], "mapped", [1603, 1610]], [[64645, 64645], "mapped", [1604, 1605]], [[64646, 64646], "mapped", [1604, 1609]], [[64647, 64647], "mapped", [1604, 1610]], [[64648, 64648], "mapped", [1605, 1575]], [[64649, 64649], "mapped", [1605, 1605]], [[64650, 64650], "mapped", [1606, 1585]], [[64651, 64651], "mapped", [1606, 1586]], [[64652, 64652], "mapped", [1606, 1605]], [[64653, 64653], "mapped", [1606, 1606]], [[64654, 64654], "mapped", [1606, 1609]], [[64655, 64655], "mapped", [1606, 1610]], [[64656, 64656], "mapped", [1609, 1648]], [[64657, 64657], "mapped", [1610, 1585]], [[64658, 64658], "mapped", [1610, 1586]], [[64659, 64659], "mapped", [1610, 1605]], [[64660, 64660], "mapped", [1610, 1606]], [[64661, 64661], "mapped", [1610, 1609]], [[64662, 64662], "mapped", [1610, 1610]], [[64663, 64663], "mapped", [1574, 1580]], [[64664, 64664], "mapped", [1574, 1581]], [[64665, 64665], "mapped", [1574, 1582]], [[64666, 64666], "mapped", [1574, 1605]], [[64667, 64667], "mapped", [1574, 1607]], [[64668, 64668], "mapped", [1576, 1580]], [[64669, 64669], "mapped", [1576, 1581]], [[64670, 64670], "mapped", [1576, 1582]], [[64671, 64671], "mapped", [1576, 1605]], [[64672, 64672], "mapped", [1576, 1607]], [[64673, 64673], "mapped", [1578, 1580]], [[64674, 64674], "mapped", [1578, 1581]], [[64675, 64675], "mapped", [1578, 1582]], [[64676, 64676], "mapped", [1578, 1605]], [[64677, 64677], "mapped", [1578, 1607]], [[64678, 64678], "mapped", [1579, 1605]], [[64679, 64679], "mapped", [1580, 1581]], [[64680, 64680], "mapped", [1580, 1605]], [[64681, 64681], "mapped", [1581, 1580]], [[64682, 64682], "mapped", [1581, 1605]], [[64683, 64683], "mapped", [1582, 1580]], [[64684, 64684], "mapped", [1582, 1605]], [[64685, 64685], "mapped", [1587, 1580]], [[64686, 64686], "mapped", [1587, 1581]], [[64687, 64687], "mapped", [1587, 1582]], [[64688, 64688], "mapped", [1587, 1605]], [[64689, 64689], "mapped", [1589, 1581]], [[64690, 64690], "mapped", [1589, 1582]], [[64691, 64691], "mapped", [1589, 1605]], [[64692, 64692], "mapped", [1590, 1580]], [[64693, 64693], "mapped", [1590, 1581]], [[64694, 64694], "mapped", [1590, 1582]], [[64695, 64695], "mapped", [1590, 1605]], [[64696, 64696], "mapped", [1591, 1581]], [[64697, 64697], "mapped", [1592, 1605]], [[64698, 64698], "mapped", [1593, 1580]], [[64699, 64699], "mapped", [1593, 1605]], [[64700, 64700], "mapped", [1594, 1580]], [[64701, 64701], "mapped", [1594, 1605]], [[64702, 64702], "mapped", [1601, 1580]], [[64703, 64703], "mapped", [1601, 1581]], [[64704, 64704], "mapped", [1601, 1582]], [[64705, 64705], "mapped", [1601, 1605]], [[64706, 64706], "mapped", [1602, 1581]], [[64707, 64707], "mapped", [1602, 1605]], [[64708, 64708], "mapped", [1603, 1580]], [[64709, 64709], "mapped", [1603, 1581]], [[64710, 64710], "mapped", [1603, 1582]], [[64711, 64711], "mapped", [1603, 1604]], [[64712, 64712], "mapped", [1603, 1605]], [[64713, 64713], "mapped", [1604, 1580]], [[64714, 64714], "mapped", [1604, 1581]], [[64715, 64715], "mapped", [1604, 1582]], [[64716, 64716], "mapped", [1604, 1605]], [[64717, 64717], "mapped", [1604, 1607]], [[64718, 64718], "mapped", [1605, 1580]], [[64719, 64719], "mapped", [1605, 1581]], [[64720, 64720], "mapped", [1605, 1582]], [[64721, 64721], "mapped", [1605, 1605]], [[64722, 64722], "mapped", [1606, 1580]], [[64723, 64723], "mapped", [1606, 1581]], [[64724, 64724], "mapped", [1606, 1582]], [[64725, 64725], "mapped", [1606, 1605]], [[64726, 64726], "mapped", [1606, 1607]], [[64727, 64727], "mapped", [1607, 1580]], [[64728, 64728], "mapped", [1607, 1605]], [[64729, 64729], "mapped", [1607, 1648]], [[64730, 64730], "mapped", [1610, 1580]], [[64731, 64731], "mapped", [1610, 1581]], [[64732, 64732], "mapped", [1610, 1582]], [[64733, 64733], "mapped", [1610, 1605]], [[64734, 64734], "mapped", [1610, 1607]], [[64735, 64735], "mapped", [1574, 1605]], [[64736, 64736], "mapped", [1574, 1607]], [[64737, 64737], "mapped", [1576, 1605]], [[64738, 64738], "mapped", [1576, 1607]], [[64739, 64739], "mapped", [1578, 1605]], [[64740, 64740], "mapped", [1578, 1607]], [[64741, 64741], "mapped", [1579, 1605]], [[64742, 64742], "mapped", [1579, 1607]], [[64743, 64743], "mapped", [1587, 1605]], [[64744, 64744], "mapped", [1587, 1607]], [[64745, 64745], "mapped", [1588, 1605]], [[64746, 64746], "mapped", [1588, 1607]], [[64747, 64747], "mapped", [1603, 1604]], [[64748, 64748], "mapped", [1603, 1605]], [[64749, 64749], "mapped", [1604, 1605]], [[64750, 64750], "mapped", [1606, 1605]], [[64751, 64751], "mapped", [1606, 1607]], [[64752, 64752], "mapped", [1610, 1605]], [[64753, 64753], "mapped", [1610, 1607]], [[64754, 64754], "mapped", [1600, 1614, 1617]], [[64755, 64755], "mapped", [1600, 1615, 1617]], [[64756, 64756], "mapped", [1600, 1616, 1617]], [[64757, 64757], "mapped", [1591, 1609]], [[64758, 64758], "mapped", [1591, 1610]], [[64759, 64759], "mapped", [1593, 1609]], [[64760, 64760], "mapped", [1593, 1610]], [[64761, 64761], "mapped", [1594, 1609]], [[64762, 64762], "mapped", [1594, 1610]], [[64763, 64763], "mapped", [1587, 1609]], [[64764, 64764], "mapped", [1587, 1610]], [[64765, 64765], "mapped", [1588, 1609]], [[64766, 64766], "mapped", [1588, 1610]], [[64767, 64767], "mapped", [1581, 1609]], [[64768, 64768], "mapped", [1581, 1610]], [[64769, 64769], "mapped", [1580, 1609]], [[64770, 64770], "mapped", [1580, 1610]], [[64771, 64771], "mapped", [1582, 1609]], [[64772, 64772], "mapped", [1582, 1610]], [[64773, 64773], "mapped", [1589, 1609]], [[64774, 64774], "mapped", [1589, 1610]], [[64775, 64775], "mapped", [1590, 1609]], [[64776, 64776], "mapped", [1590, 1610]], [[64777, 64777], "mapped", [1588, 1580]], [[64778, 64778], "mapped", [1588, 1581]], [[64779, 64779], "mapped", [1588, 1582]], [[64780, 64780], "mapped", [1588, 1605]], [[64781, 64781], "mapped", [1588, 1585]], [[64782, 64782], "mapped", [1587, 1585]], [[64783, 64783], "mapped", [1589, 1585]], [[64784, 64784], "mapped", [1590, 1585]], [[64785, 64785], "mapped", [1591, 1609]], [[64786, 64786], "mapped", [1591, 1610]], [[64787, 64787], "mapped", [1593, 1609]], [[64788, 64788], "mapped", [1593, 1610]], [[64789, 64789], "mapped", [1594, 1609]], [[64790, 64790], "mapped", [1594, 1610]], [[64791, 64791], "mapped", [1587, 1609]], [[64792, 64792], "mapped", [1587, 1610]], [[64793, 64793], "mapped", [1588, 1609]], [[64794, 64794], "mapped", [1588, 1610]], [[64795, 64795], "mapped", [1581, 1609]], [[64796, 64796], "mapped", [1581, 1610]], [[64797, 64797], "mapped", [1580, 1609]], [[64798, 64798], "mapped", [1580, 1610]], [[64799, 64799], "mapped", [1582, 1609]], [[64800, 64800], "mapped", [1582, 1610]], [[64801, 64801], "mapped", [1589, 1609]], [[64802, 64802], "mapped", [1589, 1610]], [[64803, 64803], "mapped", [1590, 1609]], [[64804, 64804], "mapped", [1590, 1610]], [[64805, 64805], "mapped", [1588, 1580]], [[64806, 64806], "mapped", [1588, 1581]], [[64807, 64807], "mapped", [1588, 1582]], [[64808, 64808], "mapped", [1588, 1605]], [[64809, 64809], "mapped", [1588, 1585]], [[64810, 64810], "mapped", [1587, 1585]], [[64811, 64811], "mapped", [1589, 1585]], [[64812, 64812], "mapped", [1590, 1585]], [[64813, 64813], "mapped", [1588, 1580]], [[64814, 64814], "mapped", [1588, 1581]], [[64815, 64815], "mapped", [1588, 1582]], [[64816, 64816], "mapped", [1588, 1605]], [[64817, 64817], "mapped", [1587, 1607]], [[64818, 64818], "mapped", [1588, 1607]], [[64819, 64819], "mapped", [1591, 1605]], [[64820, 64820], "mapped", [1587, 1580]], [[64821, 64821], "mapped", [1587, 1581]], [[64822, 64822], "mapped", [1587, 1582]], [[64823, 64823], "mapped", [1588, 1580]], [[64824, 64824], "mapped", [1588, 1581]], [[64825, 64825], "mapped", [1588, 1582]], [[64826, 64826], "mapped", [1591, 1605]], [[64827, 64827], "mapped", [1592, 1605]], [[64828, 64829], "mapped", [1575, 1611]], [[64830, 64831], "valid", [], "NV8"], [[64832, 64847], "disallowed"], [[64848, 64848], "mapped", [1578, 1580, 1605]], [[64849, 64850], "mapped", [1578, 1581, 1580]], [[64851, 64851], "mapped", [1578, 1581, 1605]], [[64852, 64852], "mapped", [1578, 1582, 1605]], [[64853, 64853], "mapped", [1578, 1605, 1580]], [[64854, 64854], "mapped", [1578, 1605, 1581]], [[64855, 64855], "mapped", [1578, 1605, 1582]], [[64856, 64857], "mapped", [1580, 1605, 1581]], [[64858, 64858], "mapped", [1581, 1605, 1610]], [[64859, 64859], "mapped", [1581, 1605, 1609]], [[64860, 64860], "mapped", [1587, 1581, 1580]], [[64861, 64861], "mapped", [1587, 1580, 1581]], [[64862, 64862], "mapped", [1587, 1580, 1609]], [[64863, 64864], "mapped", [1587, 1605, 1581]], [[64865, 64865], "mapped", [1587, 1605, 1580]], [[64866, 64867], "mapped", [1587, 1605, 1605]], [[64868, 64869], "mapped", [1589, 1581, 1581]], [[64870, 64870], "mapped", [1589, 1605, 1605]], [[64871, 64872], "mapped", [1588, 1581, 1605]], [[64873, 64873], "mapped", [1588, 1580, 1610]], [[64874, 64875], "mapped", [1588, 1605, 1582]], [[64876, 64877], "mapped", [1588, 1605, 1605]], [[64878, 64878], "mapped", [1590, 1581, 1609]], [[64879, 64880], "mapped", [1590, 1582, 1605]], [[64881, 64882], "mapped", [1591, 1605, 1581]], [[64883, 64883], "mapped", [1591, 1605, 1605]], [[64884, 64884], "mapped", [1591, 1605, 1610]], [[64885, 64885], "mapped", [1593, 1580, 1605]], [[64886, 64887], "mapped", [1593, 1605, 1605]], [[64888, 64888], "mapped", [1593, 1605, 1609]], [[64889, 64889], "mapped", [1594, 1605, 1605]], [[64890, 64890], "mapped", [1594, 1605, 1610]], [[64891, 64891], "mapped", [1594, 1605, 1609]], [[64892, 64893], "mapped", [1601, 1582, 1605]], [[64894, 64894], "mapped", [1602, 1605, 1581]], [[64895, 64895], "mapped", [1602, 1605, 1605]], [[64896, 64896], "mapped", [1604, 1581, 1605]], [[64897, 64897], "mapped", [1604, 1581, 1610]], [[64898, 64898], "mapped", [1604, 1581, 1609]], [[64899, 64900], "mapped", [1604, 1580, 1580]], [[64901, 64902], "mapped", [1604, 1582, 1605]], [[64903, 64904], "mapped", [1604, 1605, 1581]], [[64905, 64905], "mapped", [1605, 1581, 1580]], [[64906, 64906], "mapped", [1605, 1581, 1605]], [[64907, 64907], "mapped", [1605, 1581, 1610]], [[64908, 64908], "mapped", [1605, 1580, 1581]], [[64909, 64909], "mapped", [1605, 1580, 1605]], [[64910, 64910], "mapped", [1605, 1582, 1580]], [[64911, 64911], "mapped", [1605, 1582, 1605]], [[64912, 64913], "disallowed"], [[64914, 64914], "mapped", [1605, 1580, 1582]], [[64915, 64915], "mapped", [1607, 1605, 1580]], [[64916, 64916], "mapped", [1607, 1605, 1605]], [[64917, 64917], "mapped", [1606, 1581, 1605]], [[64918, 64918], "mapped", [1606, 1581, 1609]], [[64919, 64920], "mapped", [1606, 1580, 1605]], [[64921, 64921], "mapped", [1606, 1580, 1609]], [[64922, 64922], "mapped", [1606, 1605, 1610]], [[64923, 64923], "mapped", [1606, 1605, 1609]], [[64924, 64925], "mapped", [1610, 1605, 1605]], [[64926, 64926], "mapped", [1576, 1582, 1610]], [[64927, 64927], "mapped", [1578, 1580, 1610]], [[64928, 64928], "mapped", [1578, 1580, 1609]], [[64929, 64929], "mapped", [1578, 1582, 1610]], [[64930, 64930], "mapped", [1578, 1582, 1609]], [[64931, 64931], "mapped", [1578, 1605, 1610]], [[64932, 64932], "mapped", [1578, 1605, 1609]], [[64933, 64933], "mapped", [1580, 1605, 1610]], [[64934, 64934], "mapped", [1580, 1581, 1609]], [[64935, 64935], "mapped", [1580, 1605, 1609]], [[64936, 64936], "mapped", [1587, 1582, 1609]], [[64937, 64937], "mapped", [1589, 1581, 1610]], [[64938, 64938], "mapped", [1588, 1581, 1610]], [[64939, 64939], "mapped", [1590, 1581, 1610]], [[64940, 64940], "mapped", [1604, 1580, 1610]], [[64941, 64941], "mapped", [1604, 1605, 1610]], [[64942, 64942], "mapped", [1610, 1581, 1610]], [[64943, 64943], "mapped", [1610, 1580, 1610]], [[64944, 64944], "mapped", [1610, 1605, 1610]], [[64945, 64945], "mapped", [1605, 1605, 1610]], [[64946, 64946], "mapped", [1602, 1605, 1610]], [[64947, 64947], "mapped", [1606, 1581, 1610]], [[64948, 64948], "mapped", [1602, 1605, 1581]], [[64949, 64949], "mapped", [1604, 1581, 1605]], [[64950, 64950], "mapped", [1593, 1605, 1610]], [[64951, 64951], "mapped", [1603, 1605, 1610]], [[64952, 64952], "mapped", [1606, 1580, 1581]], [[64953, 64953], "mapped", [1605, 1582, 1610]], [[64954, 64954], "mapped", [1604, 1580, 1605]], [[64955, 64955], "mapped", [1603, 1605, 1605]], [[64956, 64956], "mapped", [1604, 1580, 1605]], [[64957, 64957], "mapped", [1606, 1580, 1581]], [[64958, 64958], "mapped", [1580, 1581, 1610]], [[64959, 64959], "mapped", [1581, 1580, 1610]], [[64960, 64960], "mapped", [1605, 1580, 1610]], [[64961, 64961], "mapped", [1601, 1605, 1610]], [[64962, 64962], "mapped", [1576, 1581, 1610]], [[64963, 64963], "mapped", [1603, 1605, 1605]], [[64964, 64964], "mapped", [1593, 1580, 1605]], [[64965, 64965], "mapped", [1589, 1605, 1605]], [[64966, 64966], "mapped", [1587, 1582, 1610]], [[64967, 64967], "mapped", [1606, 1580, 1610]], [[64968, 64975], "disallowed"], [[64976, 65007], "disallowed"], [[65008, 65008], "mapped", [1589, 1604, 1746]], [[65009, 65009], "mapped", [1602, 1604, 1746]], [[65010, 65010], "mapped", [1575, 1604, 1604, 1607]], [[65011, 65011], "mapped", [1575, 1603, 1576, 1585]], [[65012, 65012], "mapped", [1605, 1581, 1605, 1583]], [[65013, 65013], "mapped", [1589, 1604, 1593, 1605]], [[65014, 65014], "mapped", [1585, 1587, 1608, 1604]], [[65015, 65015], "mapped", [1593, 1604, 1610, 1607]], [[65016, 65016], "mapped", [1608, 1587, 1604, 1605]], [[65017, 65017], "mapped", [1589, 1604, 1609]], [[65018, 65018], "disallowed_STD3_mapped", [1589, 1604, 1609, 32, 1575, 1604, 1604, 1607, 32, 1593, 1604, 1610, 1607, 32, 1608, 1587, 1604, 1605]], [[65019, 65019], "disallowed_STD3_mapped", [1580, 1604, 32, 1580, 1604, 1575, 1604, 1607]], [[65020, 65020], "mapped", [1585, 1740, 1575, 1604]], [[65021, 65021], "valid", [], "NV8"], [[65022, 65023], "disallowed"], [[65024, 65039], "ignored"], [[65040, 65040], "disallowed_STD3_mapped", [44]], [[65041, 65041], "mapped", [12289]], [[65042, 65042], "disallowed"], [[65043, 65043], "disallowed_STD3_mapped", [58]], [[65044, 65044], "disallowed_STD3_mapped", [59]], [[65045, 65045], "disallowed_STD3_mapped", [33]], [[65046, 65046], "disallowed_STD3_mapped", [63]], [[65047, 65047], "mapped", [12310]], [[65048, 65048], "mapped", [12311]], [[65049, 65049], "disallowed"], [[65050, 65055], "disallowed"], [[65056, 65059], "valid"], [[65060, 65062], "valid"], [[65063, 65069], "valid"], [[65070, 65071], "valid"], [[65072, 65072], "disallowed"], [[65073, 65073], "mapped", [8212]], [[65074, 65074], "mapped", [8211]], [[65075, 65076], "disallowed_STD3_mapped", [95]], [[65077, 65077], "disallowed_STD3_mapped", [40]], [[65078, 65078], "disallowed_STD3_mapped", [41]], [[65079, 65079], "disallowed_STD3_mapped", [123]], [[65080, 65080], "disallowed_STD3_mapped", [125]], [[65081, 65081], "mapped", [12308]], [[65082, 65082], "mapped", [12309]], [[65083, 65083], "mapped", [12304]], [[65084, 65084], "mapped", [12305]], [[65085, 65085], "mapped", [12298]], [[65086, 65086], "mapped", [12299]], [[65087, 65087], "mapped", [12296]], [[65088, 65088], "mapped", [12297]], [[65089, 65089], "mapped", [12300]], [[65090, 65090], "mapped", [12301]], [[65091, 65091], "mapped", [12302]], [[65092, 65092], "mapped", [12303]], [[65093, 65094], "valid", [], "NV8"], [[65095, 65095], "disallowed_STD3_mapped", [91]], [[65096, 65096], "disallowed_STD3_mapped", [93]], [[65097, 65100], "disallowed_STD3_mapped", [32, 773]], [[65101, 65103], "disallowed_STD3_mapped", [95]], [[65104, 65104], "disallowed_STD3_mapped", [44]], [[65105, 65105], "mapped", [12289]], [[65106, 65106], "disallowed"], [[65107, 65107], "disallowed"], [[65108, 65108], "disallowed_STD3_mapped", [59]], [[65109, 65109], "disallowed_STD3_mapped", [58]], [[65110, 65110], "disallowed_STD3_mapped", [63]], [[65111, 65111], "disallowed_STD3_mapped", [33]], [[65112, 65112], "mapped", [8212]], [[65113, 65113], "disallowed_STD3_mapped", [40]], [[65114, 65114], "disallowed_STD3_mapped", [41]], [[65115, 65115], "disallowed_STD3_mapped", [123]], [[65116, 65116], "disallowed_STD3_mapped", [125]], [[65117, 65117], "mapped", [12308]], [[65118, 65118], "mapped", [12309]], [[65119, 65119], "disallowed_STD3_mapped", [35]], [[65120, 65120], "disallowed_STD3_mapped", [38]], [[65121, 65121], "disallowed_STD3_mapped", [42]], [[65122, 65122], "disallowed_STD3_mapped", [43]], [[65123, 65123], "mapped", [45]], [[65124, 65124], "disallowed_STD3_mapped", [60]], [[65125, 65125], "disallowed_STD3_mapped", [62]], [[65126, 65126], "disallowed_STD3_mapped", [61]], [[65127, 65127], "disallowed"], [[65128, 65128], "disallowed_STD3_mapped", [92]], [[65129, 65129], "disallowed_STD3_mapped", [36]], [[65130, 65130], "disallowed_STD3_mapped", [37]], [[65131, 65131], "disallowed_STD3_mapped", [64]], [[65132, 65135], "disallowed"], [[65136, 65136], "disallowed_STD3_mapped", [32, 1611]], [[65137, 65137], "mapped", [1600, 1611]], [[65138, 65138], "disallowed_STD3_mapped", [32, 1612]], [[65139, 65139], "valid"], [[65140, 65140], "disallowed_STD3_mapped", [32, 1613]], [[65141, 65141], "disallowed"], [[65142, 65142], "disallowed_STD3_mapped", [32, 1614]], [[65143, 65143], "mapped", [1600, 1614]], [[65144, 65144], "disallowed_STD3_mapped", [32, 1615]], [[65145, 65145], "mapped", [1600, 1615]], [[65146, 65146], "disallowed_STD3_mapped", [32, 1616]], [[65147, 65147], "mapped", [1600, 1616]], [[65148, 65148], "disallowed_STD3_mapped", [32, 1617]], [[65149, 65149], "mapped", [1600, 1617]], [[65150, 65150], "disallowed_STD3_mapped", [32, 1618]], [[65151, 65151], "mapped", [1600, 1618]], [[65152, 65152], "mapped", [1569]], [[65153, 65154], "mapped", [1570]], [[65155, 65156], "mapped", [1571]], [[65157, 65158], "mapped", [1572]], [[65159, 65160], "mapped", [1573]], [[65161, 65164], "mapped", [1574]], [[65165, 65166], "mapped", [1575]], [[65167, 65170], "mapped", [1576]], [[65171, 65172], "mapped", [1577]], [[65173, 65176], "mapped", [1578]], [[65177, 65180], "mapped", [1579]], [[65181, 65184], "mapped", [1580]], [[65185, 65188], "mapped", [1581]], [[65189, 65192], "mapped", [1582]], [[65193, 65194], "mapped", [1583]], [[65195, 65196], "mapped", [1584]], [[65197, 65198], "mapped", [1585]], [[65199, 65200], "mapped", [1586]], [[65201, 65204], "mapped", [1587]], [[65205, 65208], "mapped", [1588]], [[65209, 65212], "mapped", [1589]], [[65213, 65216], "mapped", [1590]], [[65217, 65220], "mapped", [1591]], [[65221, 65224], "mapped", [1592]], [[65225, 65228], "mapped", [1593]], [[65229, 65232], "mapped", [1594]], [[65233, 65236], "mapped", [1601]], [[65237, 65240], "mapped", [1602]], [[65241, 65244], "mapped", [1603]], [[65245, 65248], "mapped", [1604]], [[65249, 65252], "mapped", [1605]], [[65253, 65256], "mapped", [1606]], [[65257, 65260], "mapped", [1607]], [[65261, 65262], "mapped", [1608]], [[65263, 65264], "mapped", [1609]], [[65265, 65268], "mapped", [1610]], [[65269, 65270], "mapped", [1604, 1570]], [[65271, 65272], "mapped", [1604, 1571]], [[65273, 65274], "mapped", [1604, 1573]], [[65275, 65276], "mapped", [1604, 1575]], [[65277, 65278], "disallowed"], [[65279, 65279], "ignored"], [[65280, 65280], "disallowed"], [[65281, 65281], "disallowed_STD3_mapped", [33]], [[65282, 65282], "disallowed_STD3_mapped", [34]], [[65283, 65283], "disallowed_STD3_mapped", [35]], [[65284, 65284], "disallowed_STD3_mapped", [36]], [[65285, 65285], "disallowed_STD3_mapped", [37]], [[65286, 65286], "disallowed_STD3_mapped", [38]], [[65287, 65287], "disallowed_STD3_mapped", [39]], [[65288, 65288], "disallowed_STD3_mapped", [40]], [[65289, 65289], "disallowed_STD3_mapped", [41]], [[65290, 65290], "disallowed_STD3_mapped", [42]], [[65291, 65291], "disallowed_STD3_mapped", [43]], [[65292, 65292], "disallowed_STD3_mapped", [44]], [[65293, 65293], "mapped", [45]], [[65294, 65294], "mapped", [46]], [[65295, 65295], "disallowed_STD3_mapped", [47]], [[65296, 65296], "mapped", [48]], [[65297, 65297], "mapped", [49]], [[65298, 65298], "mapped", [50]], [[65299, 65299], "mapped", [51]], [[65300, 65300], "mapped", [52]], [[65301, 65301], "mapped", [53]], [[65302, 65302], "mapped", [54]], [[65303, 65303], "mapped", [55]], [[65304, 65304], "mapped", [56]], [[65305, 65305], "mapped", [57]], [[65306, 65306], "disallowed_STD3_mapped", [58]], [[65307, 65307], "disallowed_STD3_mapped", [59]], [[65308, 65308], "disallowed_STD3_mapped", [60]], [[65309, 65309], "disallowed_STD3_mapped", [61]], [[65310, 65310], "disallowed_STD3_mapped", [62]], [[65311, 65311], "disallowed_STD3_mapped", [63]], [[65312, 65312], "disallowed_STD3_mapped", [64]], [[65313, 65313], "mapped", [97]], [[65314, 65314], "mapped", [98]], [[65315, 65315], "mapped", [99]], [[65316, 65316], "mapped", [100]], [[65317, 65317], "mapped", [101]], [[65318, 65318], "mapped", [102]], [[65319, 65319], "mapped", [103]], [[65320, 65320], "mapped", [104]], [[65321, 65321], "mapped", [105]], [[65322, 65322], "mapped", [106]], [[65323, 65323], "mapped", [107]], [[65324, 65324], "mapped", [108]], [[65325, 65325], "mapped", [109]], [[65326, 65326], "mapped", [110]], [[65327, 65327], "mapped", [111]], [[65328, 65328], "mapped", [112]], [[65329, 65329], "mapped", [113]], [[65330, 65330], "mapped", [114]], [[65331, 65331], "mapped", [115]], [[65332, 65332], "mapped", [116]], [[65333, 65333], "mapped", [117]], [[65334, 65334], "mapped", [118]], [[65335, 65335], "mapped", [119]], [[65336, 65336], "mapped", [120]], [[65337, 65337], "mapped", [121]], [[65338, 65338], "mapped", [122]], [[65339, 65339], "disallowed_STD3_mapped", [91]], [[65340, 65340], "disallowed_STD3_mapped", [92]], [[65341, 65341], "disallowed_STD3_mapped", [93]], [[65342, 65342], "disallowed_STD3_mapped", [94]], [[65343, 65343], "disallowed_STD3_mapped", [95]], [[65344, 65344], "disallowed_STD3_mapped", [96]], [[65345, 65345], "mapped", [97]], [[65346, 65346], "mapped", [98]], [[65347, 65347], "mapped", [99]], [[65348, 65348], "mapped", [100]], [[65349, 65349], "mapped", [101]], [[65350, 65350], "mapped", [102]], [[65351, 65351], "mapped", [103]], [[65352, 65352], "mapped", [104]], [[65353, 65353], "mapped", [105]], [[65354, 65354], "mapped", [106]], [[65355, 65355], "mapped", [107]], [[65356, 65356], "mapped", [108]], [[65357, 65357], "mapped", [109]], [[65358, 65358], "mapped", [110]], [[65359, 65359], "mapped", [111]], [[65360, 65360], "mapped", [112]], [[65361, 65361], "mapped", [113]], [[65362, 65362], "mapped", [114]], [[65363, 65363], "mapped", [115]], [[65364, 65364], "mapped", [116]], [[65365, 65365], "mapped", [117]], [[65366, 65366], "mapped", [118]], [[65367, 65367], "mapped", [119]], [[65368, 65368], "mapped", [120]], [[65369, 65369], "mapped", [121]], [[65370, 65370], "mapped", [122]], [[65371, 65371], "disallowed_STD3_mapped", [123]], [[65372, 65372], "disallowed_STD3_mapped", [124]], [[65373, 65373], "disallowed_STD3_mapped", [125]], [[65374, 65374], "disallowed_STD3_mapped", [126]], [[65375, 65375], "mapped", [10629]], [[65376, 65376], "mapped", [10630]], [[65377, 65377], "mapped", [46]], [[65378, 65378], "mapped", [12300]], [[65379, 65379], "mapped", [12301]], [[65380, 65380], "mapped", [12289]], [[65381, 65381], "mapped", [12539]], [[65382, 65382], "mapped", [12530]], [[65383, 65383], "mapped", [12449]], [[65384, 65384], "mapped", [12451]], [[65385, 65385], "mapped", [12453]], [[65386, 65386], "mapped", [12455]], [[65387, 65387], "mapped", [12457]], [[65388, 65388], "mapped", [12515]], [[65389, 65389], "mapped", [12517]], [[65390, 65390], "mapped", [12519]], [[65391, 65391], "mapped", [12483]], [[65392, 65392], "mapped", [12540]], [[65393, 65393], "mapped", [12450]], [[65394, 65394], "mapped", [12452]], [[65395, 65395], "mapped", [12454]], [[65396, 65396], "mapped", [12456]], [[65397, 65397], "mapped", [12458]], [[65398, 65398], "mapped", [12459]], [[65399, 65399], "mapped", [12461]], [[65400, 65400], "mapped", [12463]], [[65401, 65401], "mapped", [12465]], [[65402, 65402], "mapped", [12467]], [[65403, 65403], "mapped", [12469]], [[65404, 65404], "mapped", [12471]], [[65405, 65405], "mapped", [12473]], [[65406, 65406], "mapped", [12475]], [[65407, 65407], "mapped", [12477]], [[65408, 65408], "mapped", [12479]], [[65409, 65409], "mapped", [12481]], [[65410, 65410], "mapped", [12484]], [[65411, 65411], "mapped", [12486]], [[65412, 65412], "mapped", [12488]], [[65413, 65413], "mapped", [12490]], [[65414, 65414], "mapped", [12491]], [[65415, 65415], "mapped", [12492]], [[65416, 65416], "mapped", [12493]], [[65417, 65417], "mapped", [12494]], [[65418, 65418], "mapped", [12495]], [[65419, 65419], "mapped", [12498]], [[65420, 65420], "mapped", [12501]], [[65421, 65421], "mapped", [12504]], [[65422, 65422], "mapped", [12507]], [[65423, 65423], "mapped", [12510]], [[65424, 65424], "mapped", [12511]], [[65425, 65425], "mapped", [12512]], [[65426, 65426], "mapped", [12513]], [[65427, 65427], "mapped", [12514]], [[65428, 65428], "mapped", [12516]], [[65429, 65429], "mapped", [12518]], [[65430, 65430], "mapped", [12520]], [[65431, 65431], "mapped", [12521]], [[65432, 65432], "mapped", [12522]], [[65433, 65433], "mapped", [12523]], [[65434, 65434], "mapped", [12524]], [[65435, 65435], "mapped", [12525]], [[65436, 65436], "mapped", [12527]], [[65437, 65437], "mapped", [12531]], [[65438, 65438], "mapped", [12441]], [[65439, 65439], "mapped", [12442]], [[65440, 65440], "disallowed"], [[65441, 65441], "mapped", [4352]], [[65442, 65442], "mapped", [4353]], [[65443, 65443], "mapped", [4522]], [[65444, 65444], "mapped", [4354]], [[65445, 65445], "mapped", [4524]], [[65446, 65446], "mapped", [4525]], [[65447, 65447], "mapped", [4355]], [[65448, 65448], "mapped", [4356]], [[65449, 65449], "mapped", [4357]], [[65450, 65450], "mapped", [4528]], [[65451, 65451], "mapped", [4529]], [[65452, 65452], "mapped", [4530]], [[65453, 65453], "mapped", [4531]], [[65454, 65454], "mapped", [4532]], [[65455, 65455], "mapped", [4533]], [[65456, 65456], "mapped", [4378]], [[65457, 65457], "mapped", [4358]], [[65458, 65458], "mapped", [4359]], [[65459, 65459], "mapped", [4360]], [[65460, 65460], "mapped", [4385]], [[65461, 65461], "mapped", [4361]], [[65462, 65462], "mapped", [4362]], [[65463, 65463], "mapped", [4363]], [[65464, 65464], "mapped", [4364]], [[65465, 65465], "mapped", [4365]], [[65466, 65466], "mapped", [4366]], [[65467, 65467], "mapped", [4367]], [[65468, 65468], "mapped", [4368]], [[65469, 65469], "mapped", [4369]], [[65470, 65470], "mapped", [4370]], [[65471, 65473], "disallowed"], [[65474, 65474], "mapped", [4449]], [[65475, 65475], "mapped", [4450]], [[65476, 65476], "mapped", [4451]], [[65477, 65477], "mapped", [4452]], [[65478, 65478], "mapped", [4453]], [[65479, 65479], "mapped", [4454]], [[65480, 65481], "disallowed"], [[65482, 65482], "mapped", [4455]], [[65483, 65483], "mapped", [4456]], [[65484, 65484], "mapped", [4457]], [[65485, 65485], "mapped", [4458]], [[65486, 65486], "mapped", [4459]], [[65487, 65487], "mapped", [4460]], [[65488, 65489], "disallowed"], [[65490, 65490], "mapped", [4461]], [[65491, 65491], "mapped", [4462]], [[65492, 65492], "mapped", [4463]], [[65493, 65493], "mapped", [4464]], [[65494, 65494], "mapped", [4465]], [[65495, 65495], "mapped", [4466]], [[65496, 65497], "disallowed"], [[65498, 65498], "mapped", [4467]], [[65499, 65499], "mapped", [4468]], [[65500, 65500], "mapped", [4469]], [[65501, 65503], "disallowed"], [[65504, 65504], "mapped", [162]], [[65505, 65505], "mapped", [163]], [[65506, 65506], "mapped", [172]], [[65507, 65507], "disallowed_STD3_mapped", [32, 772]], [[65508, 65508], "mapped", [166]], [[65509, 65509], "mapped", [165]], [[65510, 65510], "mapped", [8361]], [[65511, 65511], "disallowed"], [[65512, 65512], "mapped", [9474]], [[65513, 65513], "mapped", [8592]], [[65514, 65514], "mapped", [8593]], [[65515, 65515], "mapped", [8594]], [[65516, 65516], "mapped", [8595]], [[65517, 65517], "mapped", [9632]], [[65518, 65518], "mapped", [9675]], [[65519, 65528], "disallowed"], [[65529, 65531], "disallowed"], [[65532, 65532], "disallowed"], [[65533, 65533], "disallowed"], [[65534, 65535], "disallowed"], [[65536, 65547], "valid"], [[65548, 65548], "disallowed"], [[65549, 65574], "valid"], [[65575, 65575], "disallowed"], [[65576, 65594], "valid"], [[65595, 65595], "disallowed"], [[65596, 65597], "valid"], [[65598, 65598], "disallowed"], [[65599, 65613], "valid"], [[65614, 65615], "disallowed"], [[65616, 65629], "valid"], [[65630, 65663], "disallowed"], [[65664, 65786], "valid"], [[65787, 65791], "disallowed"], [[65792, 65794], "valid", [], "NV8"], [[65795, 65798], "disallowed"], [[65799, 65843], "valid", [], "NV8"], [[65844, 65846], "disallowed"], [[65847, 65855], "valid", [], "NV8"], [[65856, 65930], "valid", [], "NV8"], [[65931, 65932], "valid", [], "NV8"], [[65933, 65935], "disallowed"], [[65936, 65947], "valid", [], "NV8"], [[65948, 65951], "disallowed"], [[65952, 65952], "valid", [], "NV8"], [[65953, 65999], "disallowed"], [[66e3, 66044], "valid", [], "NV8"], [[66045, 66045], "valid"], [[66046, 66175], "disallowed"], [[66176, 66204], "valid"], [[66205, 66207], "disallowed"], [[66208, 66256], "valid"], [[66257, 66271], "disallowed"], [[66272, 66272], "valid"], [[66273, 66299], "valid", [], "NV8"], [[66300, 66303], "disallowed"], [[66304, 66334], "valid"], [[66335, 66335], "valid"], [[66336, 66339], "valid", [], "NV8"], [[66340, 66351], "disallowed"], [[66352, 66368], "valid"], [[66369, 66369], "valid", [], "NV8"], [[66370, 66377], "valid"], [[66378, 66378], "valid", [], "NV8"], [[66379, 66383], "disallowed"], [[66384, 66426], "valid"], [[66427, 66431], "disallowed"], [[66432, 66461], "valid"], [[66462, 66462], "disallowed"], [[66463, 66463], "valid", [], "NV8"], [[66464, 66499], "valid"], [[66500, 66503], "disallowed"], [[66504, 66511], "valid"], [[66512, 66517], "valid", [], "NV8"], [[66518, 66559], "disallowed"], [[66560, 66560], "mapped", [66600]], [[66561, 66561], "mapped", [66601]], [[66562, 66562], "mapped", [66602]], [[66563, 66563], "mapped", [66603]], [[66564, 66564], "mapped", [66604]], [[66565, 66565], "mapped", [66605]], [[66566, 66566], "mapped", [66606]], [[66567, 66567], "mapped", [66607]], [[66568, 66568], "mapped", [66608]], [[66569, 66569], "mapped", [66609]], [[66570, 66570], "mapped", [66610]], [[66571, 66571], "mapped", [66611]], [[66572, 66572], "mapped", [66612]], [[66573, 66573], "mapped", [66613]], [[66574, 66574], "mapped", [66614]], [[66575, 66575], "mapped", [66615]], [[66576, 66576], "mapped", [66616]], [[66577, 66577], "mapped", [66617]], [[66578, 66578], "mapped", [66618]], [[66579, 66579], "mapped", [66619]], [[66580, 66580], "mapped", [66620]], [[66581, 66581], "mapped", [66621]], [[66582, 66582], "mapped", [66622]], [[66583, 66583], "mapped", [66623]], [[66584, 66584], "mapped", [66624]], [[66585, 66585], "mapped", [66625]], [[66586, 66586], "mapped", [66626]], [[66587, 66587], "mapped", [66627]], [[66588, 66588], "mapped", [66628]], [[66589, 66589], "mapped", [66629]], [[66590, 66590], "mapped", [66630]], [[66591, 66591], "mapped", [66631]], [[66592, 66592], "mapped", [66632]], [[66593, 66593], "mapped", [66633]], [[66594, 66594], "mapped", [66634]], [[66595, 66595], "mapped", [66635]], [[66596, 66596], "mapped", [66636]], [[66597, 66597], "mapped", [66637]], [[66598, 66598], "mapped", [66638]], [[66599, 66599], "mapped", [66639]], [[66600, 66637], "valid"], [[66638, 66717], "valid"], [[66718, 66719], "disallowed"], [[66720, 66729], "valid"], [[66730, 66815], "disallowed"], [[66816, 66855], "valid"], [[66856, 66863], "disallowed"], [[66864, 66915], "valid"], [[66916, 66926], "disallowed"], [[66927, 66927], "valid", [], "NV8"], [[66928, 67071], "disallowed"], [[67072, 67382], "valid"], [[67383, 67391], "disallowed"], [[67392, 67413], "valid"], [[67414, 67423], "disallowed"], [[67424, 67431], "valid"], [[67432, 67583], "disallowed"], [[67584, 67589], "valid"], [[67590, 67591], "disallowed"], [[67592, 67592], "valid"], [[67593, 67593], "disallowed"], [[67594, 67637], "valid"], [[67638, 67638], "disallowed"], [[67639, 67640], "valid"], [[67641, 67643], "disallowed"], [[67644, 67644], "valid"], [[67645, 67646], "disallowed"], [[67647, 67647], "valid"], [[67648, 67669], "valid"], [[67670, 67670], "disallowed"], [[67671, 67679], "valid", [], "NV8"], [[67680, 67702], "valid"], [[67703, 67711], "valid", [], "NV8"], [[67712, 67742], "valid"], [[67743, 67750], "disallowed"], [[67751, 67759], "valid", [], "NV8"], [[67760, 67807], "disallowed"], [[67808, 67826], "valid"], [[67827, 67827], "disallowed"], [[67828, 67829], "valid"], [[67830, 67834], "disallowed"], [[67835, 67839], "valid", [], "NV8"], [[67840, 67861], "valid"], [[67862, 67865], "valid", [], "NV8"], [[67866, 67867], "valid", [], "NV8"], [[67868, 67870], "disallowed"], [[67871, 67871], "valid", [], "NV8"], [[67872, 67897], "valid"], [[67898, 67902], "disallowed"], [[67903, 67903], "valid", [], "NV8"], [[67904, 67967], "disallowed"], [[67968, 68023], "valid"], [[68024, 68027], "disallowed"], [[68028, 68029], "valid", [], "NV8"], [[68030, 68031], "valid"], [[68032, 68047], "valid", [], "NV8"], [[68048, 68049], "disallowed"], [[68050, 68095], "valid", [], "NV8"], [[68096, 68099], "valid"], [[68100, 68100], "disallowed"], [[68101, 68102], "valid"], [[68103, 68107], "disallowed"], [[68108, 68115], "valid"], [[68116, 68116], "disallowed"], [[68117, 68119], "valid"], [[68120, 68120], "disallowed"], [[68121, 68147], "valid"], [[68148, 68151], "disallowed"], [[68152, 68154], "valid"], [[68155, 68158], "disallowed"], [[68159, 68159], "valid"], [[68160, 68167], "valid", [], "NV8"], [[68168, 68175], "disallowed"], [[68176, 68184], "valid", [], "NV8"], [[68185, 68191], "disallowed"], [[68192, 68220], "valid"], [[68221, 68223], "valid", [], "NV8"], [[68224, 68252], "valid"], [[68253, 68255], "valid", [], "NV8"], [[68256, 68287], "disallowed"], [[68288, 68295], "valid"], [[68296, 68296], "valid", [], "NV8"], [[68297, 68326], "valid"], [[68327, 68330], "disallowed"], [[68331, 68342], "valid", [], "NV8"], [[68343, 68351], "disallowed"], [[68352, 68405], "valid"], [[68406, 68408], "disallowed"], [[68409, 68415], "valid", [], "NV8"], [[68416, 68437], "valid"], [[68438, 68439], "disallowed"], [[68440, 68447], "valid", [], "NV8"], [[68448, 68466], "valid"], [[68467, 68471], "disallowed"], [[68472, 68479], "valid", [], "NV8"], [[68480, 68497], "valid"], [[68498, 68504], "disallowed"], [[68505, 68508], "valid", [], "NV8"], [[68509, 68520], "disallowed"], [[68521, 68527], "valid", [], "NV8"], [[68528, 68607], "disallowed"], [[68608, 68680], "valid"], [[68681, 68735], "disallowed"], [[68736, 68736], "mapped", [68800]], [[68737, 68737], "mapped", [68801]], [[68738, 68738], "mapped", [68802]], [[68739, 68739], "mapped", [68803]], [[68740, 68740], "mapped", [68804]], [[68741, 68741], "mapped", [68805]], [[68742, 68742], "mapped", [68806]], [[68743, 68743], "mapped", [68807]], [[68744, 68744], "mapped", [68808]], [[68745, 68745], "mapped", [68809]], [[68746, 68746], "mapped", [68810]], [[68747, 68747], "mapped", [68811]], [[68748, 68748], "mapped", [68812]], [[68749, 68749], "mapped", [68813]], [[68750, 68750], "mapped", [68814]], [[68751, 68751], "mapped", [68815]], [[68752, 68752], "mapped", [68816]], [[68753, 68753], "mapped", [68817]], [[68754, 68754], "mapped", [68818]], [[68755, 68755], "mapped", [68819]], [[68756, 68756], "mapped", [68820]], [[68757, 68757], "mapped", [68821]], [[68758, 68758], "mapped", [68822]], [[68759, 68759], "mapped", [68823]], [[68760, 68760], "mapped", [68824]], [[68761, 68761], "mapped", [68825]], [[68762, 68762], "mapped", [68826]], [[68763, 68763], "mapped", [68827]], [[68764, 68764], "mapped", [68828]], [[68765, 68765], "mapped", [68829]], [[68766, 68766], "mapped", [68830]], [[68767, 68767], "mapped", [68831]], [[68768, 68768], "mapped", [68832]], [[68769, 68769], "mapped", [68833]], [[68770, 68770], "mapped", [68834]], [[68771, 68771], "mapped", [68835]], [[68772, 68772], "mapped", [68836]], [[68773, 68773], "mapped", [68837]], [[68774, 68774], "mapped", [68838]], [[68775, 68775], "mapped", [68839]], [[68776, 68776], "mapped", [68840]], [[68777, 68777], "mapped", [68841]], [[68778, 68778], "mapped", [68842]], [[68779, 68779], "mapped", [68843]], [[68780, 68780], "mapped", [68844]], [[68781, 68781], "mapped", [68845]], [[68782, 68782], "mapped", [68846]], [[68783, 68783], "mapped", [68847]], [[68784, 68784], "mapped", [68848]], [[68785, 68785], "mapped", [68849]], [[68786, 68786], "mapped", [68850]], [[68787, 68799], "disallowed"], [[68800, 68850], "valid"], [[68851, 68857], "disallowed"], [[68858, 68863], "valid", [], "NV8"], [[68864, 69215], "disallowed"], [[69216, 69246], "valid", [], "NV8"], [[69247, 69631], "disallowed"], [[69632, 69702], "valid"], [[69703, 69709], "valid", [], "NV8"], [[69710, 69713], "disallowed"], [[69714, 69733], "valid", [], "NV8"], [[69734, 69743], "valid"], [[69744, 69758], "disallowed"], [[69759, 69759], "valid"], [[69760, 69818], "valid"], [[69819, 69820], "valid", [], "NV8"], [[69821, 69821], "disallowed"], [[69822, 69825], "valid", [], "NV8"], [[69826, 69839], "disallowed"], [[69840, 69864], "valid"], [[69865, 69871], "disallowed"], [[69872, 69881], "valid"], [[69882, 69887], "disallowed"], [[69888, 69940], "valid"], [[69941, 69941], "disallowed"], [[69942, 69951], "valid"], [[69952, 69955], "valid", [], "NV8"], [[69956, 69967], "disallowed"], [[69968, 70003], "valid"], [[70004, 70005], "valid", [], "NV8"], [[70006, 70006], "valid"], [[70007, 70015], "disallowed"], [[70016, 70084], "valid"], [[70085, 70088], "valid", [], "NV8"], [[70089, 70089], "valid", [], "NV8"], [[70090, 70092], "valid"], [[70093, 70093], "valid", [], "NV8"], [[70094, 70095], "disallowed"], [[70096, 70105], "valid"], [[70106, 70106], "valid"], [[70107, 70107], "valid", [], "NV8"], [[70108, 70108], "valid"], [[70109, 70111], "valid", [], "NV8"], [[70112, 70112], "disallowed"], [[70113, 70132], "valid", [], "NV8"], [[70133, 70143], "disallowed"], [[70144, 70161], "valid"], [[70162, 70162], "disallowed"], [[70163, 70199], "valid"], [[70200, 70205], "valid", [], "NV8"], [[70206, 70271], "disallowed"], [[70272, 70278], "valid"], [[70279, 70279], "disallowed"], [[70280, 70280], "valid"], [[70281, 70281], "disallowed"], [[70282, 70285], "valid"], [[70286, 70286], "disallowed"], [[70287, 70301], "valid"], [[70302, 70302], "disallowed"], [[70303, 70312], "valid"], [[70313, 70313], "valid", [], "NV8"], [[70314, 70319], "disallowed"], [[70320, 70378], "valid"], [[70379, 70383], "disallowed"], [[70384, 70393], "valid"], [[70394, 70399], "disallowed"], [[70400, 70400], "valid"], [[70401, 70403], "valid"], [[70404, 70404], "disallowed"], [[70405, 70412], "valid"], [[70413, 70414], "disallowed"], [[70415, 70416], "valid"], [[70417, 70418], "disallowed"], [[70419, 70440], "valid"], [[70441, 70441], "disallowed"], [[70442, 70448], "valid"], [[70449, 70449], "disallowed"], [[70450, 70451], "valid"], [[70452, 70452], "disallowed"], [[70453, 70457], "valid"], [[70458, 70459], "disallowed"], [[70460, 70468], "valid"], [[70469, 70470], "disallowed"], [[70471, 70472], "valid"], [[70473, 70474], "disallowed"], [[70475, 70477], "valid"], [[70478, 70479], "disallowed"], [[70480, 70480], "valid"], [[70481, 70486], "disallowed"], [[70487, 70487], "valid"], [[70488, 70492], "disallowed"], [[70493, 70499], "valid"], [[70500, 70501], "disallowed"], [[70502, 70508], "valid"], [[70509, 70511], "disallowed"], [[70512, 70516], "valid"], [[70517, 70783], "disallowed"], [[70784, 70853], "valid"], [[70854, 70854], "valid", [], "NV8"], [[70855, 70855], "valid"], [[70856, 70863], "disallowed"], [[70864, 70873], "valid"], [[70874, 71039], "disallowed"], [[71040, 71093], "valid"], [[71094, 71095], "disallowed"], [[71096, 71104], "valid"], [[71105, 71113], "valid", [], "NV8"], [[71114, 71127], "valid", [], "NV8"], [[71128, 71133], "valid"], [[71134, 71167], "disallowed"], [[71168, 71232], "valid"], [[71233, 71235], "valid", [], "NV8"], [[71236, 71236], "valid"], [[71237, 71247], "disallowed"], [[71248, 71257], "valid"], [[71258, 71295], "disallowed"], [[71296, 71351], "valid"], [[71352, 71359], "disallowed"], [[71360, 71369], "valid"], [[71370, 71423], "disallowed"], [[71424, 71449], "valid"], [[71450, 71452], "disallowed"], [[71453, 71467], "valid"], [[71468, 71471], "disallowed"], [[71472, 71481], "valid"], [[71482, 71487], "valid", [], "NV8"], [[71488, 71839], "disallowed"], [[71840, 71840], "mapped", [71872]], [[71841, 71841], "mapped", [71873]], [[71842, 71842], "mapped", [71874]], [[71843, 71843], "mapped", [71875]], [[71844, 71844], "mapped", [71876]], [[71845, 71845], "mapped", [71877]], [[71846, 71846], "mapped", [71878]], [[71847, 71847], "mapped", [71879]], [[71848, 71848], "mapped", [71880]], [[71849, 71849], "mapped", [71881]], [[71850, 71850], "mapped", [71882]], [[71851, 71851], "mapped", [71883]], [[71852, 71852], "mapped", [71884]], [[71853, 71853], "mapped", [71885]], [[71854, 71854], "mapped", [71886]], [[71855, 71855], "mapped", [71887]], [[71856, 71856], "mapped", [71888]], [[71857, 71857], "mapped", [71889]], [[71858, 71858], "mapped", [71890]], [[71859, 71859], "mapped", [71891]], [[71860, 71860], "mapped", [71892]], [[71861, 71861], "mapped", [71893]], [[71862, 71862], "mapped", [71894]], [[71863, 71863], "mapped", [71895]], [[71864, 71864], "mapped", [71896]], [[71865, 71865], "mapped", [71897]], [[71866, 71866], "mapped", [71898]], [[71867, 71867], "mapped", [71899]], [[71868, 71868], "mapped", [71900]], [[71869, 71869], "mapped", [71901]], [[71870, 71870], "mapped", [71902]], [[71871, 71871], "mapped", [71903]], [[71872, 71913], "valid"], [[71914, 71922], "valid", [], "NV8"], [[71923, 71934], "disallowed"], [[71935, 71935], "valid"], [[71936, 72383], "disallowed"], [[72384, 72440], "valid"], [[72441, 73727], "disallowed"], [[73728, 74606], "valid"], [[74607, 74648], "valid"], [[74649, 74649], "valid"], [[74650, 74751], "disallowed"], [[74752, 74850], "valid", [], "NV8"], [[74851, 74862], "valid", [], "NV8"], [[74863, 74863], "disallowed"], [[74864, 74867], "valid", [], "NV8"], [[74868, 74868], "valid", [], "NV8"], [[74869, 74879], "disallowed"], [[74880, 75075], "valid"], [[75076, 77823], "disallowed"], [[77824, 78894], "valid"], [[78895, 82943], "disallowed"], [[82944, 83526], "valid"], [[83527, 92159], "disallowed"], [[92160, 92728], "valid"], [[92729, 92735], "disallowed"], [[92736, 92766], "valid"], [[92767, 92767], "disallowed"], [[92768, 92777], "valid"], [[92778, 92781], "disallowed"], [[92782, 92783], "valid", [], "NV8"], [[92784, 92879], "disallowed"], [[92880, 92909], "valid"], [[92910, 92911], "disallowed"], [[92912, 92916], "valid"], [[92917, 92917], "valid", [], "NV8"], [[92918, 92927], "disallowed"], [[92928, 92982], "valid"], [[92983, 92991], "valid", [], "NV8"], [[92992, 92995], "valid"], [[92996, 92997], "valid", [], "NV8"], [[92998, 93007], "disallowed"], [[93008, 93017], "valid"], [[93018, 93018], "disallowed"], [[93019, 93025], "valid", [], "NV8"], [[93026, 93026], "disallowed"], [[93027, 93047], "valid"], [[93048, 93052], "disallowed"], [[93053, 93071], "valid"], [[93072, 93951], "disallowed"], [[93952, 94020], "valid"], [[94021, 94031], "disallowed"], [[94032, 94078], "valid"], [[94079, 94094], "disallowed"], [[94095, 94111], "valid"], [[94112, 110591], "disallowed"], [[110592, 110593], "valid"], [[110594, 113663], "disallowed"], [[113664, 113770], "valid"], [[113771, 113775], "disallowed"], [[113776, 113788], "valid"], [[113789, 113791], "disallowed"], [[113792, 113800], "valid"], [[113801, 113807], "disallowed"], [[113808, 113817], "valid"], [[113818, 113819], "disallowed"], [[113820, 113820], "valid", [], "NV8"], [[113821, 113822], "valid"], [[113823, 113823], "valid", [], "NV8"], [[113824, 113827], "ignored"], [[113828, 118783], "disallowed"], [[118784, 119029], "valid", [], "NV8"], [[119030, 119039], "disallowed"], [[119040, 119078], "valid", [], "NV8"], [[119079, 119080], "disallowed"], [[119081, 119081], "valid", [], "NV8"], [[119082, 119133], "valid", [], "NV8"], [[119134, 119134], "mapped", [119127, 119141]], [[119135, 119135], "mapped", [119128, 119141]], [[119136, 119136], "mapped", [119128, 119141, 119150]], [[119137, 119137], "mapped", [119128, 119141, 119151]], [[119138, 119138], "mapped", [119128, 119141, 119152]], [[119139, 119139], "mapped", [119128, 119141, 119153]], [[119140, 119140], "mapped", [119128, 119141, 119154]], [[119141, 119154], "valid", [], "NV8"], [[119155, 119162], "disallowed"], [[119163, 119226], "valid", [], "NV8"], [[119227, 119227], "mapped", [119225, 119141]], [[119228, 119228], "mapped", [119226, 119141]], [[119229, 119229], "mapped", [119225, 119141, 119150]], [[119230, 119230], "mapped", [119226, 119141, 119150]], [[119231, 119231], "mapped", [119225, 119141, 119151]], [[119232, 119232], "mapped", [119226, 119141, 119151]], [[119233, 119261], "valid", [], "NV8"], [[119262, 119272], "valid", [], "NV8"], [[119273, 119295], "disallowed"], [[119296, 119365], "valid", [], "NV8"], [[119366, 119551], "disallowed"], [[119552, 119638], "valid", [], "NV8"], [[119639, 119647], "disallowed"], [[119648, 119665], "valid", [], "NV8"], [[119666, 119807], "disallowed"], [[119808, 119808], "mapped", [97]], [[119809, 119809], "mapped", [98]], [[119810, 119810], "mapped", [99]], [[119811, 119811], "mapped", [100]], [[119812, 119812], "mapped", [101]], [[119813, 119813], "mapped", [102]], [[119814, 119814], "mapped", [103]], [[119815, 119815], "mapped", [104]], [[119816, 119816], "mapped", [105]], [[119817, 119817], "mapped", [106]], [[119818, 119818], "mapped", [107]], [[119819, 119819], "mapped", [108]], [[119820, 119820], "mapped", [109]], [[119821, 119821], "mapped", [110]], [[119822, 119822], "mapped", [111]], [[119823, 119823], "mapped", [112]], [[119824, 119824], "mapped", [113]], [[119825, 119825], "mapped", [114]], [[119826, 119826], "mapped", [115]], [[119827, 119827], "mapped", [116]], [[119828, 119828], "mapped", [117]], [[119829, 119829], "mapped", [118]], [[119830, 119830], "mapped", [119]], [[119831, 119831], "mapped", [120]], [[119832, 119832], "mapped", [121]], [[119833, 119833], "mapped", [122]], [[119834, 119834], "mapped", [97]], [[119835, 119835], "mapped", [98]], [[119836, 119836], "mapped", [99]], [[119837, 119837], "mapped", [100]], [[119838, 119838], "mapped", [101]], [[119839, 119839], "mapped", [102]], [[119840, 119840], "mapped", [103]], [[119841, 119841], "mapped", [104]], [[119842, 119842], "mapped", [105]], [[119843, 119843], "mapped", [106]], [[119844, 119844], "mapped", [107]], [[119845, 119845], "mapped", [108]], [[119846, 119846], "mapped", [109]], [[119847, 119847], "mapped", [110]], [[119848, 119848], "mapped", [111]], [[119849, 119849], "mapped", [112]], [[119850, 119850], "mapped", [113]], [[119851, 119851], "mapped", [114]], [[119852, 119852], "mapped", [115]], [[119853, 119853], "mapped", [116]], [[119854, 119854], "mapped", [117]], [[119855, 119855], "mapped", [118]], [[119856, 119856], "mapped", [119]], [[119857, 119857], "mapped", [120]], [[119858, 119858], "mapped", [121]], [[119859, 119859], "mapped", [122]], [[119860, 119860], "mapped", [97]], [[119861, 119861], "mapped", [98]], [[119862, 119862], "mapped", [99]], [[119863, 119863], "mapped", [100]], [[119864, 119864], "mapped", [101]], [[119865, 119865], "mapped", [102]], [[119866, 119866], "mapped", [103]], [[119867, 119867], "mapped", [104]], [[119868, 119868], "mapped", [105]], [[119869, 119869], "mapped", [106]], [[119870, 119870], "mapped", [107]], [[119871, 119871], "mapped", [108]], [[119872, 119872], "mapped", [109]], [[119873, 119873], "mapped", [110]], [[119874, 119874], "mapped", [111]], [[119875, 119875], "mapped", [112]], [[119876, 119876], "mapped", [113]], [[119877, 119877], "mapped", [114]], [[119878, 119878], "mapped", [115]], [[119879, 119879], "mapped", [116]], [[119880, 119880], "mapped", [117]], [[119881, 119881], "mapped", [118]], [[119882, 119882], "mapped", [119]], [[119883, 119883], "mapped", [120]], [[119884, 119884], "mapped", [121]], [[119885, 119885], "mapped", [122]], [[119886, 119886], "mapped", [97]], [[119887, 119887], "mapped", [98]], [[119888, 119888], "mapped", [99]], [[119889, 119889], "mapped", [100]], [[119890, 119890], "mapped", [101]], [[119891, 119891], "mapped", [102]], [[119892, 119892], "mapped", [103]], [[119893, 119893], "disallowed"], [[119894, 119894], "mapped", [105]], [[119895, 119895], "mapped", [106]], [[119896, 119896], "mapped", [107]], [[119897, 119897], "mapped", [108]], [[119898, 119898], "mapped", [109]], [[119899, 119899], "mapped", [110]], [[119900, 119900], "mapped", [111]], [[119901, 119901], "mapped", [112]], [[119902, 119902], "mapped", [113]], [[119903, 119903], "mapped", [114]], [[119904, 119904], "mapped", [115]], [[119905, 119905], "mapped", [116]], [[119906, 119906], "mapped", [117]], [[119907, 119907], "mapped", [118]], [[119908, 119908], "mapped", [119]], [[119909, 119909], "mapped", [120]], [[119910, 119910], "mapped", [121]], [[119911, 119911], "mapped", [122]], [[119912, 119912], "mapped", [97]], [[119913, 119913], "mapped", [98]], [[119914, 119914], "mapped", [99]], [[119915, 119915], "mapped", [100]], [[119916, 119916], "mapped", [101]], [[119917, 119917], "mapped", [102]], [[119918, 119918], "mapped", [103]], [[119919, 119919], "mapped", [104]], [[119920, 119920], "mapped", [105]], [[119921, 119921], "mapped", [106]], [[119922, 119922], "mapped", [107]], [[119923, 119923], "mapped", [108]], [[119924, 119924], "mapped", [109]], [[119925, 119925], "mapped", [110]], [[119926, 119926], "mapped", [111]], [[119927, 119927], "mapped", [112]], [[119928, 119928], "mapped", [113]], [[119929, 119929], "mapped", [114]], [[119930, 119930], "mapped", [115]], [[119931, 119931], "mapped", [116]], [[119932, 119932], "mapped", [117]], [[119933, 119933], "mapped", [118]], [[119934, 119934], "mapped", [119]], [[119935, 119935], "mapped", [120]], [[119936, 119936], "mapped", [121]], [[119937, 119937], "mapped", [122]], [[119938, 119938], "mapped", [97]], [[119939, 119939], "mapped", [98]], [[119940, 119940], "mapped", [99]], [[119941, 119941], "mapped", [100]], [[119942, 119942], "mapped", [101]], [[119943, 119943], "mapped", [102]], [[119944, 119944], "mapped", [103]], [[119945, 119945], "mapped", [104]], [[119946, 119946], "mapped", [105]], [[119947, 119947], "mapped", [106]], [[119948, 119948], "mapped", [107]], [[119949, 119949], "mapped", [108]], [[119950, 119950], "mapped", [109]], [[119951, 119951], "mapped", [110]], [[119952, 119952], "mapped", [111]], [[119953, 119953], "mapped", [112]], [[119954, 119954], "mapped", [113]], [[119955, 119955], "mapped", [114]], [[119956, 119956], "mapped", [115]], [[119957, 119957], "mapped", [116]], [[119958, 119958], "mapped", [117]], [[119959, 119959], "mapped", [118]], [[119960, 119960], "mapped", [119]], [[119961, 119961], "mapped", [120]], [[119962, 119962], "mapped", [121]], [[119963, 119963], "mapped", [122]], [[119964, 119964], "mapped", [97]], [[119965, 119965], "disallowed"], [[119966, 119966], "mapped", [99]], [[119967, 119967], "mapped", [100]], [[119968, 119969], "disallowed"], [[119970, 119970], "mapped", [103]], [[119971, 119972], "disallowed"], [[119973, 119973], "mapped", [106]], [[119974, 119974], "mapped", [107]], [[119975, 119976], "disallowed"], [[119977, 119977], "mapped", [110]], [[119978, 119978], "mapped", [111]], [[119979, 119979], "mapped", [112]], [[119980, 119980], "mapped", [113]], [[119981, 119981], "disallowed"], [[119982, 119982], "mapped", [115]], [[119983, 119983], "mapped", [116]], [[119984, 119984], "mapped", [117]], [[119985, 119985], "mapped", [118]], [[119986, 119986], "mapped", [119]], [[119987, 119987], "mapped", [120]], [[119988, 119988], "mapped", [121]], [[119989, 119989], "mapped", [122]], [[119990, 119990], "mapped", [97]], [[119991, 119991], "mapped", [98]], [[119992, 119992], "mapped", [99]], [[119993, 119993], "mapped", [100]], [[119994, 119994], "disallowed"], [[119995, 119995], "mapped", [102]], [[119996, 119996], "disallowed"], [[119997, 119997], "mapped", [104]], [[119998, 119998], "mapped", [105]], [[119999, 119999], "mapped", [106]], [[12e4, 12e4], "mapped", [107]], [[120001, 120001], "mapped", [108]], [[120002, 120002], "mapped", [109]], [[120003, 120003], "mapped", [110]], [[120004, 120004], "disallowed"], [[120005, 120005], "mapped", [112]], [[120006, 120006], "mapped", [113]], [[120007, 120007], "mapped", [114]], [[120008, 120008], "mapped", [115]], [[120009, 120009], "mapped", [116]], [[120010, 120010], "mapped", [117]], [[120011, 120011], "mapped", [118]], [[120012, 120012], "mapped", [119]], [[120013, 120013], "mapped", [120]], [[120014, 120014], "mapped", [121]], [[120015, 120015], "mapped", [122]], [[120016, 120016], "mapped", [97]], [[120017, 120017], "mapped", [98]], [[120018, 120018], "mapped", [99]], [[120019, 120019], "mapped", [100]], [[120020, 120020], "mapped", [101]], [[120021, 120021], "mapped", [102]], [[120022, 120022], "mapped", [103]], [[120023, 120023], "mapped", [104]], [[120024, 120024], "mapped", [105]], [[120025, 120025], "mapped", [106]], [[120026, 120026], "mapped", [107]], [[120027, 120027], "mapped", [108]], [[120028, 120028], "mapped", [109]], [[120029, 120029], "mapped", [110]], [[120030, 120030], "mapped", [111]], [[120031, 120031], "mapped", [112]], [[120032, 120032], "mapped", [113]], [[120033, 120033], "mapped", [114]], [[120034, 120034], "mapped", [115]], [[120035, 120035], "mapped", [116]], [[120036, 120036], "mapped", [117]], [[120037, 120037], "mapped", [118]], [[120038, 120038], "mapped", [119]], [[120039, 120039], "mapped", [120]], [[120040, 120040], "mapped", [121]], [[120041, 120041], "mapped", [122]], [[120042, 120042], "mapped", [97]], [[120043, 120043], "mapped", [98]], [[120044, 120044], "mapped", [99]], [[120045, 120045], "mapped", [100]], [[120046, 120046], "mapped", [101]], [[120047, 120047], "mapped", [102]], [[120048, 120048], "mapped", [103]], [[120049, 120049], "mapped", [104]], [[120050, 120050], "mapped", [105]], [[120051, 120051], "mapped", [106]], [[120052, 120052], "mapped", [107]], [[120053, 120053], "mapped", [108]], [[120054, 120054], "mapped", [109]], [[120055, 120055], "mapped", [110]], [[120056, 120056], "mapped", [111]], [[120057, 120057], "mapped", [112]], [[120058, 120058], "mapped", [113]], [[120059, 120059], "mapped", [114]], [[120060, 120060], "mapped", [115]], [[120061, 120061], "mapped", [116]], [[120062, 120062], "mapped", [117]], [[120063, 120063], "mapped", [118]], [[120064, 120064], "mapped", [119]], [[120065, 120065], "mapped", [120]], [[120066, 120066], "mapped", [121]], [[120067, 120067], "mapped", [122]], [[120068, 120068], "mapped", [97]], [[120069, 120069], "mapped", [98]], [[120070, 120070], "disallowed"], [[120071, 120071], "mapped", [100]], [[120072, 120072], "mapped", [101]], [[120073, 120073], "mapped", [102]], [[120074, 120074], "mapped", [103]], [[120075, 120076], "disallowed"], [[120077, 120077], "mapped", [106]], [[120078, 120078], "mapped", [107]], [[120079, 120079], "mapped", [108]], [[120080, 120080], "mapped", [109]], [[120081, 120081], "mapped", [110]], [[120082, 120082], "mapped", [111]], [[120083, 120083], "mapped", [112]], [[120084, 120084], "mapped", [113]], [[120085, 120085], "disallowed"], [[120086, 120086], "mapped", [115]], [[120087, 120087], "mapped", [116]], [[120088, 120088], "mapped", [117]], [[120089, 120089], "mapped", [118]], [[120090, 120090], "mapped", [119]], [[120091, 120091], "mapped", [120]], [[120092, 120092], "mapped", [121]], [[120093, 120093], "disallowed"], [[120094, 120094], "mapped", [97]], [[120095, 120095], "mapped", [98]], [[120096, 120096], "mapped", [99]], [[120097, 120097], "mapped", [100]], [[120098, 120098], "mapped", [101]], [[120099, 120099], "mapped", [102]], [[120100, 120100], "mapped", [103]], [[120101, 120101], "mapped", [104]], [[120102, 120102], "mapped", [105]], [[120103, 120103], "mapped", [106]], [[120104, 120104], "mapped", [107]], [[120105, 120105], "mapped", [108]], [[120106, 120106], "mapped", [109]], [[120107, 120107], "mapped", [110]], [[120108, 120108], "mapped", [111]], [[120109, 120109], "mapped", [112]], [[120110, 120110], "mapped", [113]], [[120111, 120111], "mapped", [114]], [[120112, 120112], "mapped", [115]], [[120113, 120113], "mapped", [116]], [[120114, 120114], "mapped", [117]], [[120115, 120115], "mapped", [118]], [[120116, 120116], "mapped", [119]], [[120117, 120117], "mapped", [120]], [[120118, 120118], "mapped", [121]], [[120119, 120119], "mapped", [122]], [[120120, 120120], "mapped", [97]], [[120121, 120121], "mapped", [98]], [[120122, 120122], "disallowed"], [[120123, 120123], "mapped", [100]], [[120124, 120124], "mapped", [101]], [[120125, 120125], "mapped", [102]], [[120126, 120126], "mapped", [103]], [[120127, 120127], "disallowed"], [[120128, 120128], "mapped", [105]], [[120129, 120129], "mapped", [106]], [[120130, 120130], "mapped", [107]], [[120131, 120131], "mapped", [108]], [[120132, 120132], "mapped", [109]], [[120133, 120133], "disallowed"], [[120134, 120134], "mapped", [111]], [[120135, 120137], "disallowed"], [[120138, 120138], "mapped", [115]], [[120139, 120139], "mapped", [116]], [[120140, 120140], "mapped", [117]], [[120141, 120141], "mapped", [118]], [[120142, 120142], "mapped", [119]], [[120143, 120143], "mapped", [120]], [[120144, 120144], "mapped", [121]], [[120145, 120145], "disallowed"], [[120146, 120146], "mapped", [97]], [[120147, 120147], "mapped", [98]], [[120148, 120148], "mapped", [99]], [[120149, 120149], "mapped", [100]], [[120150, 120150], "mapped", [101]], [[120151, 120151], "mapped", [102]], [[120152, 120152], "mapped", [103]], [[120153, 120153], "mapped", [104]], [[120154, 120154], "mapped", [105]], [[120155, 120155], "mapped", [106]], [[120156, 120156], "mapped", [107]], [[120157, 120157], "mapped", [108]], [[120158, 120158], "mapped", [109]], [[120159, 120159], "mapped", [110]], [[120160, 120160], "mapped", [111]], [[120161, 120161], "mapped", [112]], [[120162, 120162], "mapped", [113]], [[120163, 120163], "mapped", [114]], [[120164, 120164], "mapped", [115]], [[120165, 120165], "mapped", [116]], [[120166, 120166], "mapped", [117]], [[120167, 120167], "mapped", [118]], [[120168, 120168], "mapped", [119]], [[120169, 120169], "mapped", [120]], [[120170, 120170], "mapped", [121]], [[120171, 120171], "mapped", [122]], [[120172, 120172], "mapped", [97]], [[120173, 120173], "mapped", [98]], [[120174, 120174], "mapped", [99]], [[120175, 120175], "mapped", [100]], [[120176, 120176], "mapped", [101]], [[120177, 120177], "mapped", [102]], [[120178, 120178], "mapped", [103]], [[120179, 120179], "mapped", [104]], [[120180, 120180], "mapped", [105]], [[120181, 120181], "mapped", [106]], [[120182, 120182], "mapped", [107]], [[120183, 120183], "mapped", [108]], [[120184, 120184], "mapped", [109]], [[120185, 120185], "mapped", [110]], [[120186, 120186], "mapped", [111]], [[120187, 120187], "mapped", [112]], [[120188, 120188], "mapped", [113]], [[120189, 120189], "mapped", [114]], [[120190, 120190], "mapped", [115]], [[120191, 120191], "mapped", [116]], [[120192, 120192], "mapped", [117]], [[120193, 120193], "mapped", [118]], [[120194, 120194], "mapped", [119]], [[120195, 120195], "mapped", [120]], [[120196, 120196], "mapped", [121]], [[120197, 120197], "mapped", [122]], [[120198, 120198], "mapped", [97]], [[120199, 120199], "mapped", [98]], [[120200, 120200], "mapped", [99]], [[120201, 120201], "mapped", [100]], [[120202, 120202], "mapped", [101]], [[120203, 120203], "mapped", [102]], [[120204, 120204], "mapped", [103]], [[120205, 120205], "mapped", [104]], [[120206, 120206], "mapped", [105]], [[120207, 120207], "mapped", [106]], [[120208, 120208], "mapped", [107]], [[120209, 120209], "mapped", [108]], [[120210, 120210], "mapped", [109]], [[120211, 120211], "mapped", [110]], [[120212, 120212], "mapped", [111]], [[120213, 120213], "mapped", [112]], [[120214, 120214], "mapped", [113]], [[120215, 120215], "mapped", [114]], [[120216, 120216], "mapped", [115]], [[120217, 120217], "mapped", [116]], [[120218, 120218], "mapped", [117]], [[120219, 120219], "mapped", [118]], [[120220, 120220], "mapped", [119]], [[120221, 120221], "mapped", [120]], [[120222, 120222], "mapped", [121]], [[120223, 120223], "mapped", [122]], [[120224, 120224], "mapped", [97]], [[120225, 120225], "mapped", [98]], [[120226, 120226], "mapped", [99]], [[120227, 120227], "mapped", [100]], [[120228, 120228], "mapped", [101]], [[120229, 120229], "mapped", [102]], [[120230, 120230], "mapped", [103]], [[120231, 120231], "mapped", [104]], [[120232, 120232], "mapped", [105]], [[120233, 120233], "mapped", [106]], [[120234, 120234], "mapped", [107]], [[120235, 120235], "mapped", [108]], [[120236, 120236], "mapped", [109]], [[120237, 120237], "mapped", [110]], [[120238, 120238], "mapped", [111]], [[120239, 120239], "mapped", [112]], [[120240, 120240], "mapped", [113]], [[120241, 120241], "mapped", [114]], [[120242, 120242], "mapped", [115]], [[120243, 120243], "mapped", [116]], [[120244, 120244], "mapped", [117]], [[120245, 120245], "mapped", [118]], [[120246, 120246], "mapped", [119]], [[120247, 120247], "mapped", [120]], [[120248, 120248], "mapped", [121]], [[120249, 120249], "mapped", [122]], [[120250, 120250], "mapped", [97]], [[120251, 120251], "mapped", [98]], [[120252, 120252], "mapped", [99]], [[120253, 120253], "mapped", [100]], [[120254, 120254], "mapped", [101]], [[120255, 120255], "mapped", [102]], [[120256, 120256], "mapped", [103]], [[120257, 120257], "mapped", [104]], [[120258, 120258], "mapped", [105]], [[120259, 120259], "mapped", [106]], [[120260, 120260], "mapped", [107]], [[120261, 120261], "mapped", [108]], [[120262, 120262], "mapped", [109]], [[120263, 120263], "mapped", [110]], [[120264, 120264], "mapped", [111]], [[120265, 120265], "mapped", [112]], [[120266, 120266], "mapped", [113]], [[120267, 120267], "mapped", [114]], [[120268, 120268], "mapped", [115]], [[120269, 120269], "mapped", [116]], [[120270, 120270], "mapped", [117]], [[120271, 120271], "mapped", [118]], [[120272, 120272], "mapped", [119]], [[120273, 120273], "mapped", [120]], [[120274, 120274], "mapped", [121]], [[120275, 120275], "mapped", [122]], [[120276, 120276], "mapped", [97]], [[120277, 120277], "mapped", [98]], [[120278, 120278], "mapped", [99]], [[120279, 120279], "mapped", [100]], [[120280, 120280], "mapped", [101]], [[120281, 120281], "mapped", [102]], [[120282, 120282], "mapped", [103]], [[120283, 120283], "mapped", [104]], [[120284, 120284], "mapped", [105]], [[120285, 120285], "mapped", [106]], [[120286, 120286], "mapped", [107]], [[120287, 120287], "mapped", [108]], [[120288, 120288], "mapped", [109]], [[120289, 120289], "mapped", [110]], [[120290, 120290], "mapped", [111]], [[120291, 120291], "mapped", [112]], [[120292, 120292], "mapped", [113]], [[120293, 120293], "mapped", [114]], [[120294, 120294], "mapped", [115]], [[120295, 120295], "mapped", [116]], [[120296, 120296], "mapped", [117]], [[120297, 120297], "mapped", [118]], [[120298, 120298], "mapped", [119]], [[120299, 120299], "mapped", [120]], [[120300, 120300], "mapped", [121]], [[120301, 120301], "mapped", [122]], [[120302, 120302], "mapped", [97]], [[120303, 120303], "mapped", [98]], [[120304, 120304], "mapped", [99]], [[120305, 120305], "mapped", [100]], [[120306, 120306], "mapped", [101]], [[120307, 120307], "mapped", [102]], [[120308, 120308], "mapped", [103]], [[120309, 120309], "mapped", [104]], [[120310, 120310], "mapped", [105]], [[120311, 120311], "mapped", [106]], [[120312, 120312], "mapped", [107]], [[120313, 120313], "mapped", [108]], [[120314, 120314], "mapped", [109]], [[120315, 120315], "mapped", [110]], [[120316, 120316], "mapped", [111]], [[120317, 120317], "mapped", [112]], [[120318, 120318], "mapped", [113]], [[120319, 120319], "mapped", [114]], [[120320, 120320], "mapped", [115]], [[120321, 120321], "mapped", [116]], [[120322, 120322], "mapped", [117]], [[120323, 120323], "mapped", [118]], [[120324, 120324], "mapped", [119]], [[120325, 120325], "mapped", [120]], [[120326, 120326], "mapped", [121]], [[120327, 120327], "mapped", [122]], [[120328, 120328], "mapped", [97]], [[120329, 120329], "mapped", [98]], [[120330, 120330], "mapped", [99]], [[120331, 120331], "mapped", [100]], [[120332, 120332], "mapped", [101]], [[120333, 120333], "mapped", [102]], [[120334, 120334], "mapped", [103]], [[120335, 120335], "mapped", [104]], [[120336, 120336], "mapped", [105]], [[120337, 120337], "mapped", [106]], [[120338, 120338], "mapped", [107]], [[120339, 120339], "mapped", [108]], [[120340, 120340], "mapped", [109]], [[120341, 120341], "mapped", [110]], [[120342, 120342], "mapped", [111]], [[120343, 120343], "mapped", [112]], [[120344, 120344], "mapped", [113]], [[120345, 120345], "mapped", [114]], [[120346, 120346], "mapped", [115]], [[120347, 120347], "mapped", [116]], [[120348, 120348], "mapped", [117]], [[120349, 120349], "mapped", [118]], [[120350, 120350], "mapped", [119]], [[120351, 120351], "mapped", [120]], [[120352, 120352], "mapped", [121]], [[120353, 120353], "mapped", [122]], [[120354, 120354], "mapped", [97]], [[120355, 120355], "mapped", [98]], [[120356, 120356], "mapped", [99]], [[120357, 120357], "mapped", [100]], [[120358, 120358], "mapped", [101]], [[120359, 120359], "mapped", [102]], [[120360, 120360], "mapped", [103]], [[120361, 120361], "mapped", [104]], [[120362, 120362], "mapped", [105]], [[120363, 120363], "mapped", [106]], [[120364, 120364], "mapped", [107]], [[120365, 120365], "mapped", [108]], [[120366, 120366], "mapped", [109]], [[120367, 120367], "mapped", [110]], [[120368, 120368], "mapped", [111]], [[120369, 120369], "mapped", [112]], [[120370, 120370], "mapped", [113]], [[120371, 120371], "mapped", [114]], [[120372, 120372], "mapped", [115]], [[120373, 120373], "mapped", [116]], [[120374, 120374], "mapped", [117]], [[120375, 120375], "mapped", [118]], [[120376, 120376], "mapped", [119]], [[120377, 120377], "mapped", [120]], [[120378, 120378], "mapped", [121]], [[120379, 120379], "mapped", [122]], [[120380, 120380], "mapped", [97]], [[120381, 120381], "mapped", [98]], [[120382, 120382], "mapped", [99]], [[120383, 120383], "mapped", [100]], [[120384, 120384], "mapped", [101]], [[120385, 120385], "mapped", [102]], [[120386, 120386], "mapped", [103]], [[120387, 120387], "mapped", [104]], [[120388, 120388], "mapped", [105]], [[120389, 120389], "mapped", [106]], [[120390, 120390], "mapped", [107]], [[120391, 120391], "mapped", [108]], [[120392, 120392], "mapped", [109]], [[120393, 120393], "mapped", [110]], [[120394, 120394], "mapped", [111]], [[120395, 120395], "mapped", [112]], [[120396, 120396], "mapped", [113]], [[120397, 120397], "mapped", [114]], [[120398, 120398], "mapped", [115]], [[120399, 120399], "mapped", [116]], [[120400, 120400], "mapped", [117]], [[120401, 120401], "mapped", [118]], [[120402, 120402], "mapped", [119]], [[120403, 120403], "mapped", [120]], [[120404, 120404], "mapped", [121]], [[120405, 120405], "mapped", [122]], [[120406, 120406], "mapped", [97]], [[120407, 120407], "mapped", [98]], [[120408, 120408], "mapped", [99]], [[120409, 120409], "mapped", [100]], [[120410, 120410], "mapped", [101]], [[120411, 120411], "mapped", [102]], [[120412, 120412], "mapped", [103]], [[120413, 120413], "mapped", [104]], [[120414, 120414], "mapped", [105]], [[120415, 120415], "mapped", [106]], [[120416, 120416], "mapped", [107]], [[120417, 120417], "mapped", [108]], [[120418, 120418], "mapped", [109]], [[120419, 120419], "mapped", [110]], [[120420, 120420], "mapped", [111]], [[120421, 120421], "mapped", [112]], [[120422, 120422], "mapped", [113]], [[120423, 120423], "mapped", [114]], [[120424, 120424], "mapped", [115]], [[120425, 120425], "mapped", [116]], [[120426, 120426], "mapped", [117]], [[120427, 120427], "mapped", [118]], [[120428, 120428], "mapped", [119]], [[120429, 120429], "mapped", [120]], [[120430, 120430], "mapped", [121]], [[120431, 120431], "mapped", [122]], [[120432, 120432], "mapped", [97]], [[120433, 120433], "mapped", [98]], [[120434, 120434], "mapped", [99]], [[120435, 120435], "mapped", [100]], [[120436, 120436], "mapped", [101]], [[120437, 120437], "mapped", [102]], [[120438, 120438], "mapped", [103]], [[120439, 120439], "mapped", [104]], [[120440, 120440], "mapped", [105]], [[120441, 120441], "mapped", [106]], [[120442, 120442], "mapped", [107]], [[120443, 120443], "mapped", [108]], [[120444, 120444], "mapped", [109]], [[120445, 120445], "mapped", [110]], [[120446, 120446], "mapped", [111]], [[120447, 120447], "mapped", [112]], [[120448, 120448], "mapped", [113]], [[120449, 120449], "mapped", [114]], [[120450, 120450], "mapped", [115]], [[120451, 120451], "mapped", [116]], [[120452, 120452], "mapped", [117]], [[120453, 120453], "mapped", [118]], [[120454, 120454], "mapped", [119]], [[120455, 120455], "mapped", [120]], [[120456, 120456], "mapped", [121]], [[120457, 120457], "mapped", [122]], [[120458, 120458], "mapped", [97]], [[120459, 120459], "mapped", [98]], [[120460, 120460], "mapped", [99]], [[120461, 120461], "mapped", [100]], [[120462, 120462], "mapped", [101]], [[120463, 120463], "mapped", [102]], [[120464, 120464], "mapped", [103]], [[120465, 120465], "mapped", [104]], [[120466, 120466], "mapped", [105]], [[120467, 120467], "mapped", [106]], [[120468, 120468], "mapped", [107]], [[120469, 120469], "mapped", [108]], [[120470, 120470], "mapped", [109]], [[120471, 120471], "mapped", [110]], [[120472, 120472], "mapped", [111]], [[120473, 120473], "mapped", [112]], [[120474, 120474], "mapped", [113]], [[120475, 120475], "mapped", [114]], [[120476, 120476], "mapped", [115]], [[120477, 120477], "mapped", [116]], [[120478, 120478], "mapped", [117]], [[120479, 120479], "mapped", [118]], [[120480, 120480], "mapped", [119]], [[120481, 120481], "mapped", [120]], [[120482, 120482], "mapped", [121]], [[120483, 120483], "mapped", [122]], [[120484, 120484], "mapped", [305]], [[120485, 120485], "mapped", [567]], [[120486, 120487], "disallowed"], [[120488, 120488], "mapped", [945]], [[120489, 120489], "mapped", [946]], [[120490, 120490], "mapped", [947]], [[120491, 120491], "mapped", [948]], [[120492, 120492], "mapped", [949]], [[120493, 120493], "mapped", [950]], [[120494, 120494], "mapped", [951]], [[120495, 120495], "mapped", [952]], [[120496, 120496], "mapped", [953]], [[120497, 120497], "mapped", [954]], [[120498, 120498], "mapped", [955]], [[120499, 120499], "mapped", [956]], [[120500, 120500], "mapped", [957]], [[120501, 120501], "mapped", [958]], [[120502, 120502], "mapped", [959]], [[120503, 120503], "mapped", [960]], [[120504, 120504], "mapped", [961]], [[120505, 120505], "mapped", [952]], [[120506, 120506], "mapped", [963]], [[120507, 120507], "mapped", [964]], [[120508, 120508], "mapped", [965]], [[120509, 120509], "mapped", [966]], [[120510, 120510], "mapped", [967]], [[120511, 120511], "mapped", [968]], [[120512, 120512], "mapped", [969]], [[120513, 120513], "mapped", [8711]], [[120514, 120514], "mapped", [945]], [[120515, 120515], "mapped", [946]], [[120516, 120516], "mapped", [947]], [[120517, 120517], "mapped", [948]], [[120518, 120518], "mapped", [949]], [[120519, 120519], "mapped", [950]], [[120520, 120520], "mapped", [951]], [[120521, 120521], "mapped", [952]], [[120522, 120522], "mapped", [953]], [[120523, 120523], "mapped", [954]], [[120524, 120524], "mapped", [955]], [[120525, 120525], "mapped", [956]], [[120526, 120526], "mapped", [957]], [[120527, 120527], "mapped", [958]], [[120528, 120528], "mapped", [959]], [[120529, 120529], "mapped", [960]], [[120530, 120530], "mapped", [961]], [[120531, 120532], "mapped", [963]], [[120533, 120533], "mapped", [964]], [[120534, 120534], "mapped", [965]], [[120535, 120535], "mapped", [966]], [[120536, 120536], "mapped", [967]], [[120537, 120537], "mapped", [968]], [[120538, 120538], "mapped", [969]], [[120539, 120539], "mapped", [8706]], [[120540, 120540], "mapped", [949]], [[120541, 120541], "mapped", [952]], [[120542, 120542], "mapped", [954]], [[120543, 120543], "mapped", [966]], [[120544, 120544], "mapped", [961]], [[120545, 120545], "mapped", [960]], [[120546, 120546], "mapped", [945]], [[120547, 120547], "mapped", [946]], [[120548, 120548], "mapped", [947]], [[120549, 120549], "mapped", [948]], [[120550, 120550], "mapped", [949]], [[120551, 120551], "mapped", [950]], [[120552, 120552], "mapped", [951]], [[120553, 120553], "mapped", [952]], [[120554, 120554], "mapped", [953]], [[120555, 120555], "mapped", [954]], [[120556, 120556], "mapped", [955]], [[120557, 120557], "mapped", [956]], [[120558, 120558], "mapped", [957]], [[120559, 120559], "mapped", [958]], [[120560, 120560], "mapped", [959]], [[120561, 120561], "mapped", [960]], [[120562, 120562], "mapped", [961]], [[120563, 120563], "mapped", [952]], [[120564, 120564], "mapped", [963]], [[120565, 120565], "mapped", [964]], [[120566, 120566], "mapped", [965]], [[120567, 120567], "mapped", [966]], [[120568, 120568], "mapped", [967]], [[120569, 120569], "mapped", [968]], [[120570, 120570], "mapped", [969]], [[120571, 120571], "mapped", [8711]], [[120572, 120572], "mapped", [945]], [[120573, 120573], "mapped", [946]], [[120574, 120574], "mapped", [947]], [[120575, 120575], "mapped", [948]], [[120576, 120576], "mapped", [949]], [[120577, 120577], "mapped", [950]], [[120578, 120578], "mapped", [951]], [[120579, 120579], "mapped", [952]], [[120580, 120580], "mapped", [953]], [[120581, 120581], "mapped", [954]], [[120582, 120582], "mapped", [955]], [[120583, 120583], "mapped", [956]], [[120584, 120584], "mapped", [957]], [[120585, 120585], "mapped", [958]], [[120586, 120586], "mapped", [959]], [[120587, 120587], "mapped", [960]], [[120588, 120588], "mapped", [961]], [[120589, 120590], "mapped", [963]], [[120591, 120591], "mapped", [964]], [[120592, 120592], "mapped", [965]], [[120593, 120593], "mapped", [966]], [[120594, 120594], "mapped", [967]], [[120595, 120595], "mapped", [968]], [[120596, 120596], "mapped", [969]], [[120597, 120597], "mapped", [8706]], [[120598, 120598], "mapped", [949]], [[120599, 120599], "mapped", [952]], [[120600, 120600], "mapped", [954]], [[120601, 120601], "mapped", [966]], [[120602, 120602], "mapped", [961]], [[120603, 120603], "mapped", [960]], [[120604, 120604], "mapped", [945]], [[120605, 120605], "mapped", [946]], [[120606, 120606], "mapped", [947]], [[120607, 120607], "mapped", [948]], [[120608, 120608], "mapped", [949]], [[120609, 120609], "mapped", [950]], [[120610, 120610], "mapped", [951]], [[120611, 120611], "mapped", [952]], [[120612, 120612], "mapped", [953]], [[120613, 120613], "mapped", [954]], [[120614, 120614], "mapped", [955]], [[120615, 120615], "mapped", [956]], [[120616, 120616], "mapped", [957]], [[120617, 120617], "mapped", [958]], [[120618, 120618], "mapped", [959]], [[120619, 120619], "mapped", [960]], [[120620, 120620], "mapped", [961]], [[120621, 120621], "mapped", [952]], [[120622, 120622], "mapped", [963]], [[120623, 120623], "mapped", [964]], [[120624, 120624], "mapped", [965]], [[120625, 120625], "mapped", [966]], [[120626, 120626], "mapped", [967]], [[120627, 120627], "mapped", [968]], [[120628, 120628], "mapped", [969]], [[120629, 120629], "mapped", [8711]], [[120630, 120630], "mapped", [945]], [[120631, 120631], "mapped", [946]], [[120632, 120632], "mapped", [947]], [[120633, 120633], "mapped", [948]], [[120634, 120634], "mapped", [949]], [[120635, 120635], "mapped", [950]], [[120636, 120636], "mapped", [951]], [[120637, 120637], "mapped", [952]], [[120638, 120638], "mapped", [953]], [[120639, 120639], "mapped", [954]], [[120640, 120640], "mapped", [955]], [[120641, 120641], "mapped", [956]], [[120642, 120642], "mapped", [957]], [[120643, 120643], "mapped", [958]], [[120644, 120644], "mapped", [959]], [[120645, 120645], "mapped", [960]], [[120646, 120646], "mapped", [961]], [[120647, 120648], "mapped", [963]], [[120649, 120649], "mapped", [964]], [[120650, 120650], "mapped", [965]], [[120651, 120651], "mapped", [966]], [[120652, 120652], "mapped", [967]], [[120653, 120653], "mapped", [968]], [[120654, 120654], "mapped", [969]], [[120655, 120655], "mapped", [8706]], [[120656, 120656], "mapped", [949]], [[120657, 120657], "mapped", [952]], [[120658, 120658], "mapped", [954]], [[120659, 120659], "mapped", [966]], [[120660, 120660], "mapped", [961]], [[120661, 120661], "mapped", [960]], [[120662, 120662], "mapped", [945]], [[120663, 120663], "mapped", [946]], [[120664, 120664], "mapped", [947]], [[120665, 120665], "mapped", [948]], [[120666, 120666], "mapped", [949]], [[120667, 120667], "mapped", [950]], [[120668, 120668], "mapped", [951]], [[120669, 120669], "mapped", [952]], [[120670, 120670], "mapped", [953]], [[120671, 120671], "mapped", [954]], [[120672, 120672], "mapped", [955]], [[120673, 120673], "mapped", [956]], [[120674, 120674], "mapped", [957]], [[120675, 120675], "mapped", [958]], [[120676, 120676], "mapped", [959]], [[120677, 120677], "mapped", [960]], [[120678, 120678], "mapped", [961]], [[120679, 120679], "mapped", [952]], [[120680, 120680], "mapped", [963]], [[120681, 120681], "mapped", [964]], [[120682, 120682], "mapped", [965]], [[120683, 120683], "mapped", [966]], [[120684, 120684], "mapped", [967]], [[120685, 120685], "mapped", [968]], [[120686, 120686], "mapped", [969]], [[120687, 120687], "mapped", [8711]], [[120688, 120688], "mapped", [945]], [[120689, 120689], "mapped", [946]], [[120690, 120690], "mapped", [947]], [[120691, 120691], "mapped", [948]], [[120692, 120692], "mapped", [949]], [[120693, 120693], "mapped", [950]], [[120694, 120694], "mapped", [951]], [[120695, 120695], "mapped", [952]], [[120696, 120696], "mapped", [953]], [[120697, 120697], "mapped", [954]], [[120698, 120698], "mapped", [955]], [[120699, 120699], "mapped", [956]], [[120700, 120700], "mapped", [957]], [[120701, 120701], "mapped", [958]], [[120702, 120702], "mapped", [959]], [[120703, 120703], "mapped", [960]], [[120704, 120704], "mapped", [961]], [[120705, 120706], "mapped", [963]], [[120707, 120707], "mapped", [964]], [[120708, 120708], "mapped", [965]], [[120709, 120709], "mapped", [966]], [[120710, 120710], "mapped", [967]], [[120711, 120711], "mapped", [968]], [[120712, 120712], "mapped", [969]], [[120713, 120713], "mapped", [8706]], [[120714, 120714], "mapped", [949]], [[120715, 120715], "mapped", [952]], [[120716, 120716], "mapped", [954]], [[120717, 120717], "mapped", [966]], [[120718, 120718], "mapped", [961]], [[120719, 120719], "mapped", [960]], [[120720, 120720], "mapped", [945]], [[120721, 120721], "mapped", [946]], [[120722, 120722], "mapped", [947]], [[120723, 120723], "mapped", [948]], [[120724, 120724], "mapped", [949]], [[120725, 120725], "mapped", [950]], [[120726, 120726], "mapped", [951]], [[120727, 120727], "mapped", [952]], [[120728, 120728], "mapped", [953]], [[120729, 120729], "mapped", [954]], [[120730, 120730], "mapped", [955]], [[120731, 120731], "mapped", [956]], [[120732, 120732], "mapped", [957]], [[120733, 120733], "mapped", [958]], [[120734, 120734], "mapped", [959]], [[120735, 120735], "mapped", [960]], [[120736, 120736], "mapped", [961]], [[120737, 120737], "mapped", [952]], [[120738, 120738], "mapped", [963]], [[120739, 120739], "mapped", [964]], [[120740, 120740], "mapped", [965]], [[120741, 120741], "mapped", [966]], [[120742, 120742], "mapped", [967]], [[120743, 120743], "mapped", [968]], [[120744, 120744], "mapped", [969]], [[120745, 120745], "mapped", [8711]], [[120746, 120746], "mapped", [945]], [[120747, 120747], "mapped", [946]], [[120748, 120748], "mapped", [947]], [[120749, 120749], "mapped", [948]], [[120750, 120750], "mapped", [949]], [[120751, 120751], "mapped", [950]], [[120752, 120752], "mapped", [951]], [[120753, 120753], "mapped", [952]], [[120754, 120754], "mapped", [953]], [[120755, 120755], "mapped", [954]], [[120756, 120756], "mapped", [955]], [[120757, 120757], "mapped", [956]], [[120758, 120758], "mapped", [957]], [[120759, 120759], "mapped", [958]], [[120760, 120760], "mapped", [959]], [[120761, 120761], "mapped", [960]], [[120762, 120762], "mapped", [961]], [[120763, 120764], "mapped", [963]], [[120765, 120765], "mapped", [964]], [[120766, 120766], "mapped", [965]], [[120767, 120767], "mapped", [966]], [[120768, 120768], "mapped", [967]], [[120769, 120769], "mapped", [968]], [[120770, 120770], "mapped", [969]], [[120771, 120771], "mapped", [8706]], [[120772, 120772], "mapped", [949]], [[120773, 120773], "mapped", [952]], [[120774, 120774], "mapped", [954]], [[120775, 120775], "mapped", [966]], [[120776, 120776], "mapped", [961]], [[120777, 120777], "mapped", [960]], [[120778, 120779], "mapped", [989]], [[120780, 120781], "disallowed"], [[120782, 120782], "mapped", [48]], [[120783, 120783], "mapped", [49]], [[120784, 120784], "mapped", [50]], [[120785, 120785], "mapped", [51]], [[120786, 120786], "mapped", [52]], [[120787, 120787], "mapped", [53]], [[120788, 120788], "mapped", [54]], [[120789, 120789], "mapped", [55]], [[120790, 120790], "mapped", [56]], [[120791, 120791], "mapped", [57]], [[120792, 120792], "mapped", [48]], [[120793, 120793], "mapped", [49]], [[120794, 120794], "mapped", [50]], [[120795, 120795], "mapped", [51]], [[120796, 120796], "mapped", [52]], [[120797, 120797], "mapped", [53]], [[120798, 120798], "mapped", [54]], [[120799, 120799], "mapped", [55]], [[120800, 120800], "mapped", [56]], [[120801, 120801], "mapped", [57]], [[120802, 120802], "mapped", [48]], [[120803, 120803], "mapped", [49]], [[120804, 120804], "mapped", [50]], [[120805, 120805], "mapped", [51]], [[120806, 120806], "mapped", [52]], [[120807, 120807], "mapped", [53]], [[120808, 120808], "mapped", [54]], [[120809, 120809], "mapped", [55]], [[120810, 120810], "mapped", [56]], [[120811, 120811], "mapped", [57]], [[120812, 120812], "mapped", [48]], [[120813, 120813], "mapped", [49]], [[120814, 120814], "mapped", [50]], [[120815, 120815], "mapped", [51]], [[120816, 120816], "mapped", [52]], [[120817, 120817], "mapped", [53]], [[120818, 120818], "mapped", [54]], [[120819, 120819], "mapped", [55]], [[120820, 120820], "mapped", [56]], [[120821, 120821], "mapped", [57]], [[120822, 120822], "mapped", [48]], [[120823, 120823], "mapped", [49]], [[120824, 120824], "mapped", [50]], [[120825, 120825], "mapped", [51]], [[120826, 120826], "mapped", [52]], [[120827, 120827], "mapped", [53]], [[120828, 120828], "mapped", [54]], [[120829, 120829], "mapped", [55]], [[120830, 120830], "mapped", [56]], [[120831, 120831], "mapped", [57]], [[120832, 121343], "valid", [], "NV8"], [[121344, 121398], "valid"], [[121399, 121402], "valid", [], "NV8"], [[121403, 121452], "valid"], [[121453, 121460], "valid", [], "NV8"], [[121461, 121461], "valid"], [[121462, 121475], "valid", [], "NV8"], [[121476, 121476], "valid"], [[121477, 121483], "valid", [], "NV8"], [[121484, 121498], "disallowed"], [[121499, 121503], "valid"], [[121504, 121504], "disallowed"], [[121505, 121519], "valid"], [[121520, 124927], "disallowed"], [[124928, 125124], "valid"], [[125125, 125126], "disallowed"], [[125127, 125135], "valid", [], "NV8"], [[125136, 125142], "valid"], [[125143, 126463], "disallowed"], [[126464, 126464], "mapped", [1575]], [[126465, 126465], "mapped", [1576]], [[126466, 126466], "mapped", [1580]], [[126467, 126467], "mapped", [1583]], [[126468, 126468], "disallowed"], [[126469, 126469], "mapped", [1608]], [[126470, 126470], "mapped", [1586]], [[126471, 126471], "mapped", [1581]], [[126472, 126472], "mapped", [1591]], [[126473, 126473], "mapped", [1610]], [[126474, 126474], "mapped", [1603]], [[126475, 126475], "mapped", [1604]], [[126476, 126476], "mapped", [1605]], [[126477, 126477], "mapped", [1606]], [[126478, 126478], "mapped", [1587]], [[126479, 126479], "mapped", [1593]], [[126480, 126480], "mapped", [1601]], [[126481, 126481], "mapped", [1589]], [[126482, 126482], "mapped", [1602]], [[126483, 126483], "mapped", [1585]], [[126484, 126484], "mapped", [1588]], [[126485, 126485], "mapped", [1578]], [[126486, 126486], "mapped", [1579]], [[126487, 126487], "mapped", [1582]], [[126488, 126488], "mapped", [1584]], [[126489, 126489], "mapped", [1590]], [[126490, 126490], "mapped", [1592]], [[126491, 126491], "mapped", [1594]], [[126492, 126492], "mapped", [1646]], [[126493, 126493], "mapped", [1722]], [[126494, 126494], "mapped", [1697]], [[126495, 126495], "mapped", [1647]], [[126496, 126496], "disallowed"], [[126497, 126497], "mapped", [1576]], [[126498, 126498], "mapped", [1580]], [[126499, 126499], "disallowed"], [[126500, 126500], "mapped", [1607]], [[126501, 126502], "disallowed"], [[126503, 126503], "mapped", [1581]], [[126504, 126504], "disallowed"], [[126505, 126505], "mapped", [1610]], [[126506, 126506], "mapped", [1603]], [[126507, 126507], "mapped", [1604]], [[126508, 126508], "mapped", [1605]], [[126509, 126509], "mapped", [1606]], [[126510, 126510], "mapped", [1587]], [[126511, 126511], "mapped", [1593]], [[126512, 126512], "mapped", [1601]], [[126513, 126513], "mapped", [1589]], [[126514, 126514], "mapped", [1602]], [[126515, 126515], "disallowed"], [[126516, 126516], "mapped", [1588]], [[126517, 126517], "mapped", [1578]], [[126518, 126518], "mapped", [1579]], [[126519, 126519], "mapped", [1582]], [[126520, 126520], "disallowed"], [[126521, 126521], "mapped", [1590]], [[126522, 126522], "disallowed"], [[126523, 126523], "mapped", [1594]], [[126524, 126529], "disallowed"], [[126530, 126530], "mapped", [1580]], [[126531, 126534], "disallowed"], [[126535, 126535], "mapped", [1581]], [[126536, 126536], "disallowed"], [[126537, 126537], "mapped", [1610]], [[126538, 126538], "disallowed"], [[126539, 126539], "mapped", [1604]], [[126540, 126540], "disallowed"], [[126541, 126541], "mapped", [1606]], [[126542, 126542], "mapped", [1587]], [[126543, 126543], "mapped", [1593]], [[126544, 126544], "disallowed"], [[126545, 126545], "mapped", [1589]], [[126546, 126546], "mapped", [1602]], [[126547, 126547], "disallowed"], [[126548, 126548], "mapped", [1588]], [[126549, 126550], "disallowed"], [[126551, 126551], "mapped", [1582]], [[126552, 126552], "disallowed"], [[126553, 126553], "mapped", [1590]], [[126554, 126554], "disallowed"], [[126555, 126555], "mapped", [1594]], [[126556, 126556], "disallowed"], [[126557, 126557], "mapped", [1722]], [[126558, 126558], "disallowed"], [[126559, 126559], "mapped", [1647]], [[126560, 126560], "disallowed"], [[126561, 126561], "mapped", [1576]], [[126562, 126562], "mapped", [1580]], [[126563, 126563], "disallowed"], [[126564, 126564], "mapped", [1607]], [[126565, 126566], "disallowed"], [[126567, 126567], "mapped", [1581]], [[126568, 126568], "mapped", [1591]], [[126569, 126569], "mapped", [1610]], [[126570, 126570], "mapped", [1603]], [[126571, 126571], "disallowed"], [[126572, 126572], "mapped", [1605]], [[126573, 126573], "mapped", [1606]], [[126574, 126574], "mapped", [1587]], [[126575, 126575], "mapped", [1593]], [[126576, 126576], "mapped", [1601]], [[126577, 126577], "mapped", [1589]], [[126578, 126578], "mapped", [1602]], [[126579, 126579], "disallowed"], [[126580, 126580], "mapped", [1588]], [[126581, 126581], "mapped", [1578]], [[126582, 126582], "mapped", [1579]], [[126583, 126583], "mapped", [1582]], [[126584, 126584], "disallowed"], [[126585, 126585], "mapped", [1590]], [[126586, 126586], "mapped", [1592]], [[126587, 126587], "mapped", [1594]], [[126588, 126588], "mapped", [1646]], [[126589, 126589], "disallowed"], [[126590, 126590], "mapped", [1697]], [[126591, 126591], "disallowed"], [[126592, 126592], "mapped", [1575]], [[126593, 126593], "mapped", [1576]], [[126594, 126594], "mapped", [1580]], [[126595, 126595], "mapped", [1583]], [[126596, 126596], "mapped", [1607]], [[126597, 126597], "mapped", [1608]], [[126598, 126598], "mapped", [1586]], [[126599, 126599], "mapped", [1581]], [[126600, 126600], "mapped", [1591]], [[126601, 126601], "mapped", [1610]], [[126602, 126602], "disallowed"], [[126603, 126603], "mapped", [1604]], [[126604, 126604], "mapped", [1605]], [[126605, 126605], "mapped", [1606]], [[126606, 126606], "mapped", [1587]], [[126607, 126607], "mapped", [1593]], [[126608, 126608], "mapped", [1601]], [[126609, 126609], "mapped", [1589]], [[126610, 126610], "mapped", [1602]], [[126611, 126611], "mapped", [1585]], [[126612, 126612], "mapped", [1588]], [[126613, 126613], "mapped", [1578]], [[126614, 126614], "mapped", [1579]], [[126615, 126615], "mapped", [1582]], [[126616, 126616], "mapped", [1584]], [[126617, 126617], "mapped", [1590]], [[126618, 126618], "mapped", [1592]], [[126619, 126619], "mapped", [1594]], [[126620, 126624], "disallowed"], [[126625, 126625], "mapped", [1576]], [[126626, 126626], "mapped", [1580]], [[126627, 126627], "mapped", [1583]], [[126628, 126628], "disallowed"], [[126629, 126629], "mapped", [1608]], [[126630, 126630], "mapped", [1586]], [[126631, 126631], "mapped", [1581]], [[126632, 126632], "mapped", [1591]], [[126633, 126633], "mapped", [1610]], [[126634, 126634], "disallowed"], [[126635, 126635], "mapped", [1604]], [[126636, 126636], "mapped", [1605]], [[126637, 126637], "mapped", [1606]], [[126638, 126638], "mapped", [1587]], [[126639, 126639], "mapped", [1593]], [[126640, 126640], "mapped", [1601]], [[126641, 126641], "mapped", [1589]], [[126642, 126642], "mapped", [1602]], [[126643, 126643], "mapped", [1585]], [[126644, 126644], "mapped", [1588]], [[126645, 126645], "mapped", [1578]], [[126646, 126646], "mapped", [1579]], [[126647, 126647], "mapped", [1582]], [[126648, 126648], "mapped", [1584]], [[126649, 126649], "mapped", [1590]], [[126650, 126650], "mapped", [1592]], [[126651, 126651], "mapped", [1594]], [[126652, 126703], "disallowed"], [[126704, 126705], "valid", [], "NV8"], [[126706, 126975], "disallowed"], [[126976, 127019], "valid", [], "NV8"], [[127020, 127023], "disallowed"], [[127024, 127123], "valid", [], "NV8"], [[127124, 127135], "disallowed"], [[127136, 127150], "valid", [], "NV8"], [[127151, 127152], "disallowed"], [[127153, 127166], "valid", [], "NV8"], [[127167, 127167], "valid", [], "NV8"], [[127168, 127168], "disallowed"], [[127169, 127183], "valid", [], "NV8"], [[127184, 127184], "disallowed"], [[127185, 127199], "valid", [], "NV8"], [[127200, 127221], "valid", [], "NV8"], [[127222, 127231], "disallowed"], [[127232, 127232], "disallowed"], [[127233, 127233], "disallowed_STD3_mapped", [48, 44]], [[127234, 127234], "disallowed_STD3_mapped", [49, 44]], [[127235, 127235], "disallowed_STD3_mapped", [50, 44]], [[127236, 127236], "disallowed_STD3_mapped", [51, 44]], [[127237, 127237], "disallowed_STD3_mapped", [52, 44]], [[127238, 127238], "disallowed_STD3_mapped", [53, 44]], [[127239, 127239], "disallowed_STD3_mapped", [54, 44]], [[127240, 127240], "disallowed_STD3_mapped", [55, 44]], [[127241, 127241], "disallowed_STD3_mapped", [56, 44]], [[127242, 127242], "disallowed_STD3_mapped", [57, 44]], [[127243, 127244], "valid", [], "NV8"], [[127245, 127247], "disallowed"], [[127248, 127248], "disallowed_STD3_mapped", [40, 97, 41]], [[127249, 127249], "disallowed_STD3_mapped", [40, 98, 41]], [[127250, 127250], "disallowed_STD3_mapped", [40, 99, 41]], [[127251, 127251], "disallowed_STD3_mapped", [40, 100, 41]], [[127252, 127252], "disallowed_STD3_mapped", [40, 101, 41]], [[127253, 127253], "disallowed_STD3_mapped", [40, 102, 41]], [[127254, 127254], "disallowed_STD3_mapped", [40, 103, 41]], [[127255, 127255], "disallowed_STD3_mapped", [40, 104, 41]], [[127256, 127256], "disallowed_STD3_mapped", [40, 105, 41]], [[127257, 127257], "disallowed_STD3_mapped", [40, 106, 41]], [[127258, 127258], "disallowed_STD3_mapped", [40, 107, 41]], [[127259, 127259], "disallowed_STD3_mapped", [40, 108, 41]], [[127260, 127260], "disallowed_STD3_mapped", [40, 109, 41]], [[127261, 127261], "disallowed_STD3_mapped", [40, 110, 41]], [[127262, 127262], "disallowed_STD3_mapped", [40, 111, 41]], [[127263, 127263], "disallowed_STD3_mapped", [40, 112, 41]], [[127264, 127264], "disallowed_STD3_mapped", [40, 113, 41]], [[127265, 127265], "disallowed_STD3_mapped", [40, 114, 41]], [[127266, 127266], "disallowed_STD3_mapped", [40, 115, 41]], [[127267, 127267], "disallowed_STD3_mapped", [40, 116, 41]], [[127268, 127268], "disallowed_STD3_mapped", [40, 117, 41]], [[127269, 127269], "disallowed_STD3_mapped", [40, 118, 41]], [[127270, 127270], "disallowed_STD3_mapped", [40, 119, 41]], [[127271, 127271], "disallowed_STD3_mapped", [40, 120, 41]], [[127272, 127272], "disallowed_STD3_mapped", [40, 121, 41]], [[127273, 127273], "disallowed_STD3_mapped", [40, 122, 41]], [[127274, 127274], "mapped", [12308, 115, 12309]], [[127275, 127275], "mapped", [99]], [[127276, 127276], "mapped", [114]], [[127277, 127277], "mapped", [99, 100]], [[127278, 127278], "mapped", [119, 122]], [[127279, 127279], "disallowed"], [[127280, 127280], "mapped", [97]], [[127281, 127281], "mapped", [98]], [[127282, 127282], "mapped", [99]], [[127283, 127283], "mapped", [100]], [[127284, 127284], "mapped", [101]], [[127285, 127285], "mapped", [102]], [[127286, 127286], "mapped", [103]], [[127287, 127287], "mapped", [104]], [[127288, 127288], "mapped", [105]], [[127289, 127289], "mapped", [106]], [[127290, 127290], "mapped", [107]], [[127291, 127291], "mapped", [108]], [[127292, 127292], "mapped", [109]], [[127293, 127293], "mapped", [110]], [[127294, 127294], "mapped", [111]], [[127295, 127295], "mapped", [112]], [[127296, 127296], "mapped", [113]], [[127297, 127297], "mapped", [114]], [[127298, 127298], "mapped", [115]], [[127299, 127299], "mapped", [116]], [[127300, 127300], "mapped", [117]], [[127301, 127301], "mapped", [118]], [[127302, 127302], "mapped", [119]], [[127303, 127303], "mapped", [120]], [[127304, 127304], "mapped", [121]], [[127305, 127305], "mapped", [122]], [[127306, 127306], "mapped", [104, 118]], [[127307, 127307], "mapped", [109, 118]], [[127308, 127308], "mapped", [115, 100]], [[127309, 127309], "mapped", [115, 115]], [[127310, 127310], "mapped", [112, 112, 118]], [[127311, 127311], "mapped", [119, 99]], [[127312, 127318], "valid", [], "NV8"], [[127319, 127319], "valid", [], "NV8"], [[127320, 127326], "valid", [], "NV8"], [[127327, 127327], "valid", [], "NV8"], [[127328, 127337], "valid", [], "NV8"], [[127338, 127338], "mapped", [109, 99]], [[127339, 127339], "mapped", [109, 100]], [[127340, 127343], "disallowed"], [[127344, 127352], "valid", [], "NV8"], [[127353, 127353], "valid", [], "NV8"], [[127354, 127354], "valid", [], "NV8"], [[127355, 127356], "valid", [], "NV8"], [[127357, 127358], "valid", [], "NV8"], [[127359, 127359], "valid", [], "NV8"], [[127360, 127369], "valid", [], "NV8"], [[127370, 127373], "valid", [], "NV8"], [[127374, 127375], "valid", [], "NV8"], [[127376, 127376], "mapped", [100, 106]], [[127377, 127386], "valid", [], "NV8"], [[127387, 127461], "disallowed"], [[127462, 127487], "valid", [], "NV8"], [[127488, 127488], "mapped", [12411, 12363]], [[127489, 127489], "mapped", [12467, 12467]], [[127490, 127490], "mapped", [12469]], [[127491, 127503], "disallowed"], [[127504, 127504], "mapped", [25163]], [[127505, 127505], "mapped", [23383]], [[127506, 127506], "mapped", [21452]], [[127507, 127507], "mapped", [12487]], [[127508, 127508], "mapped", [20108]], [[127509, 127509], "mapped", [22810]], [[127510, 127510], "mapped", [35299]], [[127511, 127511], "mapped", [22825]], [[127512, 127512], "mapped", [20132]], [[127513, 127513], "mapped", [26144]], [[127514, 127514], "mapped", [28961]], [[127515, 127515], "mapped", [26009]], [[127516, 127516], "mapped", [21069]], [[127517, 127517], "mapped", [24460]], [[127518, 127518], "mapped", [20877]], [[127519, 127519], "mapped", [26032]], [[127520, 127520], "mapped", [21021]], [[127521, 127521], "mapped", [32066]], [[127522, 127522], "mapped", [29983]], [[127523, 127523], "mapped", [36009]], [[127524, 127524], "mapped", [22768]], [[127525, 127525], "mapped", [21561]], [[127526, 127526], "mapped", [28436]], [[127527, 127527], "mapped", [25237]], [[127528, 127528], "mapped", [25429]], [[127529, 127529], "mapped", [19968]], [[127530, 127530], "mapped", [19977]], [[127531, 127531], "mapped", [36938]], [[127532, 127532], "mapped", [24038]], [[127533, 127533], "mapped", [20013]], [[127534, 127534], "mapped", [21491]], [[127535, 127535], "mapped", [25351]], [[127536, 127536], "mapped", [36208]], [[127537, 127537], "mapped", [25171]], [[127538, 127538], "mapped", [31105]], [[127539, 127539], "mapped", [31354]], [[127540, 127540], "mapped", [21512]], [[127541, 127541], "mapped", [28288]], [[127542, 127542], "mapped", [26377]], [[127543, 127543], "mapped", [26376]], [[127544, 127544], "mapped", [30003]], [[127545, 127545], "mapped", [21106]], [[127546, 127546], "mapped", [21942]], [[127547, 127551], "disallowed"], [[127552, 127552], "mapped", [12308, 26412, 12309]], [[127553, 127553], "mapped", [12308, 19977, 12309]], [[127554, 127554], "mapped", [12308, 20108, 12309]], [[127555, 127555], "mapped", [12308, 23433, 12309]], [[127556, 127556], "mapped", [12308, 28857, 12309]], [[127557, 127557], "mapped", [12308, 25171, 12309]], [[127558, 127558], "mapped", [12308, 30423, 12309]], [[127559, 127559], "mapped", [12308, 21213, 12309]], [[127560, 127560], "mapped", [12308, 25943, 12309]], [[127561, 127567], "disallowed"], [[127568, 127568], "mapped", [24471]], [[127569, 127569], "mapped", [21487]], [[127570, 127743], "disallowed"], [[127744, 127776], "valid", [], "NV8"], [[127777, 127788], "valid", [], "NV8"], [[127789, 127791], "valid", [], "NV8"], [[127792, 127797], "valid", [], "NV8"], [[127798, 127798], "valid", [], "NV8"], [[127799, 127868], "valid", [], "NV8"], [[127869, 127869], "valid", [], "NV8"], [[127870, 127871], "valid", [], "NV8"], [[127872, 127891], "valid", [], "NV8"], [[127892, 127903], "valid", [], "NV8"], [[127904, 127940], "valid", [], "NV8"], [[127941, 127941], "valid", [], "NV8"], [[127942, 127946], "valid", [], "NV8"], [[127947, 127950], "valid", [], "NV8"], [[127951, 127955], "valid", [], "NV8"], [[127956, 127967], "valid", [], "NV8"], [[127968, 127984], "valid", [], "NV8"], [[127985, 127991], "valid", [], "NV8"], [[127992, 127999], "valid", [], "NV8"], [[128e3, 128062], "valid", [], "NV8"], [[128063, 128063], "valid", [], "NV8"], [[128064, 128064], "valid", [], "NV8"], [[128065, 128065], "valid", [], "NV8"], [[128066, 128247], "valid", [], "NV8"], [[128248, 128248], "valid", [], "NV8"], [[128249, 128252], "valid", [], "NV8"], [[128253, 128254], "valid", [], "NV8"], [[128255, 128255], "valid", [], "NV8"], [[128256, 128317], "valid", [], "NV8"], [[128318, 128319], "valid", [], "NV8"], [[128320, 128323], "valid", [], "NV8"], [[128324, 128330], "valid", [], "NV8"], [[128331, 128335], "valid", [], "NV8"], [[128336, 128359], "valid", [], "NV8"], [[128360, 128377], "valid", [], "NV8"], [[128378, 128378], "disallowed"], [[128379, 128419], "valid", [], "NV8"], [[128420, 128420], "disallowed"], [[128421, 128506], "valid", [], "NV8"], [[128507, 128511], "valid", [], "NV8"], [[128512, 128512], "valid", [], "NV8"], [[128513, 128528], "valid", [], "NV8"], [[128529, 128529], "valid", [], "NV8"], [[128530, 128532], "valid", [], "NV8"], [[128533, 128533], "valid", [], "NV8"], [[128534, 128534], "valid", [], "NV8"], [[128535, 128535], "valid", [], "NV8"], [[128536, 128536], "valid", [], "NV8"], [[128537, 128537], "valid", [], "NV8"], [[128538, 128538], "valid", [], "NV8"], [[128539, 128539], "valid", [], "NV8"], [[128540, 128542], "valid", [], "NV8"], [[128543, 128543], "valid", [], "NV8"], [[128544, 128549], "valid", [], "NV8"], [[128550, 128551], "valid", [], "NV8"], [[128552, 128555], "valid", [], "NV8"], [[128556, 128556], "valid", [], "NV8"], [[128557, 128557], "valid", [], "NV8"], [[128558, 128559], "valid", [], "NV8"], [[128560, 128563], "valid", [], "NV8"], [[128564, 128564], "valid", [], "NV8"], [[128565, 128576], "valid", [], "NV8"], [[128577, 128578], "valid", [], "NV8"], [[128579, 128580], "valid", [], "NV8"], [[128581, 128591], "valid", [], "NV8"], [[128592, 128639], "valid", [], "NV8"], [[128640, 128709], "valid", [], "NV8"], [[128710, 128719], "valid", [], "NV8"], [[128720, 128720], "valid", [], "NV8"], [[128721, 128735], "disallowed"], [[128736, 128748], "valid", [], "NV8"], [[128749, 128751], "disallowed"], [[128752, 128755], "valid", [], "NV8"], [[128756, 128767], "disallowed"], [[128768, 128883], "valid", [], "NV8"], [[128884, 128895], "disallowed"], [[128896, 128980], "valid", [], "NV8"], [[128981, 129023], "disallowed"], [[129024, 129035], "valid", [], "NV8"], [[129036, 129039], "disallowed"], [[129040, 129095], "valid", [], "NV8"], [[129096, 129103], "disallowed"], [[129104, 129113], "valid", [], "NV8"], [[129114, 129119], "disallowed"], [[129120, 129159], "valid", [], "NV8"], [[129160, 129167], "disallowed"], [[129168, 129197], "valid", [], "NV8"], [[129198, 129295], "disallowed"], [[129296, 129304], "valid", [], "NV8"], [[129305, 129407], "disallowed"], [[129408, 129412], "valid", [], "NV8"], [[129413, 129471], "disallowed"], [[129472, 129472], "valid", [], "NV8"], [[129473, 131069], "disallowed"], [[131070, 131071], "disallowed"], [[131072, 173782], "valid"], [[173783, 173823], "disallowed"], [[173824, 177972], "valid"], [[177973, 177983], "disallowed"], [[177984, 178205], "valid"], [[178206, 178207], "disallowed"], [[178208, 183969], "valid"], [[183970, 194559], "disallowed"], [[194560, 194560], "mapped", [20029]], [[194561, 194561], "mapped", [20024]], [[194562, 194562], "mapped", [20033]], [[194563, 194563], "mapped", [131362]], [[194564, 194564], "mapped", [20320]], [[194565, 194565], "mapped", [20398]], [[194566, 194566], "mapped", [20411]], [[194567, 194567], "mapped", [20482]], [[194568, 194568], "mapped", [20602]], [[194569, 194569], "mapped", [20633]], [[194570, 194570], "mapped", [20711]], [[194571, 194571], "mapped", [20687]], [[194572, 194572], "mapped", [13470]], [[194573, 194573], "mapped", [132666]], [[194574, 194574], "mapped", [20813]], [[194575, 194575], "mapped", [20820]], [[194576, 194576], "mapped", [20836]], [[194577, 194577], "mapped", [20855]], [[194578, 194578], "mapped", [132380]], [[194579, 194579], "mapped", [13497]], [[194580, 194580], "mapped", [20839]], [[194581, 194581], "mapped", [20877]], [[194582, 194582], "mapped", [132427]], [[194583, 194583], "mapped", [20887]], [[194584, 194584], "mapped", [20900]], [[194585, 194585], "mapped", [20172]], [[194586, 194586], "mapped", [20908]], [[194587, 194587], "mapped", [20917]], [[194588, 194588], "mapped", [168415]], [[194589, 194589], "mapped", [20981]], [[194590, 194590], "mapped", [20995]], [[194591, 194591], "mapped", [13535]], [[194592, 194592], "mapped", [21051]], [[194593, 194593], "mapped", [21062]], [[194594, 194594], "mapped", [21106]], [[194595, 194595], "mapped", [21111]], [[194596, 194596], "mapped", [13589]], [[194597, 194597], "mapped", [21191]], [[194598, 194598], "mapped", [21193]], [[194599, 194599], "mapped", [21220]], [[194600, 194600], "mapped", [21242]], [[194601, 194601], "mapped", [21253]], [[194602, 194602], "mapped", [21254]], [[194603, 194603], "mapped", [21271]], [[194604, 194604], "mapped", [21321]], [[194605, 194605], "mapped", [21329]], [[194606, 194606], "mapped", [21338]], [[194607, 194607], "mapped", [21363]], [[194608, 194608], "mapped", [21373]], [[194609, 194611], "mapped", [21375]], [[194612, 194612], "mapped", [133676]], [[194613, 194613], "mapped", [28784]], [[194614, 194614], "mapped", [21450]], [[194615, 194615], "mapped", [21471]], [[194616, 194616], "mapped", [133987]], [[194617, 194617], "mapped", [21483]], [[194618, 194618], "mapped", [21489]], [[194619, 194619], "mapped", [21510]], [[194620, 194620], "mapped", [21662]], [[194621, 194621], "mapped", [21560]], [[194622, 194622], "mapped", [21576]], [[194623, 194623], "mapped", [21608]], [[194624, 194624], "mapped", [21666]], [[194625, 194625], "mapped", [21750]], [[194626, 194626], "mapped", [21776]], [[194627, 194627], "mapped", [21843]], [[194628, 194628], "mapped", [21859]], [[194629, 194630], "mapped", [21892]], [[194631, 194631], "mapped", [21913]], [[194632, 194632], "mapped", [21931]], [[194633, 194633], "mapped", [21939]], [[194634, 194634], "mapped", [21954]], [[194635, 194635], "mapped", [22294]], [[194636, 194636], "mapped", [22022]], [[194637, 194637], "mapped", [22295]], [[194638, 194638], "mapped", [22097]], [[194639, 194639], "mapped", [22132]], [[194640, 194640], "mapped", [20999]], [[194641, 194641], "mapped", [22766]], [[194642, 194642], "mapped", [22478]], [[194643, 194643], "mapped", [22516]], [[194644, 194644], "mapped", [22541]], [[194645, 194645], "mapped", [22411]], [[194646, 194646], "mapped", [22578]], [[194647, 194647], "mapped", [22577]], [[194648, 194648], "mapped", [22700]], [[194649, 194649], "mapped", [136420]], [[194650, 194650], "mapped", [22770]], [[194651, 194651], "mapped", [22775]], [[194652, 194652], "mapped", [22790]], [[194653, 194653], "mapped", [22810]], [[194654, 194654], "mapped", [22818]], [[194655, 194655], "mapped", [22882]], [[194656, 194656], "mapped", [136872]], [[194657, 194657], "mapped", [136938]], [[194658, 194658], "mapped", [23020]], [[194659, 194659], "mapped", [23067]], [[194660, 194660], "mapped", [23079]], [[194661, 194661], "mapped", [23e3]], [[194662, 194662], "mapped", [23142]], [[194663, 194663], "mapped", [14062]], [[194664, 194664], "disallowed"], [[194665, 194665], "mapped", [23304]], [[194666, 194667], "mapped", [23358]], [[194668, 194668], "mapped", [137672]], [[194669, 194669], "mapped", [23491]], [[194670, 194670], "mapped", [23512]], [[194671, 194671], "mapped", [23527]], [[194672, 194672], "mapped", [23539]], [[194673, 194673], "mapped", [138008]], [[194674, 194674], "mapped", [23551]], [[194675, 194675], "mapped", [23558]], [[194676, 194676], "disallowed"], [[194677, 194677], "mapped", [23586]], [[194678, 194678], "mapped", [14209]], [[194679, 194679], "mapped", [23648]], [[194680, 194680], "mapped", [23662]], [[194681, 194681], "mapped", [23744]], [[194682, 194682], "mapped", [23693]], [[194683, 194683], "mapped", [138724]], [[194684, 194684], "mapped", [23875]], [[194685, 194685], "mapped", [138726]], [[194686, 194686], "mapped", [23918]], [[194687, 194687], "mapped", [23915]], [[194688, 194688], "mapped", [23932]], [[194689, 194689], "mapped", [24033]], [[194690, 194690], "mapped", [24034]], [[194691, 194691], "mapped", [14383]], [[194692, 194692], "mapped", [24061]], [[194693, 194693], "mapped", [24104]], [[194694, 194694], "mapped", [24125]], [[194695, 194695], "mapped", [24169]], [[194696, 194696], "mapped", [14434]], [[194697, 194697], "mapped", [139651]], [[194698, 194698], "mapped", [14460]], [[194699, 194699], "mapped", [24240]], [[194700, 194700], "mapped", [24243]], [[194701, 194701], "mapped", [24246]], [[194702, 194702], "mapped", [24266]], [[194703, 194703], "mapped", [172946]], [[194704, 194704], "mapped", [24318]], [[194705, 194706], "mapped", [140081]], [[194707, 194707], "mapped", [33281]], [[194708, 194709], "mapped", [24354]], [[194710, 194710], "mapped", [14535]], [[194711, 194711], "mapped", [144056]], [[194712, 194712], "mapped", [156122]], [[194713, 194713], "mapped", [24418]], [[194714, 194714], "mapped", [24427]], [[194715, 194715], "mapped", [14563]], [[194716, 194716], "mapped", [24474]], [[194717, 194717], "mapped", [24525]], [[194718, 194718], "mapped", [24535]], [[194719, 194719], "mapped", [24569]], [[194720, 194720], "mapped", [24705]], [[194721, 194721], "mapped", [14650]], [[194722, 194722], "mapped", [14620]], [[194723, 194723], "mapped", [24724]], [[194724, 194724], "mapped", [141012]], [[194725, 194725], "mapped", [24775]], [[194726, 194726], "mapped", [24904]], [[194727, 194727], "mapped", [24908]], [[194728, 194728], "mapped", [24910]], [[194729, 194729], "mapped", [24908]], [[194730, 194730], "mapped", [24954]], [[194731, 194731], "mapped", [24974]], [[194732, 194732], "mapped", [25010]], [[194733, 194733], "mapped", [24996]], [[194734, 194734], "mapped", [25007]], [[194735, 194735], "mapped", [25054]], [[194736, 194736], "mapped", [25074]], [[194737, 194737], "mapped", [25078]], [[194738, 194738], "mapped", [25104]], [[194739, 194739], "mapped", [25115]], [[194740, 194740], "mapped", [25181]], [[194741, 194741], "mapped", [25265]], [[194742, 194742], "mapped", [25300]], [[194743, 194743], "mapped", [25424]], [[194744, 194744], "mapped", [142092]], [[194745, 194745], "mapped", [25405]], [[194746, 194746], "mapped", [25340]], [[194747, 194747], "mapped", [25448]], [[194748, 194748], "mapped", [25475]], [[194749, 194749], "mapped", [25572]], [[194750, 194750], "mapped", [142321]], [[194751, 194751], "mapped", [25634]], [[194752, 194752], "mapped", [25541]], [[194753, 194753], "mapped", [25513]], [[194754, 194754], "mapped", [14894]], [[194755, 194755], "mapped", [25705]], [[194756, 194756], "mapped", [25726]], [[194757, 194757], "mapped", [25757]], [[194758, 194758], "mapped", [25719]], [[194759, 194759], "mapped", [14956]], [[194760, 194760], "mapped", [25935]], [[194761, 194761], "mapped", [25964]], [[194762, 194762], "mapped", [143370]], [[194763, 194763], "mapped", [26083]], [[194764, 194764], "mapped", [26360]], [[194765, 194765], "mapped", [26185]], [[194766, 194766], "mapped", [15129]], [[194767, 194767], "mapped", [26257]], [[194768, 194768], "mapped", [15112]], [[194769, 194769], "mapped", [15076]], [[194770, 194770], "mapped", [20882]], [[194771, 194771], "mapped", [20885]], [[194772, 194772], "mapped", [26368]], [[194773, 194773], "mapped", [26268]], [[194774, 194774], "mapped", [32941]], [[194775, 194775], "mapped", [17369]], [[194776, 194776], "mapped", [26391]], [[194777, 194777], "mapped", [26395]], [[194778, 194778], "mapped", [26401]], [[194779, 194779], "mapped", [26462]], [[194780, 194780], "mapped", [26451]], [[194781, 194781], "mapped", [144323]], [[194782, 194782], "mapped", [15177]], [[194783, 194783], "mapped", [26618]], [[194784, 194784], "mapped", [26501]], [[194785, 194785], "mapped", [26706]], [[194786, 194786], "mapped", [26757]], [[194787, 194787], "mapped", [144493]], [[194788, 194788], "mapped", [26766]], [[194789, 194789], "mapped", [26655]], [[194790, 194790], "mapped", [26900]], [[194791, 194791], "mapped", [15261]], [[194792, 194792], "mapped", [26946]], [[194793, 194793], "mapped", [27043]], [[194794, 194794], "mapped", [27114]], [[194795, 194795], "mapped", [27304]], [[194796, 194796], "mapped", [145059]], [[194797, 194797], "mapped", [27355]], [[194798, 194798], "mapped", [15384]], [[194799, 194799], "mapped", [27425]], [[194800, 194800], "mapped", [145575]], [[194801, 194801], "mapped", [27476]], [[194802, 194802], "mapped", [15438]], [[194803, 194803], "mapped", [27506]], [[194804, 194804], "mapped", [27551]], [[194805, 194805], "mapped", [27578]], [[194806, 194806], "mapped", [27579]], [[194807, 194807], "mapped", [146061]], [[194808, 194808], "mapped", [138507]], [[194809, 194809], "mapped", [146170]], [[194810, 194810], "mapped", [27726]], [[194811, 194811], "mapped", [146620]], [[194812, 194812], "mapped", [27839]], [[194813, 194813], "mapped", [27853]], [[194814, 194814], "mapped", [27751]], [[194815, 194815], "mapped", [27926]], [[194816, 194816], "mapped", [27966]], [[194817, 194817], "mapped", [28023]], [[194818, 194818], "mapped", [27969]], [[194819, 194819], "mapped", [28009]], [[194820, 194820], "mapped", [28024]], [[194821, 194821], "mapped", [28037]], [[194822, 194822], "mapped", [146718]], [[194823, 194823], "mapped", [27956]], [[194824, 194824], "mapped", [28207]], [[194825, 194825], "mapped", [28270]], [[194826, 194826], "mapped", [15667]], [[194827, 194827], "mapped", [28363]], [[194828, 194828], "mapped", [28359]], [[194829, 194829], "mapped", [147153]], [[194830, 194830], "mapped", [28153]], [[194831, 194831], "mapped", [28526]], [[194832, 194832], "mapped", [147294]], [[194833, 194833], "mapped", [147342]], [[194834, 194834], "mapped", [28614]], [[194835, 194835], "mapped", [28729]], [[194836, 194836], "mapped", [28702]], [[194837, 194837], "mapped", [28699]], [[194838, 194838], "mapped", [15766]], [[194839, 194839], "mapped", [28746]], [[194840, 194840], "mapped", [28797]], [[194841, 194841], "mapped", [28791]], [[194842, 194842], "mapped", [28845]], [[194843, 194843], "mapped", [132389]], [[194844, 194844], "mapped", [28997]], [[194845, 194845], "mapped", [148067]], [[194846, 194846], "mapped", [29084]], [[194847, 194847], "disallowed"], [[194848, 194848], "mapped", [29224]], [[194849, 194849], "mapped", [29237]], [[194850, 194850], "mapped", [29264]], [[194851, 194851], "mapped", [149e3]], [[194852, 194852], "mapped", [29312]], [[194853, 194853], "mapped", [29333]], [[194854, 194854], "mapped", [149301]], [[194855, 194855], "mapped", [149524]], [[194856, 194856], "mapped", [29562]], [[194857, 194857], "mapped", [29579]], [[194858, 194858], "mapped", [16044]], [[194859, 194859], "mapped", [29605]], [[194860, 194861], "mapped", [16056]], [[194862, 194862], "mapped", [29767]], [[194863, 194863], "mapped", [29788]], [[194864, 194864], "mapped", [29809]], [[194865, 194865], "mapped", [29829]], [[194866, 194866], "mapped", [29898]], [[194867, 194867], "mapped", [16155]], [[194868, 194868], "mapped", [29988]], [[194869, 194869], "mapped", [150582]], [[194870, 194870], "mapped", [30014]], [[194871, 194871], "mapped", [150674]], [[194872, 194872], "mapped", [30064]], [[194873, 194873], "mapped", [139679]], [[194874, 194874], "mapped", [30224]], [[194875, 194875], "mapped", [151457]], [[194876, 194876], "mapped", [151480]], [[194877, 194877], "mapped", [151620]], [[194878, 194878], "mapped", [16380]], [[194879, 194879], "mapped", [16392]], [[194880, 194880], "mapped", [30452]], [[194881, 194881], "mapped", [151795]], [[194882, 194882], "mapped", [151794]], [[194883, 194883], "mapped", [151833]], [[194884, 194884], "mapped", [151859]], [[194885, 194885], "mapped", [30494]], [[194886, 194887], "mapped", [30495]], [[194888, 194888], "mapped", [30538]], [[194889, 194889], "mapped", [16441]], [[194890, 194890], "mapped", [30603]], [[194891, 194891], "mapped", [16454]], [[194892, 194892], "mapped", [16534]], [[194893, 194893], "mapped", [152605]], [[194894, 194894], "mapped", [30798]], [[194895, 194895], "mapped", [30860]], [[194896, 194896], "mapped", [30924]], [[194897, 194897], "mapped", [16611]], [[194898, 194898], "mapped", [153126]], [[194899, 194899], "mapped", [31062]], [[194900, 194900], "mapped", [153242]], [[194901, 194901], "mapped", [153285]], [[194902, 194902], "mapped", [31119]], [[194903, 194903], "mapped", [31211]], [[194904, 194904], "mapped", [16687]], [[194905, 194905], "mapped", [31296]], [[194906, 194906], "mapped", [31306]], [[194907, 194907], "mapped", [31311]], [[194908, 194908], "mapped", [153980]], [[194909, 194910], "mapped", [154279]], [[194911, 194911], "disallowed"], [[194912, 194912], "mapped", [16898]], [[194913, 194913], "mapped", [154539]], [[194914, 194914], "mapped", [31686]], [[194915, 194915], "mapped", [31689]], [[194916, 194916], "mapped", [16935]], [[194917, 194917], "mapped", [154752]], [[194918, 194918], "mapped", [31954]], [[194919, 194919], "mapped", [17056]], [[194920, 194920], "mapped", [31976]], [[194921, 194921], "mapped", [31971]], [[194922, 194922], "mapped", [32e3]], [[194923, 194923], "mapped", [155526]], [[194924, 194924], "mapped", [32099]], [[194925, 194925], "mapped", [17153]], [[194926, 194926], "mapped", [32199]], [[194927, 194927], "mapped", [32258]], [[194928, 194928], "mapped", [32325]], [[194929, 194929], "mapped", [17204]], [[194930, 194930], "mapped", [156200]], [[194931, 194931], "mapped", [156231]], [[194932, 194932], "mapped", [17241]], [[194933, 194933], "mapped", [156377]], [[194934, 194934], "mapped", [32634]], [[194935, 194935], "mapped", [156478]], [[194936, 194936], "mapped", [32661]], [[194937, 194937], "mapped", [32762]], [[194938, 194938], "mapped", [32773]], [[194939, 194939], "mapped", [156890]], [[194940, 194940], "mapped", [156963]], [[194941, 194941], "mapped", [32864]], [[194942, 194942], "mapped", [157096]], [[194943, 194943], "mapped", [32880]], [[194944, 194944], "mapped", [144223]], [[194945, 194945], "mapped", [17365]], [[194946, 194946], "mapped", [32946]], [[194947, 194947], "mapped", [33027]], [[194948, 194948], "mapped", [17419]], [[194949, 194949], "mapped", [33086]], [[194950, 194950], "mapped", [23221]], [[194951, 194951], "mapped", [157607]], [[194952, 194952], "mapped", [157621]], [[194953, 194953], "mapped", [144275]], [[194954, 194954], "mapped", [144284]], [[194955, 194955], "mapped", [33281]], [[194956, 194956], "mapped", [33284]], [[194957, 194957], "mapped", [36766]], [[194958, 194958], "mapped", [17515]], [[194959, 194959], "mapped", [33425]], [[194960, 194960], "mapped", [33419]], [[194961, 194961], "mapped", [33437]], [[194962, 194962], "mapped", [21171]], [[194963, 194963], "mapped", [33457]], [[194964, 194964], "mapped", [33459]], [[194965, 194965], "mapped", [33469]], [[194966, 194966], "mapped", [33510]], [[194967, 194967], "mapped", [158524]], [[194968, 194968], "mapped", [33509]], [[194969, 194969], "mapped", [33565]], [[194970, 194970], "mapped", [33635]], [[194971, 194971], "mapped", [33709]], [[194972, 194972], "mapped", [33571]], [[194973, 194973], "mapped", [33725]], [[194974, 194974], "mapped", [33767]], [[194975, 194975], "mapped", [33879]], [[194976, 194976], "mapped", [33619]], [[194977, 194977], "mapped", [33738]], [[194978, 194978], "mapped", [33740]], [[194979, 194979], "mapped", [33756]], [[194980, 194980], "mapped", [158774]], [[194981, 194981], "mapped", [159083]], [[194982, 194982], "mapped", [158933]], [[194983, 194983], "mapped", [17707]], [[194984, 194984], "mapped", [34033]], [[194985, 194985], "mapped", [34035]], [[194986, 194986], "mapped", [34070]], [[194987, 194987], "mapped", [160714]], [[194988, 194988], "mapped", [34148]], [[194989, 194989], "mapped", [159532]], [[194990, 194990], "mapped", [17757]], [[194991, 194991], "mapped", [17761]], [[194992, 194992], "mapped", [159665]], [[194993, 194993], "mapped", [159954]], [[194994, 194994], "mapped", [17771]], [[194995, 194995], "mapped", [34384]], [[194996, 194996], "mapped", [34396]], [[194997, 194997], "mapped", [34407]], [[194998, 194998], "mapped", [34409]], [[194999, 194999], "mapped", [34473]], [[195e3, 195e3], "mapped", [34440]], [[195001, 195001], "mapped", [34574]], [[195002, 195002], "mapped", [34530]], [[195003, 195003], "mapped", [34681]], [[195004, 195004], "mapped", [34600]], [[195005, 195005], "mapped", [34667]], [[195006, 195006], "mapped", [34694]], [[195007, 195007], "disallowed"], [[195008, 195008], "mapped", [34785]], [[195009, 195009], "mapped", [34817]], [[195010, 195010], "mapped", [17913]], [[195011, 195011], "mapped", [34912]], [[195012, 195012], "mapped", [34915]], [[195013, 195013], "mapped", [161383]], [[195014, 195014], "mapped", [35031]], [[195015, 195015], "mapped", [35038]], [[195016, 195016], "mapped", [17973]], [[195017, 195017], "mapped", [35066]], [[195018, 195018], "mapped", [13499]], [[195019, 195019], "mapped", [161966]], [[195020, 195020], "mapped", [162150]], [[195021, 195021], "mapped", [18110]], [[195022, 195022], "mapped", [18119]], [[195023, 195023], "mapped", [35488]], [[195024, 195024], "mapped", [35565]], [[195025, 195025], "mapped", [35722]], [[195026, 195026], "mapped", [35925]], [[195027, 195027], "mapped", [162984]], [[195028, 195028], "mapped", [36011]], [[195029, 195029], "mapped", [36033]], [[195030, 195030], "mapped", [36123]], [[195031, 195031], "mapped", [36215]], [[195032, 195032], "mapped", [163631]], [[195033, 195033], "mapped", [133124]], [[195034, 195034], "mapped", [36299]], [[195035, 195035], "mapped", [36284]], [[195036, 195036], "mapped", [36336]], [[195037, 195037], "mapped", [133342]], [[195038, 195038], "mapped", [36564]], [[195039, 195039], "mapped", [36664]], [[195040, 195040], "mapped", [165330]], [[195041, 195041], "mapped", [165357]], [[195042, 195042], "mapped", [37012]], [[195043, 195043], "mapped", [37105]], [[195044, 195044], "mapped", [37137]], [[195045, 195045], "mapped", [165678]], [[195046, 195046], "mapped", [37147]], [[195047, 195047], "mapped", [37432]], [[195048, 195048], "mapped", [37591]], [[195049, 195049], "mapped", [37592]], [[195050, 195050], "mapped", [37500]], [[195051, 195051], "mapped", [37881]], [[195052, 195052], "mapped", [37909]], [[195053, 195053], "mapped", [166906]], [[195054, 195054], "mapped", [38283]], [[195055, 195055], "mapped", [18837]], [[195056, 195056], "mapped", [38327]], [[195057, 195057], "mapped", [167287]], [[195058, 195058], "mapped", [18918]], [[195059, 195059], "mapped", [38595]], [[195060, 195060], "mapped", [23986]], [[195061, 195061], "mapped", [38691]], [[195062, 195062], "mapped", [168261]], [[195063, 195063], "mapped", [168474]], [[195064, 195064], "mapped", [19054]], [[195065, 195065], "mapped", [19062]], [[195066, 195066], "mapped", [38880]], [[195067, 195067], "mapped", [168970]], [[195068, 195068], "mapped", [19122]], [[195069, 195069], "mapped", [169110]], [[195070, 195071], "mapped", [38923]], [[195072, 195072], "mapped", [38953]], [[195073, 195073], "mapped", [169398]], [[195074, 195074], "mapped", [39138]], [[195075, 195075], "mapped", [19251]], [[195076, 195076], "mapped", [39209]], [[195077, 195077], "mapped", [39335]], [[195078, 195078], "mapped", [39362]], [[195079, 195079], "mapped", [39422]], [[195080, 195080], "mapped", [19406]], [[195081, 195081], "mapped", [170800]], [[195082, 195082], "mapped", [39698]], [[195083, 195083], "mapped", [4e4]], [[195084, 195084], "mapped", [40189]], [[195085, 195085], "mapped", [19662]], [[195086, 195086], "mapped", [19693]], [[195087, 195087], "mapped", [40295]], [[195088, 195088], "mapped", [172238]], [[195089, 195089], "mapped", [19704]], [[195090, 195090], "mapped", [172293]], [[195091, 195091], "mapped", [172558]], [[195092, 195092], "mapped", [172689]], [[195093, 195093], "mapped", [40635]], [[195094, 195094], "mapped", [19798]], [[195095, 195095], "mapped", [40697]], [[195096, 195096], "mapped", [40702]], [[195097, 195097], "mapped", [40709]], [[195098, 195098], "mapped", [40719]], [[195099, 195099], "mapped", [40726]], [[195100, 195100], "mapped", [40763]], [[195101, 195101], "mapped", [173568]], [[195102, 196605], "disallowed"], [[196606, 196607], "disallowed"], [[196608, 262141], "disallowed"], [[262142, 262143], "disallowed"], [[262144, 327677], "disallowed"], [[327678, 327679], "disallowed"], [[327680, 393213], "disallowed"], [[393214, 393215], "disallowed"], [[393216, 458749], "disallowed"], [[458750, 458751], "disallowed"], [[458752, 524285], "disallowed"], [[524286, 524287], "disallowed"], [[524288, 589821], "disallowed"], [[589822, 589823], "disallowed"], [[589824, 655357], "disallowed"], [[655358, 655359], "disallowed"], [[655360, 720893], "disallowed"], [[720894, 720895], "disallowed"], [[720896, 786429], "disallowed"], [[786430, 786431], "disallowed"], [[786432, 851965], "disallowed"], [[851966, 851967], "disallowed"], [[851968, 917501], "disallowed"], [[917502, 917503], "disallowed"], [[917504, 917504], "disallowed"], [[917505, 917505], "disallowed"], [[917506, 917535], "disallowed"], [[917536, 917631], "disallowed"], [[917632, 917759], "disallowed"], [[917760, 917999], "ignored"], [[918e3, 983037], "disallowed"], [[983038, 983039], "disallowed"], [[983040, 1048573], "disallowed"], [[1048574, 1048575], "disallowed"], [[1048576, 1114109], "disallowed"], [[1114110, 1114111], "disallowed"]], ud = { TRANSITIONAL: 0, NONTRANSITIONAL: 1 };
function S1(n) {
  return n.split("\0").map(function(e) {
    return e.normalize("NFC");
  }).join("\0");
}
function D1(n) {
  for (var e = 0, i = kp.length - 1; e <= i; ) {
    var a = Math.floor((e + i) / 2), t = kp[a];
    if (t[0][0] <= n && t[0][1] >= n)
      return t;
    t[0][0] > n ? i = a - 1 : e = a + 1;
  }
  return null;
}
var BC = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g;
function w1(n) {
  return n.replace(BC, "_").length;
}
var QC = /[\u0300-\u036F\u0483-\u0489\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u065F\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u0711\u0730-\u074A\u07A6-\u07B0\u07EB-\u07F3\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u08E4-\u0903\u093A-\u093C\u093E-\u094F\u0951-\u0957\u0962\u0963\u0981-\u0983\u09BC\u09BE-\u09C4\u09C7\u09C8\u09CB-\u09CD\u09D7\u09E2\u09E3\u0A01-\u0A03\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A70\u0A71\u0A75\u0A81-\u0A83\u0ABC\u0ABE-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AE2\u0AE3\u0B01-\u0B03\u0B3C\u0B3E-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B62\u0B63\u0B82\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD7\u0C00-\u0C03\u0C3E-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C81-\u0C83\u0CBC\u0CBE-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CE2\u0CE3\u0D01-\u0D03\u0D3E-\u0D44\u0D46-\u0D48\u0D4A-\u0D4D\u0D57\u0D62\u0D63\u0D82\u0D83\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DF2\u0DF3\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0EB1\u0EB4-\u0EB9\u0EBB\u0EBC\u0EC8-\u0ECD\u0F18\u0F19\u0F35\u0F37\u0F39\u0F3E\u0F3F\u0F71-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102B-\u103E\u1056-\u1059\u105E-\u1060\u1062-\u1064\u1067-\u106D\u1071-\u1074\u1082-\u108D\u108F\u109A-\u109D\u135D-\u135F\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4-\u17D3\u17DD\u180B-\u180D\u18A9\u1920-\u192B\u1930-\u193B\u19B0-\u19C0\u19C8\u19C9\u1A17-\u1A1B\u1A55-\u1A5E\u1A60-\u1A7C\u1A7F\u1AB0-\u1ABE\u1B00-\u1B04\u1B34-\u1B44\u1B6B-\u1B73\u1B80-\u1B82\u1BA1-\u1BAD\u1BE6-\u1BF3\u1C24-\u1C37\u1CD0-\u1CD2\u1CD4-\u1CE8\u1CED\u1CF2-\u1CF4\u1CF8\u1CF9\u1DC0-\u1DF5\u1DFC-\u1DFF\u20D0-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302F\u3099\u309A\uA66F-\uA672\uA674-\uA67D\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA823-\uA827\uA880\uA881\uA8B4-\uA8C4\uA8E0-\uA8F1\uA926-\uA92D\uA947-\uA953\uA980-\uA983\uA9B3-\uA9C0\uA9E5\uAA29-\uAA36\uAA43\uAA4C\uAA4D\uAA7B-\uAA7D\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEB-\uAAEF\uAAF5\uAAF6\uABE3-\uABEA\uABEC\uABED\uFB1E\uFE00-\uFE0F\uFE20-\uFE2D]|\uD800[\uDDFD\uDEE0\uDF76-\uDF7A]|\uD802[\uDE01-\uDE03\uDE05\uDE06\uDE0C-\uDE0F\uDE38-\uDE3A\uDE3F\uDEE5\uDEE6]|\uD804[\uDC00-\uDC02\uDC38-\uDC46\uDC7F-\uDC82\uDCB0-\uDCBA\uDD00-\uDD02\uDD27-\uDD34\uDD73\uDD80-\uDD82\uDDB3-\uDDC0\uDE2C-\uDE37\uDEDF-\uDEEA\uDF01-\uDF03\uDF3C\uDF3E-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF57\uDF62\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDCB0-\uDCC3\uDDAF-\uDDB5\uDDB8-\uDDC0\uDE30-\uDE40\uDEAB-\uDEB7]|\uD81A[\uDEF0-\uDEF4\uDF30-\uDF36]|\uD81B[\uDF51-\uDF7E\uDF8F-\uDF92]|\uD82F[\uDC9D\uDC9E]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD83A[\uDCD0-\uDCD6]|\uDB40[\uDD00-\uDDEF]/;
function SC(n, e) {
  n.substr(0, 4) === "xn--" && (n = Aa.toUnicode(n));
  var i = !1;
  (S1(n) !== n || n[3] === "-" && n[4] === "-" || n[0] === "-" || n[n.length - 1] === "-" || n.indexOf(".") !== -1 || n.search(QC) === 0) && (i = !0);
  for (var a = w1(n), t = 0; t < a; ++t) {
    var d = D1(n.codePointAt(t));
    if (Qr === ud.TRANSITIONAL && d[1] !== "valid" || Qr === ud.NONTRANSITIONAL && d[1] !== "valid" && d[1] !== "deviation") {
      i = !0;
      break;
    }
  }
  return { label: n, error: i };
}
function Qr(n, e, i) {
  var a = function(o, s, A) {
    for (var l = !1, m = "", u = w1(o), c = 0; c < u; ++c) {
      var k = o.codePointAt(c), g = D1(k);
      switch (g[1]) {
        case "disallowed":
          l = !0, m += String.fromCodePoint(k);
          break;
        case "ignored":
          break;
        case "mapped":
          m += String.fromCodePoint.apply(String, g[2]);
          break;
        case "deviation":
          A === ud.TRANSITIONAL ? m += String.fromCodePoint.apply(String, g[2]) : m += String.fromCodePoint(k);
          break;
        case "valid":
          m += String.fromCodePoint(k);
          break;
        case "disallowed_STD3_mapped":
          s ? (l = !0, m += String.fromCodePoint(k)) : m += String.fromCodePoint.apply(String, g[2]);
          break;
        case "disallowed_STD3_valid":
          s && (l = !0), m += String.fromCodePoint(k);
      }
    }
    return { string: m, error: l };
  }(n, e, i);
  a.string = S1(a.string);
  for (var t = a.string.split("."), d = 0; d < t.length; ++d)
    try {
      var r = SC(t[d]);
      t[d] = r.label, a.error = a.error || r.error;
    } catch {
      a.error = !0;
    }
  return { string: t.join("."), error: a.error };
}
var vp = { toASCII: function(n, e, i, a) {
  var t = Qr(n, e, i), d = t.string.split(".");
  if (d = d.map(function(s) {
    try {
      return Aa.toASCII(s);
    } catch {
      return t.error = !0, s;
    }
  }), a) {
    var r = d.slice(0, d.length - 1).join(".").length;
    (r.length > 253 || r.length === 0) && (t.error = !0);
    for (var o = 0; o < d.length; ++o)
      if (d.length > 63 || d.length === 0) {
        t.error = !0;
        break;
      }
  }
  return t.error ? null : d.join(".");
}, toUnicode: function(n, e) {
  var i = Qr(n, e, ud.NONTRANSITIONAL);
  return { domain: i.string, error: i.error };
}, PROCESSING_OPTIONS: ud }, Se = Ol(function(n) {
  const e = { ftp: 21, file: null, gopher: 70, http: 80, https: 443, ws: 80, wss: 443 }, i = Symbol("failure");
  function a(v) {
    return Aa.ucs2.decode(v).length;
  }
  function t(v, Q) {
    const _ = v[Q];
    return isNaN(_) ? void 0 : String.fromCodePoint(_);
  }
  function d(v) {
    return v >= 48 && v <= 57;
  }
  function r(v) {
    return v >= 65 && v <= 90 || v >= 97 && v <= 122;
  }
  function o(v) {
    return d(v) || v >= 65 && v <= 70 || v >= 97 && v <= 102;
  }
  function s(v) {
    return v === "." || v.toLowerCase() === "%2e";
  }
  function A(v) {
    return v.length === 2 && r(v.codePointAt(0)) && (v[1] === ":" || v[1] === "|");
  }
  function l(v) {
    return e[v] !== void 0;
  }
  function m(v) {
    return l(v.scheme);
  }
  function u(v) {
    let Q = v.toString(16).toUpperCase();
    return Q.length === 1 && (Q = "0" + Q), "%" + Q;
  }
  function c(v) {
    return v <= 31 || v > 126;
  }
  const k = /* @__PURE__ */ new Set([32, 34, 35, 60, 62, 63, 96, 123, 125]);
  function g(v) {
    return c(v) || k.has(v);
  }
  const N = /* @__PURE__ */ new Set([47, 58, 59, 61, 64, 91, 92, 93, 94, 124]);
  function y(v) {
    return g(v) || N.has(v);
  }
  function h(v, Q) {
    const _ = String.fromCodePoint(v);
    return Q(v) ? function(M) {
      const se = new Buffer(M);
      let U = "";
      for (let G = 0; G < se.length; ++G)
        U += u(se[G]);
      return U;
    }(_) : _;
  }
  function E(v) {
    let Q = 10;
    return v.length >= 2 && v.charAt(0) === "0" && v.charAt(1).toLowerCase() === "x" ? (v = v.substring(2), Q = 16) : v.length >= 2 && v.charAt(0) === "0" && (v = v.substring(1), Q = 8), v === "" ? 0 : (Q === 10 ? /[^0-9]/ : Q === 16 ? /[^0-9A-Fa-f]/ : /[^0-7]/).test(v) ? i : parseInt(v, Q);
  }
  function S(v, Q) {
    if (v[0] === "[")
      return v[v.length - 1] !== "]" ? i : function(U) {
        const G = [0, 0, 0, 0, 0, 0, 0, 0];
        let H = 0, $ = null, W = 0;
        if ((U = Aa.ucs2.decode(U))[W] === 58) {
          if (U[W + 1] !== 58)
            return i;
          W += 2, ++H, $ = H;
        }
        for (; W < U.length; ) {
          if (H === 8)
            return i;
          if (U[W] === 58) {
            if ($ !== null)
              return i;
            ++W, ++H, $ = H;
            continue;
          }
          let w = 0, j = 0;
          for (; j < 4 && o(U[W]); )
            w = 16 * w + parseInt(t(U, W), 16), ++W, ++j;
          if (U[W] === 46) {
            if (j === 0 || (W -= j, H > 6))
              return i;
            let R = 0;
            for (; U[W] !== void 0; ) {
              let F = null;
              if (R > 0) {
                if (!(U[W] === 46 && R < 4))
                  return i;
                ++W;
              }
              if (!d(U[W]))
                return i;
              for (; d(U[W]); ) {
                const V = parseInt(t(U, W));
                if (F === null)
                  F = V;
                else {
                  if (F === 0)
                    return i;
                  F = 10 * F + V;
                }
                if (F > 255)
                  return i;
                ++W;
              }
              G[H] = 256 * G[H] + F, ++R, R !== 2 && R !== 4 || ++H;
            }
            if (R !== 4)
              return i;
            break;
          }
          if (U[W] === 58) {
            if (++W, U[W] === void 0)
              return i;
          } else if (U[W] !== void 0)
            return i;
          G[H] = w, ++H;
        }
        if ($ !== null) {
          let w = H - $;
          for (H = 7; H !== 0 && w > 0; ) {
            const j = G[$ + w - 1];
            G[$ + w - 1] = G[H], G[H] = j, --H, --w;
          }
        } else if ($ === null && H !== 8)
          return i;
        return G;
      }(v.substring(1, v.length - 1));
    if (!Q)
      return function(U) {
        if (G = U, G.search(/\u0000|\u0009|\u000A|\u000D|\u0020|#|\/|:|\?|@|\[|\\|\]/) !== -1)
          return i;
        var G;
        let H = "";
        const $ = Aa.ucs2.decode(U);
        for (let W = 0; W < $.length; ++W)
          H += h($[W], c);
        return H;
      }(v);
    const _ = function(U) {
      const G = new Buffer(U), H = [];
      for (let $ = 0; $ < G.length; ++$)
        G[$] !== 37 ? H.push(G[$]) : G[$] === 37 && o(G[$ + 1]) && o(G[$ + 2]) ? (H.push(parseInt(G.slice($ + 1, $ + 3).toString(), 16)), $ += 2) : H.push(G[$]);
      return new Buffer(H).toString();
    }(v), M = vp.toASCII(_, !1, vp.PROCESSING_OPTIONS.NONTRANSITIONAL, !1);
    if (M === null || M.search(/\u0000|\u0009|\u000A|\u000D|\u0020|#|%|\/|:|\?|@|\[|\\|\]/) !== -1)
      return i;
    const se = function(U) {
      const G = U.split(".");
      if (G[G.length - 1] === "" && G.length > 1 && G.pop(), G.length > 4)
        return U;
      const H = [];
      for (const w of G) {
        if (w === "")
          return U;
        const j = E(w);
        if (j === i)
          return U;
        H.push(j);
      }
      for (let w = 0; w < H.length - 1; ++w)
        if (H[w] > 255)
          return i;
      if (H[H.length - 1] >= Math.pow(256, 5 - H.length))
        return i;
      let $ = H.pop(), W = 0;
      for (const w of H)
        $ += w * Math.pow(256, 3 - W), ++W;
      return $;
    }(M);
    return typeof se == "number" || se === i ? se : M;
  }
  function b(v) {
    return typeof v == "number" ? function(Q) {
      let _ = "", M = Q;
      for (let se = 1; se <= 4; ++se)
        _ = String(M % 256) + _, se !== 4 && (_ = "." + _), M = Math.floor(M / 256);
      return _;
    }(v) : v instanceof Array ? "[" + function(Q) {
      let _ = "";
      const M = function(U) {
        let G = null, H = 1, $ = null, W = 0;
        for (let w = 0; w < U.length; ++w)
          U[w] !== 0 ? (W > H && (G = $, H = W), $ = null, W = 0) : ($ === null && ($ = w), ++W);
        return W > H && (G = $, H = W), { idx: G, len: H };
      }(Q).idx;
      let se = !1;
      for (let U = 0; U <= 7; ++U)
        se && Q[U] === 0 || (se && (se = !1), M !== U ? (_ += Q[U].toString(16), U !== 7 && (_ += ":")) : (_ += U === 0 ? "::" : ":", se = !0));
      return _;
    }(v) + "]" : v;
  }
  function I(v) {
    const Q = v.path;
    var _;
    Q.length !== 0 && (v.scheme === "file" && Q.length === 1 && (_ = Q[0], /^[A-Za-z]:$/.test(_)) || Q.pop());
  }
  function D(v) {
    return v.username !== "" || v.password !== "";
  }
  function B(v, Q, _, M, se) {
    if (this.pointer = 0, this.input = v, this.base = Q || null, this.encodingOverride = _ || "utf-8", this.stateOverride = se, this.url = M, this.failure = !1, this.parseError = !1, !this.url) {
      this.url = { scheme: "", username: "", password: "", host: null, port: null, path: [], query: null, fragment: null, cannotBeABaseURL: !1 };
      const G = function(H) {
        return H.replace(/^[\u0000-\u001F\u0020]+|[\u0000-\u001F\u0020]+$/g, "");
      }(this.input);
      G !== this.input && (this.parseError = !0), this.input = G;
    }
    const U = function(G) {
      return G.replace(/\u0009|\u000A|\u000D/g, "");
    }(this.input);
    for (U !== this.input && (this.parseError = !0), this.input = U, this.state = se || "scheme start", this.buffer = "", this.atFlag = !1, this.arrFlag = !1, this.passwordTokenSeenFlag = !1, this.input = Aa.ucs2.decode(this.input); this.pointer <= this.input.length; ++this.pointer) {
      const G = this.input[this.pointer], H = isNaN(G) ? void 0 : String.fromCodePoint(G), $ = this["parse " + this.state](G, H);
      if (!$)
        break;
      if ($ === i) {
        this.failure = !0;
        break;
      }
    }
  }
  B.prototype["parse scheme start"] = function(v, Q) {
    if (r(v))
      this.buffer += Q.toLowerCase(), this.state = "scheme";
    else {
      if (this.stateOverride)
        return this.parseError = !0, i;
      this.state = "no scheme", --this.pointer;
    }
    return !0;
  }, B.prototype["parse scheme"] = function(v, Q) {
    if (function(_) {
      return r(_) || d(_);
    }(v) || v === 43 || v === 45 || v === 46)
      this.buffer += Q.toLowerCase();
    else if (v === 58) {
      if (this.stateOverride && (m(this.url) && !l(this.buffer) || !m(this.url) && l(this.buffer) || (D(this.url) || this.url.port !== null) && this.buffer === "file" || this.url.scheme === "file" && (this.url.host === "" || this.url.host === null)) || (this.url.scheme = this.buffer, this.buffer = "", this.stateOverride))
        return !1;
      this.url.scheme === "file" ? (this.input[this.pointer + 1] === 47 && this.input[this.pointer + 2] === 47 || (this.parseError = !0), this.state = "file") : m(this.url) && this.base !== null && this.base.scheme === this.url.scheme ? this.state = "special relative or authority" : m(this.url) ? this.state = "special authority slashes" : this.input[this.pointer + 1] === 47 ? (this.state = "path or authority", ++this.pointer) : (this.url.cannotBeABaseURL = !0, this.url.path.push(""), this.state = "cannot-be-a-base-URL path");
    } else {
      if (this.stateOverride)
        return this.parseError = !0, i;
      this.buffer = "", this.state = "no scheme", this.pointer = -1;
    }
    return !0;
  }, B.prototype["parse no scheme"] = function(v) {
    return this.base === null || this.base.cannotBeABaseURL && v !== 35 ? i : (this.base.cannotBeABaseURL && v === 35 ? (this.url.scheme = this.base.scheme, this.url.path = this.base.path.slice(), this.url.query = this.base.query, this.url.fragment = "", this.url.cannotBeABaseURL = !0, this.state = "fragment") : this.base.scheme === "file" ? (this.state = "file", --this.pointer) : (this.state = "relative", --this.pointer), !0);
  }, B.prototype["parse special relative or authority"] = function(v) {
    return v === 47 && this.input[this.pointer + 1] === 47 ? (this.state = "special authority ignore slashes", ++this.pointer) : (this.parseError = !0, this.state = "relative", --this.pointer), !0;
  }, B.prototype["parse path or authority"] = function(v) {
    return v === 47 ? this.state = "authority" : (this.state = "path", --this.pointer), !0;
  }, B.prototype["parse relative"] = function(v) {
    return this.url.scheme = this.base.scheme, isNaN(v) ? (this.url.username = this.base.username, this.url.password = this.base.password, this.url.host = this.base.host, this.url.port = this.base.port, this.url.path = this.base.path.slice(), this.url.query = this.base.query) : v === 47 ? this.state = "relative slash" : v === 63 ? (this.url.username = this.base.username, this.url.password = this.base.password, this.url.host = this.base.host, this.url.port = this.base.port, this.url.path = this.base.path.slice(), this.url.query = "", this.state = "query") : v === 35 ? (this.url.username = this.base.username, this.url.password = this.base.password, this.url.host = this.base.host, this.url.port = this.base.port, this.url.path = this.base.path.slice(), this.url.query = this.base.query, this.url.fragment = "", this.state = "fragment") : m(this.url) && v === 92 ? (this.parseError = !0, this.state = "relative slash") : (this.url.username = this.base.username, this.url.password = this.base.password, this.url.host = this.base.host, this.url.port = this.base.port, this.url.path = this.base.path.slice(0, this.base.path.length - 1), this.state = "path", --this.pointer), !0;
  }, B.prototype["parse relative slash"] = function(v) {
    return !m(this.url) || v !== 47 && v !== 92 ? v === 47 ? this.state = "authority" : (this.url.username = this.base.username, this.url.password = this.base.password, this.url.host = this.base.host, this.url.port = this.base.port, this.state = "path", --this.pointer) : (v === 92 && (this.parseError = !0), this.state = "special authority ignore slashes"), !0;
  }, B.prototype["parse special authority slashes"] = function(v) {
    return v === 47 && this.input[this.pointer + 1] === 47 ? (this.state = "special authority ignore slashes", ++this.pointer) : (this.parseError = !0, this.state = "special authority ignore slashes", --this.pointer), !0;
  }, B.prototype["parse special authority ignore slashes"] = function(v) {
    return v !== 47 && v !== 92 ? (this.state = "authority", --this.pointer) : this.parseError = !0, !0;
  }, B.prototype["parse authority"] = function(v, Q) {
    if (v === 64) {
      this.parseError = !0, this.atFlag && (this.buffer = "%40" + this.buffer), this.atFlag = !0;
      const _ = a(this.buffer);
      for (let M = 0; M < _; ++M) {
        const se = this.buffer.codePointAt(M);
        if (se === 58 && !this.passwordTokenSeenFlag) {
          this.passwordTokenSeenFlag = !0;
          continue;
        }
        const U = h(se, y);
        this.passwordTokenSeenFlag ? this.url.password += U : this.url.username += U;
      }
      this.buffer = "";
    } else if (isNaN(v) || v === 47 || v === 63 || v === 35 || m(this.url) && v === 92) {
      if (this.atFlag && this.buffer === "")
        return this.parseError = !0, i;
      this.pointer -= a(this.buffer) + 1, this.buffer = "", this.state = "host";
    } else
      this.buffer += Q;
    return !0;
  }, B.prototype["parse hostname"] = B.prototype["parse host"] = function(v, Q) {
    if (this.stateOverride && this.url.scheme === "file")
      --this.pointer, this.state = "file host";
    else if (v !== 58 || this.arrFlag)
      if (isNaN(v) || v === 47 || v === 63 || v === 35 || m(this.url) && v === 92) {
        if (--this.pointer, m(this.url) && this.buffer === "")
          return this.parseError = !0, i;
        if (this.stateOverride && this.buffer === "" && (D(this.url) || this.url.port !== null))
          return this.parseError = !0, !1;
        const _ = S(this.buffer, m(this.url));
        if (_ === i)
          return i;
        if (this.url.host = _, this.buffer = "", this.state = "path start", this.stateOverride)
          return !1;
      } else
        v === 91 ? this.arrFlag = !0 : v === 93 && (this.arrFlag = !1), this.buffer += Q;
    else {
      if (this.buffer === "")
        return this.parseError = !0, i;
      const _ = S(this.buffer, m(this.url));
      if (_ === i)
        return i;
      if (this.url.host = _, this.buffer = "", this.state = "port", this.stateOverride === "hostname")
        return !1;
    }
    return !0;
  }, B.prototype["parse port"] = function(v, Q) {
    if (d(v))
      this.buffer += Q;
    else {
      if (!(isNaN(v) || v === 47 || v === 63 || v === 35 || m(this.url) && v === 92 || this.stateOverride))
        return this.parseError = !0, i;
      if (this.buffer !== "") {
        const M = parseInt(this.buffer);
        if (M > Math.pow(2, 16) - 1)
          return this.parseError = !0, i;
        this.url.port = M === (_ = this.url.scheme, e[_]) ? null : M, this.buffer = "";
      }
      if (this.stateOverride)
        return !1;
      this.state = "path start", --this.pointer;
    }
    var _;
    return !0;
  };
  const q = /* @__PURE__ */ new Set([47, 92, 63, 35]);
  B.prototype["parse file"] = function(v) {
    var Q, _;
    return this.url.scheme = "file", v === 47 || v === 92 ? (v === 92 && (this.parseError = !0), this.state = "file slash") : this.base !== null && this.base.scheme === "file" ? isNaN(v) ? (this.url.host = this.base.host, this.url.path = this.base.path.slice(), this.url.query = this.base.query) : v === 63 ? (this.url.host = this.base.host, this.url.path = this.base.path.slice(), this.url.query = "", this.state = "query") : v === 35 ? (this.url.host = this.base.host, this.url.path = this.base.path.slice(), this.url.query = this.base.query, this.url.fragment = "", this.state = "fragment") : (this.input.length - this.pointer - 1 == 0 || (Q = v, _ = this.input[this.pointer + 1], !r(Q) || _ !== 58 && _ !== 124) || this.input.length - this.pointer - 1 >= 2 && !q.has(this.input[this.pointer + 2]) ? (this.url.host = this.base.host, this.url.path = this.base.path.slice(), I(this.url)) : this.parseError = !0, this.state = "path", --this.pointer) : (this.state = "path", --this.pointer), !0;
  }, B.prototype["parse file slash"] = function(v) {
    var Q;
    return v === 47 || v === 92 ? (v === 92 && (this.parseError = !0), this.state = "file host") : (this.base !== null && this.base.scheme === "file" && ((Q = this.base.path[0]).length === 2 && r(Q.codePointAt(0)) && Q[1] === ":" ? this.url.path.push(this.base.path[0]) : this.url.host = this.base.host), this.state = "path", --this.pointer), !0;
  }, B.prototype["parse file host"] = function(v, Q) {
    if (isNaN(v) || v === 47 || v === 92 || v === 63 || v === 35)
      if (--this.pointer, !this.stateOverride && A(this.buffer))
        this.parseError = !0, this.state = "path";
      else if (this.buffer === "") {
        if (this.url.host = "", this.stateOverride)
          return !1;
        this.state = "path start";
      } else {
        let _ = S(this.buffer, m(this.url));
        if (_ === i)
          return i;
        if (_ === "localhost" && (_ = ""), this.url.host = _, this.stateOverride)
          return !1;
        this.buffer = "", this.state = "path start";
      }
    else
      this.buffer += Q;
    return !0;
  }, B.prototype["parse path start"] = function(v) {
    return m(this.url) ? (v === 92 && (this.parseError = !0), this.state = "path", v !== 47 && v !== 92 && --this.pointer) : this.stateOverride || v !== 63 ? this.stateOverride || v !== 35 ? v !== void 0 && (this.state = "path", v !== 47 && --this.pointer) : (this.url.fragment = "", this.state = "fragment") : (this.url.query = "", this.state = "query"), !0;
  }, B.prototype["parse path"] = function(v) {
    if (isNaN(v) || v === 47 || m(this.url) && v === 92 || !this.stateOverride && (v === 63 || v === 35)) {
      if (m(this.url) && v === 92 && (this.parseError = !0), (Q = (Q = this.buffer).toLowerCase()) === ".." || Q === "%2e." || Q === ".%2e" || Q === "%2e%2e" ? (I(this.url), v === 47 || m(this.url) && v === 92 || this.url.path.push("")) : !s(this.buffer) || v === 47 || m(this.url) && v === 92 ? s(this.buffer) || (this.url.scheme === "file" && this.url.path.length === 0 && A(this.buffer) && (this.url.host !== "" && this.url.host !== null && (this.parseError = !0, this.url.host = ""), this.buffer = this.buffer[0] + ":"), this.url.path.push(this.buffer)) : this.url.path.push(""), this.buffer = "", this.url.scheme === "file" && (v === void 0 || v === 63 || v === 35))
        for (; this.url.path.length > 1 && this.url.path[0] === ""; )
          this.parseError = !0, this.url.path.shift();
      v === 63 && (this.url.query = "", this.state = "query"), v === 35 && (this.url.fragment = "", this.state = "fragment");
    } else
      v !== 37 || o(this.input[this.pointer + 1]) && o(this.input[this.pointer + 2]) || (this.parseError = !0), this.buffer += h(v, g);
    var Q;
    return !0;
  }, B.prototype["parse cannot-be-a-base-URL path"] = function(v) {
    return v === 63 ? (this.url.query = "", this.state = "query") : v === 35 ? (this.url.fragment = "", this.state = "fragment") : (isNaN(v) || v === 37 || (this.parseError = !0), v !== 37 || o(this.input[this.pointer + 1]) && o(this.input[this.pointer + 2]) || (this.parseError = !0), isNaN(v) || (this.url.path[0] = this.url.path[0] + h(v, c))), !0;
  }, B.prototype["parse query"] = function(v, Q) {
    if (isNaN(v) || !this.stateOverride && v === 35) {
      m(this.url) && this.url.scheme !== "ws" && this.url.scheme !== "wss" || (this.encodingOverride = "utf-8");
      const _ = new Buffer(this.buffer);
      for (let M = 0; M < _.length; ++M)
        _[M] < 33 || _[M] > 126 || _[M] === 34 || _[M] === 35 || _[M] === 60 || _[M] === 62 ? this.url.query += u(_[M]) : this.url.query += String.fromCodePoint(_[M]);
      this.buffer = "", v === 35 && (this.url.fragment = "", this.state = "fragment");
    } else
      v !== 37 || o(this.input[this.pointer + 1]) && o(this.input[this.pointer + 2]) || (this.parseError = !0), this.buffer += Q;
    return !0;
  }, B.prototype["parse fragment"] = function(v) {
    return isNaN(v) || (v === 0 ? this.parseError = !0 : (v !== 37 || o(this.input[this.pointer + 1]) && o(this.input[this.pointer + 2]) || (this.parseError = !0), this.url.fragment += h(v, c))), !0;
  }, n.exports.serializeURL = function(v, Q) {
    let _ = v.scheme + ":";
    if (v.host !== null ? (_ += "//", v.username === "" && v.password === "" || (_ += v.username, v.password !== "" && (_ += ":" + v.password), _ += "@"), _ += b(v.host), v.port !== null && (_ += ":" + v.port)) : v.host === null && v.scheme === "file" && (_ += "//"), v.cannotBeABaseURL)
      _ += v.path[0];
    else
      for (const M of v.path)
        _ += "/" + M;
    return v.query !== null && (_ += "?" + v.query), Q || v.fragment === null || (_ += "#" + v.fragment), _;
  }, n.exports.serializeURLOrigin = function(v) {
    switch (v.scheme) {
      case "blob":
        try {
          return n.exports.serializeURLOrigin(n.exports.parseURL(v.path[0]));
        } catch {
          return "null";
        }
      case "ftp":
      case "gopher":
      case "http":
      case "https":
      case "ws":
      case "wss":
        return function(Q) {
          let _ = Q.scheme + "://";
          return _ += b(Q.host), Q.port !== null && (_ += ":" + Q.port), _;
        }({ scheme: v.scheme, host: v.host, port: v.port });
      case "file":
        return "file://";
      default:
        return "null";
    }
  }, n.exports.basicURLParse = function(v, Q) {
    Q === void 0 && (Q = {});
    const _ = new B(v, Q.baseURL, Q.encodingOverride, Q.url, Q.stateOverride);
    return _.failure ? "failure" : _.url;
  }, n.exports.setTheUsername = function(v, Q) {
    v.username = "";
    const _ = Aa.ucs2.decode(Q);
    for (let M = 0; M < _.length; ++M)
      v.username += h(_[M], y);
  }, n.exports.setThePassword = function(v, Q) {
    v.password = "";
    const _ = Aa.ucs2.decode(Q);
    for (let M = 0; M < _.length; ++M)
      v.password += h(_[M], y);
  }, n.exports.serializeHost = b, n.exports.cannotHaveAUsernamePasswordPort = function(v) {
    return v.host === null || v.host === "" || v.cannotBeABaseURL || v.scheme === "file";
  }, n.exports.serializeInteger = function(v) {
    return String(v);
  }, n.exports.parseURL = function(v, Q) {
    return Q === void 0 && (Q = {}), n.exports.basicURLParse(v, { baseURL: Q.baseURL, encodingOverride: Q.encodingOverride });
  };
}), gp = class {
  constructor(n) {
    const e = n[0], i = n[1];
    let a = null;
    if (i !== void 0 && (a = Se.basicURLParse(i), a === "failure"))
      throw new TypeError("Invalid base URL");
    const t = Se.basicURLParse(e, { baseURL: a });
    if (t === "failure")
      throw new TypeError("Invalid URL");
    this._url = t;
  }
  get href() {
    return Se.serializeURL(this._url);
  }
  set href(n) {
    const e = Se.basicURLParse(n);
    if (e === "failure")
      throw new TypeError("Invalid URL");
    this._url = e;
  }
  get origin() {
    return Se.serializeURLOrigin(this._url);
  }
  get protocol() {
    return this._url.scheme + ":";
  }
  set protocol(n) {
    Se.basicURLParse(n + ":", { url: this._url, stateOverride: "scheme start" });
  }
  get username() {
    return this._url.username;
  }
  set username(n) {
    Se.cannotHaveAUsernamePasswordPort(this._url) || Se.setTheUsername(this._url, n);
  }
  get password() {
    return this._url.password;
  }
  set password(n) {
    Se.cannotHaveAUsernamePasswordPort(this._url) || Se.setThePassword(this._url, n);
  }
  get host() {
    const n = this._url;
    return n.host === null ? "" : n.port === null ? Se.serializeHost(n.host) : Se.serializeHost(n.host) + ":" + Se.serializeInteger(n.port);
  }
  set host(n) {
    this._url.cannotBeABaseURL || Se.basicURLParse(n, { url: this._url, stateOverride: "host" });
  }
  get hostname() {
    return this._url.host === null ? "" : Se.serializeHost(this._url.host);
  }
  set hostname(n) {
    this._url.cannotBeABaseURL || Se.basicURLParse(n, { url: this._url, stateOverride: "hostname" });
  }
  get port() {
    return this._url.port === null ? "" : Se.serializeInteger(this._url.port);
  }
  set port(n) {
    Se.cannotHaveAUsernamePasswordPort(this._url) || (n === "" ? this._url.port = null : Se.basicURLParse(n, { url: this._url, stateOverride: "port" }));
  }
  get pathname() {
    return this._url.cannotBeABaseURL ? this._url.path[0] : this._url.path.length === 0 ? "" : "/" + this._url.path.join("/");
  }
  set pathname(n) {
    this._url.cannotBeABaseURL || (this._url.path = [], Se.basicURLParse(n, { url: this._url, stateOverride: "path start" }));
  }
  get search() {
    return this._url.query === null || this._url.query === "" ? "" : "?" + this._url.query;
  }
  set search(n) {
    const e = this._url;
    if (n === "")
      return void (e.query = null);
    const i = n[0] === "?" ? n.substring(1) : n;
    e.query = "", Se.basicURLParse(i, { url: e, stateOverride: "query" });
  }
  get hash() {
    return this._url.fragment === null || this._url.fragment === "" ? "" : "#" + this._url.fragment;
  }
  set hash(n) {
    if (n === "")
      return void (this._url.fragment = null);
    const e = n[0] === "#" ? n.substring(1) : n;
    this._url.fragment = "", Se.basicURLParse(e, { url: this._url, stateOverride: "fragment" });
  }
  toJSON() {
    return this.href;
  }
}, DC = Ol(function(n) {
  const e = Ap.implSymbol;
  function i(a) {
    if (!this || this[e] || !(this instanceof i))
      throw new TypeError("Failed to construct 'URL': Please use the 'new' operator, this DOM object constructor cannot be called as a function.");
    if (arguments.length < 1)
      throw new TypeError("Failed to construct 'URL': 1 argument required, but only " + arguments.length + " present.");
    const t = [];
    for (let d = 0; d < arguments.length && d < 2; ++d)
      t[d] = arguments[d];
    t[0] = $i.USVString(t[0]), t[1] !== void 0 && (t[1] = $i.USVString(t[1])), n.exports.setup(this, t);
  }
  i.prototype.toJSON = function() {
    if (!this || !n.exports.is(this))
      throw new TypeError("Illegal invocation");
    const a = [];
    for (let t = 0; t < arguments.length && t < 0; ++t)
      a[t] = arguments[t];
    return this[e].toJSON.apply(this[e], a);
  }, Object.defineProperty(i.prototype, "href", { get() {
    return this[e].href;
  }, set(a) {
    a = $i.USVString(a), this[e].href = a;
  }, enumerable: !0, configurable: !0 }), i.prototype.toString = function() {
    if (!this || !n.exports.is(this))
      throw new TypeError("Illegal invocation");
    return this.href;
  }, Object.defineProperty(i.prototype, "origin", { get() {
    return this[e].origin;
  }, enumerable: !0, configurable: !0 }), Object.defineProperty(i.prototype, "protocol", { get() {
    return this[e].protocol;
  }, set(a) {
    a = $i.USVString(a), this[e].protocol = a;
  }, enumerable: !0, configurable: !0 }), Object.defineProperty(i.prototype, "username", { get() {
    return this[e].username;
  }, set(a) {
    a = $i.USVString(a), this[e].username = a;
  }, enumerable: !0, configurable: !0 }), Object.defineProperty(i.prototype, "password", { get() {
    return this[e].password;
  }, set(a) {
    a = $i.USVString(a), this[e].password = a;
  }, enumerable: !0, configurable: !0 }), Object.defineProperty(i.prototype, "host", { get() {
    return this[e].host;
  }, set(a) {
    a = $i.USVString(a), this[e].host = a;
  }, enumerable: !0, configurable: !0 }), Object.defineProperty(i.prototype, "hostname", { get() {
    return this[e].hostname;
  }, set(a) {
    a = $i.USVString(a), this[e].hostname = a;
  }, enumerable: !0, configurable: !0 }), Object.defineProperty(i.prototype, "port", { get() {
    return this[e].port;
  }, set(a) {
    a = $i.USVString(a), this[e].port = a;
  }, enumerable: !0, configurable: !0 }), Object.defineProperty(i.prototype, "pathname", { get() {
    return this[e].pathname;
  }, set(a) {
    a = $i.USVString(a), this[e].pathname = a;
  }, enumerable: !0, configurable: !0 }), Object.defineProperty(i.prototype, "search", { get() {
    return this[e].search;
  }, set(a) {
    a = $i.USVString(a), this[e].search = a;
  }, enumerable: !0, configurable: !0 }), Object.defineProperty(i.prototype, "hash", { get() {
    return this[e].hash;
  }, set(a) {
    a = $i.USVString(a), this[e].hash = a;
  }, enumerable: !0, configurable: !0 }), n.exports = { is: (a) => !!a && a[e] instanceof gp, create(a, t) {
    let d = Object.create(i.prototype);
    return this.setup(d, a, t), d;
  }, setup(a, t, d) {
    d || (d = {}), d.wrapper = a, a[e] = new gp(t, d), a[e][Ap.wrapperSymbol] = a;
  }, interface: i, expose: { Window: { URL: i }, Worker: { URL: i } } };
}), F1 = { URL: DC.interface, serializeURL: Se.serializeURL, serializeURLOrigin: Se.serializeURLOrigin, basicURLParse: Se.basicURLParse, setTheUsername: Se.setTheUsername, setThePassword: Se.setThePassword, serializeHost: Se.serializeHost, serializeInteger: Se.serializeInteger, parseURL: Se.parseURL };
const wC = Ue.Readable, xn = Symbol("buffer"), Yo = Symbol("type");
class Ct {
  constructor() {
    this[Yo] = "";
    const e = arguments[0], i = arguments[1], a = [];
    let t = 0;
    if (e) {
      const r = e, o = Number(r.length);
      for (let s = 0; s < o; s++) {
        const A = r[s];
        let l;
        l = A instanceof Buffer ? A : ArrayBuffer.isView(A) ? Buffer.from(A.buffer, A.byteOffset, A.byteLength) : A instanceof ArrayBuffer ? Buffer.from(A) : A instanceof Ct ? A[xn] : Buffer.from(typeof A == "string" ? A : String(A)), t += l.length, a.push(l);
      }
    }
    this[xn] = Buffer.concat(a);
    let d = i && i.type !== void 0 && String(i.type).toLowerCase();
    d && !/[^\u0020-\u007E]/.test(d) && (this[Yo] = d);
  }
  get size() {
    return this[xn].length;
  }
  get type() {
    return this[Yo];
  }
  text() {
    return Promise.resolve(this[xn].toString());
  }
  arrayBuffer() {
    const e = this[xn], i = e.buffer.slice(e.byteOffset, e.byteOffset + e.byteLength);
    return Promise.resolve(i);
  }
  stream() {
    const e = new wC();
    return e._read = function() {
    }, e.push(this[xn]), e.push(null), e;
  }
  toString() {
    return "[object Blob]";
  }
  slice() {
    const e = this.size, i = arguments[0], a = arguments[1];
    let t, d;
    t = i === void 0 ? 0 : i < 0 ? Math.max(e + i, 0) : Math.min(i, e), d = a === void 0 ? e : a < 0 ? Math.max(e + a, 0) : Math.min(a, e);
    const r = Math.max(d - t, 0), o = this[xn].slice(t, t + r), s = new Ct([], { type: arguments[2] });
    return s[xn] = o, s;
  }
}
function bi(n, e, i) {
  Error.call(this, n), this.message = n, this.type = e, i && (this.code = this.errno = i.code), Error.captureStackTrace(this, this.constructor);
}
let kl;
Object.defineProperties(Ct.prototype, { size: { enumerable: !0 }, type: { enumerable: !0 }, slice: { enumerable: !0 } }), Object.defineProperty(Ct.prototype, Symbol.toStringTag, { value: "Blob", writable: !1, enumerable: !1, configurable: !0 }), bi.prototype = Object.create(Error.prototype), bi.prototype.constructor = bi, bi.prototype.name = "FetchError";
try {
  kl = require("encoding").convert;
} catch {
}
const Wn = Symbol("Body internals"), hp = Ue.PassThrough;
function gi(n) {
  var e = this, i = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, a = i.size;
  let t = a === void 0 ? 0 : a;
  var d = i.timeout;
  let r = d === void 0 ? 0 : d;
  n == null ? n = null : V1(n) ? n = Buffer.from(n.toString()) : bd(n) || Buffer.isBuffer(n) || (Object.prototype.toString.call(n) === "[object ArrayBuffer]" ? n = Buffer.from(n) : ArrayBuffer.isView(n) ? n = Buffer.from(n.buffer, n.byteOffset, n.byteLength) : n instanceof Ue || (n = Buffer.from(String(n)))), this[Wn] = { body: n, disturbed: !1, error: null }, this.size = t, this.timeout = r, n instanceof Ue && n.on("error", function(o) {
    const s = o.name === "AbortError" ? o : new bi(`Invalid response body while trying to fetch ${e.url}: ${o.message}`, "system", o);
    e[Wn].error = s;
  });
}
function ot() {
  var n = this;
  if (this[Wn].disturbed)
    return gi.Promise.reject(new TypeError(`body used already for: ${this.url}`));
  if (this[Wn].disturbed = !0, this[Wn].error)
    return gi.Promise.reject(this[Wn].error);
  let e = this.body;
  if (e === null)
    return gi.Promise.resolve(Buffer.alloc(0));
  if (bd(e) && (e = e.stream()), Buffer.isBuffer(e))
    return gi.Promise.resolve(e);
  if (!(e instanceof Ue))
    return gi.Promise.resolve(Buffer.alloc(0));
  let i = [], a = 0, t = !1;
  return new gi.Promise(function(d, r) {
    let o;
    n.timeout && (o = setTimeout(function() {
      t = !0, r(new bi(`Response timeout while trying to fetch ${n.url} (over ${n.timeout}ms)`, "body-timeout"));
    }, n.timeout)), e.on("error", function(s) {
      s.name === "AbortError" ? (t = !0, r(s)) : r(new bi(`Invalid response body while trying to fetch ${n.url}: ${s.message}`, "system", s));
    }), e.on("data", function(s) {
      if (!t && s !== null) {
        if (n.size && a + s.length > n.size)
          return t = !0, void r(new bi(`content size at ${n.url} over limit: ${n.size}`, "max-size"));
        a += s.length, i.push(s);
      }
    }), e.on("end", function() {
      if (!t) {
        clearTimeout(o);
        try {
          d(Buffer.concat(i, a));
        } catch (s) {
          r(new bi(`Could not create Buffer from response body for ${n.url}: ${s.message}`, "system", s));
        }
      }
    });
  });
}
function V1(n) {
  return typeof n == "object" && typeof n.append == "function" && typeof n.delete == "function" && typeof n.get == "function" && typeof n.getAll == "function" && typeof n.has == "function" && typeof n.set == "function" && (n.constructor.name === "URLSearchParams" || Object.prototype.toString.call(n) === "[object URLSearchParams]" || typeof n.sort == "function");
}
function bd(n) {
  return typeof n == "object" && typeof n.arrayBuffer == "function" && typeof n.type == "string" && typeof n.stream == "function" && typeof n.constructor == "function" && typeof n.constructor.name == "string" && /^(Blob|File)$/.test(n.constructor.name) && /^(Blob|File)$/.test(n[Symbol.toStringTag]);
}
function T1(n) {
  let e, i, a = n.body;
  if (n.bodyUsed)
    throw new Error("cannot clone body after it is used");
  return a instanceof Ue && typeof a.getBoundary != "function" && (e = new hp(), i = new hp(), a.pipe(e), a.pipe(i), n[Wn].body = e, a = i), a;
}
function _1(n) {
  return n === null ? null : typeof n == "string" ? "text/plain;charset=UTF-8" : V1(n) ? "application/x-www-form-urlencoded;charset=UTF-8" : bd(n) ? n.type || null : Buffer.isBuffer(n) || Object.prototype.toString.call(n) === "[object ArrayBuffer]" || ArrayBuffer.isView(n) ? null : typeof n.getBoundary == "function" ? `multipart/form-data;boundary=${n.getBoundary()}` : n instanceof Ue ? null : "text/plain;charset=UTF-8";
}
function fp(n) {
  const e = n.body;
  return e === null ? 0 : bd(e) ? e.size : Buffer.isBuffer(e) ? e.length : e && typeof e.getLengthSync == "function" && (e._lengthRetrievers && e._lengthRetrievers.length == 0 || e.hasKnownLength && e.hasKnownLength()) ? e.getLengthSync() : null;
}
gi.prototype = { get body() {
  return this[Wn].body;
}, get bodyUsed() {
  return this[Wn].disturbed;
}, arrayBuffer() {
  return ot.call(this).then(function(n) {
    return n.buffer.slice(n.byteOffset, n.byteOffset + n.byteLength);
  });
}, blob() {
  let n = this.headers && this.headers.get("content-type") || "";
  return ot.call(this).then(function(e) {
    return Object.assign(new Ct([], { type: n.toLowerCase() }), { [xn]: e });
  });
}, json() {
  var n = this;
  return ot.call(this).then(function(e) {
    try {
      return JSON.parse(e.toString());
    } catch (i) {
      return gi.Promise.reject(new bi(`invalid json response body at ${n.url} reason: ${i.message}`, "invalid-json"));
    }
  });
}, text() {
  return ot.call(this).then(function(n) {
    return n.toString();
  });
}, buffer() {
  return ot.call(this);
}, textConverted() {
  var n = this;
  return ot.call(this).then(function(e) {
    return function(i, a) {
      if (typeof kl != "function")
        throw new Error("The package `encoding` must be installed to use the textConverted() function");
      const t = a.get("content-type");
      let d, r, o = "utf-8";
      return t && (d = /charset=([^;]*)/i.exec(t)), r = i.slice(0, 1024).toString(), !d && r && (d = /<meta.+?charset=(['"])(.+?)\1/i.exec(r)), !d && r && (d = /<meta[\s]+?http-equiv=(['"])content-type\1[\s]+?content=(['"])(.+?)\2/i.exec(r), d || (d = /<meta[\s]+?content=(['"])(.+?)\1[\s]+?http-equiv=(['"])content-type\3/i.exec(r), d && d.pop()), d && (d = /charset=(.*)/i.exec(d.pop()))), !d && r && (d = /<\?xml.+?encoding=(['"])(.+?)\1/i.exec(r)), d && (o = d.pop(), o !== "gb2312" && o !== "gbk" || (o = "gb18030")), kl(i, "UTF-8", o).toString();
    }(e, n.headers);
  });
} }, Object.defineProperties(gi.prototype, { body: { enumerable: !0 }, bodyUsed: { enumerable: !0 }, arrayBuffer: { enumerable: !0 }, blob: { enumerable: !0 }, json: { enumerable: !0 }, text: { enumerable: !0 } }), gi.mixIn = function(n) {
  for (const e of Object.getOwnPropertyNames(gi.prototype))
    if (!(e in n)) {
      const i = Object.getOwnPropertyDescriptor(gi.prototype, e);
      Object.defineProperty(n, e, i);
    }
}, gi.Promise = global.Promise;
const R1 = /[^\^_`a-zA-Z\-0-9!#$%&'*+.|~]/, vl = /[^\t\x20-\x7e\x80-\xff]/;
function id(n) {
  if (n = `${n}`, R1.test(n) || n === "")
    throw new TypeError(`${n} is not a legal HTTP header name`);
}
function Np(n) {
  if (n = `${n}`, vl.test(n))
    throw new TypeError(`${n} is not a legal HTTP header value`);
}
function At(n, e) {
  e = e.toLowerCase();
  for (const i in n)
    if (i.toLowerCase() === e)
      return i;
}
const di = Symbol("map");
class tn {
  constructor() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : void 0;
    if (this[di] = /* @__PURE__ */ Object.create(null), e instanceof tn) {
      const i = e.raw(), a = Object.keys(i);
      for (const t of a)
        for (const d of i[t])
          this.append(t, d);
    } else if (e != null) {
      if (typeof e != "object")
        throw new TypeError("Provided initializer must be an object");
      {
        const i = e[Symbol.iterator];
        if (i != null) {
          if (typeof i != "function")
            throw new TypeError("Header pairs must be iterable");
          const a = [];
          for (const t of e) {
            if (typeof t != "object" || typeof t[Symbol.iterator] != "function")
              throw new TypeError("Each header pair must be iterable");
            a.push(Array.from(t));
          }
          for (const t of a) {
            if (t.length !== 2)
              throw new TypeError("Each header pair must be a name/value tuple");
            this.append(t[0], t[1]);
          }
        } else
          for (const a of Object.keys(e)) {
            const t = e[a];
            this.append(a, t);
          }
      }
    }
  }
  get(e) {
    id(e = `${e}`);
    const i = At(this[di], e);
    return i === void 0 ? null : this[di][i].join(", ");
  }
  forEach(e) {
    let i = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : void 0, a = gl(this), t = 0;
    for (; t < a.length; ) {
      var d = a[t];
      const r = d[0], o = d[1];
      e.call(i, o, r, this), a = gl(this), t++;
    }
  }
  set(e, i) {
    i = `${i}`, id(e = `${e}`), Np(i);
    const a = At(this[di], e);
    this[di][a !== void 0 ? a : e] = [i];
  }
  append(e, i) {
    i = `${i}`, id(e = `${e}`), Np(i);
    const a = At(this[di], e);
    a !== void 0 ? this[di][a].push(i) : this[di][e] = [i];
  }
  has(e) {
    return id(e = `${e}`), At(this[di], e) !== void 0;
  }
  delete(e) {
    id(e = `${e}`);
    const i = At(this[di], e);
    i !== void 0 && delete this[di][i];
  }
  raw() {
    return this[di];
  }
  keys() {
    return Jo(this, "key");
  }
  values() {
    return Jo(this, "value");
  }
  [Symbol.iterator]() {
    return Jo(this, "key+value");
  }
}
function gl(n) {
  let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "key+value";
  return Object.keys(n[di]).sort().map(e === "key" ? function(i) {
    return i.toLowerCase();
  } : e === "value" ? function(i) {
    return n[di][i].join(", ");
  } : function(i) {
    return [i.toLowerCase(), n[di][i].join(", ")];
  });
}
tn.prototype.entries = tn.prototype[Symbol.iterator], Object.defineProperty(tn.prototype, Symbol.toStringTag, { value: "Headers", writable: !1, enumerable: !1, configurable: !0 }), Object.defineProperties(tn.prototype, { get: { enumerable: !0 }, forEach: { enumerable: !0 }, set: { enumerable: !0 }, append: { enumerable: !0 }, has: { enumerable: !0 }, delete: { enumerable: !0 }, keys: { enumerable: !0 }, values: { enumerable: !0 }, entries: { enumerable: !0 } });
const hl = Symbol("internal");
function Jo(n, e) {
  const i = Object.create(Gl);
  return i[hl] = { target: n, kind: e, index: 0 }, i;
}
const Gl = Object.setPrototypeOf({ next() {
  if (!this || Object.getPrototypeOf(this) !== Gl)
    throw new TypeError("Value of `this` is not a HeadersIterator");
  var n = this[hl];
  const e = n.target, i = n.kind, a = n.index, t = gl(e, i);
  return a >= t.length ? { value: void 0, done: !0 } : (this[hl].index = a + 1, { value: t[a], done: !1 });
} }, Object.getPrototypeOf(Object.getPrototypeOf([][Symbol.iterator]())));
function FC(n) {
  const e = Object.assign({ __proto__: null }, n[di]), i = At(n[di], "Host");
  return i !== void 0 && (e[i] = e[i][0]), e;
}
Object.defineProperty(Gl, Symbol.toStringTag, { value: "HeadersIterator", writable: !1, enumerable: !1, configurable: !0 });
const da = Symbol("Response internals"), VC = Ue.STATUS_CODES;
class en {
  constructor() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null, i = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    gi.call(this, e, i);
    const a = i.status || 200, t = new tn(i.headers);
    if (e != null && !t.has("Content-Type")) {
      const d = _1(e);
      d && t.append("Content-Type", d);
    }
    this[da] = { url: i.url, status: a, statusText: i.statusText || VC[a], headers: t, counter: i.counter };
  }
  get url() {
    return this[da].url || "";
  }
  get status() {
    return this[da].status;
  }
  get ok() {
    return this[da].status >= 200 && this[da].status < 300;
  }
  get redirected() {
    return this[da].counter > 0;
  }
  get statusText() {
    return this[da].statusText;
  }
  get headers() {
    return this[da].headers;
  }
  clone() {
    return new en(T1(this), { url: this.url, status: this.status, statusText: this.statusText, headers: this.headers, ok: this.ok, redirected: this.redirected });
  }
}
gi.mixIn(en.prototype), Object.defineProperties(en.prototype, { url: { enumerable: !0 }, status: { enumerable: !0 }, ok: { enumerable: !0 }, redirected: { enumerable: !0 }, statusText: { enumerable: !0 }, headers: { enumerable: !0 }, clone: { enumerable: !0 } }), Object.defineProperty(en.prototype, Symbol.toStringTag, { value: "Response", writable: !1, enumerable: !1, configurable: !0 });
const Jn = Symbol("Request internals"), TC = Ue.URL || F1.URL, _C = Ue.parse, RC = Ue.format;
function Ho(n) {
  return /^[a-zA-Z][a-zA-Z\d+\-.]*:/.exec(n) && (n = new TC(n).toString()), _C(n);
}
const UC = "destroy" in Ue.Readable.prototype;
function ur(n) {
  return typeof n == "object" && typeof n[Jn] == "object";
}
class Na {
  constructor(e) {
    let i, a = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    ur(e) ? i = Ho(e.url) : (i = e && e.href ? Ho(e.href) : Ho(`${e}`), e = {});
    let t = a.method || e.method || "GET";
    if (t = t.toUpperCase(), (a.body != null || ur(e) && e.body !== null) && (t === "GET" || t === "HEAD"))
      throw new TypeError("Request with GET/HEAD method cannot have body");
    let d = a.body != null ? a.body : ur(e) && e.body !== null ? T1(e) : null;
    gi.call(this, d, { timeout: a.timeout || e.timeout || 0, size: a.size || e.size || 0 });
    const r = new tn(a.headers || e.headers || {});
    if (d != null && !r.has("Content-Type")) {
      const s = _1(d);
      s && r.append("Content-Type", s);
    }
    let o = ur(e) ? e.signal : null;
    if ("signal" in a && (o = a.signal), o != null && !function(s) {
      const A = s && typeof s == "object" && Object.getPrototypeOf(s);
      return !(!A || A.constructor.name !== "AbortSignal");
    }(o))
      throw new TypeError("Expected signal to be an instanceof AbortSignal");
    this[Jn] = { method: t, redirect: a.redirect || e.redirect || "follow", headers: r, parsedURL: i, signal: o }, this.follow = a.follow !== void 0 ? a.follow : e.follow !== void 0 ? e.follow : 20, this.compress = a.compress !== void 0 ? a.compress : e.compress === void 0 || e.compress, this.counter = a.counter || e.counter || 0, this.agent = a.agent || e.agent;
  }
  get method() {
    return this[Jn].method;
  }
  get url() {
    return RC(this[Jn].parsedURL);
  }
  get headers() {
    return this[Jn].headers;
  }
  get redirect() {
    return this[Jn].redirect;
  }
  get signal() {
    return this[Jn].signal;
  }
  clone() {
    return new Na(this);
  }
}
function pt(n) {
  Error.call(this, n), this.type = "aborted", this.message = n, Error.captureStackTrace(this, this.constructor);
}
gi.mixIn(Na.prototype), Object.defineProperty(Na.prototype, Symbol.toStringTag, { value: "Request", writable: !1, enumerable: !1, configurable: !0 }), Object.defineProperties(Na.prototype, { method: { enumerable: !0 }, url: { enumerable: !0 }, headers: { enumerable: !0 }, redirect: { enumerable: !0 }, clone: { enumerable: !0 }, signal: { enumerable: !0 } }), pt.prototype = Object.create(Error.prototype), pt.prototype.constructor = pt, pt.prototype.name = "AbortError";
const nd = Ue.URL || F1.URL, Ep = Ue.PassThrough;
function ka(n, e) {
  if (!ka.Promise)
    throw new Error("native promise missing, set fetch.Promise to your favorite alternative");
  return gi.Promise = ka.Promise, new ka.Promise(function(i, a) {
    const t = new Na(n, e), d = function(k) {
      const g = k[Jn].parsedURL, N = new tn(k[Jn].headers);
      if (N.has("Accept") || N.set("Accept", "*/*"), !g.protocol || !g.hostname)
        throw new TypeError("Only absolute URLs are supported");
      if (!/^https?:$/.test(g.protocol))
        throw new TypeError("Only HTTP(S) protocols are supported");
      if (k.signal && k.body instanceof Ue.Readable && !UC)
        throw new Error("Cancellation of streamed requests with AbortSignal is not supported in node < 8");
      let y = null;
      if (k.body == null && /^(POST|PUT)$/i.test(k.method) && (y = "0"), k.body != null) {
        const E = fp(k);
        typeof E == "number" && (y = String(E));
      }
      y && N.set("Content-Length", y), N.has("User-Agent") || N.set("User-Agent", "node-fetch/1.0 (+https://github.com/bitinn/node-fetch)"), k.compress && !N.has("Accept-Encoding") && N.set("Accept-Encoding", "gzip,deflate");
      let h = k.agent;
      return typeof h == "function" && (h = h(g)), Object.assign({}, g, { method: k.method, headers: FC(N), agent: h });
    }(t), r = (d.protocol === "https:", Ue).request, o = t.signal;
    let s = null;
    const A = function() {
      let k = new pt("The user aborted a request.");
      a(k), t.body && t.body instanceof Ue.Readable && jo(t.body, k), s && s.body && s.body.emit("error", k);
    };
    if (o && o.aborted)
      return void A();
    const l = function() {
      A(), c();
    }, m = r(d);
    let u;
    function c() {
      m.abort(), o && o.removeEventListener("abort", l), clearTimeout(u);
    }
    o && o.addEventListener("abort", l), t.timeout && m.once("socket", function(k) {
      u = setTimeout(function() {
        a(new bi(`network timeout at: ${t.url}`, "request-timeout")), c();
      }, t.timeout);
    }), m.on("error", function(k) {
      a(new bi(`request to ${t.url} failed, reason: ${k.message}`, "system", k)), s && s.body && jo(s.body, k), c();
    }), function(k, g) {
      let N;
      k.on("socket", function(y) {
        N = y;
      }), k.on("response", function(y) {
        const h = y.headers;
        h["transfer-encoding"] !== "chunked" || h["content-length"] || y.once("close", function(E) {
          if (N && N.listenerCount("data") > 0 && !E) {
            const S = new Error("Premature close");
            S.code = "ERR_STREAM_PREMATURE_CLOSE", g(S);
          }
        });
      });
    }(m, function(k) {
      o && o.aborted || s && s.body && jo(s.body, k);
    }), parseInt(process.version.substring(1)) < 14 && m.on("socket", function(k) {
      k.addListener("close", function(g) {
        const N = k.listenerCount("data") > 0;
        if (s && N && !g && (!o || !o.aborted)) {
          const y = new Error("Premature close");
          y.code = "ERR_STREAM_PREMATURE_CLOSE", s.body.emit("error", y);
        }
      });
    }), m.on("response", function(k) {
      clearTimeout(u);
      const g = function(b) {
        const I = new tn();
        for (const D of Object.keys(b))
          if (!R1.test(D))
            if (Array.isArray(b[D]))
              for (const B of b[D])
                vl.test(B) || (I[di][D] === void 0 ? I[di][D] = [B] : I[di][D].push(B));
            else
              vl.test(b[D]) || (I[di][D] = [b[D]]);
        return I;
      }(k.headers);
      if (ka.isRedirect(k.statusCode)) {
        const b = g.get("Location");
        let I = null;
        try {
          I = b === null ? null : new nd(b, t.url).toString();
        } catch {
          if (t.redirect !== "manual")
            return a(new bi(`uri requested responds with an invalid redirect URL: ${b}`, "invalid-redirect")), void c();
        }
        switch (t.redirect) {
          case "error":
            return a(new bi(`uri requested responds with a redirect, redirect mode is set to error: ${t.url}`, "no-redirect")), void c();
          case "manual":
            if (I !== null)
              try {
                g.set("Location", I);
              } catch (B) {
                a(B);
              }
            break;
          case "follow":
            if (I === null)
              break;
            if (t.counter >= t.follow)
              return a(new bi(`maximum redirect reached at: ${t.url}`, "max-redirect")), void c();
            const D = { headers: new tn(t.headers), follow: t.follow, counter: t.counter + 1, agent: t.agent, compress: t.compress, method: t.method, body: t.body, signal: t.signal, timeout: t.timeout, size: t.size };
            if (!function(B, q) {
              const v = new nd(q).hostname, Q = new nd(B).hostname;
              return v === Q || v[v.length - Q.length - 1] === "." && v.endsWith(Q);
            }(t.url, I) || (N = t.url, new nd(I).protocol !== new nd(N).protocol))
              for (const B of ["authorization", "www-authenticate", "cookie", "cookie2"])
                D.headers.delete(B);
            return k.statusCode !== 303 && t.body && fp(t) === null ? (a(new bi("Cannot follow redirect with body being a readable stream", "unsupported-redirect")), void c()) : (k.statusCode !== 303 && (k.statusCode !== 301 && k.statusCode !== 302 || t.method !== "POST") || (D.method = "GET", D.body = void 0, D.headers.delete("content-length")), i(ka(new Na(I, D))), void c());
        }
      }
      var N;
      k.once("end", function() {
        o && o.removeEventListener("abort", l);
      });
      let y = k.pipe(new Ep());
      const h = { url: t.url, status: k.statusCode, statusText: k.statusMessage, headers: g, size: t.size, timeout: t.timeout, counter: t.counter }, E = g.get("Content-Encoding");
      if (!t.compress || t.method === "HEAD" || E === null || k.statusCode === 204 || k.statusCode === 304)
        return s = new en(y, h), void i(s);
      const S = { flush: Ue.Z_SYNC_FLUSH, finishFlush: Ue.Z_SYNC_FLUSH };
      if (E == "gzip" || E == "x-gzip")
        return y = y.pipe(Ue.createGunzip(S)), s = new en(y, h), void i(s);
      if (E == "deflate" || E == "x-deflate") {
        const b = k.pipe(new Ep());
        return b.once("data", function(I) {
          y = (15 & I[0]) == 8 ? y.pipe(Ue.createInflate()) : y.pipe(Ue.createInflateRaw()), s = new en(y, h), i(s);
        }), void b.on("end", function() {
          s || (s = new en(y, h), i(s));
        });
      }
      if (E == "br" && typeof Ue.createBrotliDecompress == "function")
        return y = y.pipe(Ue.createBrotliDecompress()), s = new en(y, h), void i(s);
      s = new en(y, h), i(s);
    }), function(k, g) {
      const N = g.body;
      N === null ? k.end() : bd(N) ? N.stream().pipe(k) : Buffer.isBuffer(N) ? (k.write(N), k.end()) : N.pipe(k);
    }(m, t);
  });
}
function jo(n, e) {
  n.destroy ? n.destroy(e) : (n.emit("error", e), n.end());
}
ka.isRedirect = function(n) {
  return n === 301 || n === 302 || n === 303 || n === 307 || n === 308;
}, ka.Promise = global.Promise;
var LC = Object.freeze({ __proto__: null, default: ka, Headers: tn, Request: Na, Response: en, FetchError: bi, AbortError: pt }), qC = C1(EC), PC = C1(LC);
function yp(n) {
  return n && n.default || n;
}
var bp, Ip, Cp, Bp, Qp, Sp, Dp, wp, Fp, Vp, Tp, _p, Rp, Up, Lp, qp, Pp, Op, Gp, Mp, xp, Yp, Jp, Hp, jp, Wp = op.fetch = op.fetch || (typeof process > "u" ? yp(qC) : function(n, e) {
  return yp(PC)(String(n).replace(/^\/\//g, "https://"), e);
});
class gt extends Error {
  constructor(e, i) {
    super(`${gt.extractMessage(e)}: ${JSON.stringify({ response: e, request: i })}`), Object.setPrototypeOf(this, gt.prototype), this.response = e, this.request = i, typeof Error.captureStackTrace == "function" && Error.captureStackTrace(this, gt);
  }
  static extractMessage(e) {
    var i, a, t;
    try {
      return (t = (a = (i = e.errors) === null || i === void 0 ? void 0 : i[0]) === null || a === void 0 ? void 0 : a.message) !== null && t !== void 0 ? t : `GraphQL Error (Code: ${e.status})`;
    } catch {
      return `GraphQL Error (Code: ${e.status})`;
    }
  }
}
class OC {
  constructor(e, i) {
    this.url = e, this.options = i || {};
  }
  rawRequest(e, i, a) {
    return f(this, void 0, void 0, function* () {
      const t = this.options, { headers: d } = t, r = ul(t, ["headers"]), o = JSON.stringify({ query: e, variables: i }), s = yield Wp(this.url, Object.assign({ method: "POST", headers: Object.assign(Object.assign(Object.assign({}, typeof o == "string" ? { "Content-Type": "application/json" } : {}), pr(d)), pr(a)), body: o }, r)), A = yield zp(s);
      if (typeof A != "string" && s.ok && !A.errors && A.data)
        return Object.assign(Object.assign({}, A), { headers: s.headers, status: s.status });
      throw I1(new gt(Object.assign(Object.assign({}, typeof A == "string" ? { error: A } : A), { status: s.status, headers: s.headers }), { query: e, variables: i }));
    });
  }
  request(e, i, a) {
    return f(this, void 0, void 0, function* () {
      const t = this.options, { headers: d } = t, r = ul(t, ["headers"]), o = typeof e == "string" ? e : hC(e), s = JSON.stringify({ query: o, variables: i }), A = yield Wp(this.url, Object.assign({ method: "POST", headers: Object.assign(Object.assign(Object.assign({}, typeof s == "string" ? { "Content-Type": "application/json" } : {}), pr(d)), pr(a)), body: s }, r)), l = yield zp(A);
      if (typeof l != "string" && A.ok && !l.errors && l.data)
        return l.data;
      throw new gt(Object.assign(Object.assign({}, typeof l == "string" ? { error: l } : l), { status: A.status, headers: A.headers }), { query: o, variables: i });
    });
  }
  setHeaders(e) {
    return this.options.headers = e, this;
  }
  setHeader(e, i) {
    const { headers: a } = this.options;
    return a ? a[e] = i : this.options.headers = { [e]: i }, this;
  }
}
function zp(n) {
  const e = n.headers.get("Content-Type");
  return e && e.startsWith("application/json") ? n.json() : n.text();
}
function pr(n) {
  let e = {};
  return n && (typeof Headers < "u" && n instanceof Headers ? e = function(i) {
    const a = {};
    return i.forEach((t, d) => {
      a[d] = t;
    }), a;
  }(n) : Array.isArray(n) ? n.forEach(([i, a]) => {
    e[i] = a;
  }) : e = n), e;
}
(function(n) {
  n.Android = "android", n.Desktop = "desktop", n.Ios = "ios", n.Web = "web";
})(bp || (bp = {})), function(n) {
  n.ActiveCycle = "activeCycle", n.ActiveIssues = "activeIssues", n.Backlog = "backlog", n.Triage = "triage", n.UpcomingCycle = "upcomingCycle";
}(Ip || (Ip = {})), function(n) {
  n.Friday = "Friday", n.Monday = "Monday", n.Saturday = "Saturday", n.Sunday = "Sunday", n.Thursday = "Thursday", n.Tuesday = "Tuesday", n.Wednesday = "Wednesday";
}(Cp || (Cp = {})), function(n) {
  n.Airbyte = "airbyte", n.Discord = "discord", n.Figma = "figma", n.FigmaPlugin = "figmaPlugin", n.Front = "front", n.GitHubSync = "gitHubSync", n.Github = "github", n.GithubCommit = "githubCommit", n.GithubPersonal = "githubPersonal", n.Gitlab = "gitlab", n.GoogleCalendarPersonal = "googleCalendarPersonal", n.GoogleSheets = "googleSheets", n.Intercom = "intercom", n.Jira = "jira", n.JiraPersonal = "jiraPersonal", n.Loom = "loom", n.Notion = "notion", n.PagerDuty = "pagerDuty", n.Sentry = "sentry", n.Slack = "slack", n.SlackAsks = "slackAsks", n.SlackOrgProjectUpdatesPost = "slackOrgProjectUpdatesPost", n.SlackPersonal = "slackPersonal", n.SlackPost = "slackPost", n.SlackProjectPost = "slackProjectPost", n.SlackProjectUpdatesPost = "slackProjectUpdatesPost", n.Zendesk = "zendesk";
}(Bp || (Bp = {})), function(n) {
  n.Blocks = "blocks", n.Duplicate = "duplicate", n.Related = "related";
}(Qp || (Qp = {})), function(n) {
  n.Approved = "approved", n.Denied = "denied", n.Requested = "requested";
}(Sp || (Sp = {})), function(n) {
  n.General = "general", n.Saml = "saml";
}(Dp || (Dp = {})), function(n) {
  n.Accepted = "accepted", n.Expired = "expired", n.Pending = "pending";
}(wp || (wp = {})), function(n) {
  n.CreatedAt = "createdAt", n.UpdatedAt = "updatedAt";
}(Fp || (Fp = {})), function(n) {
  n.AtRisk = "atRisk", n.OffTrack = "offTrack", n.OnTrack = "onTrack";
}(Vp || (Vp = {})), function(n) {
  n.Month = "month", n.Never = "never", n.TwoWeeks = "twoWeeks", n.Week = "week";
}(Tp || (Tp = {})), function(n) {
  n.Apple = "apple", n.AppleDevelopment = "appleDevelopment", n.Firebase = "firebase", n.Web = "web";
}(_p || (_p = {})), function(n) {
  n.Beta = "beta", n.Internal = "internal", n.PreRelease = "preRelease", n.Public = "public";
}(Rp || (Rp = {})), function(n) {
  n.All = "all", n.OnlyBusinessDays = "onlyBusinessDays";
}(Up || (Up = {})), function(n) {
  n.Breached = "Breached", n.Completed = "Completed", n.Failed = "Failed", n.HighRisk = "HighRisk", n.LowRisk = "LowRisk", n.MediumRisk = "MediumRisk", n.Paused = "Paused";
}(Lp || (Lp = {})), function(n) {
  n.Assign = "assign", n.Notify = "notify";
}(qp || (qp = {})), function(n) {
  n.Assigned = "assigned";
}(Pp || (Pp = {})), function(n) {
  n.All = "all", n.AnalyticsWelcomeDismissed = "analyticsWelcomeDismissed", n.CanPlaySnake = "canPlaySnake", n.CanPlayTetris = "canPlayTetris", n.CompletedOnboarding = "completedOnboarding", n.CycleWelcomeDismissed = "cycleWelcomeDismissed", n.DesktopDownloadToastDismissed = "desktopDownloadToastDismissed", n.DesktopInstalled = "desktopInstalled", n.DesktopTabsOnboardingDismissed = "desktopTabsOnboardingDismissed", n.DueDateShortcutMigration = "dueDateShortcutMigration", n.EmptyActiveIssuesDismissed = "emptyActiveIssuesDismissed", n.EmptyBacklogDismissed = "emptyBacklogDismissed", n.EmptyCustomViewsDismissed = "emptyCustomViewsDismissed", n.EmptyMyIssuesDismissed = "emptyMyIssuesDismissed", n.FigmaPluginBannerDismissed = "figmaPluginBannerDismissed", n.FigmaPromptDismissed = "figmaPromptDismissed", n.HelpIslandFeatureInsightsDismissed = "helpIslandFeatureInsightsDismissed", n.ImportBannerDismissed = "importBannerDismissed", n.InsightsHelpDismissed = "insightsHelpDismissed", n.InsightsWelcomeDismissed = "insightsWelcomeDismissed", n.IssueLabelSuggestionUsed = "issueLabelSuggestionUsed", n.IssueMovePromptCompleted = "issueMovePromptCompleted", n.JoinTeamIntroductionDismissed = "joinTeamIntroductionDismissed", n.ListSelectionTip = "listSelectionTip", n.MigrateThemePreference = "migrateThemePreference", n.MilestoneOnboardingIsSeenAndDismissed = "milestoneOnboardingIsSeenAndDismissed", n.ProjectBacklogWelcomeDismissed = "projectBacklogWelcomeDismissed", n.ProjectBoardOnboardingIsSeenAndDismissed = "projectBoardOnboardingIsSeenAndDismissed", n.ProjectUpdatesWelcomeDismissed = "projectUpdatesWelcomeDismissed", n.ProjectWelcomeDismissed = "projectWelcomeDismissed", n.RewindBannerDismissed = "rewindBannerDismissed", n.SlackCommentReactionTipShown = "slackCommentReactionTipShown", n.TeamsPageIntroductionDismissed = "teamsPageIntroductionDismissed", n.ThreadedCommentsNudgeIsSeen = "threadedCommentsNudgeIsSeen", n.TriageWelcomeDismissed = "triageWelcomeDismissed", n.TryCyclesDismissed = "tryCyclesDismissed", n.TryGithubDismissed = "tryGithubDismissed", n.TryInvitePeopleDismissed = "tryInvitePeopleDismissed", n.TryRoadmapsDismissed = "tryRoadmapsDismissed", n.TryTriageDismissed = "tryTriageDismissed", n.UpdatedSlackThreadSyncIntegration = "updatedSlackThreadSyncIntegration";
}(Op || (Op = {})), function(n) {
  n.Clear = "clear", n.Decr = "decr", n.Incr = "incr", n.Lock = "lock";
}(Gp || (Gp = {})), function(n) {
  n.Admin = "admin", n.Guest = "guest", n.User = "user";
}(Mp || (Mp = {})), function(n) {
  n.Organization = "organization", n.User = "user";
}(xp || (xp = {})), function(n) {
  n.ActiveIssues = "activeIssues", n.AllIssues = "allIssues", n.Archive = "archive", n.Backlog = "backlog", n.Board = "board", n.CompletedCycle = "completedCycle", n.CustomRoadmap = "customRoadmap", n.CustomView = "customView", n.CustomViews = "customViews", n.Cycle = "cycle", n.Inbox = "inbox", n.Label = "label", n.MyIssues = "myIssues", n.MyIssuesActivity = "myIssuesActivity", n.MyIssuesCreatedByMe = "myIssuesCreatedByMe", n.MyIssuesSubscribedTo = "myIssuesSubscribedTo", n.Project = "project", n.Projects = "projects", n.ProjectsAll = "projectsAll", n.ProjectsBacklog = "projectsBacklog", n.ProjectsClosed = "projectsClosed", n.QuickView = "quickView", n.Roadmap = "roadmap", n.RoadmapAll = "roadmapAll", n.RoadmapBacklog = "roadmapBacklog", n.RoadmapClosed = "roadmapClosed", n.Roadmaps = "roadmaps", n.Search = "search", n.Teams = "teams", n.Triage = "triage", n.UserProfile = "userProfile", n.UserProfileCreatedByUser = "userProfileCreatedByUser";
}(Yp || (Yp = {})), function(n) {
  n.EntityCreated = "entityCreated", n.EntityCreatedOrUpdated = "entityCreatedOrUpdated", n.EntityRemoved = "entityRemoved", n.EntityUnarchived = "entityUnarchived", n.EntityUpdated = "entityUpdated";
}(Jp || (Jp = {})), function(n) {
  n.Issue = "issue", n.Project = "project";
}(Hp || (Hp = {})), function(n) {
  n.Custom = "custom", n.Sla = "sla", n.ViewSubscription = "viewSubscription";
}(jp || (jp = {}));
const Ga = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "DocumentContent" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "DocumentContent" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "content" } }, { kind: "Field", name: { kind: "Name", value: "contentState" } }, { kind: "Field", name: { kind: "Name", value: "document" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "issue" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "projectMilestone" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "project" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "restoredAt" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }] } }] }, GC = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "AttachmentArchivePayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AttachmentArchivePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "entity" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] }, MC = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "CycleArchivePayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CycleArchivePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "entity" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] }, Te = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "DeletePayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "DeletePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "entityId" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] }, Ml = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IssueArchivePayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueArchivePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "entity" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] }, li = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ActorBot" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ActorBot" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "avatarUrl" } }, { kind: "Field", name: { kind: "Name", value: "name" } }, { kind: "Field", name: { kind: "Name", value: "userDisplayName" } }, { kind: "Field", name: { kind: "Name", value: "subType" } }, { kind: "Field", name: { kind: "Name", value: "type" } }, { kind: "Field", name: { kind: "Name", value: "id" } }] } }] }, xi = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "NotificationSubscription" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "NotificationSubscription" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "customView" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "cycle" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "label" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "project" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "team" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "subscriber" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "user" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "active" } }] } }] }, Vn = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IssueNotification" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueNotification" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "reactionEmoji" } }, { kind: "Field", name: { kind: "Name", value: "type" } }, { kind: "Field", name: { kind: "Name", value: "botActor" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ActorBot" } }] } }, { kind: "Field", name: { kind: "Name", value: "comment" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "issue" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "subscriptions" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationSubscription" } }] } }, { kind: "Field", name: { kind: "Name", value: "team" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "emailedAt" } }, { kind: "Field", name: { kind: "Name", value: "readAt" } }, { kind: "Field", name: { kind: "Name", value: "unsnoozedAt" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "snoozedUntilAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "actor" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "user" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }] } }] }, Tn = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "OauthClientApproval" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OauthClientApproval" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "requesterId" } }, { kind: "Field", name: { kind: "Name", value: "responderId" } }, { kind: "Field", name: { kind: "Name", value: "requestReason" } }, { kind: "Field", name: { kind: "Name", value: "denyReason" } }, { kind: "Field", name: { kind: "Name", value: "scopes" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "oauthClientId" } }] } }] }, _n = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "OauthClientApprovalNotification" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OauthClientApprovalNotification" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "type" } }, { kind: "Field", name: { kind: "Name", value: "oauthClientApproval" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "OauthClientApproval" } }] } }, { kind: "Field", name: { kind: "Name", value: "botActor" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ActorBot" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "emailedAt" } }, { kind: "Field", name: { kind: "Name", value: "readAt" } }, { kind: "Field", name: { kind: "Name", value: "unsnoozedAt" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "snoozedUntilAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "actor" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "user" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }] } }] }, Rn = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ProjectNotification" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectNotification" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "type" } }, { kind: "Field", name: { kind: "Name", value: "botActor" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ActorBot" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "project" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "projectUpdate" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "emailedAt" } }, { kind: "Field", name: { kind: "Name", value: "readAt" } }, { kind: "Field", name: { kind: "Name", value: "unsnoozedAt" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "snoozedUntilAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "actor" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "user" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }] } }] }, Un = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "Notification" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Notification" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "type" } }, { kind: "Field", name: { kind: "Name", value: "botActor" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ActorBot" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "emailedAt" } }, { kind: "Field", name: { kind: "Name", value: "readAt" } }, { kind: "Field", name: { kind: "Name", value: "unsnoozedAt" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "snoozedUntilAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "actor" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "user" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "InlineFragment", typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueNotification" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueNotification" } }] } }, { kind: "InlineFragment", typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OauthClientApprovalNotification" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "OauthClientApprovalNotification" } }] } }, { kind: "InlineFragment", typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectNotification" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectNotification" } }] } }] } }] }, U1 = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "NotificationArchivePayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "NotificationArchivePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "entity" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Notification" } }] } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] }, xl = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ProjectArchivePayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectArchivePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "entity" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] }, L1 = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "RoadmapArchivePayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "RoadmapArchivePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "entity" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] }, xC = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "WorkflowStateArchivePayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "WorkflowStateArchivePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "entity" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] }, Yl = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "Template" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Template" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "templateData" } }, { kind: "Field", name: { kind: "Name", value: "description" } }, { kind: "Field", name: { kind: "Name", value: "type" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "name" } }, { kind: "Field", name: { kind: "Name", value: "team" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "creator" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "lastUpdatedBy" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }] } }] }, q1 = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "PaidSubscription" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "PaidSubscription" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "collectionMethod" } }, { kind: "Field", name: { kind: "Name", value: "creator" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "canceledAt" } }, { kind: "Field", name: { kind: "Name", value: "nextBillingAt" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "seatsMaximum" } }, { kind: "Field", name: { kind: "Name", value: "seatsMinimum" } }, { kind: "Field", name: { kind: "Name", value: "seats" } }, { kind: "Field", name: { kind: "Name", value: "pendingChangeType" } }, { kind: "Field", name: { kind: "Name", value: "type" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }] } }] }, YC = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "Organization" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Organization" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "allowedAuthServices" } }, { kind: "Field", name: { kind: "Name", value: "gitBranchFormat" } }, { kind: "Field", name: { kind: "Name", value: "userCount" } }, { kind: "Field", name: { kind: "Name", value: "createdIssueCount" } }, { kind: "Field", name: { kind: "Name", value: "previousUrlKeys" } }, { kind: "Field", name: { kind: "Name", value: "periodUploadVolume" } }, { kind: "Field", name: { kind: "Name", value: "projectUpdateRemindersHour" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "logoUrl" } }, { kind: "Field", name: { kind: "Name", value: "name" } }, { kind: "Field", name: { kind: "Name", value: "subscription" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PaidSubscription" } }] } }, { kind: "Field", name: { kind: "Name", value: "urlKey" } }, { kind: "Field", name: { kind: "Name", value: "deletionRequestedAt" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "trialEndsAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "samlEnabled" } }, { kind: "Field", name: { kind: "Name", value: "scimEnabled" } }, { kind: "Field", name: { kind: "Name", value: "allowMembersToInvite" } }, { kind: "Field", name: { kind: "Name", value: "gitLinkbackMessagesEnabled" } }, { kind: "Field", name: { kind: "Name", value: "gitPublicLinkbackMessagesEnabled" } }, { kind: "Field", name: { kind: "Name", value: "roadmapEnabled" } }] } }] }, JC = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "GithubRepo" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GithubRepo" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "name" } }] } }] }, HC = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "GithubOrg" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GithubOrg" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "repositories" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "GithubRepo" } }] } }, { kind: "Field", name: { kind: "Name", value: "login" } }, { kind: "Field", name: { kind: "Name", value: "name" } }, { kind: "Field", name: { kind: "Name", value: "isPersonal" } }] } }] }, jC = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "GithubOAuthTokenPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GithubOAuthTokenPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "organizations" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "GithubOrg" } }] } }, { kind: "Field", name: { kind: "Name", value: "token" } }] } }] }, WC = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "UserAuthorizedApplication" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "UserAuthorizedApplication" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "name" } }, { kind: "Field", name: { kind: "Name", value: "approvalErrorCode" } }, { kind: "Field", name: { kind: "Name", value: "imageUrl" } }, { kind: "Field", name: { kind: "Name", value: "description" } }, { kind: "Field", name: { kind: "Name", value: "developer" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "clientId" } }, { kind: "Field", name: { kind: "Name", value: "developerUrl" } }, { kind: "Field", name: { kind: "Name", value: "webhooksEnabled" } }, { kind: "Field", name: { kind: "Name", value: "createdByLinear" } }, { kind: "Field", name: { kind: "Name", value: "isAuthorized" } }] } }] }, zC = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "Application" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Application" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "name" } }, { kind: "Field", name: { kind: "Name", value: "imageUrl" } }, { kind: "Field", name: { kind: "Name", value: "description" } }, { kind: "Field", name: { kind: "Name", value: "developer" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "clientId" } }, { kind: "Field", name: { kind: "Name", value: "developerUrl" } }] } }] }, ZC = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "SlackAsksTeamSettings" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "SlackAsksTeamSettings" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "hasDefaultAsk" } }] } }] }, KC = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "SlackChannelNameMapping" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "SlackChannelNameMapping" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "name" } }, { kind: "Field", name: { kind: "Name", value: "autoCreateOnBotMention" } }, { kind: "Field", name: { kind: "Name", value: "isPrivate" } }, { kind: "Field", name: { kind: "Name", value: "isShared" } }, { kind: "Field", name: { kind: "Name", value: "autoCreateOnMessage" } }, { kind: "Field", name: { kind: "Name", value: "autoCreateOnEmoji" } }, { kind: "Field", name: { kind: "Name", value: "botAdded" } }, { kind: "Field", name: { kind: "Name", value: "teams" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "SlackAsksTeamSettings" } }] } }] } }] }, XC = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "UserSettings" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "UserSettings" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "calendarHash" } }, { kind: "Field", name: { kind: "Name", value: "unsubscribedFrom" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "notificationPreferences" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "user" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "showFullUserNames" } }] } }] }, P1 = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ApiKey" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ApiKey" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "label" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }] } }] }, ee = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "PageInfo" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "PageInfo" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "startCursor" } }, { kind: "Field", name: { kind: "Name", value: "endCursor" } }, { kind: "Field", name: { kind: "Name", value: "hasPreviousPage" } }, { kind: "Field", name: { kind: "Name", value: "hasNextPage" } }] } }] }, $C = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ApiKeyConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ApiKeyConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ApiKey" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] }, e9 = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ApiKeyPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ApiKeyPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "apiKey" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ApiKey" } }] } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] }, i9 = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "AsksChannelConnectPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AsksChannelConnectPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "integration" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "mapping" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "SlackChannelNameMapping" } }] } }, { kind: "Field", name: { kind: "Name", value: "addBot" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] }, Vt = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "Attachment" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Attachment" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "sourceType" } }, { kind: "Field", name: { kind: "Name", value: "subtitle" } }, { kind: "Field", name: { kind: "Name", value: "title" } }, { kind: "Field", name: { kind: "Name", value: "metadata" } }, { kind: "Field", name: { kind: "Name", value: "groupBySource" } }, { kind: "Field", name: { kind: "Name", value: "source" } }, { kind: "Field", name: { kind: "Name", value: "url" } }, { kind: "Field", name: { kind: "Name", value: "creator" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "issue" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }] } }] }, Id = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "AttachmentConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AttachmentConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Attachment" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] }, vn = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "AttachmentPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AttachmentPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "attachment" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] }, n9 = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "AuditEntry" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AuditEntry" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "requestInformation" } }, { kind: "Field", name: { kind: "Name", value: "metadata" } }, { kind: "Field", name: { kind: "Name", value: "countryCode" } }, { kind: "Field", name: { kind: "Name", value: "ip" } }, { kind: "Field", name: { kind: "Name", value: "actorId" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "actor" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "type" } }] } }] }, a9 = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "AuditEntryConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AuditEntryConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AuditEntry" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] }, t9 = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "AuditEntryType" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AuditEntryType" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "description" } }, { kind: "Field", name: { kind: "Name", value: "type" } }] } }] }, Ma = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "AuthOrganization" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AuthOrganization" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "allowedAuthServices" } }, { kind: "Field", name: { kind: "Name", value: "previousUrlKeys" } }, { kind: "Field", name: { kind: "Name", value: "logoUrl" } }, { kind: "Field", name: { kind: "Name", value: "name" } }, { kind: "Field", name: { kind: "Name", value: "urlKey" } }, { kind: "Field", name: { kind: "Name", value: "deletionRequestedAt" } }, { kind: "Field", name: { kind: "Name", value: "samlEnabled" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "userCount" } }] } }] }, xa = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "AuthUser" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AuthUser" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "avatarUrl" } }, { kind: "Field", name: { kind: "Name", value: "organization" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AuthOrganization" } }] } }, { kind: "Field", name: { kind: "Name", value: "displayName" } }, { kind: "Field", name: { kind: "Name", value: "email" } }, { kind: "Field", name: { kind: "Name", value: "name" } }, { kind: "Field", name: { kind: "Name", value: "id" } }] } }] }, jr = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "AuthResolverResponse" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AuthResolverResponse" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "email" } }, { kind: "Field", name: { kind: "Name", value: "lastUsedOrganizationId" } }, { kind: "Field", name: { kind: "Name", value: "token" } }, { kind: "Field", name: { kind: "Name", value: "lockedOrganizations" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AuthOrganization" } }] } }, { kind: "Field", name: { kind: "Name", value: "availableOrganizations" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AuthOrganization" } }] } }, { kind: "Field", name: { kind: "Name", value: "allowDomainAccess" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "users" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AuthUser" } }] } }] } }] }, d9 = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "AuthenticationSessionResponse" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AuthenticationSessionResponse" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "client" } }, { kind: "Field", name: { kind: "Name", value: "countryCodes" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "location" } }, { kind: "Field", name: { kind: "Name", value: "ip" } }, { kind: "Field", name: { kind: "Name", value: "isCurrentSession" } }, { kind: "Field", name: { kind: "Name", value: "locationCity" } }, { kind: "Field", name: { kind: "Name", value: "locationCountryCode" } }, { kind: "Field", name: { kind: "Name", value: "locationCountry" } }, { kind: "Field", name: { kind: "Name", value: "name" } }, { kind: "Field", name: { kind: "Name", value: "operatingSystem" } }, { kind: "Field", name: { kind: "Name", value: "userAgent" } }, { kind: "Field", name: { kind: "Name", value: "browserType" } }, { kind: "Field", name: { kind: "Name", value: "lastActiveAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }] } }] }, Tt = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "Comment" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Comment" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "url" } }, { kind: "Field", name: { kind: "Name", value: "reactionData" } }, { kind: "Field", name: { kind: "Name", value: "botActor" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ActorBot" } }] } }, { kind: "Field", name: { kind: "Name", value: "body" } }, { kind: "Field", name: { kind: "Name", value: "resolvingComment" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "documentContent" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentContent" } }] } }, { kind: "Field", name: { kind: "Name", value: "issue" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "parent" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "resolvedAt" } }, { kind: "Field", name: { kind: "Name", value: "editedAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "resolvingUser" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "user" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }] } }] }, Cd = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "CommentConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CommentConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Comment" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] }, Wr = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "CommentPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CommentPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "comment" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] }, r9 = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ContactPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ContactPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] }, s9 = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "CreateCsvExportReportPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CreateCsvExportReportPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] }, Jl = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "CreateOrJoinOrganizationResponse" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CreateOrJoinOrganizationResponse" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "organization" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AuthOrganization" } }] } }, { kind: "Field", name: { kind: "Name", value: "user" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AuthUser" } }] } }] } }] }, O1 = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "CustomView" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CustomView" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "color" } }, { kind: "Field", name: { kind: "Name", value: "description" } }, { kind: "Field", name: { kind: "Name", value: "filterData" } }, { kind: "Field", name: { kind: "Name", value: "filters" } }, { kind: "Field", name: { kind: "Name", value: "icon" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "modelName" } }, { kind: "Field", name: { kind: "Name", value: "name" } }, { kind: "Field", name: { kind: "Name", value: "team" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "creator" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "owner" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "shared" } }] } }] }, o9 = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "CustomViewConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CustomViewConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomView" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] }, l9 = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "CustomViewHasSubscribersPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CustomViewHasSubscribersPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "hasSubscribers" } }] } }] }, G1 = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "CustomViewPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CustomViewPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "customView" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] }, Hl = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "Cycle" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Cycle" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "completedAt" } }, { kind: "Field", name: { kind: "Name", value: "name" } }, { kind: "Field", name: { kind: "Name", value: "description" } }, { kind: "Field", name: { kind: "Name", value: "endsAt" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "completedScopeHistory" } }, { kind: "Field", name: { kind: "Name", value: "completedIssueCountHistory" } }, { kind: "Field", name: { kind: "Name", value: "inProgressScopeHistory" } }, { kind: "Field", name: { kind: "Name", value: "number" } }, { kind: "Field", name: { kind: "Name", value: "progress" } }, { kind: "Field", name: { kind: "Name", value: "startsAt" } }, { kind: "Field", name: { kind: "Name", value: "team" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "autoArchivedAt" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "scopeHistory" } }, { kind: "Field", name: { kind: "Name", value: "issueCountHistory" } }, { kind: "Field", name: { kind: "Name", value: "id" } }] } }] }, M1 = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "CycleConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CycleConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Cycle" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] }, x1 = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "CyclePayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CyclePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "cycle" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] }, jl = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "Document" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Document" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "color" } }, { kind: "Field", name: { kind: "Name", value: "title" } }, { kind: "Field", name: { kind: "Name", value: "slugId" } }, { kind: "Field", name: { kind: "Name", value: "contentData" } }, { kind: "Field", name: { kind: "Name", value: "content" } }, { kind: "Field", name: { kind: "Name", value: "icon" } }, { kind: "Field", name: { kind: "Name", value: "lastAppliedTemplate" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "project" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "creator" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedBy" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }] } }] }, Y1 = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "DocumentConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "DocumentConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Document" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] }, A9 = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "DocumentContentHistoryType" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "DocumentContentHistoryType" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "actorIds" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "contentDataSnapshotAt" } }] } }] }, m9 = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "DocumentContentHistoryPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "DocumentContentHistoryPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "history" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentContentHistoryType" } }] } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] }, J1 = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "DocumentPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "DocumentPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "document" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] }, _t = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ArchiveResponse" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ArchiveResponse" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "archive" } }, { kind: "Field", name: { kind: "Name", value: "totalCount" } }, { kind: "Field", name: { kind: "Name", value: "databaseVersion" } }, { kind: "Field", name: { kind: "Name", value: "includesDependencies" } }] } }] }, u9 = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "DocumentSearchResult" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "DocumentSearchResult" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "metadata" } }, { kind: "Field", name: { kind: "Name", value: "color" } }, { kind: "Field", name: { kind: "Name", value: "title" } }, { kind: "Field", name: { kind: "Name", value: "slugId" } }, { kind: "Field", name: { kind: "Name", value: "contentData" } }, { kind: "Field", name: { kind: "Name", value: "content" } }, { kind: "Field", name: { kind: "Name", value: "icon" } }, { kind: "Field", name: { kind: "Name", value: "lastAppliedTemplate" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "project" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "creator" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedBy" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }] } }] }, p9 = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "DocumentSearchPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "DocumentSearchPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "archivePayload" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ArchiveResponse" } }] } }, { kind: "Field", name: { kind: "Name", value: "totalCount" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentSearchResult" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] }, c9 = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "EmailUnsubscribePayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "EmailUnsubscribePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] }, k9 = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "EmailUserAccountAuthChallengeResponse" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "EmailUserAccountAuthChallengeResponse" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "authType" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] }, H1 = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "Emoji" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Emoji" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "url" } }, { kind: "Field", name: { kind: "Name", value: "name" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "source" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "creator" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }] } }] }, v9 = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "EmojiConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "EmojiConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Emoji" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] }, g9 = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "EmojiPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "EmojiPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "emoji" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] }, Wl = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "Favorite" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Favorite" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "customView" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "cycle" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "document" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "issue" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "label" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "project" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "roadmap" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "projectTeam" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "user" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "folderName" } }, { kind: "Field", name: { kind: "Name", value: "sortOrder" } }, { kind: "Field", name: { kind: "Name", value: "owner" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "parent" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "predefinedViewTeam" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "predefinedViewType" } }, { kind: "Field", name: { kind: "Name", value: "type" } }, { kind: "Field", name: { kind: "Name", value: "id" } }] } }] }, j1 = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "FavoriteConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "FavoriteConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Favorite" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] }, W1 = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "FavoritePayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "FavoritePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "favorite" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] }, h9 = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "FrontAttachmentPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "FrontAttachmentPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] }, f9 = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "GitHubCommitIntegrationPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GitHubCommitIntegrationPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "integration" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "webhookSecret" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] }, N9 = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ImageUploadFromUrlPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ImageUploadFromUrlPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "url" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] }, zl = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "Integration" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Integration" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "service" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "team" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "creator" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }] } }] }, z1 = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IntegrationConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IntegrationConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Integration" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] }, Je = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IntegrationPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IntegrationPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "integration" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] }, E9 = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IntegrationRequestPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IntegrationRequestPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] }, Z1 = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IntegrationTemplate" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IntegrationTemplate" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "foreignEntityId" } }, { kind: "Field", name: { kind: "Name", value: "integration" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "template" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }] } }] }, y9 = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IntegrationTemplateConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IntegrationTemplateConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationTemplate" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] }, b9 = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IntegrationTemplatePayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IntegrationTemplatePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "integrationTemplate" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] }, I9 = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IntegrationsSettings" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IntegrationsSettings" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "project" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "team" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "slackIssueNewComment" } }, { kind: "Field", name: { kind: "Name", value: "slackIssueAddedToTriage" } }, { kind: "Field", name: { kind: "Name", value: "slackIssueCreated" } }, { kind: "Field", name: { kind: "Name", value: "slackProjectUpdateCreated" } }, { kind: "Field", name: { kind: "Name", value: "slackIssueSlaHighRisk" } }, { kind: "Field", name: { kind: "Name", value: "slackIssueSlaBreached" } }, { kind: "Field", name: { kind: "Name", value: "slackIssueStatusChangedDone" } }, { kind: "Field", name: { kind: "Name", value: "slackIssueStatusChangedAll" } }, { kind: "Field", name: { kind: "Name", value: "slackProjectUpdateCreatedToTeam" } }, { kind: "Field", name: { kind: "Name", value: "slackProjectUpdateCreatedToWorkspace" } }] } }] }, K1 = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IntegrationsSettingsPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IntegrationsSettingsPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "integrationsSettings" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] }, Ai = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "Issue" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Issue" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "trashed" } }, { kind: "Field", name: { kind: "Name", value: "url" } }, { kind: "Field", name: { kind: "Name", value: "identifier" } }, { kind: "Field", name: { kind: "Name", value: "priorityLabel" } }, { kind: "Field", name: { kind: "Name", value: "previousIdentifiers" } }, { kind: "Field", name: { kind: "Name", value: "customerTicketCount" } }, { kind: "Field", name: { kind: "Name", value: "branchName" } }, { kind: "Field", name: { kind: "Name", value: "cycle" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "dueDate" } }, { kind: "Field", name: { kind: "Name", value: "estimate" } }, { kind: "Field", name: { kind: "Name", value: "description" } }, { kind: "Field", name: { kind: "Name", value: "title" } }, { kind: "Field", name: { kind: "Name", value: "number" } }, { kind: "Field", name: { kind: "Name", value: "lastAppliedTemplate" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "boardOrder" } }, { kind: "Field", name: { kind: "Name", value: "sortOrder" } }, { kind: "Field", name: { kind: "Name", value: "subIssueSortOrder" } }, { kind: "Field", name: { kind: "Name", value: "parent" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "priority" } }, { kind: "Field", name: { kind: "Name", value: "project" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "projectMilestone" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "team" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "startedTriageAt" } }, { kind: "Field", name: { kind: "Name", value: "triagedAt" } }, { kind: "Field", name: { kind: "Name", value: "autoArchivedAt" } }, { kind: "Field", name: { kind: "Name", value: "autoClosedAt" } }, { kind: "Field", name: { kind: "Name", value: "canceledAt" } }, { kind: "Field", name: { kind: "Name", value: "completedAt" } }, { kind: "Field", name: { kind: "Name", value: "startedAt" } }, { kind: "Field", name: { kind: "Name", value: "snoozedUntilAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "assignee" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "creator" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "snoozedBy" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "favorite" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "state" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }] } }] }, C9 = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IssueBatchPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueBatchPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "issues" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Issue" } }] } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] }, Ti = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IssueConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Issue" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] }, B9 = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IssueFilterSuggestionPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueFilterSuggestionPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "filter" } }] } }] }, Zl = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IssueRelationHistoryPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueRelationHistoryPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "identifier" } }, { kind: "Field", name: { kind: "Name", value: "type" } }] } }] }, gn = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IssueImport" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueImport" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "progress" } }, { kind: "Field", name: { kind: "Name", value: "errorMetadata" } }, { kind: "Field", name: { kind: "Name", value: "csvFileUrl" } }, { kind: "Field", name: { kind: "Name", value: "teamName" } }, { kind: "Field", name: { kind: "Name", value: "mapping" } }, { kind: "Field", name: { kind: "Name", value: "creatorId" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "service" } }, { kind: "Field", name: { kind: "Name", value: "status" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "error" } }] } }] }, hn = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IssueLabel" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueLabel" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "color" } }, { kind: "Field", name: { kind: "Name", value: "description" } }, { kind: "Field", name: { kind: "Name", value: "name" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "parent" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "team" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "creator" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "isGroup" } }] } }] }, Kl = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IssueHistory" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueHistory" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "relationChanges" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueRelationHistoryPayload" } }] } }, { kind: "Field", name: { kind: "Name", value: "addedLabelIds" } }, { kind: "Field", name: { kind: "Name", value: "removedLabelIds" } }, { kind: "Field", name: { kind: "Name", value: "botActor" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ActorBot" } }] } }, { kind: "Field", name: { kind: "Name", value: "attachmentId" } }, { kind: "Field", name: { kind: "Name", value: "toCycleId" } }, { kind: "Field", name: { kind: "Name", value: "toParentId" } }, { kind: "Field", name: { kind: "Name", value: "toConvertedProjectId" } }, { kind: "Field", name: { kind: "Name", value: "toProjectId" } }, { kind: "Field", name: { kind: "Name", value: "toStateId" } }, { kind: "Field", name: { kind: "Name", value: "fromCycleId" } }, { kind: "Field", name: { kind: "Name", value: "fromParentId" } }, { kind: "Field", name: { kind: "Name", value: "fromProjectId" } }, { kind: "Field", name: { kind: "Name", value: "fromStateId" } }, { kind: "Field", name: { kind: "Name", value: "fromTeamId" } }, { kind: "Field", name: { kind: "Name", value: "toTeamId" } }, { kind: "Field", name: { kind: "Name", value: "fromAssigneeId" } }, { kind: "Field", name: { kind: "Name", value: "toAssigneeId" } }, { kind: "Field", name: { kind: "Name", value: "actorId" } }, { kind: "Field", name: { kind: "Name", value: "issueImport" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueImport" } }] } }, { kind: "Field", name: { kind: "Name", value: "issue" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "attachment" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "toCycle" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "toParent" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "toConvertedProject" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "toProject" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "toState" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "fromCycle" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "fromParent" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "fromProject" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "fromState" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "fromTeam" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "toTeam" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "fromAssignee" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "toAssignee" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "actor" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "fromDueDate" } }, { kind: "Field", name: { kind: "Name", value: "toDueDate" } }, { kind: "Field", name: { kind: "Name", value: "fromEstimate" } }, { kind: "Field", name: { kind: "Name", value: "toEstimate" } }, { kind: "Field", name: { kind: "Name", value: "fromPriority" } }, { kind: "Field", name: { kind: "Name", value: "toPriority" } }, { kind: "Field", name: { kind: "Name", value: "fromTitle" } }, { kind: "Field", name: { kind: "Name", value: "toTitle" } }, { kind: "Field", name: { kind: "Name", value: "archived" } }, { kind: "Field", name: { kind: "Name", value: "autoArchived" } }, { kind: "Field", name: { kind: "Name", value: "autoClosed" } }, { kind: "Field", name: { kind: "Name", value: "trashed" } }, { kind: "Field", name: { kind: "Name", value: "updatedDescription" } }, { kind: "Field", name: { kind: "Name", value: "addedLabels" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueLabel" } }] } }, { kind: "Field", name: { kind: "Name", value: "removedLabels" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueLabel" } }] } }] } }] }, Xl = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IssueHistoryConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueHistoryConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueHistory" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] }, Q9 = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IssueImportCheckPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueImportCheckPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] }, S9 = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IssueImportDeletePayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueImportDeletePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "issueImport" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueImport" } }] } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] }, Ya = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IssueImportPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueImportPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "issueImport" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueImport" } }] } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] }, Ja = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IssueLabelConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueLabelConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueLabel" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] }, X1 = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IssueLabelPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueLabelPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "issueLabel" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] }, Ha = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IssuePayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssuePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "issue" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] }, D9 = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IssuePriorityValue" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssuePriorityValue" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "label" } }, { kind: "Field", name: { kind: "Name", value: "priority" } }] } }] }, ba = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IssueRelation" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueRelation" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "issue" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "relatedIssue" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "type" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }] } }] }, ja = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IssueRelationConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueRelationConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueRelation" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] }, $1 = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IssueRelationPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueRelationPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "issueRelation" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] }, w9 = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IssueSearchResult" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueSearchResult" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "trashed" } }, { kind: "Field", name: { kind: "Name", value: "url" } }, { kind: "Field", name: { kind: "Name", value: "identifier" } }, { kind: "Field", name: { kind: "Name", value: "priorityLabel" } }, { kind: "Field", name: { kind: "Name", value: "metadata" } }, { kind: "Field", name: { kind: "Name", value: "previousIdentifiers" } }, { kind: "Field", name: { kind: "Name", value: "customerTicketCount" } }, { kind: "Field", name: { kind: "Name", value: "branchName" } }, { kind: "Field", name: { kind: "Name", value: "cycle" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "dueDate" } }, { kind: "Field", name: { kind: "Name", value: "estimate" } }, { kind: "Field", name: { kind: "Name", value: "description" } }, { kind: "Field", name: { kind: "Name", value: "title" } }, { kind: "Field", name: { kind: "Name", value: "number" } }, { kind: "Field", name: { kind: "Name", value: "lastAppliedTemplate" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "boardOrder" } }, { kind: "Field", name: { kind: "Name", value: "sortOrder" } }, { kind: "Field", name: { kind: "Name", value: "subIssueSortOrder" } }, { kind: "Field", name: { kind: "Name", value: "parent" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "priority" } }, { kind: "Field", name: { kind: "Name", value: "project" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "projectMilestone" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "team" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "startedTriageAt" } }, { kind: "Field", name: { kind: "Name", value: "triagedAt" } }, { kind: "Field", name: { kind: "Name", value: "autoArchivedAt" } }, { kind: "Field", name: { kind: "Name", value: "autoClosedAt" } }, { kind: "Field", name: { kind: "Name", value: "canceledAt" } }, { kind: "Field", name: { kind: "Name", value: "completedAt" } }, { kind: "Field", name: { kind: "Name", value: "startedAt" } }, { kind: "Field", name: { kind: "Name", value: "snoozedUntilAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "assignee" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "creator" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "snoozedBy" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "favorite" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "state" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }] } }] }, F9 = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IssueSearchPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueSearchPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "archivePayload" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ArchiveResponse" } }] } }, { kind: "Field", name: { kind: "Name", value: "totalCount" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueSearchResult" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] }, zr = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "LogoutResponse" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "LogoutResponse" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] }, Bd = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "NotificationBatchActionPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "NotificationBatchActionPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "notifications" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Notification" } }] } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] }, V9 = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "NotificationConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "NotificationConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Notification" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] }, T9 = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "NotificationPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "NotificationPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "notification" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Notification" } }] } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] }, _9 = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "NotificationSubscriptionConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "NotificationSubscriptionConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationSubscription" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] }, ev = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "NotificationSubscriptionPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "NotificationSubscriptionPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "notificationSubscription" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationSubscription" } }] } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] }, R9 = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "OrganizationCancelDeletePayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OrganizationCancelDeletePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] }, iv = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "OrganizationDeletePayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OrganizationDeletePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] }, U9 = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "OrganizationExistsPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OrganizationExistsPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "success" } }, { kind: "Field", name: { kind: "Name", value: "exists" } }] } }] }, nv = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "OrganizationInvite" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OrganizationInvite" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "metadata" } }, { kind: "Field", name: { kind: "Name", value: "external" } }, { kind: "Field", name: { kind: "Name", value: "email" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "acceptedAt" } }, { kind: "Field", name: { kind: "Name", value: "expiresAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "inviter" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "invitee" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }] } }] }, L9 = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "OrganizationInviteConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OrganizationInviteConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "OrganizationInvite" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] }, av = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "OrganizationInvitePayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OrganizationInvitePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "organizationInvite" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] }, q9 = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "OrganizationPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OrganizationPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] }, P9 = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "OrganizationStartPlusTrialPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OrganizationStartPlusTrialPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] }, Zr = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "Project" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Project" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "trashed" } }, { kind: "Field", name: { kind: "Name", value: "url" } }, { kind: "Field", name: { kind: "Name", value: "integrationsSettings" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "targetDate" } }, { kind: "Field", name: { kind: "Name", value: "startDate" } }, { kind: "Field", name: { kind: "Name", value: "icon" } }, { kind: "Field", name: { kind: "Name", value: "lastAppliedTemplate" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "completedScopeHistory" } }, { kind: "Field", name: { kind: "Name", value: "completedIssueCountHistory" } }, { kind: "Field", name: { kind: "Name", value: "inProgressScopeHistory" } }, { kind: "Field", name: { kind: "Name", value: "progress" } }, { kind: "Field", name: { kind: "Name", value: "scope" } }, { kind: "Field", name: { kind: "Name", value: "lead" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "convertedFromIssue" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "color" } }, { kind: "Field", name: { kind: "Name", value: "content" } }, { kind: "Field", name: { kind: "Name", value: "description" } }, { kind: "Field", name: { kind: "Name", value: "name" } }, { kind: "Field", name: { kind: "Name", value: "slugId" } }, { kind: "Field", name: { kind: "Name", value: "sortOrder" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "autoArchivedAt" } }, { kind: "Field", name: { kind: "Name", value: "canceledAt" } }, { kind: "Field", name: { kind: "Name", value: "completedAt" } }, { kind: "Field", name: { kind: "Name", value: "startedAt" } }, { kind: "Field", name: { kind: "Name", value: "projectUpdateRemindersPausedUntilAt" } }, { kind: "Field", name: { kind: "Name", value: "scopeHistory" } }, { kind: "Field", name: { kind: "Name", value: "issueCountHistory" } }, { kind: "Field", name: { kind: "Name", value: "state" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "creator" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "slackIssueComments" } }, { kind: "Field", name: { kind: "Name", value: "slackNewIssue" } }, { kind: "Field", name: { kind: "Name", value: "slackIssueStatuses" } }] } }] }, $l = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ProjectConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Project" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] }, O9 = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ProjectFilterSuggestionPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectFilterSuggestionPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "filter" } }] } }] }, eA = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ProjectLink" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectLink" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "url" } }, { kind: "Field", name: { kind: "Name", value: "label" } }, { kind: "Field", name: { kind: "Name", value: "project" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "creator" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }] } }] }, tv = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ProjectLinkConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectLinkConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectLink" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] }, dv = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ProjectLinkPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectLinkPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "projectLink" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] }, iA = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ProjectMilestone" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectMilestone" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "name" } }, { kind: "Field", name: { kind: "Name", value: "sortOrder" } }, { kind: "Field", name: { kind: "Name", value: "targetDate" } }, { kind: "Field", name: { kind: "Name", value: "description" } }, { kind: "Field", name: { kind: "Name", value: "project" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }] } }] }, rv = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ProjectMilestoneConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectMilestoneConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectMilestone" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] }, sv = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ProjectMilestonePayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectMilestonePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "projectMilestone" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] }, ov = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ProjectPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "project" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] }, G9 = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ProjectSearchResult" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectSearchResult" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "trashed" } }, { kind: "Field", name: { kind: "Name", value: "metadata" } }, { kind: "Field", name: { kind: "Name", value: "url" } }, { kind: "Field", name: { kind: "Name", value: "integrationsSettings" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "targetDate" } }, { kind: "Field", name: { kind: "Name", value: "startDate" } }, { kind: "Field", name: { kind: "Name", value: "icon" } }, { kind: "Field", name: { kind: "Name", value: "lastAppliedTemplate" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "completedScopeHistory" } }, { kind: "Field", name: { kind: "Name", value: "completedIssueCountHistory" } }, { kind: "Field", name: { kind: "Name", value: "inProgressScopeHistory" } }, { kind: "Field", name: { kind: "Name", value: "progress" } }, { kind: "Field", name: { kind: "Name", value: "scope" } }, { kind: "Field", name: { kind: "Name", value: "lead" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "convertedFromIssue" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "color" } }, { kind: "Field", name: { kind: "Name", value: "content" } }, { kind: "Field", name: { kind: "Name", value: "description" } }, { kind: "Field", name: { kind: "Name", value: "name" } }, { kind: "Field", name: { kind: "Name", value: "slugId" } }, { kind: "Field", name: { kind: "Name", value: "sortOrder" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "autoArchivedAt" } }, { kind: "Field", name: { kind: "Name", value: "canceledAt" } }, { kind: "Field", name: { kind: "Name", value: "completedAt" } }, { kind: "Field", name: { kind: "Name", value: "startedAt" } }, { kind: "Field", name: { kind: "Name", value: "projectUpdateRemindersPausedUntilAt" } }, { kind: "Field", name: { kind: "Name", value: "scopeHistory" } }, { kind: "Field", name: { kind: "Name", value: "issueCountHistory" } }, { kind: "Field", name: { kind: "Name", value: "state" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "creator" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "slackIssueComments" } }, { kind: "Field", name: { kind: "Name", value: "slackNewIssue" } }, { kind: "Field", name: { kind: "Name", value: "slackIssueStatuses" } }] } }] }, M9 = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ProjectSearchPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectSearchPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "archivePayload" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ArchiveResponse" } }] } }, { kind: "Field", name: { kind: "Name", value: "totalCount" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectSearchResult" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] }, nA = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ProjectUpdate" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectUpdate" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "url" } }, { kind: "Field", name: { kind: "Name", value: "diffMarkdown" } }, { kind: "Field", name: { kind: "Name", value: "diff" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "project" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "editedAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "body" } }, { kind: "Field", name: { kind: "Name", value: "user" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }] } }] }, lv = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ProjectUpdateConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectUpdateConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectUpdate" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] }, Av = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ProjectUpdateInteraction" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectUpdateInteraction" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "projectUpdate" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "readAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "user" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }] } }] }, x9 = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ProjectUpdateInteractionConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectUpdateInteractionConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectUpdateInteraction" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] }, Y9 = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ProjectUpdateInteractionPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectUpdateInteractionPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "projectUpdateInteraction" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] }, mv = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ProjectUpdatePayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectUpdatePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "projectUpdate" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] }, J9 = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ProjectUpdateReminderPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectUpdateReminderPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] }, H9 = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ProjectUpdateWithInteractionPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectUpdateWithInteractionPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "interaction" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "projectUpdate" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] }, uv = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "PushSubscription" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "PushSubscription" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }] } }] }, pv = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "PushSubscriptionPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "PushSubscriptionPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "entity" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PushSubscription" } }] } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] }, j9 = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "PushSubscriptionTestPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "PushSubscriptionTestPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] }, W9 = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "RateLimitResultPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "RateLimitResultPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "period" } }, { kind: "Field", name: { kind: "Name", value: "remainingAmount" } }, { kind: "Field", name: { kind: "Name", value: "requestedAmount" } }, { kind: "Field", name: { kind: "Name", value: "reset" } }, { kind: "Field", name: { kind: "Name", value: "allowedAmount" } }, { kind: "Field", name: { kind: "Name", value: "type" } }] } }] }, z9 = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "RateLimitPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "RateLimitPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "identifier" } }, { kind: "Field", name: { kind: "Name", value: "kind" } }, { kind: "Field", name: { kind: "Name", value: "limits" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "RateLimitResultPayload" } }] } }] } }] }, Z9 = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "Reaction" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Reaction" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "emoji" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "user" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }] } }] }, K9 = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ReactionPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ReactionPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "reaction" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Reaction" } }] } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] }, cv = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "Roadmap" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Roadmap" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "description" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "name" } }, { kind: "Field", name: { kind: "Name", value: "color" } }, { kind: "Field", name: { kind: "Name", value: "slugId" } }, { kind: "Field", name: { kind: "Name", value: "sortOrder" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "creator" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "owner" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }] } }] }, X9 = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "RoadmapConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "RoadmapConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Roadmap" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] }, kv = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "RoadmapPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "RoadmapPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "roadmap" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] }, vv = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "RoadmapToProject" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "RoadmapToProject" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "project" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "roadmap" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "sortOrder" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }] } }] }, $9 = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "RoadmapToProjectConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "RoadmapToProjectConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "RoadmapToProject" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] }, gv = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "RoadmapToProjectPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "RoadmapToProjectPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "roadmapToProject" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] }, eB = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "SsoUrlFromEmailResponse" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "SsoUrlFromEmailResponse" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "samlSsoUrl" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] }, Wa = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "Team" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Team" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "cycleIssueAutoAssignCompleted" } }, { kind: "Field", name: { kind: "Name", value: "cycleLockToActive" } }, { kind: "Field", name: { kind: "Name", value: "cycleIssueAutoAssignStarted" } }, { kind: "Field", name: { kind: "Name", value: "cycleCalenderUrl" } }, { kind: "Field", name: { kind: "Name", value: "upcomingCycleCount" } }, { kind: "Field", name: { kind: "Name", value: "issueCount" } }, { kind: "Field", name: { kind: "Name", value: "autoArchivePeriod" } }, { kind: "Field", name: { kind: "Name", value: "autoClosePeriod" } }, { kind: "Field", name: { kind: "Name", value: "integrationsSettings" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "activeCycle" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "autoCloseStateId" } }, { kind: "Field", name: { kind: "Name", value: "cycleCooldownTime" } }, { kind: "Field", name: { kind: "Name", value: "cycleStartDay" } }, { kind: "Field", name: { kind: "Name", value: "defaultTemplateForMembers" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "defaultTemplateForNonMembers" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "defaultProjectTemplate" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "defaultIssueState" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "cycleDuration" } }, { kind: "Field", name: { kind: "Name", value: "icon" } }, { kind: "Field", name: { kind: "Name", value: "defaultTemplateForMembersId" } }, { kind: "Field", name: { kind: "Name", value: "defaultTemplateForNonMembersId" } }, { kind: "Field", name: { kind: "Name", value: "issueEstimationType" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "color" } }, { kind: "Field", name: { kind: "Name", value: "description" } }, { kind: "Field", name: { kind: "Name", value: "name" } }, { kind: "Field", name: { kind: "Name", value: "key" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "timezone" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "mergeWorkflowState" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "draftWorkflowState" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "startWorkflowState" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "mergeableWorkflowState" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "reviewWorkflowState" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "markedAsDuplicateWorkflowState" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "triageIssueState" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "inviteHash" } }, { kind: "Field", name: { kind: "Name", value: "defaultIssueEstimate" } }, { kind: "Field", name: { kind: "Name", value: "requirePriorityToLeaveTriage" } }, { kind: "Field", name: { kind: "Name", value: "issueOrderingNoPriorityFirst" } }, { kind: "Field", name: { kind: "Name", value: "private" } }, { kind: "Field", name: { kind: "Name", value: "cyclesEnabled" } }, { kind: "Field", name: { kind: "Name", value: "issueEstimationExtended" } }, { kind: "Field", name: { kind: "Name", value: "issueEstimationAllowZero" } }, { kind: "Field", name: { kind: "Name", value: "groupIssueHistory" } }, { kind: "Field", name: { kind: "Name", value: "issueSortOrderDefaultToBottom" } }, { kind: "Field", name: { kind: "Name", value: "slackIssueComments" } }, { kind: "Field", name: { kind: "Name", value: "slackNewIssue" } }, { kind: "Field", name: { kind: "Name", value: "slackIssueStatuses" } }, { kind: "Field", name: { kind: "Name", value: "triageEnabled" } }] } }] }, Rt = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "TeamConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "TeamConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Team" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] }, Qd = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "TeamMembership" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "TeamMembership" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "sortOrder" } }, { kind: "Field", name: { kind: "Name", value: "team" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "user" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "owner" } }] } }] }, Kr = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "TeamMembershipConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "TeamMembershipConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamMembership" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] }, hv = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "TeamMembershipPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "TeamMembershipPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "teamMembership" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] }, aA = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "TeamPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "TeamPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "team" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] }, fv = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "TemplateConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "TemplateConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] }, Nv = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "TemplatePayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "TemplatePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "template" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] }, Ev = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "UploadFileHeader" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "UploadFileHeader" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "key" } }, { kind: "Field", name: { kind: "Name", value: "value" } }] } }] }, yv = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "UploadFile" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "UploadFile" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "assetUrl" } }, { kind: "Field", name: { kind: "Name", value: "contentType" } }, { kind: "Field", name: { kind: "Name", value: "filename" } }, { kind: "Field", name: { kind: "Name", value: "uploadUrl" } }, { kind: "Field", name: { kind: "Name", value: "size" } }, { kind: "Field", name: { kind: "Name", value: "headers" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UploadFileHeader" } }] } }, { kind: "Field", name: { kind: "Name", value: "metaData" } }] } }] }, bv = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "UploadPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "UploadPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "uploadFile" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UploadFile" } }] } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] }, Ut = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "UserAdminPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "UserAdminPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] }, Xn = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "User" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "User" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "statusUntilAt" } }, { kind: "Field", name: { kind: "Name", value: "description" } }, { kind: "Field", name: { kind: "Name", value: "avatarUrl" } }, { kind: "Field", name: { kind: "Name", value: "createdIssueCount" } }, { kind: "Field", name: { kind: "Name", value: "disableReason" } }, { kind: "Field", name: { kind: "Name", value: "statusEmoji" } }, { kind: "Field", name: { kind: "Name", value: "statusLabel" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "lastSeen" } }, { kind: "Field", name: { kind: "Name", value: "timezone" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "displayName" } }, { kind: "Field", name: { kind: "Name", value: "email" } }, { kind: "Field", name: { kind: "Name", value: "name" } }, { kind: "Field", name: { kind: "Name", value: "inviteHash" } }, { kind: "Field", name: { kind: "Name", value: "url" } }, { kind: "Field", name: { kind: "Name", value: "active" } }, { kind: "Field", name: { kind: "Name", value: "guest" } }, { kind: "Field", name: { kind: "Name", value: "admin" } }, { kind: "Field", name: { kind: "Name", value: "isMe" } }, { kind: "Field", name: { kind: "Name", value: "calendarHash" } }] } }] }, za = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "UserConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "UserConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "User" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] }, Sd = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "UserPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "UserPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "user" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] }, Iv = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "UserSettingsFlagPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "UserSettingsFlagPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "flag" } }, { kind: "Field", name: { kind: "Name", value: "value" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] }, iB = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "UserSettingsFlagsResetPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "UserSettingsFlagsResetPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] }, nB = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "UserSettingsPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "UserSettingsPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] }, Cv = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ViewPreferences" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ViewPreferences" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "type" } }, { kind: "Field", name: { kind: "Name", value: "viewType" } }] } }] }, Bv = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ViewPreferencesPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ViewPreferencesPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "viewPreferences" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ViewPreferences" } }] } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] }, tA = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "Webhook" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Webhook" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "secret" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "resourceTypes" } }, { kind: "Field", name: { kind: "Name", value: "team" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "creator" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "url" } }, { kind: "Field", name: { kind: "Name", value: "label" } }, { kind: "Field", name: { kind: "Name", value: "allPublicTeams" } }, { kind: "Field", name: { kind: "Name", value: "enabled" } }] } }] }, Qv = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "WebhookConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "WebhookConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Webhook" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] }, Sv = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "WebhookPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "WebhookPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "webhook" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] }, dA = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "WorkflowState" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "WorkflowState" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "description" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "position" } }, { kind: "Field", name: { kind: "Name", value: "color" } }, { kind: "Field", name: { kind: "Name", value: "name" } }, { kind: "Field", name: { kind: "Name", value: "team" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "type" } }, { kind: "Field", name: { kind: "Name", value: "id" } }] } }] }, Dv = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "WorkflowStateConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "WorkflowStateConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "WorkflowState" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] }, wv = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "WorkflowStatePayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "WorkflowStatePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "workflowState" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] }, aB = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "administrableTeams" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "TeamFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "administrableTeams" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamConnection" } }] } }] } }, ...Rt.definitions, ...Wa.definitions, ...ee.definitions] }, tB = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "apiKeys" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "apiKeys" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ApiKeyConnection" } }] } }] } }, ...$C.definitions, ...P1.definitions, ...ee.definitions] }, dB = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "applicationInfo" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "clientId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "applicationInfo" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "clientId" }, value: { kind: "Variable", name: { kind: "Name", value: "clientId" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Application" } }] } }] } }, ...zC.definitions] }, rB = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "applicationWithAuthorization" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "actor" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "clientId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "scope" } }, type: { kind: "NonNullType", type: { kind: "ListType", type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "applicationWithAuthorization" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "actor" }, value: { kind: "Variable", name: { kind: "Name", value: "actor" } } }, { kind: "Argument", name: { kind: "Name", value: "clientId" }, value: { kind: "Variable", name: { kind: "Name", value: "clientId" } } }, { kind: "Argument", name: { kind: "Name", value: "redirectUri" }, value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } } }, { kind: "Argument", name: { kind: "Name", value: "scope" }, value: { kind: "Variable", name: { kind: "Name", value: "scope" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserAuthorizedApplication" } }] } }] } }, ...WC.definitions] }, sB = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "attachment" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "attachment" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Attachment" } }] } }] } }, ...Vt.definitions] }, oB = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "attachmentIssue" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "attachmentIssue" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Issue" } }] } }] } }, ...Ai.definitions] };
[...Id.definitions, ...Vt.definitions, ...ee.definitions];
[...Ti.definitions, ...Ai.definitions, ...ee.definitions];
[...Cd.definitions, ...Tt.definitions, ...li.definitions, ...Ga.definitions, ...ee.definitions];
[...Xl.definitions, ...Kl.definitions, ...Zl.definitions, ...li.definitions, ...gn.definitions, ...hn.definitions, ...ee.definitions];
[...ja.definitions, ...ba.definitions, ...ee.definitions];
[...Ja.definitions, ...hn.definitions, ...ee.definitions];
[...ja.definitions, ...ba.definitions, ...ee.definitions];
[...za.definitions, ...Xn.definitions, ...ee.definitions];
const lB = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "attachments" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "AttachmentFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "attachments" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentConnection" } }] } }] } }, ...Id.definitions, ...Vt.definitions, ...ee.definitions] }, AB = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "attachmentsForURL" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "url" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "attachmentsForURL" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }, { kind: "Argument", name: { kind: "Name", value: "url" }, value: { kind: "Variable", name: { kind: "Name", value: "url" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentConnection" } }] } }] } }, ...Id.definitions, ...Vt.definitions, ...ee.definitions] }, mB = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "auditEntries" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "AuditEntryFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "auditEntries" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AuditEntryConnection" } }] } }] } }, ...a9.definitions, ...n9.definitions, ...ee.definitions] }, uB = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "auditEntryTypes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "auditEntryTypes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AuditEntryType" } }] } }] } }, ...t9.definitions] }, pB = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "authenticationSessions" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "authenticationSessions" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AuthenticationSessionResponse" } }] } }] } }, ...d9.definitions] }, cB = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "availableUsers" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "availableUsers" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AuthResolverResponse" } }] } }] } }, ...jr.definitions, ...Ma.definitions, ...xa.definitions] }, kB = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "comment" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "comment" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Comment" } }] } }] } }, ...Tt.definitions, ...li.definitions, ...Ga.definitions] };
[...li.definitions];
const vB = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "comment_children" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "CommentFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "comment" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "children" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CommentConnection" } }] } }] } }] } }, ...Cd.definitions, ...Tt.definitions, ...li.definitions, ...Ga.definitions, ...ee.definitions] };
[...Ga.definitions];
const gB = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "comments" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "CommentFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "comments" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CommentConnection" } }] } }] } }, ...Cd.definitions, ...Tt.definitions, ...li.definitions, ...Ga.definitions, ...ee.definitions] }, hB = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "customView" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "customView" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomView" } }] } }] } }, ...O1.definitions] }, fB = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "customViewHasSubscribers" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "customViewHasSubscribers" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomViewHasSubscribersPayload" } }] } }] } }, ...l9.definitions] }, NB = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "customViews" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "customViews" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomViewConnection" } }] } }] } }, ...o9.definitions, ...O1.definitions, ...ee.definitions] }, EB = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "cycle" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "cycle" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Cycle" } }] } }] } }, ...Hl.definitions] }, yB = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "cycle_issues" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "cycle" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issues" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }] } }] } }] } }, ...Ti.definitions, ...Ai.definitions, ...ee.definitions] }, bB = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "cycle_uncompletedIssuesUponClose" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "cycle" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "uncompletedIssuesUponClose" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }] } }] } }] } }, ...Ti.definitions, ...Ai.definitions, ...ee.definitions] }, IB = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "cycles" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "CycleFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "cycles" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CycleConnection" } }] } }] } }, ...M1.definitions, ...Hl.definitions, ...ee.definitions] }, CB = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "document" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "document" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Document" } }] } }] } }, ...jl.definitions] }, BB = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "documentContentHistory" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "documentContentHistory" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentContentHistoryPayload" } }] } }] } }, ...m9.definitions, ...A9.definitions] }, QB = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "documents" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "documents" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentConnection" } }] } }] } }, ...Y1.definitions, ...jl.definitions, ...ee.definitions] }, SB = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "emoji" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "emoji" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Emoji" } }] } }] } }, ...H1.definitions] }, DB = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "emojis" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "emojis" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "EmojiConnection" } }] } }] } }, ...v9.definitions, ...H1.definitions, ...ee.definitions] }, wB = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "favorite" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "favorite" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Favorite" } }] } }] } }, ...Wl.definitions] }, FB = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "favorite_children" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "favorite" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "children" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "FavoriteConnection" } }] } }] } }] } }, ...j1.definitions, ...Wl.definitions, ...ee.definitions] }, VB = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "favorites" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "favorites" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "FavoriteConnection" } }] } }] } }, ...j1.definitions, ...Wl.definitions, ...ee.definitions] }, TB = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "integration" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integration" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Integration" } }] } }] } }, ...zl.definitions] }, _B = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "integrationTemplate" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrationTemplate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationTemplate" } }] } }] } }, ...Z1.definitions] }, RB = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "integrationTemplates" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrationTemplates" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationTemplateConnection" } }] } }] } }, ...y9.definitions, ...Z1.definitions, ...ee.definitions] }, UB = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "integrations" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrations" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationConnection" } }] } }] } }, ...z1.definitions, ...zl.definitions, ...ee.definitions] }, LB = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "integrationsSettings" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrationsSettings" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationsSettings" } }] } }] } }, ...I9.definitions] }, qB = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "issue" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issue" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Issue" } }] } }] } }, ...Ai.definitions] }, PB = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "issue_attachments" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "AttachmentFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issue" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "attachments" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentConnection" } }] } }] } }] } }, ...Id.definitions, ...Vt.definitions, ...ee.definitions] }, OB = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "issue_children" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issue" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "children" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }] } }] } }] } }, ...Ti.definitions, ...Ai.definitions, ...ee.definitions] }, GB = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "issue_comments" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "CommentFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issue" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "comments" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CommentConnection" } }] } }] } }] } }, ...Cd.definitions, ...Tt.definitions, ...li.definitions, ...Ga.definitions, ...ee.definitions] }, MB = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "issue_history" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issue" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "history" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueHistoryConnection" } }] } }] } }] } }, ...Xl.definitions, ...Kl.definitions, ...Zl.definitions, ...li.definitions, ...gn.definitions, ...hn.definitions, ...ee.definitions] }, xB = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "issue_inverseRelations" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issue" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "inverseRelations" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueRelationConnection" } }] } }] } }] } }, ...ja.definitions, ...ba.definitions, ...ee.definitions] }, YB = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "issue_labels" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "IssueLabelFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issue" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "labels" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueLabelConnection" } }] } }] } }] } }, ...Ja.definitions, ...hn.definitions, ...ee.definitions] }, JB = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "issue_relations" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issue" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "relations" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueRelationConnection" } }] } }] } }] } }, ...ja.definitions, ...ba.definitions, ...ee.definitions] }, HB = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "issue_subscribers" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "UserFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeDisabled" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issue" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "subscribers" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "includeDisabled" }, value: { kind: "Variable", name: { kind: "Name", value: "includeDisabled" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserConnection" } }] } }] } }] } }, ...za.definitions, ...Xn.definitions, ...ee.definitions] }, jB = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "issueFigmaFileKeySearch" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "fileKey" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueFigmaFileKeySearch" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "fileKey" }, value: { kind: "Variable", name: { kind: "Name", value: "fileKey" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }] } }] } }, ...Ti.definitions, ...Ai.definitions, ...ee.definitions] }, WB = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "issueFilterSuggestion" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "prompt" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueFilterSuggestion" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "prompt" }, value: { kind: "Variable", name: { kind: "Name", value: "prompt" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueFilterSuggestionPayload" } }] } }] } }, ...B9.definitions] }, zB = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "issueImportCheckCSV" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "csvUrl" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "service" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueImportCheckCSV" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "csvUrl" }, value: { kind: "Variable", name: { kind: "Name", value: "csvUrl" } } }, { kind: "Argument", name: { kind: "Name", value: "service" }, value: { kind: "Variable", name: { kind: "Name", value: "service" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueImportCheckPayload" } }] } }] } }, ...Q9.definitions] }, ZB = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "issueImportFinishGithubOAuth" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "code" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueImportFinishGithubOAuth" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "code" }, value: { kind: "Variable", name: { kind: "Name", value: "code" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "GithubOAuthTokenPayload" } }] } }] } }, ...jC.definitions, ...HC.definitions, ...JC.definitions] }, KB = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "issueLabel" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueLabel" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueLabel" } }] } }] } }, ...hn.definitions] }, XB = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "issueLabel_children" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "IssueLabelFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueLabel" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "children" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueLabelConnection" } }] } }] } }] } }, ...Ja.definitions, ...hn.definitions, ...ee.definitions] }, $B = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "issueLabel_issues" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueLabel" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issues" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }] } }] } }] } }, ...Ti.definitions, ...Ai.definitions, ...ee.definitions] }, e3 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "issueLabels" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "IssueLabelFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueLabels" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueLabelConnection" } }] } }] } }, ...Ja.definitions, ...hn.definitions, ...ee.definitions] }, i3 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "issuePriorityValues" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issuePriorityValues" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssuePriorityValue" } }] } }] } }, ...D9.definitions] }, n3 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "issueRelation" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueRelation" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueRelation" } }] } }] } }, ...ba.definitions] }, a3 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "issueRelations" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueRelations" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueRelationConnection" } }] } }] } }, ...ja.definitions, ...ba.definitions, ...ee.definitions] }, t3 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "issueSearch" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "query" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueSearch" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }, { kind: "Argument", name: { kind: "Name", value: "query" }, value: { kind: "Variable", name: { kind: "Name", value: "query" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }] } }] } }, ...Ti.definitions, ...Ai.definitions, ...ee.definitions] }, d3 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "issueVcsBranchSearch" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "branchName" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueVcsBranchSearch" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "branchName" }, value: { kind: "Variable", name: { kind: "Name", value: "branchName" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Issue" } }] } }] } }, ...Ai.definitions] };
[...Id.definitions, ...Vt.definitions, ...ee.definitions];
[...Ti.definitions, ...Ai.definitions, ...ee.definitions];
[...Cd.definitions, ...Tt.definitions, ...li.definitions, ...Ga.definitions, ...ee.definitions];
[...Xl.definitions, ...Kl.definitions, ...Zl.definitions, ...li.definitions, ...gn.definitions, ...hn.definitions, ...ee.definitions];
[...ja.definitions, ...ba.definitions, ...ee.definitions];
[...Ja.definitions, ...hn.definitions, ...ee.definitions];
[...ja.definitions, ...ba.definitions, ...ee.definitions];
[...za.definitions, ...Xn.definitions, ...ee.definitions];
const r3 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "issues" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issues" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }] } }] } }, ...Ti.definitions, ...Ai.definitions, ...ee.definitions] }, s3 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "notification" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "notification" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Notification" } }] } }] } }, ...Un.definitions, ...li.definitions, ...Vn.definitions, ...xi.definitions, ..._n.definitions, ...Tn.definitions, ...Rn.definitions] }, o3 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "notificationSubscription" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "notificationSubscription" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationSubscription" } }] } }] } }, ...xi.definitions] }, l3 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "notificationSubscriptions" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "notificationSubscriptions" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationSubscriptionConnection" } }] } }] } }, ..._9.definitions, ...xi.definitions, ...ee.definitions] }, A3 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "notifications" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "notifications" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationConnection" } }] } }] } }, ...V9.definitions, ...Un.definitions, ...li.definitions, ...Vn.definitions, ...xi.definitions, ..._n.definitions, ...Tn.definitions, ...Rn.definitions, ...ee.definitions] }, m3 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "organization" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "organization" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Organization" } }] } }] } }, ...YC.definitions, ...q1.definitions] }, u3 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "organization_integrations" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "organization" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrations" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationConnection" } }] } }] } }] } }, ...z1.definitions, ...zl.definitions, ...ee.definitions] }, p3 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "organization_labels" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "IssueLabelFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "organization" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "labels" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueLabelConnection" } }] } }] } }] } }, ...Ja.definitions, ...hn.definitions, ...ee.definitions] };
[...q1.definitions];
const c3 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "organization_teams" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "TeamFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "organization" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "teams" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamConnection" } }] } }] } }] } }, ...Rt.definitions, ...Wa.definitions, ...ee.definitions] }, k3 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "organization_templates" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "organization" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "templates" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TemplateConnection" } }] } }] } }] } }, ...fv.definitions, ...ee.definitions] }, v3 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "organization_users" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeDisabled" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "organization" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "users" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "includeDisabled" }, value: { kind: "Variable", name: { kind: "Name", value: "includeDisabled" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserConnection" } }] } }] } }] } }, ...za.definitions, ...Xn.definitions, ...ee.definitions] }, g3 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "organizationExists" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "urlKey" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "organizationExists" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "urlKey" }, value: { kind: "Variable", name: { kind: "Name", value: "urlKey" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "OrganizationExistsPayload" } }] } }] } }, ...U9.definitions] }, h3 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "organizationInvite" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "organizationInvite" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "OrganizationInvite" } }] } }] } }, ...nv.definitions] }, f3 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "organizationInvites" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "organizationInvites" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "OrganizationInviteConnection" } }] } }] } }, ...L9.definitions, ...nv.definitions, ...ee.definitions] }, N3 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "project" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "project" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Project" } }] } }] } }, ...Zr.definitions] }, E3 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "project_documents" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "project" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "documents" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentConnection" } }] } }] } }] } }, ...Y1.definitions, ...jl.definitions, ...ee.definitions] }, y3 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "project_issues" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "project" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issues" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }] } }] } }] } }, ...Ti.definitions, ...Ai.definitions, ...ee.definitions] }, b3 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "project_links" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "project" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "links" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectLinkConnection" } }] } }] } }] } }, ...tv.definitions, ...eA.definitions, ...ee.definitions] }, I3 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "project_members" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "UserFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeDisabled" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "project" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "members" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "includeDisabled" }, value: { kind: "Variable", name: { kind: "Name", value: "includeDisabled" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserConnection" } }] } }] } }] } }, ...za.definitions, ...Xn.definitions, ...ee.definitions] }, C3 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "project_projectMilestones" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "project" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projectMilestones" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectMilestoneConnection" } }] } }] } }] } }, ...rv.definitions, ...iA.definitions, ...ee.definitions] }, B3 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "project_projectUpdates" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "project" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projectUpdates" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectUpdateConnection" } }] } }] } }] } }, ...lv.definitions, ...nA.definitions, ...ee.definitions] }, Q3 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "project_teams" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "TeamFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "project" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "teams" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamConnection" } }] } }] } }] } }, ...Rt.definitions, ...Wa.definitions, ...ee.definitions] }, S3 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "projectFilterSuggestion" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "prompt" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projectFilterSuggestion" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "prompt" }, value: { kind: "Variable", name: { kind: "Name", value: "prompt" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectFilterSuggestionPayload" } }] } }] } }, ...O9.definitions] }, D3 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "projectLink" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projectLink" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectLink" } }] } }] } }, ...eA.definitions] }, w3 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "projectLinks" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projectLinks" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectLinkConnection" } }] } }] } }, ...tv.definitions, ...eA.definitions, ...ee.definitions] }, F3 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "projectMilestone" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projectMilestone" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectMilestone" } }] } }] } }, ...iA.definitions] }, V3 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "projectMilestones" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "ProjectMilestoneFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projectMilestones" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectMilestoneConnection" } }] } }] } }, ...rv.definitions, ...iA.definitions, ...ee.definitions] }, T3 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "projectUpdate" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projectUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectUpdate" } }] } }] } }, ...nA.definitions] }, _3 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "projectUpdateInteraction" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projectUpdateInteraction" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectUpdateInteraction" } }] } }] } }, ...Av.definitions] }, R3 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "projectUpdateInteractions" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projectUpdateInteractions" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectUpdateInteractionConnection" } }] } }] } }, ...x9.definitions, ...Av.definitions, ...ee.definitions] }, U3 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "projectUpdates" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "ProjectUpdateFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projectUpdates" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectUpdateConnection" } }] } }] } }, ...lv.definitions, ...nA.definitions, ...ee.definitions] }, L3 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "projects" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "ProjectFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projects" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectConnection" } }] } }] } }, ...$l.definitions, ...Zr.definitions, ...ee.definitions] }, q3 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "pushSubscriptionTest" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "pushSubscriptionTest" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PushSubscriptionTestPayload" } }] } }] } }, ...j9.definitions] }, P3 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "rateLimitStatus" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "rateLimitStatus" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "RateLimitPayload" } }] } }] } }, ...z9.definitions, ...W9.definitions] }, O3 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "roadmap" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "roadmap" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Roadmap" } }] } }] } }, ...cv.definitions] }, G3 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "roadmap_projects" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "ProjectFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "roadmap" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projects" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectConnection" } }] } }] } }] } }, ...$l.definitions, ...Zr.definitions, ...ee.definitions] }, M3 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "roadmapToProject" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "roadmapToProject" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "RoadmapToProject" } }] } }] } }, ...vv.definitions] }, x3 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "roadmapToProjects" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "roadmapToProjects" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "RoadmapToProjectConnection" } }] } }] } }, ...$9.definitions, ...vv.definitions, ...ee.definitions] }, Y3 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "roadmaps" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "roadmaps" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "RoadmapConnection" } }] } }] } }, ...X9.definitions, ...cv.definitions, ...ee.definitions] }, J3 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "searchDocuments" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeComments" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "teamId" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "term" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "searchDocuments" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "includeComments" }, value: { kind: "Variable", name: { kind: "Name", value: "includeComments" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }, { kind: "Argument", name: { kind: "Name", value: "teamId" }, value: { kind: "Variable", name: { kind: "Name", value: "teamId" } } }, { kind: "Argument", name: { kind: "Name", value: "term" }, value: { kind: "Variable", name: { kind: "Name", value: "term" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentSearchPayload" } }] } }] } }, ...p9.definitions, ..._t.definitions, ...u9.definitions, ...ee.definitions] };
[..._t.definitions];
const H3 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "searchIssues" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeComments" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "teamId" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "term" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "searchIssues" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "includeComments" }, value: { kind: "Variable", name: { kind: "Name", value: "includeComments" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }, { kind: "Argument", name: { kind: "Name", value: "teamId" }, value: { kind: "Variable", name: { kind: "Name", value: "teamId" } } }, { kind: "Argument", name: { kind: "Name", value: "term" }, value: { kind: "Variable", name: { kind: "Name", value: "term" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueSearchPayload" } }] } }] } }, ...F9.definitions, ..._t.definitions, ...w9.definitions, ...ee.definitions] };
[..._t.definitions];
const j3 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "searchProjects" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeComments" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "teamId" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "term" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "searchProjects" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "includeComments" }, value: { kind: "Variable", name: { kind: "Name", value: "includeComments" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }, { kind: "Argument", name: { kind: "Name", value: "teamId" }, value: { kind: "Variable", name: { kind: "Name", value: "teamId" } } }, { kind: "Argument", name: { kind: "Name", value: "term" }, value: { kind: "Variable", name: { kind: "Name", value: "term" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectSearchPayload" } }] } }] } }, ...M9.definitions, ..._t.definitions, ...G9.definitions, ...ee.definitions] };
[..._t.definitions];
const W3 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "ssoUrlFromEmail" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "email" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "isDesktop" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "ssoUrlFromEmail" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "email" }, value: { kind: "Variable", name: { kind: "Name", value: "email" } } }, { kind: "Argument", name: { kind: "Name", value: "isDesktop" }, value: { kind: "Variable", name: { kind: "Name", value: "isDesktop" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "SsoUrlFromEmailResponse" } }] } }] } }, ...eB.definitions] }, z3 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "team" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "team" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Team" } }] } }] } }, ...Wa.definitions] }, Z3 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "team_cycles" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "CycleFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "team" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "cycles" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CycleConnection" } }] } }] } }] } }, ...M1.definitions, ...Hl.definitions, ...ee.definitions] }, K3 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "team_issues" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "team" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issues" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }] } }] } }] } }, ...Ti.definitions, ...Ai.definitions, ...ee.definitions] }, X3 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "team_labels" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "IssueLabelFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "team" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "labels" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueLabelConnection" } }] } }] } }] } }, ...Ja.definitions, ...hn.definitions, ...ee.definitions] }, $3 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "team_members" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "UserFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeDisabled" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "team" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "members" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "includeDisabled" }, value: { kind: "Variable", name: { kind: "Name", value: "includeDisabled" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserConnection" } }] } }] } }] } }, ...za.definitions, ...Xn.definitions, ...ee.definitions] }, eQ = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "team_memberships" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "team" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "memberships" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamMembershipConnection" } }] } }] } }] } }, ...Kr.definitions, ...Qd.definitions, ...ee.definitions] }, iQ = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "team_projects" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "ProjectFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "team" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projects" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectConnection" } }] } }] } }] } }, ...$l.definitions, ...Zr.definitions, ...ee.definitions] }, nQ = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "team_states" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "WorkflowStateFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "team" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "states" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "WorkflowStateConnection" } }] } }] } }] } }, ...Dv.definitions, ...dA.definitions, ...ee.definitions] }, aQ = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "team_templates" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "team" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "templates" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TemplateConnection" } }] } }] } }] } }, ...fv.definitions, ...ee.definitions] }, tQ = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "team_webhooks" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "team" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "webhooks" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "WebhookConnection" } }] } }] } }] } }, ...Qv.definitions, ...tA.definitions, ...ee.definitions] }, dQ = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "teamMembership" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "teamMembership" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamMembership" } }] } }] } }, ...Qd.definitions] }, rQ = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "teamMemberships" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "teamMemberships" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamMembershipConnection" } }] } }] } }, ...Kr.definitions, ...Qd.definitions, ...ee.definitions] }, sQ = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "teams" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "TeamFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "teams" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamConnection" } }] } }] } }, ...Rt.definitions, ...Wa.definitions, ...ee.definitions] }, oQ = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "template" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "template" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Template" } }] } }] } }, ...Yl.definitions] }, lQ = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "templates" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "templates" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Template" } }] } }] } }, ...Yl.definitions] }, AQ = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "templatesForIntegration" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "integrationType" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "templatesForIntegration" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "integrationType" }, value: { kind: "Variable", name: { kind: "Name", value: "integrationType" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Template" } }] } }] } }, ...Yl.definitions] }, mQ = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "user" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "user" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "User" } }] } }] } }, ...Xn.definitions] }, uQ = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "user_assignedIssues" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "user" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "assignedIssues" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }] } }] } }] } }, ...Ti.definitions, ...Ai.definitions, ...ee.definitions] }, pQ = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "user_createdIssues" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "user" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "createdIssues" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }] } }] } }] } }, ...Ti.definitions, ...Ai.definitions, ...ee.definitions] }, cQ = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "user_teamMemberships" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "user" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "teamMemberships" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamMembershipConnection" } }] } }] } }] } }, ...Kr.definitions, ...Qd.definitions, ...ee.definitions] }, kQ = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "user_teams" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "TeamFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "user" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "teams" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamConnection" } }] } }] } }] } }, ...Rt.definitions, ...Wa.definitions, ...ee.definitions] }, vQ = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "userSettings" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "userSettings" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserSettings" } }] } }] } }, ...XC.definitions] }, gQ = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "users" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "UserFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeDisabled" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "users" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "includeDisabled" }, value: { kind: "Variable", name: { kind: "Name", value: "includeDisabled" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserConnection" } }] } }] } }, ...za.definitions, ...Xn.definitions, ...ee.definitions] }, hQ = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "viewer" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "viewer" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "User" } }] } }] } }, ...Xn.definitions] };
[...Ti.definitions, ...Ai.definitions, ...ee.definitions];
[...Ti.definitions, ...Ai.definitions, ...ee.definitions];
[...Kr.definitions, ...Qd.definitions, ...ee.definitions];
[...Rt.definitions, ...Wa.definitions, ...ee.definitions];
const fQ = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "webhook" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "webhook" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Webhook" } }] } }] } }, ...tA.definitions] }, NQ = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "webhooks" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "webhooks" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "WebhookConnection" } }] } }] } }, ...Qv.definitions, ...tA.definitions, ...ee.definitions] }, EQ = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "workflowState" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "workflowState" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "WorkflowState" } }] } }] } }, ...dA.definitions] }, yQ = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "workflowState_issues" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "workflowState" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issues" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }] } }] } }] } }, ...Ti.definitions, ...Ai.definitions, ...ee.definitions] }, bQ = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "workflowStates" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "WorkflowStateFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "workflowStates" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "WorkflowStateConnection" } }] } }] } }, ...Dv.definitions, ...dA.definitions, ...ee.definitions] }, IQ = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "airbyteIntegrationConnect" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "AirbyteConfigurationInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "airbyteIntegrationConnect" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }] } }] } }, ...Je.definitions] }, CQ = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createApiKey" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "ApiKeyCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "apiKeyCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ApiKeyPayload" } }] } }] } }, ...e9.definitions, ...P1.definitions] }, BQ = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteApiKey" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "apiKeyDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }] } }] } }, ...Te.definitions] }, QQ = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "archiveAttachment" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "attachmentArchive" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentArchivePayload" } }] } }] } }, ...GC.definitions] }, SQ = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createAttachment" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "AttachmentCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "attachmentCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentPayload" } }] } }] } }, ...vn.definitions] }, DQ = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteAttachment" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "attachmentDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }] } }] } }, ...Te.definitions] }, wQ = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "attachmentLinkDiscord" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "channelId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "createAsUser" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "displayIconUrl" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "issueId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "messageId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "url" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "attachmentLinkDiscord" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "channelId" }, value: { kind: "Variable", name: { kind: "Name", value: "channelId" } } }, { kind: "Argument", name: { kind: "Name", value: "createAsUser" }, value: { kind: "Variable", name: { kind: "Name", value: "createAsUser" } } }, { kind: "Argument", name: { kind: "Name", value: "displayIconUrl" }, value: { kind: "Variable", name: { kind: "Name", value: "displayIconUrl" } } }, { kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "issueId" }, value: { kind: "Variable", name: { kind: "Name", value: "issueId" } } }, { kind: "Argument", name: { kind: "Name", value: "messageId" }, value: { kind: "Variable", name: { kind: "Name", value: "messageId" } } }, { kind: "Argument", name: { kind: "Name", value: "url" }, value: { kind: "Variable", name: { kind: "Name", value: "url" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentPayload" } }] } }] } }, ...vn.definitions] }, FQ = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "attachmentLinkFront" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "conversationId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "createAsUser" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "displayIconUrl" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "issueId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "attachmentLinkFront" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "conversationId" }, value: { kind: "Variable", name: { kind: "Name", value: "conversationId" } } }, { kind: "Argument", name: { kind: "Name", value: "createAsUser" }, value: { kind: "Variable", name: { kind: "Name", value: "createAsUser" } } }, { kind: "Argument", name: { kind: "Name", value: "displayIconUrl" }, value: { kind: "Variable", name: { kind: "Name", value: "displayIconUrl" } } }, { kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "issueId" }, value: { kind: "Variable", name: { kind: "Name", value: "issueId" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "FrontAttachmentPayload" } }] } }] } }, ...h9.definitions] }, VQ = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "attachmentLinkGitHubPR" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "createAsUser" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "displayIconUrl" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "issueId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "number" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "Float" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "owner" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "repo" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "url" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "attachmentLinkGitHubPR" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "createAsUser" }, value: { kind: "Variable", name: { kind: "Name", value: "createAsUser" } } }, { kind: "Argument", name: { kind: "Name", value: "displayIconUrl" }, value: { kind: "Variable", name: { kind: "Name", value: "displayIconUrl" } } }, { kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "issueId" }, value: { kind: "Variable", name: { kind: "Name", value: "issueId" } } }, { kind: "Argument", name: { kind: "Name", value: "number" }, value: { kind: "Variable", name: { kind: "Name", value: "number" } } }, { kind: "Argument", name: { kind: "Name", value: "owner" }, value: { kind: "Variable", name: { kind: "Name", value: "owner" } } }, { kind: "Argument", name: { kind: "Name", value: "repo" }, value: { kind: "Variable", name: { kind: "Name", value: "repo" } } }, { kind: "Argument", name: { kind: "Name", value: "url" }, value: { kind: "Variable", name: { kind: "Name", value: "url" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentPayload" } }] } }] } }, ...vn.definitions] }, TQ = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "attachmentLinkGitLabMR" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "createAsUser" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "displayIconUrl" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "issueId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "number" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "Float" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "projectPathWithNamespace" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "url" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "attachmentLinkGitLabMR" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "createAsUser" }, value: { kind: "Variable", name: { kind: "Name", value: "createAsUser" } } }, { kind: "Argument", name: { kind: "Name", value: "displayIconUrl" }, value: { kind: "Variable", name: { kind: "Name", value: "displayIconUrl" } } }, { kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "issueId" }, value: { kind: "Variable", name: { kind: "Name", value: "issueId" } } }, { kind: "Argument", name: { kind: "Name", value: "number" }, value: { kind: "Variable", name: { kind: "Name", value: "number" } } }, { kind: "Argument", name: { kind: "Name", value: "projectPathWithNamespace" }, value: { kind: "Variable", name: { kind: "Name", value: "projectPathWithNamespace" } } }, { kind: "Argument", name: { kind: "Name", value: "url" }, value: { kind: "Variable", name: { kind: "Name", value: "url" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentPayload" } }] } }] } }, ...vn.definitions] }, _Q = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "attachmentLinkIntercom" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "conversationId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "createAsUser" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "displayIconUrl" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "issueId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "attachmentLinkIntercom" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "conversationId" }, value: { kind: "Variable", name: { kind: "Name", value: "conversationId" } } }, { kind: "Argument", name: { kind: "Name", value: "createAsUser" }, value: { kind: "Variable", name: { kind: "Name", value: "createAsUser" } } }, { kind: "Argument", name: { kind: "Name", value: "displayIconUrl" }, value: { kind: "Variable", name: { kind: "Name", value: "displayIconUrl" } } }, { kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "issueId" }, value: { kind: "Variable", name: { kind: "Name", value: "issueId" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentPayload" } }] } }] } }, ...vn.definitions] }, RQ = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "attachmentLinkJiraIssue" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "issueId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "jiraIssueId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "attachmentLinkJiraIssue" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "issueId" }, value: { kind: "Variable", name: { kind: "Name", value: "issueId" } } }, { kind: "Argument", name: { kind: "Name", value: "jiraIssueId" }, value: { kind: "Variable", name: { kind: "Name", value: "jiraIssueId" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentPayload" } }] } }] } }, ...vn.definitions] }, UQ = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "attachmentLinkSlack" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "channel" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "createAsUser" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "displayIconUrl" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "issueId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "latest" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "title" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "ts" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "url" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "attachmentLinkSlack" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "channel" }, value: { kind: "Variable", name: { kind: "Name", value: "channel" } } }, { kind: "Argument", name: { kind: "Name", value: "createAsUser" }, value: { kind: "Variable", name: { kind: "Name", value: "createAsUser" } } }, { kind: "Argument", name: { kind: "Name", value: "displayIconUrl" }, value: { kind: "Variable", name: { kind: "Name", value: "displayIconUrl" } } }, { kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "issueId" }, value: { kind: "Variable", name: { kind: "Name", value: "issueId" } } }, { kind: "Argument", name: { kind: "Name", value: "latest" }, value: { kind: "Variable", name: { kind: "Name", value: "latest" } } }, { kind: "Argument", name: { kind: "Name", value: "title" }, value: { kind: "Variable", name: { kind: "Name", value: "title" } } }, { kind: "Argument", name: { kind: "Name", value: "ts" }, value: { kind: "Variable", name: { kind: "Name", value: "ts" } } }, { kind: "Argument", name: { kind: "Name", value: "url" }, value: { kind: "Variable", name: { kind: "Name", value: "url" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentPayload" } }] } }] } }, ...vn.definitions] }, LQ = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "attachmentLinkURL" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "createAsUser" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "displayIconUrl" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "issueId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "title" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "url" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "attachmentLinkURL" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "createAsUser" }, value: { kind: "Variable", name: { kind: "Name", value: "createAsUser" } } }, { kind: "Argument", name: { kind: "Name", value: "displayIconUrl" }, value: { kind: "Variable", name: { kind: "Name", value: "displayIconUrl" } } }, { kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "issueId" }, value: { kind: "Variable", name: { kind: "Name", value: "issueId" } } }, { kind: "Argument", name: { kind: "Name", value: "title" }, value: { kind: "Variable", name: { kind: "Name", value: "title" } } }, { kind: "Argument", name: { kind: "Name", value: "url" }, value: { kind: "Variable", name: { kind: "Name", value: "url" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentPayload" } }] } }] } }, ...vn.definitions] }, qQ = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "attachmentLinkZendesk" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "createAsUser" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "displayIconUrl" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "issueId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "ticketId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "attachmentLinkZendesk" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "createAsUser" }, value: { kind: "Variable", name: { kind: "Name", value: "createAsUser" } } }, { kind: "Argument", name: { kind: "Name", value: "displayIconUrl" }, value: { kind: "Variable", name: { kind: "Name", value: "displayIconUrl" } } }, { kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "issueId" }, value: { kind: "Variable", name: { kind: "Name", value: "issueId" } } }, { kind: "Argument", name: { kind: "Name", value: "ticketId" }, value: { kind: "Variable", name: { kind: "Name", value: "ticketId" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentPayload" } }] } }] } }, ...vn.definitions] }, PQ = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "attachmentUnsyncSlack" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "attachmentUnsyncSlack" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentPayload" } }] } }] } }, ...vn.definitions] }, OQ = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateAttachment" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "AttachmentUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "attachmentUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentPayload" } }] } }] } }, ...vn.definitions] }, GQ = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createComment" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "CommentCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "commentCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CommentPayload" } }] } }] } }, ...Wr.definitions] }, MQ = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteComment" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "commentDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }] } }] } }, ...Te.definitions] }, xQ = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "commentResolve" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "resolvingCommentId" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "commentResolve" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "resolvingCommentId" }, value: { kind: "Variable", name: { kind: "Name", value: "resolvingCommentId" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CommentPayload" } }] } }] } }, ...Wr.definitions] }, YQ = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "commentUnresolve" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "commentUnresolve" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CommentPayload" } }] } }] } }, ...Wr.definitions] }, JQ = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateComment" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "CommentUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "commentUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CommentPayload" } }] } }] } }, ...Wr.definitions] }, HQ = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createContact" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "ContactCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "contactCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ContactPayload" } }] } }] } }, ...r9.definitions] }, jQ = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createCsvExportReport" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includePrivateTeamIds" } }, type: { kind: "ListType", type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "createCsvExportReport" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "includePrivateTeamIds" }, value: { kind: "Variable", name: { kind: "Name", value: "includePrivateTeamIds" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CreateCsvExportReportPayload" } }] } }] } }, ...s9.definitions] }, WQ = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createOrganizationFromOnboarding" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "CreateOrganizationInput" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "survey" } }, type: { kind: "NamedType", name: { kind: "Name", value: "OnboardingCustomerSurvey" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "createOrganizationFromOnboarding" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }, { kind: "Argument", name: { kind: "Name", value: "survey" }, value: { kind: "Variable", name: { kind: "Name", value: "survey" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CreateOrJoinOrganizationResponse" } }] } }] } }, ...Jl.definitions, ...Ma.definitions, ...xa.definitions] }, zQ = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createProjectUpdateReminder" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "projectId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "userId" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "createProjectUpdateReminder" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "projectId" }, value: { kind: "Variable", name: { kind: "Name", value: "projectId" } } }, { kind: "Argument", name: { kind: "Name", value: "userId" }, value: { kind: "Variable", name: { kind: "Name", value: "userId" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectUpdateReminderPayload" } }] } }] } }, ...J9.definitions] }, ZQ = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createCustomView" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "CustomViewCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "customViewCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomViewPayload" } }] } }] } }, ...G1.definitions] }, KQ = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteCustomView" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "customViewDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }] } }] } }, ...Te.definitions] }, XQ = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateCustomView" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "CustomViewUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "customViewUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomViewPayload" } }] } }] } }, ...G1.definitions] }, $Q = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "archiveCycle" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "cycleArchive" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CycleArchivePayload" } }] } }] } }, ...MC.definitions] }, e5 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createCycle" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "CycleCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "cycleCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CyclePayload" } }] } }] } }, ...x1.definitions] }, i5 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateCycle" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "CycleUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "cycleUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CyclePayload" } }] } }] } }, ...x1.definitions] }, n5 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createDocument" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "DocumentCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "documentCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentPayload" } }] } }] } }, ...J1.definitions] }, a5 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteDocument" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "documentDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }] } }] } }, ...Te.definitions] }, t5 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateDocument" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "DocumentUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "documentUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentPayload" } }] } }] } }, ...J1.definitions] }, d5 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "emailTokenUserAccountAuth" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "TokenUserAccountAuthInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "emailTokenUserAccountAuth" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AuthResolverResponse" } }] } }] } }, ...jr.definitions, ...Ma.definitions, ...xa.definitions] }, r5 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "emailUnsubscribe" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "EmailUnsubscribeInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "emailUnsubscribe" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "EmailUnsubscribePayload" } }] } }] } }, ...c9.definitions] }, s5 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "emailUserAccountAuthChallenge" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "EmailUserAccountAuthChallengeInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "emailUserAccountAuthChallenge" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "EmailUserAccountAuthChallengeResponse" } }] } }] } }, ...k9.definitions] }, o5 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createEmoji" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "EmojiCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "emojiCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "EmojiPayload" } }] } }] } }, ...g9.definitions] }, l5 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteEmoji" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "emojiDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }] } }] } }, ...Te.definitions] }, A5 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createFavorite" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "FavoriteCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "favoriteCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "FavoritePayload" } }] } }] } }, ...W1.definitions] }, m5 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteFavorite" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "favoriteDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }] } }] } }, ...Te.definitions] }, u5 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateFavorite" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "FavoriteUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "favoriteUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "FavoritePayload" } }] } }] } }, ...W1.definitions] }, p5 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "fileUpload" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "contentType" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filename" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "makePublic" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "metaData" } }, type: { kind: "NamedType", name: { kind: "Name", value: "JSON" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "size" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "fileUpload" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "contentType" }, value: { kind: "Variable", name: { kind: "Name", value: "contentType" } } }, { kind: "Argument", name: { kind: "Name", value: "filename" }, value: { kind: "Variable", name: { kind: "Name", value: "filename" } } }, { kind: "Argument", name: { kind: "Name", value: "makePublic" }, value: { kind: "Variable", name: { kind: "Name", value: "makePublic" } } }, { kind: "Argument", name: { kind: "Name", value: "metaData" }, value: { kind: "Variable", name: { kind: "Name", value: "metaData" } } }, { kind: "Argument", name: { kind: "Name", value: "size" }, value: { kind: "Variable", name: { kind: "Name", value: "size" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UploadPayload" } }] } }] } }, ...bv.definitions, ...yv.definitions, ...Ev.definitions] }, c5 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "googleUserAccountAuth" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "GoogleUserAccountAuthInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "googleUserAccountAuth" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AuthResolverResponse" } }] } }] } }, ...jr.definitions, ...Ma.definitions, ...xa.definitions] }, k5 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "imageUploadFromUrl" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "url" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "imageUploadFromUrl" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "url" }, value: { kind: "Variable", name: { kind: "Name", value: "url" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ImageUploadFromUrlPayload" } }] } }] } }, ...N9.definitions] }, v5 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "importFileUpload" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "contentType" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filename" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "metaData" } }, type: { kind: "NamedType", name: { kind: "Name", value: "JSON" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "size" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "importFileUpload" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "contentType" }, value: { kind: "Variable", name: { kind: "Name", value: "contentType" } } }, { kind: "Argument", name: { kind: "Name", value: "filename" }, value: { kind: "Variable", name: { kind: "Name", value: "filename" } } }, { kind: "Argument", name: { kind: "Name", value: "metaData" }, value: { kind: "Variable", name: { kind: "Name", value: "metaData" } } }, { kind: "Argument", name: { kind: "Name", value: "size" }, value: { kind: "Variable", name: { kind: "Name", value: "size" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UploadPayload" } }] } }] } }, ...bv.definitions, ...yv.definitions, ...Ev.definitions] }, g5 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "integrationAsksConnectChannel" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "code" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrationAsksConnectChannel" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "code" }, value: { kind: "Variable", name: { kind: "Name", value: "code" } } }, { kind: "Argument", name: { kind: "Name", value: "redirectUri" }, value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AsksChannelConnectPayload" } }] } }] } }, ...i9.definitions, ...KC.definitions, ...ZC.definitions] }, h5 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteIntegration" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrationDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }] } }] } }, ...Te.definitions] }, f5 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "integrationDiscord" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "code" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrationDiscord" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "code" }, value: { kind: "Variable", name: { kind: "Name", value: "code" } } }, { kind: "Argument", name: { kind: "Name", value: "redirectUri" }, value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }] } }] } }, ...Je.definitions] }, N5 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "integrationFigma" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "code" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrationFigma" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "code" }, value: { kind: "Variable", name: { kind: "Name", value: "code" } } }, { kind: "Argument", name: { kind: "Name", value: "redirectUri" }, value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }] } }] } }, ...Je.definitions] }, E5 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "integrationFront" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "code" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrationFront" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "code" }, value: { kind: "Variable", name: { kind: "Name", value: "code" } } }, { kind: "Argument", name: { kind: "Name", value: "redirectUri" }, value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }] } }] } }, ...Je.definitions] }, y5 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "integrationGitHubPersonal" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "code" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrationGitHubPersonal" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "code" }, value: { kind: "Variable", name: { kind: "Name", value: "code" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }] } }] } }, ...Je.definitions] }, b5 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createIntegrationGithubCommit" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrationGithubCommitCreate" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "GitHubCommitIntegrationPayload" } }] } }] } }, ...f9.definitions] }, I5 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "integrationGithubConnect" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "installationId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrationGithubConnect" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "installationId" }, value: { kind: "Variable", name: { kind: "Name", value: "installationId" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }] } }] } }, ...Je.definitions] }, C5 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "integrationGithubSyncConnect" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "installationId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrationGithubSyncConnect" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "installationId" }, value: { kind: "Variable", name: { kind: "Name", value: "installationId" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }] } }] } }, ...Je.definitions] }, B5 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "integrationGitlabConnect" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "accessToken" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "gitlabUrl" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrationGitlabConnect" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "accessToken" }, value: { kind: "Variable", name: { kind: "Name", value: "accessToken" } } }, { kind: "Argument", name: { kind: "Name", value: "gitlabUrl" }, value: { kind: "Variable", name: { kind: "Name", value: "gitlabUrl" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }] } }] } }, ...Je.definitions] }, Q5 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "integrationGoogleSheets" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "code" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrationGoogleSheets" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "code" }, value: { kind: "Variable", name: { kind: "Name", value: "code" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }] } }] } }, ...Je.definitions] }, S5 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "integrationIntercom" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "code" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "domainUrl" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrationIntercom" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "code" }, value: { kind: "Variable", name: { kind: "Name", value: "code" } } }, { kind: "Argument", name: { kind: "Name", value: "domainUrl" }, value: { kind: "Variable", name: { kind: "Name", value: "domainUrl" } } }, { kind: "Argument", name: { kind: "Name", value: "redirectUri" }, value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }] } }] } }, ...Je.definitions] }, D5 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteIntegrationIntercom" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrationIntercomDelete" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }] } }] } }, ...Je.definitions] }, w5 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateIntegrationIntercomSettings" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "IntercomSettingsInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrationIntercomSettingsUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }] } }] } }, ...Je.definitions] }, F5 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "integrationJiraPersonal" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "code" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrationJiraPersonal" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "code" }, value: { kind: "Variable", name: { kind: "Name", value: "code" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }] } }] } }, ...Je.definitions] }, V5 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "integrationLoom" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrationLoom" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }] } }] } }, ...Je.definitions] }, T5 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "integrationRequest" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "IntegrationRequestInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrationRequest" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationRequestPayload" } }] } }] } }, ...E9.definitions] }, _5 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "integrationSentryConnect" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "code" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "installationId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "organizationSlug" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrationSentryConnect" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "code" }, value: { kind: "Variable", name: { kind: "Name", value: "code" } } }, { kind: "Argument", name: { kind: "Name", value: "installationId" }, value: { kind: "Variable", name: { kind: "Name", value: "installationId" } } }, { kind: "Argument", name: { kind: "Name", value: "organizationSlug" }, value: { kind: "Variable", name: { kind: "Name", value: "organizationSlug" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }] } }] } }, ...Je.definitions] }, R5 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "integrationSlack" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "code" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "shouldUseV2Auth" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrationSlack" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "code" }, value: { kind: "Variable", name: { kind: "Name", value: "code" } } }, { kind: "Argument", name: { kind: "Name", value: "redirectUri" }, value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } } }, { kind: "Argument", name: { kind: "Name", value: "shouldUseV2Auth" }, value: { kind: "Variable", name: { kind: "Name", value: "shouldUseV2Auth" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }] } }] } }, ...Je.definitions] }, U5 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "integrationSlackAsks" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "code" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrationSlackAsks" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "code" }, value: { kind: "Variable", name: { kind: "Name", value: "code" } } }, { kind: "Argument", name: { kind: "Name", value: "redirectUri" }, value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }] } }] } }, ...Je.definitions] }, L5 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "integrationSlackImportEmojis" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "code" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrationSlackImportEmojis" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "code" }, value: { kind: "Variable", name: { kind: "Name", value: "code" } } }, { kind: "Argument", name: { kind: "Name", value: "redirectUri" }, value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }] } }] } }, ...Je.definitions] }, q5 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "integrationSlackOrgProjectUpdatesPost" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "code" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrationSlackOrgProjectUpdatesPost" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "code" }, value: { kind: "Variable", name: { kind: "Name", value: "code" } } }, { kind: "Argument", name: { kind: "Name", value: "redirectUri" }, value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }] } }] } }, ...Je.definitions] }, P5 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "integrationSlackPersonal" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "code" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrationSlackPersonal" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "code" }, value: { kind: "Variable", name: { kind: "Name", value: "code" } } }, { kind: "Argument", name: { kind: "Name", value: "redirectUri" }, value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }] } }] } }, ...Je.definitions] }, O5 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "integrationSlackPost" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "code" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "shouldUseV2Auth" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "teamId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrationSlackPost" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "code" }, value: { kind: "Variable", name: { kind: "Name", value: "code" } } }, { kind: "Argument", name: { kind: "Name", value: "redirectUri" }, value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } } }, { kind: "Argument", name: { kind: "Name", value: "shouldUseV2Auth" }, value: { kind: "Variable", name: { kind: "Name", value: "shouldUseV2Auth" } } }, { kind: "Argument", name: { kind: "Name", value: "teamId" }, value: { kind: "Variable", name: { kind: "Name", value: "teamId" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }] } }] } }, ...Je.definitions] }, G5 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "integrationSlackProjectPost" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "code" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "projectId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "service" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrationSlackProjectPost" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "code" }, value: { kind: "Variable", name: { kind: "Name", value: "code" } } }, { kind: "Argument", name: { kind: "Name", value: "projectId" }, value: { kind: "Variable", name: { kind: "Name", value: "projectId" } } }, { kind: "Argument", name: { kind: "Name", value: "redirectUri" }, value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } } }, { kind: "Argument", name: { kind: "Name", value: "service" }, value: { kind: "Variable", name: { kind: "Name", value: "service" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }] } }] } }, ...Je.definitions] }, M5 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createIntegrationTemplate" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "IntegrationTemplateCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrationTemplateCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationTemplatePayload" } }] } }] } }, ...b9.definitions] }, x5 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteIntegrationTemplate" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrationTemplateDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }] } }] } }, ...Te.definitions] }, Y5 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "integrationUpdateSlack" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "code" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrationUpdateSlack" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "code" }, value: { kind: "Variable", name: { kind: "Name", value: "code" } } }, { kind: "Argument", name: { kind: "Name", value: "redirectUri" }, value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }] } }] } }, ...Je.definitions] }, J5 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "integrationZendesk" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "code" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "scope" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "subdomain" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrationZendesk" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "code" }, value: { kind: "Variable", name: { kind: "Name", value: "code" } } }, { kind: "Argument", name: { kind: "Name", value: "redirectUri" }, value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } } }, { kind: "Argument", name: { kind: "Name", value: "scope" }, value: { kind: "Variable", name: { kind: "Name", value: "scope" } } }, { kind: "Argument", name: { kind: "Name", value: "subdomain" }, value: { kind: "Variable", name: { kind: "Name", value: "subdomain" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }] } }] } }, ...Je.definitions] }, H5 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createIntegrationsSettings" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "IntegrationsSettingsCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrationsSettingsCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationsSettingsPayload" } }] } }] } }, ...K1.definitions] }, j5 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateIntegrationsSettings" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "IntegrationsSettingsUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrationsSettingsUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationsSettingsPayload" } }] } }] } }, ...K1.definitions] }, W5 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "issueAddLabel" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "labelId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueAddLabel" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "labelId" }, value: { kind: "Variable", name: { kind: "Name", value: "labelId" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssuePayload" } }] } }] } }, ...Ha.definitions] }, z5 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "archiveIssue" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "trash" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueArchive" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "trash" }, value: { kind: "Variable", name: { kind: "Name", value: "trash" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueArchivePayload" } }] } }] } }, ...Ml.definitions] }, Z5 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateIssueBatch" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "ids" } }, type: { kind: "NonNullType", type: { kind: "ListType", type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "UUID" } } } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "IssueUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueBatchUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "ids" }, value: { kind: "Variable", name: { kind: "Name", value: "ids" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueBatchPayload" } }] } }] } }, ...C9.definitions, ...Ai.definitions] }, K5 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createIssue" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "IssueCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssuePayload" } }] } }] } }, ...Ha.definitions] }, X5 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteIssue" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueArchivePayload" } }] } }] } }, ...Ml.definitions] }, $5 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "issueImportCreateAsana" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "asanaTeamName" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "asanaToken" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeClosedIssues" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "instantProcess" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "organizationId" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "teamId" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "teamName" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueImportCreateAsana" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "asanaTeamName" }, value: { kind: "Variable", name: { kind: "Name", value: "asanaTeamName" } } }, { kind: "Argument", name: { kind: "Name", value: "asanaToken" }, value: { kind: "Variable", name: { kind: "Name", value: "asanaToken" } } }, { kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "includeClosedIssues" }, value: { kind: "Variable", name: { kind: "Name", value: "includeClosedIssues" } } }, { kind: "Argument", name: { kind: "Name", value: "instantProcess" }, value: { kind: "Variable", name: { kind: "Name", value: "instantProcess" } } }, { kind: "Argument", name: { kind: "Name", value: "organizationId" }, value: { kind: "Variable", name: { kind: "Name", value: "organizationId" } } }, { kind: "Argument", name: { kind: "Name", value: "teamId" }, value: { kind: "Variable", name: { kind: "Name", value: "teamId" } } }, { kind: "Argument", name: { kind: "Name", value: "teamName" }, value: { kind: "Variable", name: { kind: "Name", value: "teamName" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueImportPayload" } }] } }] } }, ...Ya.definitions, ...gn.definitions] }, e8 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "issueImportCreateCSVJira" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "csvUrl" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "jiraEmail" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "jiraHostname" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "jiraToken" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "organizationId" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "teamId" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "teamName" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueImportCreateCSVJira" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "csvUrl" }, value: { kind: "Variable", name: { kind: "Name", value: "csvUrl" } } }, { kind: "Argument", name: { kind: "Name", value: "jiraEmail" }, value: { kind: "Variable", name: { kind: "Name", value: "jiraEmail" } } }, { kind: "Argument", name: { kind: "Name", value: "jiraHostname" }, value: { kind: "Variable", name: { kind: "Name", value: "jiraHostname" } } }, { kind: "Argument", name: { kind: "Name", value: "jiraToken" }, value: { kind: "Variable", name: { kind: "Name", value: "jiraToken" } } }, { kind: "Argument", name: { kind: "Name", value: "organizationId" }, value: { kind: "Variable", name: { kind: "Name", value: "organizationId" } } }, { kind: "Argument", name: { kind: "Name", value: "teamId" }, value: { kind: "Variable", name: { kind: "Name", value: "teamId" } } }, { kind: "Argument", name: { kind: "Name", value: "teamName" }, value: { kind: "Variable", name: { kind: "Name", value: "teamName" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueImportPayload" } }] } }] } }, ...Ya.definitions, ...gn.definitions] }, i8 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "issueImportCreateClubhouse" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "clubhouseGroupName" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "clubhouseToken" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeClosedIssues" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "instantProcess" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "organizationId" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "teamId" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "teamName" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueImportCreateClubhouse" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "clubhouseGroupName" }, value: { kind: "Variable", name: { kind: "Name", value: "clubhouseGroupName" } } }, { kind: "Argument", name: { kind: "Name", value: "clubhouseToken" }, value: { kind: "Variable", name: { kind: "Name", value: "clubhouseToken" } } }, { kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "includeClosedIssues" }, value: { kind: "Variable", name: { kind: "Name", value: "includeClosedIssues" } } }, { kind: "Argument", name: { kind: "Name", value: "instantProcess" }, value: { kind: "Variable", name: { kind: "Name", value: "instantProcess" } } }, { kind: "Argument", name: { kind: "Name", value: "organizationId" }, value: { kind: "Variable", name: { kind: "Name", value: "organizationId" } } }, { kind: "Argument", name: { kind: "Name", value: "teamId" }, value: { kind: "Variable", name: { kind: "Name", value: "teamId" } } }, { kind: "Argument", name: { kind: "Name", value: "teamName" }, value: { kind: "Variable", name: { kind: "Name", value: "teamName" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueImportPayload" } }] } }] } }, ...Ya.definitions, ...gn.definitions] }, n8 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "issueImportCreateGithub" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "githubRepoName" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "githubRepoOwner" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "githubShouldImportOrgProjects" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "githubToken" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeClosedIssues" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "instantProcess" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "organizationId" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "teamId" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "teamName" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueImportCreateGithub" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "githubRepoName" }, value: { kind: "Variable", name: { kind: "Name", value: "githubRepoName" } } }, { kind: "Argument", name: { kind: "Name", value: "githubRepoOwner" }, value: { kind: "Variable", name: { kind: "Name", value: "githubRepoOwner" } } }, { kind: "Argument", name: { kind: "Name", value: "githubShouldImportOrgProjects" }, value: { kind: "Variable", name: { kind: "Name", value: "githubShouldImportOrgProjects" } } }, { kind: "Argument", name: { kind: "Name", value: "githubToken" }, value: { kind: "Variable", name: { kind: "Name", value: "githubToken" } } }, { kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "includeClosedIssues" }, value: { kind: "Variable", name: { kind: "Name", value: "includeClosedIssues" } } }, { kind: "Argument", name: { kind: "Name", value: "instantProcess" }, value: { kind: "Variable", name: { kind: "Name", value: "instantProcess" } } }, { kind: "Argument", name: { kind: "Name", value: "organizationId" }, value: { kind: "Variable", name: { kind: "Name", value: "organizationId" } } }, { kind: "Argument", name: { kind: "Name", value: "teamId" }, value: { kind: "Variable", name: { kind: "Name", value: "teamId" } } }, { kind: "Argument", name: { kind: "Name", value: "teamName" }, value: { kind: "Variable", name: { kind: "Name", value: "teamName" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueImportPayload" } }] } }] } }, ...Ya.definitions, ...gn.definitions] }, a8 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "issueImportCreateJira" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeClosedIssues" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "instantProcess" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "jiraEmail" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "jiraHostname" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "jiraProject" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "jiraToken" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "organizationId" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "teamId" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "teamName" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueImportCreateJira" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "includeClosedIssues" }, value: { kind: "Variable", name: { kind: "Name", value: "includeClosedIssues" } } }, { kind: "Argument", name: { kind: "Name", value: "instantProcess" }, value: { kind: "Variable", name: { kind: "Name", value: "instantProcess" } } }, { kind: "Argument", name: { kind: "Name", value: "jiraEmail" }, value: { kind: "Variable", name: { kind: "Name", value: "jiraEmail" } } }, { kind: "Argument", name: { kind: "Name", value: "jiraHostname" }, value: { kind: "Variable", name: { kind: "Name", value: "jiraHostname" } } }, { kind: "Argument", name: { kind: "Name", value: "jiraProject" }, value: { kind: "Variable", name: { kind: "Name", value: "jiraProject" } } }, { kind: "Argument", name: { kind: "Name", value: "jiraToken" }, value: { kind: "Variable", name: { kind: "Name", value: "jiraToken" } } }, { kind: "Argument", name: { kind: "Name", value: "organizationId" }, value: { kind: "Variable", name: { kind: "Name", value: "organizationId" } } }, { kind: "Argument", name: { kind: "Name", value: "teamId" }, value: { kind: "Variable", name: { kind: "Name", value: "teamId" } } }, { kind: "Argument", name: { kind: "Name", value: "teamName" }, value: { kind: "Variable", name: { kind: "Name", value: "teamName" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueImportPayload" } }] } }] } }, ...Ya.definitions, ...gn.definitions] }, t8 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteIssueImport" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "issueImportId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueImportDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "issueImportId" }, value: { kind: "Variable", name: { kind: "Name", value: "issueImportId" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueImportDeletePayload" } }] } }] } }, ...S9.definitions, ...gn.definitions] }, d8 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "issueImportProcess" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "issueImportId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "mapping" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "JSONObject" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueImportProcess" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "issueImportId" }, value: { kind: "Variable", name: { kind: "Name", value: "issueImportId" } } }, { kind: "Argument", name: { kind: "Name", value: "mapping" }, value: { kind: "Variable", name: { kind: "Name", value: "mapping" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueImportPayload" } }] } }] } }, ...Ya.definitions, ...gn.definitions] }, r8 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateIssueImport" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "IssueImportUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueImportUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueImportPayload" } }] } }] } }, ...Ya.definitions, ...gn.definitions] }, s8 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createIssueLabel" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "IssueLabelCreateInput" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "replaceTeamLabels" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueLabelCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }, { kind: "Argument", name: { kind: "Name", value: "replaceTeamLabels" }, value: { kind: "Variable", name: { kind: "Name", value: "replaceTeamLabels" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueLabelPayload" } }] } }] } }, ...X1.definitions] }, o8 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteIssueLabel" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueLabelDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }] } }] } }, ...Te.definitions] }, l8 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateIssueLabel" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "IssueLabelUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueLabelUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueLabelPayload" } }] } }] } }, ...X1.definitions] }, A8 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createIssueRelation" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "IssueRelationCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueRelationCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueRelationPayload" } }] } }] } }, ...$1.definitions] }, m8 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteIssueRelation" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueRelationDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }] } }] } }, ...Te.definitions] }, u8 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateIssueRelation" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "IssueRelationUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueRelationUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueRelationPayload" } }] } }] } }, ...$1.definitions] }, p8 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "issueReminder" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "reminderAt" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "DateTime" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueReminder" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "reminderAt" }, value: { kind: "Variable", name: { kind: "Name", value: "reminderAt" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssuePayload" } }] } }] } }, ...Ha.definitions] }, c8 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "issueRemoveLabel" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "labelId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueRemoveLabel" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "labelId" }, value: { kind: "Variable", name: { kind: "Name", value: "labelId" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssuePayload" } }] } }] } }, ...Ha.definitions] }, k8 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "issueSubscribe" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "userId" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueSubscribe" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "userId" }, value: { kind: "Variable", name: { kind: "Name", value: "userId" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssuePayload" } }] } }] } }, ...Ha.definitions] }, v8 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "unarchiveIssue" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueUnarchive" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueArchivePayload" } }] } }] } }, ...Ml.definitions] }, g8 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "issueUnsubscribe" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "userId" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueUnsubscribe" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "userId" }, value: { kind: "Variable", name: { kind: "Name", value: "userId" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssuePayload" } }] } }] } }, ...Ha.definitions] }, h8 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateIssue" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "IssueUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssuePayload" } }] } }] } }, ...Ha.definitions] }, f8 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "joinOrganizationFromOnboarding" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "JoinOrganizationInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "joinOrganizationFromOnboarding" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CreateOrJoinOrganizationResponse" } }] } }] } }, ...Jl.definitions, ...Ma.definitions, ...xa.definitions] }, N8 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "leaveOrganization" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "organizationId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "leaveOrganization" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "organizationId" }, value: { kind: "Variable", name: { kind: "Name", value: "organizationId" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CreateOrJoinOrganizationResponse" } }] } }] } }, ...Jl.definitions, ...Ma.definitions, ...xa.definitions] }, E8 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "logout" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "logout" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "LogoutResponse" } }] } }] } }, ...zr.definitions] }, y8 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "logoutAllSessions" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "logoutAllSessions" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "LogoutResponse" } }] } }] } }, ...zr.definitions] }, b8 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "logoutOtherSessions" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "logoutOtherSessions" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "LogoutResponse" } }] } }] } }, ...zr.definitions] }, I8 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "logoutSession" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "sessionId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "logoutSession" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "sessionId" }, value: { kind: "Variable", name: { kind: "Name", value: "sessionId" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "LogoutResponse" } }] } }] } }, ...zr.definitions] }, C8 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "archiveNotification" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "notificationArchive" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationArchivePayload" } }] } }] } }, ...U1.definitions, ...Un.definitions, ...li.definitions, ...Vn.definitions, ...xi.definitions, ..._n.definitions, ...Tn.definitions, ...Rn.definitions] }, B8 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "notificationArchiveAll" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "NotificationEntityInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "notificationArchiveAll" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationBatchActionPayload" } }] } }] } }, ...Bd.definitions, ...Un.definitions, ...li.definitions, ...Vn.definitions, ...xi.definitions, ..._n.definitions, ...Tn.definitions, ...Rn.definitions] }, Q8 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "notificationMarkReadAll" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "NotificationEntityInput" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "readAt" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "DateTime" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "notificationMarkReadAll" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }, { kind: "Argument", name: { kind: "Name", value: "readAt" }, value: { kind: "Variable", name: { kind: "Name", value: "readAt" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationBatchActionPayload" } }] } }] } }, ...Bd.definitions, ...Un.definitions, ...li.definitions, ...Vn.definitions, ...xi.definitions, ..._n.definitions, ...Tn.definitions, ...Rn.definitions] }, S8 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "notificationMarkUnreadAll" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "NotificationEntityInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "notificationMarkUnreadAll" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationBatchActionPayload" } }] } }] } }, ...Bd.definitions, ...Un.definitions, ...li.definitions, ...Vn.definitions, ...xi.definitions, ..._n.definitions, ...Tn.definitions, ...Rn.definitions] }, D8 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "notificationSnoozeAll" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "NotificationEntityInput" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "snoozedUntilAt" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "DateTime" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "notificationSnoozeAll" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }, { kind: "Argument", name: { kind: "Name", value: "snoozedUntilAt" }, value: { kind: "Variable", name: { kind: "Name", value: "snoozedUntilAt" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationBatchActionPayload" } }] } }] } }, ...Bd.definitions, ...Un.definitions, ...li.definitions, ...Vn.definitions, ...xi.definitions, ..._n.definitions, ...Tn.definitions, ...Rn.definitions] }, w8 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createNotificationSubscription" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "NotificationSubscriptionCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "notificationSubscriptionCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationSubscriptionPayload" } }] } }] } }, ...ev.definitions, ...xi.definitions] }, F8 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteNotificationSubscription" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "notificationSubscriptionDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }] } }] } }, ...Te.definitions] }, V8 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateNotificationSubscription" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "NotificationSubscriptionUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "notificationSubscriptionUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationSubscriptionPayload" } }] } }] } }, ...ev.definitions, ...xi.definitions] }, T8 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "unarchiveNotification" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "notificationUnarchive" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationArchivePayload" } }] } }] } }, ...U1.definitions, ...Un.definitions, ...li.definitions, ...Vn.definitions, ...xi.definitions, ..._n.definitions, ...Tn.definitions, ...Rn.definitions] }, _8 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "notificationUnsnoozeAll" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "NotificationEntityInput" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "unsnoozedAt" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "DateTime" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "notificationUnsnoozeAll" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }, { kind: "Argument", name: { kind: "Name", value: "unsnoozedAt" }, value: { kind: "Variable", name: { kind: "Name", value: "unsnoozedAt" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationBatchActionPayload" } }] } }] } }, ...Bd.definitions, ...Un.definitions, ...li.definitions, ...Vn.definitions, ...xi.definitions, ..._n.definitions, ...Tn.definitions, ...Rn.definitions] }, R8 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateNotification" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "NotificationUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "notificationUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationPayload" } }] } }] } }, ...T9.definitions, ...Un.definitions, ...li.definitions, ...Vn.definitions, ...xi.definitions, ..._n.definitions, ...Tn.definitions, ...Rn.definitions] }, U8 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteOrganizationCancel" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "organizationCancelDelete" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "OrganizationCancelDeletePayload" } }] } }] } }, ...R9.definitions] }, L8 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteOrganization" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "DeleteOrganizationInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "organizationDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "OrganizationDeletePayload" } }] } }] } }, ...iv.definitions] }, q8 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "organizationDeleteChallenge" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "organizationDeleteChallenge" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "OrganizationDeletePayload" } }] } }] } }, ...iv.definitions] }, P8 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteOrganizationDomain" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "organizationDomainDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }] } }] } }, ...Te.definitions] }, O8 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createOrganizationInvite" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "OrganizationInviteCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "organizationInviteCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "OrganizationInvitePayload" } }] } }] } }, ...av.definitions] }, G8 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteOrganizationInvite" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "organizationInviteDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }] } }] } }, ...Te.definitions] }, M8 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateOrganizationInvite" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "OrganizationInviteUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "organizationInviteUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "OrganizationInvitePayload" } }] } }] } }, ...av.definitions] }, x8 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "organizationStartPlusTrial" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "organizationStartPlusTrial" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "OrganizationStartPlusTrialPayload" } }] } }] } }, ...P9.definitions] }, Y8 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateOrganization" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "OrganizationUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "organizationUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "OrganizationPayload" } }] } }] } }, ...q9.definitions] }, J8 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "archiveProject" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "trash" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projectArchive" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "trash" }, value: { kind: "Variable", name: { kind: "Name", value: "trash" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectArchivePayload" } }] } }] } }, ...xl.definitions] }, H8 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createProject" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "ProjectCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projectCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectPayload" } }] } }] } }, ...ov.definitions] }, j8 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteProject" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projectDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectArchivePayload" } }] } }] } }, ...xl.definitions] }, W8 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createProjectLink" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "ProjectLinkCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projectLinkCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectLinkPayload" } }] } }] } }, ...dv.definitions] }, z8 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteProjectLink" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projectLinkDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }] } }] } }, ...Te.definitions] }, Z8 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateProjectLink" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "ProjectLinkUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projectLinkUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectLinkPayload" } }] } }] } }, ...dv.definitions] }, K8 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createProjectMilestone" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "ProjectMilestoneCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projectMilestoneCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectMilestonePayload" } }] } }] } }, ...sv.definitions] }, X8 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteProjectMilestone" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projectMilestoneDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }] } }] } }, ...Te.definitions] }, $8 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateProjectMilestone" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "ProjectMilestoneUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projectMilestoneUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectMilestonePayload" } }] } }] } }, ...sv.definitions] }, eS = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "unarchiveProject" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projectUnarchive" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectArchivePayload" } }] } }] } }, ...xl.definitions] }, iS = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateProject" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "ProjectUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projectUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectPayload" } }] } }] } }, ...ov.definitions] }, nS = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createProjectUpdate" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "ProjectUpdateCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projectUpdateCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectUpdatePayload" } }] } }] } }, ...mv.definitions] }, aS = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteProjectUpdate" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projectUpdateDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }] } }] } }, ...Te.definitions] }, tS = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createProjectUpdateInteraction" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "ProjectUpdateInteractionCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projectUpdateInteractionCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectUpdateInteractionPayload" } }] } }] } }, ...Y9.definitions] }, dS = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "projectUpdateMarkAsRead" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projectUpdateMarkAsRead" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectUpdateWithInteractionPayload" } }] } }] } }, ...H9.definitions] }, rS = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateProjectUpdate" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "ProjectUpdateUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projectUpdateUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectUpdatePayload" } }] } }] } }, ...mv.definitions] }, sS = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createPushSubscription" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "PushSubscriptionCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "pushSubscriptionCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PushSubscriptionPayload" } }] } }] } }, ...pv.definitions, ...uv.definitions] }, oS = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deletePushSubscription" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "pushSubscriptionDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PushSubscriptionPayload" } }] } }] } }, ...pv.definitions, ...uv.definitions] }, lS = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createReaction" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "ReactionCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "reactionCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ReactionPayload" } }] } }] } }, ...K9.definitions, ...Z9.definitions] }, AS = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteReaction" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "reactionDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }] } }] } }, ...Te.definitions] }, mS = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "refreshGoogleSheetsData" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "refreshGoogleSheetsData" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }] } }] } }, ...Je.definitions] }, uS = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "resendOrganizationInvite" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "resendOrganizationInvite" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }] } }] } }, ...Te.definitions] }, pS = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "archiveRoadmap" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "roadmapArchive" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "RoadmapArchivePayload" } }] } }] } }, ...L1.definitions] }, cS = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createRoadmap" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "RoadmapCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "roadmapCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "RoadmapPayload" } }] } }] } }, ...kv.definitions] }, kS = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteRoadmap" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "roadmapDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }] } }] } }, ...Te.definitions] }, vS = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createRoadmapToProject" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "RoadmapToProjectCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "roadmapToProjectCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "RoadmapToProjectPayload" } }] } }] } }, ...gv.definitions] }, gS = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteRoadmapToProject" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "roadmapToProjectDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }] } }] } }, ...Te.definitions] }, hS = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateRoadmapToProject" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "RoadmapToProjectUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "roadmapToProjectUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "RoadmapToProjectPayload" } }] } }] } }, ...gv.definitions] }, fS = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "unarchiveRoadmap" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "roadmapUnarchive" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "RoadmapArchivePayload" } }] } }] } }, ...L1.definitions] }, NS = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateRoadmap" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "RoadmapUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "roadmapUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "RoadmapPayload" } }] } }] } }, ...kv.definitions] }, ES = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "samlTokenUserAccountAuth" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "TokenUserAccountAuthInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "samlTokenUserAccountAuth" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AuthResolverResponse" } }] } }] } }, ...jr.definitions, ...Ma.definitions, ...xa.definitions] }, yS = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createTeam" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "copySettingsFromTeamId" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "TeamCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "teamCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "copySettingsFromTeamId" }, value: { kind: "Variable", name: { kind: "Name", value: "copySettingsFromTeamId" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamPayload" } }] } }] } }, ...aA.definitions] }, bS = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteTeamCycles" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "teamCyclesDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamPayload" } }] } }] } }, ...aA.definitions] }, IS = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteTeam" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "teamDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }] } }] } }, ...Te.definitions] }, CS = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteTeamKey" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "teamKeyDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }] } }] } }, ...Te.definitions] }, BS = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createTeamMembership" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "TeamMembershipCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "teamMembershipCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamMembershipPayload" } }] } }] } }, ...hv.definitions] }, QS = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteTeamMembership" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "teamMembershipDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }] } }] } }, ...Te.definitions] }, SS = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateTeamMembership" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "TeamMembershipUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "teamMembershipUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamMembershipPayload" } }] } }] } }, ...hv.definitions] }, DS = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateTeam" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "TeamUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "teamUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamPayload" } }] } }] } }, ...aA.definitions] }, wS = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createTemplate" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "TemplateCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "templateCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TemplatePayload" } }] } }] } }, ...Nv.definitions] }, FS = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteTemplate" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "templateDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }] } }] } }, ...Te.definitions] }, VS = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateTemplate" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "TemplateUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "templateUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TemplatePayload" } }] } }] } }, ...Nv.definitions] }, TS = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "userDemoteAdmin" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "userDemoteAdmin" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserAdminPayload" } }] } }] } }, ...Ut.definitions] }, _S = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "userDemoteMember" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "userDemoteMember" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserAdminPayload" } }] } }] } }, ...Ut.definitions] }, RS = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "userDiscordConnect" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "code" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "userDiscordConnect" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "code" }, value: { kind: "Variable", name: { kind: "Name", value: "code" } } }, { kind: "Argument", name: { kind: "Name", value: "redirectUri" }, value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserPayload" } }] } }] } }, ...Sd.definitions] }, US = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "userExternalUserDisconnect" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "service" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "userExternalUserDisconnect" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "service" }, value: { kind: "Variable", name: { kind: "Name", value: "service" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserPayload" } }] } }] } }, ...Sd.definitions] }, LS = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateUserFlag" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "flag" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "UserFlagType" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "operation" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "UserFlagUpdateOperation" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "userFlagUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "flag" }, value: { kind: "Variable", name: { kind: "Name", value: "flag" } } }, { kind: "Argument", name: { kind: "Name", value: "operation" }, value: { kind: "Variable", name: { kind: "Name", value: "operation" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserSettingsFlagPayload" } }] } }] } }, ...Iv.definitions] }, qS = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "userGitHubConnect" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "code" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "userGitHubConnect" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "code" }, value: { kind: "Variable", name: { kind: "Name", value: "code" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserPayload" } }] } }] } }, ...Sd.definitions] }, PS = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "userJiraConnect" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "code" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "userJiraConnect" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "code" }, value: { kind: "Variable", name: { kind: "Name", value: "code" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserPayload" } }] } }] } }, ...Sd.definitions] }, OS = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "userPromoteAdmin" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "userPromoteAdmin" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserAdminPayload" } }] } }] } }, ...Ut.definitions] }, GS = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "userPromoteMember" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "userPromoteMember" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserAdminPayload" } }] } }] } }, ...Ut.definitions] }, MS = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "userSettingsFlagIncrement" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "flag" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "userSettingsFlagIncrement" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "flag" }, value: { kind: "Variable", name: { kind: "Name", value: "flag" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserSettingsFlagPayload" } }] } }] } }, ...Iv.definitions] }, xS = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "userSettingsFlagsReset" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "flags" } }, type: { kind: "ListType", type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "UserFlagType" } } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "userSettingsFlagsReset" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "flags" }, value: { kind: "Variable", name: { kind: "Name", value: "flags" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserSettingsFlagsResetPayload" } }] } }] } }, ...iB.definitions] }, YS = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateUserSettings" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "UserSettingsUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "userSettingsUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserSettingsPayload" } }] } }] } }, ...nB.definitions] }, JS = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "suspendUser" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "userSuspend" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserAdminPayload" } }] } }] } }, ...Ut.definitions] }, HS = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "unsuspendUser" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "userUnsuspend" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserAdminPayload" } }] } }] } }, ...Ut.definitions] }, jS = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateUser" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "UserUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "userUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserPayload" } }] } }] } }, ...Sd.definitions] }, WS = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createViewPreferences" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "ViewPreferencesCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "viewPreferencesCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ViewPreferencesPayload" } }] } }] } }, ...Bv.definitions, ...Cv.definitions] }, zS = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteViewPreferences" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "viewPreferencesDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }] } }] } }, ...Te.definitions] }, ZS = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateViewPreferences" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "ViewPreferencesUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "viewPreferencesUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ViewPreferencesPayload" } }] } }] } }, ...Bv.definitions, ...Cv.definitions] }, KS = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createWebhook" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "WebhookCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "webhookCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "WebhookPayload" } }] } }] } }, ...Sv.definitions] }, XS = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteWebhook" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "webhookDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }] } }] } }, ...Te.definitions] }, $S = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateWebhook" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "WebhookUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "webhookUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "WebhookPayload" } }] } }] } }, ...Sv.definitions] }, e7 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "archiveWorkflowState" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "workflowStateArchive" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "WorkflowStateArchivePayload" } }] } }] } }, ...xC.definitions] }, i7 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createWorkflowState" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "WorkflowStateCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "workflowStateCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "WorkflowStatePayload" } }] } }] } }, ...wv.definitions] }, n7 = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateWorkflowState" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "WorkflowStateUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "workflowStateUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "WorkflowStatePayload" } }] } }] } }, ...wv.definitions] };
class p {
  constructor(e) {
    this._request = e;
  }
}
function de(n) {
  var e, i;
  return Object.assign(Object.assign({}, n), { first: (e = n.first) !== null && e !== void 0 ? e : n.after ? 50 : void 0, last: (i = n.last) !== null && i !== void 0 ? i : n.before ? 50 : void 0 });
}
class a7 extends p {
  constructor(e) {
    super(e), this.pageInfo = new ye(e, { hasNextPage: !1, hasPreviousPage: !1, __typename: "PageInfo" }), this.nodes = [];
  }
}
class De extends a7 {
  constructor(e, i, a, t) {
    super(e), this._fetch = i, this.nodes = a, this.pageInfo = t;
  }
  _appendNodes(e) {
    var i;
    this.nodes = e ? [...(i = this.nodes) !== null && i !== void 0 ? i : [], ...e] : this.nodes;
  }
  _prependNodes(e) {
    var i;
    this.nodes = e ? [...e, ...(i = this.nodes) !== null && i !== void 0 ? i : []] : this.nodes;
  }
  _appendPageInfo(e) {
    var i, a;
    this.pageInfo && (this.pageInfo.endCursor = (i = e == null ? void 0 : e.endCursor) !== null && i !== void 0 ? i : this.pageInfo.startCursor, this.pageInfo.hasNextPage = (a = e == null ? void 0 : e.hasNextPage) !== null && a !== void 0 ? a : this.pageInfo.hasNextPage);
  }
  _prependPageInfo(e) {
    var i, a;
    this.pageInfo && (this.pageInfo.startCursor = (i = e == null ? void 0 : e.startCursor) !== null && i !== void 0 ? i : this.pageInfo.startCursor, this.pageInfo.hasPreviousPage = (a = e == null ? void 0 : e.hasPreviousPage) !== null && a !== void 0 ? a : this.pageInfo.hasPreviousPage);
  }
  fetchNext() {
    var e, i;
    return f(this, void 0, void 0, function* () {
      if (!((e = this.pageInfo) === null || e === void 0) && e.hasNextPage) {
        const a = yield this._fetch({ after: (i = this.pageInfo) === null || i === void 0 ? void 0 : i.endCursor });
        this._appendNodes(a == null ? void 0 : a.nodes), this._appendPageInfo(a == null ? void 0 : a.pageInfo);
      }
      return Promise.resolve(this);
    });
  }
  fetchPrevious() {
    var e, i;
    return f(this, void 0, void 0, function* () {
      if (!((e = this.pageInfo) === null || e === void 0) && e.hasPreviousPage) {
        const a = yield this._fetch({ before: (i = this.pageInfo) === null || i === void 0 ? void 0 : i.startCursor });
        this._prependNodes(a == null ? void 0 : a.nodes), this._prependPageInfo(a == null ? void 0 : a.pageInfo);
      }
      return Promise.resolve(this);
    });
  }
}
function C(n) {
  try {
    return n ? new Date(n) : void 0;
  } catch {
    return;
  }
}
function ri(n) {
  try {
    return n ? JSON.parse(n) : void 0;
  } catch {
    return;
  }
}
class Lt extends p {
  constructor(e, i) {
    var a, t, d, r;
    super(e), this.avatarUrl = (a = i.avatarUrl) !== null && a !== void 0 ? a : void 0, this.id = i.id, this.name = (t = i.name) !== null && t !== void 0 ? t : void 0, this.subType = (d = i.subType) !== null && d !== void 0 ? d : void 0, this.type = i.type, this.userDisplayName = (r = i.userDisplayName) !== null && r !== void 0 ? r : void 0;
  }
}
class Fv extends p {
  constructor(e, i) {
    var a, t, d;
    super(e), this.archivedAt = (a = C(i.archivedAt)) !== null && a !== void 0 ? a : void 0, this.createdAt = (t = C(i.createdAt)) !== null && t !== void 0 ? t : /* @__PURE__ */ new Date(), this.id = i.id, this.label = i.label, this.updatedAt = (d = C(i.updatedAt)) !== null && d !== void 0 ? d : /* @__PURE__ */ new Date();
  }
  create(e) {
    return new n0(this._request).fetch(e);
  }
  delete() {
    return new a0(this._request).fetch(this.id);
  }
}
class t7 extends De {
  constructor(e, i, a) {
    super(e, i, a.nodes.map((t) => new Fv(e, t)), new ye(e, a.pageInfo));
  }
}
class d7 extends p {
  constructor(e, i) {
    super(e), this.lastSyncId = i.lastSyncId, this.success = i.success, this.apiKey = new Fv(e, i.apiKey);
  }
}
class r7 extends p {
  constructor(e, i) {
    var a, t;
    super(e), this.clientId = i.clientId, this.description = (a = i.description) !== null && a !== void 0 ? a : void 0, this.developer = i.developer, this.developerUrl = i.developerUrl, this.id = i.id, this.imageUrl = (t = i.imageUrl) !== null && t !== void 0 ? t : void 0, this.name = i.name;
  }
}
class rA extends p {
  constructor(e, i) {
    super(e), this.archive = i.archive, this.databaseVersion = i.databaseVersion, this.includesDependencies = i.includesDependencies, this.totalCount = i.totalCount;
  }
}
class s7 extends p {
  constructor(e, i) {
    var a;
    super(e), this.addBot = i.addBot, this.lastSyncId = i.lastSyncId, this.success = i.success, this.mapping = new ND(e, i.mapping), this._integration = (a = i.integration) !== null && a !== void 0 ? a : void 0;
  }
  get integration() {
    var e, i;
    return !((e = this._integration) === null || e === void 0) && e.id ? new Ud(this._request).fetch((i = this._integration) === null || i === void 0 ? void 0 : i.id) : void 0;
  }
}
class Vv extends p {
  constructor(e, i) {
    var a, t, d, r, o, s, A, l;
    super(e), this.archivedAt = (a = C(i.archivedAt)) !== null && a !== void 0 ? a : void 0, this.createdAt = (t = C(i.createdAt)) !== null && t !== void 0 ? t : /* @__PURE__ */ new Date(), this.groupBySource = i.groupBySource, this.id = i.id, this.metadata = (d = ri(i.metadata)) !== null && d !== void 0 ? d : {}, this.source = (r = ri(i.source)) !== null && r !== void 0 ? r : void 0, this.sourceType = (o = i.sourceType) !== null && o !== void 0 ? o : void 0, this.subtitle = (s = i.subtitle) !== null && s !== void 0 ? s : void 0, this.title = i.title, this.updatedAt = (A = C(i.updatedAt)) !== null && A !== void 0 ? A : /* @__PURE__ */ new Date(), this.url = i.url, this._creator = (l = i.creator) !== null && l !== void 0 ? l : void 0, this._issue = i.issue;
  }
  get creator() {
    var e, i;
    return !((e = this._creator) === null || e === void 0) && e.id ? new le(this._request).fetch((i = this._creator) === null || i === void 0 ? void 0 : i.id) : void 0;
  }
  get issue() {
    return new Ii(this._request).fetch(this._issue.id);
  }
  archive() {
    return new t0(this._request).fetch(this.id);
  }
  create(e) {
    return new d0(this._request).fetch(e);
  }
  delete() {
    return new r0(this._request).fetch(this.id);
  }
  update(e) {
    return new s0(this._request).fetch(this.id, e);
  }
}
class o7 extends p {
  constructor(e, i) {
    var a;
    super(e), this.lastSyncId = i.lastSyncId, this.success = i.success, this._entity = (a = i.entity) !== null && a !== void 0 ? a : void 0;
  }
  get entity() {
    var e, i;
    return !((e = this._entity) === null || e === void 0) && e.id ? new is(this._request).fetch((i = this._entity) === null || i === void 0 ? void 0 : i.id) : void 0;
  }
}
class sA extends De {
  constructor(e, i, a) {
    super(e, i, a.nodes.map((t) => new Vv(e, t)), new ye(e, a.pageInfo));
  }
}
class fn extends p {
  constructor(e, i) {
    super(e), this.lastSyncId = i.lastSyncId, this.success = i.success, this._attachment = i.attachment;
  }
  get attachment() {
    return new is(this._request).fetch(this._attachment.id);
  }
}
class l7 extends p {
  constructor(e, i) {
    var a, t, d, r, o, s, A, l, m;
    super(e), this.actorId = (a = i.actorId) !== null && a !== void 0 ? a : void 0, this.archivedAt = (t = C(i.archivedAt)) !== null && t !== void 0 ? t : void 0, this.countryCode = (d = i.countryCode) !== null && d !== void 0 ? d : void 0, this.createdAt = (r = C(i.createdAt)) !== null && r !== void 0 ? r : /* @__PURE__ */ new Date(), this.id = i.id, this.ip = (o = i.ip) !== null && o !== void 0 ? o : void 0, this.metadata = (s = ri(i.metadata)) !== null && s !== void 0 ? s : void 0, this.requestInformation = (A = ri(i.requestInformation)) !== null && A !== void 0 ? A : void 0, this.type = i.type, this.updatedAt = (l = C(i.updatedAt)) !== null && l !== void 0 ? l : /* @__PURE__ */ new Date(), this._actor = (m = i.actor) !== null && m !== void 0 ? m : void 0;
  }
  get actor() {
    var e, i;
    return !((e = this._actor) === null || e === void 0) && e.id ? new le(this._request).fetch((i = this._actor) === null || i === void 0 ? void 0 : i.id) : void 0;
  }
  get organization() {
    return new Zi(this._request).fetch();
  }
}
class A7 extends De {
  constructor(e, i, a) {
    super(e, i, a.nodes.map((t) => new l7(e, t)), new ye(e, a.pageInfo));
  }
}
class m7 extends p {
  constructor(e, i) {
    super(e), this.description = i.description, this.type = i.type;
  }
}
class Sr extends p {
  constructor(e, i) {
    var a, t;
    super(e), this.allowedAuthServices = i.allowedAuthServices, this.deletionRequestedAt = (a = C(i.deletionRequestedAt)) !== null && a !== void 0 ? a : void 0, this.id = i.id, this.logoUrl = (t = i.logoUrl) !== null && t !== void 0 ? t : void 0, this.name = i.name, this.previousUrlKeys = i.previousUrlKeys, this.samlEnabled = i.samlEnabled, this.urlKey = i.urlKey, this.userCount = i.userCount;
  }
}
class Xr extends p {
  constructor(e, i) {
    var a, t, d, r;
    super(e), this.allowDomainAccess = (a = i.allowDomainAccess) !== null && a !== void 0 ? a : void 0, this.email = (t = i.email) !== null && t !== void 0 ? t : void 0, this.id = i.id, this.lastUsedOrganizationId = (d = i.lastUsedOrganizationId) !== null && d !== void 0 ? d : void 0, this.token = (r = i.token) !== null && r !== void 0 ? r : void 0, this.availableOrganizations = i.availableOrganizations ? i.availableOrganizations.map((o) => new Sr(e, o)) : void 0, this.lockedOrganizations = i.lockedOrganizations ? i.lockedOrganizations.map((o) => new Sr(e, o)) : void 0, this.users = i.users.map((o) => new Tv(e, o));
  }
}
class Tv extends p {
  constructor(e, i) {
    var a;
    super(e), this.avatarUrl = (a = i.avatarUrl) !== null && a !== void 0 ? a : void 0, this.displayName = i.displayName, this.email = i.email, this.id = i.id, this.name = i.name, this.organization = new Sr(e, i.organization);
  }
}
class u7 extends p {
  constructor(e, i) {
    var a, t, d, r, o, s, A, l, m, u, c, k;
    super(e), this.browserType = (a = i.browserType) !== null && a !== void 0 ? a : void 0, this.client = (t = i.client) !== null && t !== void 0 ? t : void 0, this.countryCodes = i.countryCodes, this.createdAt = (d = C(i.createdAt)) !== null && d !== void 0 ? d : /* @__PURE__ */ new Date(), this.id = i.id, this.ip = (r = i.ip) !== null && r !== void 0 ? r : void 0, this.isCurrentSession = i.isCurrentSession, this.lastActiveAt = (o = C(i.lastActiveAt)) !== null && o !== void 0 ? o : void 0, this.location = (s = i.location) !== null && s !== void 0 ? s : void 0, this.locationCity = (A = i.locationCity) !== null && A !== void 0 ? A : void 0, this.locationCountry = (l = i.locationCountry) !== null && l !== void 0 ? l : void 0, this.locationCountryCode = (m = i.locationCountryCode) !== null && m !== void 0 ? m : void 0, this.name = i.name, this.operatingSystem = (u = i.operatingSystem) !== null && u !== void 0 ? u : void 0, this.updatedAt = (c = C(i.updatedAt)) !== null && c !== void 0 ? c : /* @__PURE__ */ new Date(), this.userAgent = (k = i.userAgent) !== null && k !== void 0 ? k : void 0;
  }
}
class _v extends p {
  constructor(e, i) {
    var a, t, d, r, o, s, A, l, m, u;
    super(e), this.archivedAt = (a = C(i.archivedAt)) !== null && a !== void 0 ? a : void 0, this.body = i.body, this.createdAt = (t = C(i.createdAt)) !== null && t !== void 0 ? t : /* @__PURE__ */ new Date(), this.editedAt = (d = C(i.editedAt)) !== null && d !== void 0 ? d : void 0, this.id = i.id, this.reactionData = (r = ri(i.reactionData)) !== null && r !== void 0 ? r : {}, this.resolvedAt = (o = C(i.resolvedAt)) !== null && o !== void 0 ? o : void 0, this.updatedAt = (s = C(i.updatedAt)) !== null && s !== void 0 ? s : /* @__PURE__ */ new Date(), this.url = i.url, this.botActor = i.botActor ? new Lt(e, i.botActor) : void 0, this.documentContent = i.documentContent ? new h7(e, i.documentContent) : void 0, this._issue = i.issue, this._parent = (A = i.parent) !== null && A !== void 0 ? A : void 0, this._resolvingComment = (l = i.resolvingComment) !== null && l !== void 0 ? l : void 0, this._resolvingUser = (m = i.resolvingUser) !== null && m !== void 0 ? m : void 0, this._user = (u = i.user) !== null && u !== void 0 ? u : void 0;
  }
  get issue() {
    return new Ii(this._request).fetch(this._issue.id);
  }
  get parent() {
    var e, i;
    return !((e = this._parent) === null || e === void 0) && e.id ? new pd(this._request).fetch((i = this._parent) === null || i === void 0 ? void 0 : i.id) : void 0;
  }
  get resolvingComment() {
    var e, i;
    return !((e = this._resolvingComment) === null || e === void 0) && e.id ? new pd(this._request).fetch((i = this._resolvingComment) === null || i === void 0 ? void 0 : i.id) : void 0;
  }
  get resolvingUser() {
    var e, i;
    return !((e = this._resolvingUser) === null || e === void 0) && e.id ? new le(this._request).fetch((i = this._resolvingUser) === null || i === void 0 ? void 0 : i.id) : void 0;
  }
  get user() {
    var e, i;
    return !((e = this._user) === null || e === void 0) && e.id ? new le(this._request).fetch((i = this._user) === null || i === void 0 ? void 0 : i.id) : void 0;
  }
  children(e) {
    return new yV(this._request, this.id, e).fetch(e);
  }
  create(e) {
    return new o0(this._request).fetch(e);
  }
  delete() {
    return new l0(this._request).fetch(this.id);
  }
  update(e) {
    return new A0(this._request).fetch(this.id, e);
  }
}
class oA extends De {
  constructor(e, i, a) {
    super(e, i, a.nodes.map((t) => new _v(e, t)), new ye(e, a.pageInfo));
  }
}
class $r extends p {
  constructor(e, i) {
    super(e), this.lastSyncId = i.lastSyncId, this.success = i.success, this._comment = i.comment;
  }
  get comment() {
    return new pd(this._request).fetch(this._comment.id);
  }
}
class p7 extends p {
  constructor(e, i) {
    super(e), this.success = i.success;
  }
}
class c7 extends p {
  constructor(e, i) {
    super(e), this.success = i.success;
  }
}
class lA extends p {
  constructor(e, i) {
    super(e), this.organization = new Sr(e, i.organization), this.user = new Tv(e, i.user);
  }
}
class Rv extends p {
  constructor(e, i) {
    var a, t, d, r, o, s, A, l, m;
    super(e), this.archivedAt = (a = C(i.archivedAt)) !== null && a !== void 0 ? a : void 0, this.color = (t = i.color) !== null && t !== void 0 ? t : void 0, this.createdAt = (d = C(i.createdAt)) !== null && d !== void 0 ? d : /* @__PURE__ */ new Date(), this.description = (r = i.description) !== null && r !== void 0 ? r : void 0, this.filterData = (o = ri(i.filterData)) !== null && o !== void 0 ? o : {}, this.filters = (s = ri(i.filters)) !== null && s !== void 0 ? s : {}, this.icon = (A = i.icon) !== null && A !== void 0 ? A : void 0, this.id = i.id, this.modelName = i.modelName, this.name = i.name, this.shared = i.shared, this.updatedAt = (l = C(i.updatedAt)) !== null && l !== void 0 ? l : /* @__PURE__ */ new Date(), this._creator = i.creator, this._owner = i.owner, this._team = (m = i.team) !== null && m !== void 0 ? m : void 0;
  }
  get creator() {
    return new le(this._request).fetch(this._creator.id);
  }
  get organization() {
    return new Zi(this._request).fetch();
  }
  get owner() {
    return new le(this._request).fetch(this._owner.id);
  }
  get team() {
    var e, i;
    return !((e = this._team) === null || e === void 0) && e.id ? new xe(this._request).fetch((i = this._team) === null || i === void 0 ? void 0 : i.id) : void 0;
  }
  create(e) {
    return new m0(this._request).fetch(e);
  }
  delete() {
    return new u0(this._request).fetch(this.id);
  }
  update(e) {
    return new p0(this._request).fetch(this.id, e);
  }
}
class k7 extends De {
  constructor(e, i, a) {
    super(e, i, a.nodes.map((t) => new Rv(e, t)), new ye(e, a.pageInfo));
  }
}
class v7 extends p {
  constructor(e, i) {
    super(e), this.hasSubscribers = i.hasSubscribers;
  }
}
class Uv extends p {
  constructor(e, i) {
    var a, t, d, r, o, s, A, l;
    super(e), this.active = i.active, this.archivedAt = (a = C(i.archivedAt)) !== null && a !== void 0 ? a : void 0, this.createdAt = (t = C(i.createdAt)) !== null && t !== void 0 ? t : /* @__PURE__ */ new Date(), this.id = i.id, this.notificationSubscriptionTypes = i.notificationSubscriptionTypes, this.updatedAt = (d = C(i.updatedAt)) !== null && d !== void 0 ? d : /* @__PURE__ */ new Date(), this._customView = i.customView, this._cycle = (r = i.cycle) !== null && r !== void 0 ? r : void 0, this._label = (o = i.label) !== null && o !== void 0 ? o : void 0, this._project = (s = i.project) !== null && s !== void 0 ? s : void 0, this._subscriber = i.subscriber, this._team = (A = i.team) !== null && A !== void 0 ? A : void 0, this._user = (l = i.user) !== null && l !== void 0 ? l : void 0;
  }
  get customView() {
    return new Ln(this._request).fetch(this._customView.id);
  }
  get cycle() {
    var e, i;
    return !((e = this._cycle) === null || e === void 0) && e.id ? new Vi(this._request).fetch((i = this._cycle) === null || i === void 0 ? void 0 : i.id) : void 0;
  }
  get label() {
    var e, i;
    return !((e = this._label) === null || e === void 0) && e.id ? new Nn(this._request).fetch((i = this._label) === null || i === void 0 ? void 0 : i.id) : void 0;
  }
  get project() {
    var e, i;
    return !((e = this._project) === null || e === void 0) && e.id ? new Me(this._request).fetch((i = this._project) === null || i === void 0 ? void 0 : i.id) : void 0;
  }
  get subscriber() {
    return new le(this._request).fetch(this._subscriber.id);
  }
  get team() {
    var e, i;
    return !((e = this._team) === null || e === void 0) && e.id ? new xe(this._request).fetch((i = this._team) === null || i === void 0 ? void 0 : i.id) : void 0;
  }
  get user() {
    var e, i;
    return !((e = this._user) === null || e === void 0) && e.id ? new le(this._request).fetch((i = this._user) === null || i === void 0 ? void 0 : i.id) : void 0;
  }
}
class Lv extends p {
  constructor(e, i) {
    super(e), this.lastSyncId = i.lastSyncId, this.success = i.success, this._customView = i.customView;
  }
  get customView() {
    return new Ln(this._request).fetch(this._customView.id);
  }
}
class qv extends p {
  constructor(e, i) {
    var a, t, d, r, o, s, A, l, m;
    super(e), this.archivedAt = (a = C(i.archivedAt)) !== null && a !== void 0 ? a : void 0, this.autoArchivedAt = (t = C(i.autoArchivedAt)) !== null && t !== void 0 ? t : void 0, this.completedAt = (d = C(i.completedAt)) !== null && d !== void 0 ? d : void 0, this.completedIssueCountHistory = i.completedIssueCountHistory, this.completedScopeHistory = i.completedScopeHistory, this.createdAt = (r = C(i.createdAt)) !== null && r !== void 0 ? r : /* @__PURE__ */ new Date(), this.description = (o = i.description) !== null && o !== void 0 ? o : void 0, this.endsAt = (s = C(i.endsAt)) !== null && s !== void 0 ? s : /* @__PURE__ */ new Date(), this.id = i.id, this.inProgressScopeHistory = i.inProgressScopeHistory, this.issueCountHistory = i.issueCountHistory, this.name = (A = i.name) !== null && A !== void 0 ? A : void 0, this.number = i.number, this.progress = i.progress, this.scopeHistory = i.scopeHistory, this.startsAt = (l = C(i.startsAt)) !== null && l !== void 0 ? l : /* @__PURE__ */ new Date(), this.updatedAt = (m = C(i.updatedAt)) !== null && m !== void 0 ? m : /* @__PURE__ */ new Date(), this._team = i.team;
  }
  get team() {
    return new xe(this._request).fetch(this._team.id);
  }
  issues(e) {
    return new bV(this._request, this.id, e).fetch(e);
  }
  uncompletedIssuesUponClose(e) {
    return new IV(this._request, this.id, e).fetch(e);
  }
  archive() {
    return new c0(this._request).fetch(this.id);
  }
  create(e) {
    return new k0(this._request).fetch(e);
  }
  update(e) {
    return new v0(this._request).fetch(this.id, e);
  }
}
class g7 extends p {
  constructor(e, i) {
    var a;
    super(e), this.lastSyncId = i.lastSyncId, this.success = i.success, this._entity = (a = i.entity) !== null && a !== void 0 ? a : void 0;
  }
  get entity() {
    var e, i;
    return !((e = this._entity) === null || e === void 0) && e.id ? new Vi(this._request).fetch((i = this._entity) === null || i === void 0 ? void 0 : i.id) : void 0;
  }
}
class Pv extends De {
  constructor(e, i, a) {
    super(e, i, a.nodes.map((t) => new qv(e, t)), new ye(e, a.pageInfo));
  }
}
class Ov extends p {
  constructor(e, i) {
    var a, t, d, r, o, s, A, l;
    super(e), this.active = i.active, this.archivedAt = (a = C(i.archivedAt)) !== null && a !== void 0 ? a : void 0, this.createdAt = (t = C(i.createdAt)) !== null && t !== void 0 ? t : /* @__PURE__ */ new Date(), this.id = i.id, this.notificationSubscriptionTypes = i.notificationSubscriptionTypes, this.updatedAt = (d = C(i.updatedAt)) !== null && d !== void 0 ? d : /* @__PURE__ */ new Date(), this._customView = (r = i.customView) !== null && r !== void 0 ? r : void 0, this._cycle = i.cycle, this._label = (o = i.label) !== null && o !== void 0 ? o : void 0, this._project = (s = i.project) !== null && s !== void 0 ? s : void 0, this._subscriber = i.subscriber, this._team = (A = i.team) !== null && A !== void 0 ? A : void 0, this._user = (l = i.user) !== null && l !== void 0 ? l : void 0;
  }
  get customView() {
    var e, i;
    return !((e = this._customView) === null || e === void 0) && e.id ? new Ln(this._request).fetch((i = this._customView) === null || i === void 0 ? void 0 : i.id) : void 0;
  }
  get cycle() {
    return new Vi(this._request).fetch(this._cycle.id);
  }
  get label() {
    var e, i;
    return !((e = this._label) === null || e === void 0) && e.id ? new Nn(this._request).fetch((i = this._label) === null || i === void 0 ? void 0 : i.id) : void 0;
  }
  get project() {
    var e, i;
    return !((e = this._project) === null || e === void 0) && e.id ? new Me(this._request).fetch((i = this._project) === null || i === void 0 ? void 0 : i.id) : void 0;
  }
  get subscriber() {
    return new le(this._request).fetch(this._subscriber.id);
  }
  get team() {
    var e, i;
    return !((e = this._team) === null || e === void 0) && e.id ? new xe(this._request).fetch((i = this._team) === null || i === void 0 ? void 0 : i.id) : void 0;
  }
  get user() {
    var e, i;
    return !((e = this._user) === null || e === void 0) && e.id ? new le(this._request).fetch((i = this._user) === null || i === void 0 ? void 0 : i.id) : void 0;
  }
}
class Gv extends p {
  constructor(e, i) {
    var a;
    super(e), this.lastSyncId = i.lastSyncId, this.success = i.success, this._cycle = (a = i.cycle) !== null && a !== void 0 ? a : void 0;
  }
  get cycle() {
    var e, i;
    return !((e = this._cycle) === null || e === void 0) && e.id ? new Vi(this._request).fetch((i = this._cycle) === null || i === void 0 ? void 0 : i.id) : void 0;
  }
}
class _e extends p {
  constructor(e, i) {
    super(e), this.entityId = i.entityId, this.lastSyncId = i.lastSyncId, this.success = i.success;
  }
}
class Mv extends p {
  constructor(e, i) {
    var a, t, d, r, o, s, A, l;
    super(e), this.archivedAt = (a = C(i.archivedAt)) !== null && a !== void 0 ? a : void 0, this.color = (t = i.color) !== null && t !== void 0 ? t : void 0, this.content = (d = i.content) !== null && d !== void 0 ? d : void 0, this.contentData = (r = ri(i.contentData)) !== null && r !== void 0 ? r : void 0, this.createdAt = (o = C(i.createdAt)) !== null && o !== void 0 ? o : /* @__PURE__ */ new Date(), this.icon = (s = i.icon) !== null && s !== void 0 ? s : void 0, this.id = i.id, this.slugId = i.slugId, this.title = i.title, this.updatedAt = (A = C(i.updatedAt)) !== null && A !== void 0 ? A : /* @__PURE__ */ new Date(), this._creator = i.creator, this._lastAppliedTemplate = (l = i.lastAppliedTemplate) !== null && l !== void 0 ? l : void 0, this._project = i.project, this._updatedBy = i.updatedBy;
  }
  get creator() {
    return new le(this._request).fetch(this._creator.id);
  }
  get lastAppliedTemplate() {
    var e, i;
    return !((e = this._lastAppliedTemplate) === null || e === void 0) && e.id ? new dn(this._request).fetch((i = this._lastAppliedTemplate) === null || i === void 0 ? void 0 : i.id) : void 0;
  }
  get project() {
    return new Me(this._request).fetch(this._project.id);
  }
  get updatedBy() {
    return new le(this._request).fetch(this._updatedBy.id);
  }
  create(e) {
    return new g0(this._request).fetch(e);
  }
  delete() {
    return new h0(this._request).fetch(this.id);
  }
  update(e) {
    return new f0(this._request).fetch(this.id, e);
  }
}
class xv extends De {
  constructor(e, i, a) {
    super(e, i, a.nodes.map((t) => new Mv(e, t)), new ye(e, a.pageInfo));
  }
}
class h7 extends p {
  constructor(e, i) {
    var a, t, d, r, o, s, A, l, m;
    super(e), this.archivedAt = (a = C(i.archivedAt)) !== null && a !== void 0 ? a : void 0, this.content = (t = i.content) !== null && t !== void 0 ? t : void 0, this.contentState = (d = i.contentState) !== null && d !== void 0 ? d : void 0, this.createdAt = (r = C(i.createdAt)) !== null && r !== void 0 ? r : /* @__PURE__ */ new Date(), this.id = i.id, this.restoredAt = (o = C(i.restoredAt)) !== null && o !== void 0 ? o : void 0, this.updatedAt = (s = C(i.updatedAt)) !== null && s !== void 0 ? s : /* @__PURE__ */ new Date(), this._document = (A = i.document) !== null && A !== void 0 ? A : void 0, this._issue = (l = i.issue) !== null && l !== void 0 ? l : void 0, this._project = (m = i.project) !== null && m !== void 0 ? m : void 0;
  }
  get document() {
    var e, i;
    return !((e = this._document) === null || e === void 0) && e.id ? new ns(this._request).fetch((i = this._document) === null || i === void 0 ? void 0 : i.id) : void 0;
  }
  get issue() {
    var e, i;
    return !((e = this._issue) === null || e === void 0) && e.id ? new Ii(this._request).fetch((i = this._issue) === null || i === void 0 ? void 0 : i.id) : void 0;
  }
  get project() {
    var e, i;
    return !((e = this._project) === null || e === void 0) && e.id ? new Me(this._request).fetch((i = this._project) === null || i === void 0 ? void 0 : i.id) : void 0;
  }
}
class f7 extends p {
  constructor(e, i) {
    super(e), this.success = i.success, this.history = i.history ? i.history.map((a) => new N7(e, a)) : void 0;
  }
}
class N7 extends p {
  constructor(e, i) {
    var a, t, d;
    super(e), this.actorIds = (a = i.actorIds) !== null && a !== void 0 ? a : void 0, this.contentDataSnapshotAt = (t = C(i.contentDataSnapshotAt)) !== null && t !== void 0 ? t : /* @__PURE__ */ new Date(), this.createdAt = (d = C(i.createdAt)) !== null && d !== void 0 ? d : /* @__PURE__ */ new Date(), this.id = i.id;
  }
}
class Yv extends p {
  constructor(e, i) {
    super(e), this.lastSyncId = i.lastSyncId, this.success = i.success, this._document = i.document;
  }
  get document() {
    return new ns(this._request).fetch(this._document.id);
  }
}
class E7 extends p {
  constructor(e, i) {
    super(e), this.totalCount = i.totalCount, this.archivePayload = new rA(e, i.archivePayload), this.pageInfo = new ye(e, i.pageInfo), this.nodes = i.nodes.map((a) => new y7(e, a));
  }
}
class y7 extends p {
  constructor(e, i) {
    var a, t, d, r, o, s, A, l, m;
    super(e), this.archivedAt = (a = C(i.archivedAt)) !== null && a !== void 0 ? a : void 0, this.color = (t = i.color) !== null && t !== void 0 ? t : void 0, this.content = (d = i.content) !== null && d !== void 0 ? d : void 0, this.contentData = (r = ri(i.contentData)) !== null && r !== void 0 ? r : void 0, this.createdAt = (o = C(i.createdAt)) !== null && o !== void 0 ? o : /* @__PURE__ */ new Date(), this.icon = (s = i.icon) !== null && s !== void 0 ? s : void 0, this.id = i.id, this.metadata = (A = ri(i.metadata)) !== null && A !== void 0 ? A : {}, this.slugId = i.slugId, this.title = i.title, this.updatedAt = (l = C(i.updatedAt)) !== null && l !== void 0 ? l : /* @__PURE__ */ new Date(), this._creator = i.creator, this._lastAppliedTemplate = (m = i.lastAppliedTemplate) !== null && m !== void 0 ? m : void 0, this._project = i.project, this._updatedBy = i.updatedBy;
  }
  get creator() {
    return new le(this._request).fetch(this._creator.id);
  }
  get lastAppliedTemplate() {
    var e, i;
    return !((e = this._lastAppliedTemplate) === null || e === void 0) && e.id ? new dn(this._request).fetch((i = this._lastAppliedTemplate) === null || i === void 0 ? void 0 : i.id) : void 0;
  }
  get project() {
    return new Me(this._request).fetch(this._project.id);
  }
  get updatedBy() {
    return new le(this._request).fetch(this._updatedBy.id);
  }
}
class b7 extends p {
  constructor(e, i) {
    super(e), this.success = i.success;
  }
}
class I7 extends p {
  constructor(e, i) {
    super(e), this.authType = i.authType, this.success = i.success;
  }
}
class Jv extends p {
  constructor(e, i) {
    var a, t, d;
    super(e), this.archivedAt = (a = C(i.archivedAt)) !== null && a !== void 0 ? a : void 0, this.createdAt = (t = C(i.createdAt)) !== null && t !== void 0 ? t : /* @__PURE__ */ new Date(), this.id = i.id, this.name = i.name, this.source = i.source, this.updatedAt = (d = C(i.updatedAt)) !== null && d !== void 0 ? d : /* @__PURE__ */ new Date(), this.url = i.url, this._creator = i.creator;
  }
  get creator() {
    return new le(this._request).fetch(this._creator.id);
  }
  get organization() {
    return new Zi(this._request).fetch();
  }
  create(e) {
    return new N0(this._request).fetch(e);
  }
  delete() {
    return new E0(this._request).fetch(this.id);
  }
}
class C7 extends De {
  constructor(e, i, a) {
    super(e, i, a.nodes.map((t) => new Jv(e, t)), new ye(e, a.pageInfo));
  }
}
class B7 extends p {
  constructor(e, i) {
    super(e), this.lastSyncId = i.lastSyncId, this.success = i.success, this._emoji = i.emoji;
  }
  get emoji() {
    return new Hg(this._request).fetch(this._emoji.id);
  }
}
class Hv extends p {
  constructor(e, i) {
    var a, t, d, r, o, s, A, l, m, u, c, k, g, N, y, h;
    super(e), this.archivedAt = (a = C(i.archivedAt)) !== null && a !== void 0 ? a : void 0, this.createdAt = (t = C(i.createdAt)) !== null && t !== void 0 ? t : /* @__PURE__ */ new Date(), this.folderName = (d = i.folderName) !== null && d !== void 0 ? d : void 0, this.id = i.id, this.predefinedViewType = (r = i.predefinedViewType) !== null && r !== void 0 ? r : void 0, this.sortOrder = i.sortOrder, this.type = i.type, this.updatedAt = (o = C(i.updatedAt)) !== null && o !== void 0 ? o : /* @__PURE__ */ new Date(), this._customView = (s = i.customView) !== null && s !== void 0 ? s : void 0, this._cycle = (A = i.cycle) !== null && A !== void 0 ? A : void 0, this._document = (l = i.document) !== null && l !== void 0 ? l : void 0, this._issue = (m = i.issue) !== null && m !== void 0 ? m : void 0, this._label = (u = i.label) !== null && u !== void 0 ? u : void 0, this._owner = i.owner, this._parent = (c = i.parent) !== null && c !== void 0 ? c : void 0, this._predefinedViewTeam = (k = i.predefinedViewTeam) !== null && k !== void 0 ? k : void 0, this._project = (g = i.project) !== null && g !== void 0 ? g : void 0, this._projectTeam = (N = i.projectTeam) !== null && N !== void 0 ? N : void 0, this._roadmap = (y = i.roadmap) !== null && y !== void 0 ? y : void 0, this._user = (h = i.user) !== null && h !== void 0 ? h : void 0;
  }
  get customView() {
    var e, i;
    return !((e = this._customView) === null || e === void 0) && e.id ? new Ln(this._request).fetch((i = this._customView) === null || i === void 0 ? void 0 : i.id) : void 0;
  }
  get cycle() {
    var e, i;
    return !((e = this._cycle) === null || e === void 0) && e.id ? new Vi(this._request).fetch((i = this._cycle) === null || i === void 0 ? void 0 : i.id) : void 0;
  }
  get document() {
    var e, i;
    return !((e = this._document) === null || e === void 0) && e.id ? new ns(this._request).fetch((i = this._document) === null || i === void 0 ? void 0 : i.id) : void 0;
  }
  get issue() {
    var e, i;
    return !((e = this._issue) === null || e === void 0) && e.id ? new Ii(this._request).fetch((i = this._issue) === null || i === void 0 ? void 0 : i.id) : void 0;
  }
  get label() {
    var e, i;
    return !((e = this._label) === null || e === void 0) && e.id ? new Nn(this._request).fetch((i = this._label) === null || i === void 0 ? void 0 : i.id) : void 0;
  }
  get owner() {
    return new le(this._request).fetch(this._owner.id);
  }
  get parent() {
    var e, i;
    return !((e = this._parent) === null || e === void 0) && e.id ? new Rd(this._request).fetch((i = this._parent) === null || i === void 0 ? void 0 : i.id) : void 0;
  }
  get predefinedViewTeam() {
    var e, i;
    return !((e = this._predefinedViewTeam) === null || e === void 0) && e.id ? new xe(this._request).fetch((i = this._predefinedViewTeam) === null || i === void 0 ? void 0 : i.id) : void 0;
  }
  get project() {
    var e, i;
    return !((e = this._project) === null || e === void 0) && e.id ? new Me(this._request).fetch((i = this._project) === null || i === void 0 ? void 0 : i.id) : void 0;
  }
  get projectTeam() {
    var e, i;
    return !((e = this._projectTeam) === null || e === void 0) && e.id ? new xe(this._request).fetch((i = this._projectTeam) === null || i === void 0 ? void 0 : i.id) : void 0;
  }
  get roadmap() {
    var e, i;
    return !((e = this._roadmap) === null || e === void 0) && e.id ? new qd(this._request).fetch((i = this._roadmap) === null || i === void 0 ? void 0 : i.id) : void 0;
  }
  get user() {
    var e, i;
    return !((e = this._user) === null || e === void 0) && e.id ? new le(this._request).fetch((i = this._user) === null || i === void 0 ? void 0 : i.id) : void 0;
  }
  children(e) {
    return new CV(this._request, this.id, e).fetch(e);
  }
  create(e) {
    return new y0(this._request).fetch(e);
  }
  delete() {
    return new b0(this._request).fetch(this.id);
  }
  update(e) {
    return new I0(this._request).fetch(this.id, e);
  }
}
class jv extends De {
  constructor(e, i, a) {
    super(e, i, a.nodes.map((t) => new Hv(e, t)), new ye(e, a.pageInfo));
  }
}
class Wv extends p {
  constructor(e, i) {
    super(e), this.lastSyncId = i.lastSyncId, this.success = i.success, this._favorite = i.favorite;
  }
  get favorite() {
    return new Rd(this._request).fetch(this._favorite.id);
  }
}
class Q7 extends p {
  constructor(e, i) {
    super(e), this.lastSyncId = i.lastSyncId, this.success = i.success;
  }
}
class S7 extends p {
  constructor(e, i) {
    var a;
    super(e), this.lastSyncId = i.lastSyncId, this.success = i.success, this.webhookSecret = i.webhookSecret, this._integration = (a = i.integration) !== null && a !== void 0 ? a : void 0;
  }
  get integration() {
    var e, i;
    return !((e = this._integration) === null || e === void 0) && e.id ? new Ud(this._request).fetch((i = this._integration) === null || i === void 0 ? void 0 : i.id) : void 0;
  }
}
class D7 extends p {
  constructor(e, i) {
    var a;
    super(e), this.token = (a = i.token) !== null && a !== void 0 ? a : void 0, this.organizations = i.organizations ? i.organizations.map((t) => new w7(e, t)) : void 0;
  }
}
class w7 extends p {
  constructor(e, i) {
    var a;
    super(e), this.id = i.id, this.isPersonal = (a = i.isPersonal) !== null && a !== void 0 ? a : void 0, this.login = i.login, this.name = i.name, this.repositories = i.repositories.map((t) => new F7(e, t));
  }
}
class F7 extends p {
  constructor(e, i) {
    super(e), this.id = i.id, this.name = i.name;
  }
}
class V7 extends p {
  constructor(e, i) {
    var a;
    super(e), this.lastSyncId = i.lastSyncId, this.success = i.success, this.url = (a = i.url) !== null && a !== void 0 ? a : void 0;
  }
}
class zv extends p {
  constructor(e, i) {
    var a, t, d, r;
    super(e), this.archivedAt = (a = C(i.archivedAt)) !== null && a !== void 0 ? a : void 0, this.createdAt = (t = C(i.createdAt)) !== null && t !== void 0 ? t : /* @__PURE__ */ new Date(), this.id = i.id, this.service = i.service, this.updatedAt = (d = C(i.updatedAt)) !== null && d !== void 0 ? d : /* @__PURE__ */ new Date(), this._creator = i.creator, this._team = (r = i.team) !== null && r !== void 0 ? r : void 0;
  }
  get creator() {
    return new le(this._request).fetch(this._creator.id);
  }
  get organization() {
    return new Zi(this._request).fetch();
  }
  get team() {
    var e, i;
    return !((e = this._team) === null || e === void 0) && e.id ? new xe(this._request).fetch((i = this._team) === null || i === void 0 ? void 0 : i.id) : void 0;
  }
  delete() {
    return new C0(this._request).fetch(this.id);
  }
}
class Zv extends De {
  constructor(e, i, a) {
    super(e, i, a.nodes.map((t) => new zv(e, t)), new ye(e, a.pageInfo));
  }
}
class He extends p {
  constructor(e, i) {
    var a;
    super(e), this.lastSyncId = i.lastSyncId, this.success = i.success, this._integration = (a = i.integration) !== null && a !== void 0 ? a : void 0;
  }
  get integration() {
    var e, i;
    return !((e = this._integration) === null || e === void 0) && e.id ? new Ud(this._request).fetch((i = this._integration) === null || i === void 0 ? void 0 : i.id) : void 0;
  }
}
class T7 extends p {
  constructor(e, i) {
    super(e), this.success = i.success;
  }
}
class Kv extends p {
  constructor(e, i) {
    var a, t, d, r;
    super(e), this.archivedAt = (a = C(i.archivedAt)) !== null && a !== void 0 ? a : void 0, this.createdAt = (t = C(i.createdAt)) !== null && t !== void 0 ? t : /* @__PURE__ */ new Date(), this.foreignEntityId = (d = i.foreignEntityId) !== null && d !== void 0 ? d : void 0, this.id = i.id, this.updatedAt = (r = C(i.updatedAt)) !== null && r !== void 0 ? r : /* @__PURE__ */ new Date(), this._integration = i.integration, this._template = i.template;
  }
  get integration() {
    return new Ud(this._request).fetch(this._integration.id);
  }
  get template() {
    return new dn(this._request).fetch(this._template.id);
  }
  create(e) {
    return new B0(this._request).fetch(e);
  }
  delete() {
    return new Q0(this._request).fetch(this.id);
  }
}
class _7 extends De {
  constructor(e, i, a) {
    super(e, i, a.nodes.map((t) => new Kv(e, t)), new ye(e, a.pageInfo));
  }
}
class R7 extends p {
  constructor(e, i) {
    super(e), this.lastSyncId = i.lastSyncId, this.success = i.success, this._integrationTemplate = i.integrationTemplate;
  }
  get integrationTemplate() {
    return new jg(this._request).fetch(this._integrationTemplate.id);
  }
}
class U7 extends p {
  constructor(e, i) {
    var a, t, d, r, o, s, A, l, m, u, c, k, g, N, y;
    super(e), this.archivedAt = (a = C(i.archivedAt)) !== null && a !== void 0 ? a : void 0, this.createdAt = (t = C(i.createdAt)) !== null && t !== void 0 ? t : /* @__PURE__ */ new Date(), this.id = i.id, this.slackIssueAddedToTriage = (d = i.slackIssueAddedToTriage) !== null && d !== void 0 ? d : void 0, this.slackIssueCreated = (r = i.slackIssueCreated) !== null && r !== void 0 ? r : void 0, this.slackIssueNewComment = (o = i.slackIssueNewComment) !== null && o !== void 0 ? o : void 0, this.slackIssueSlaBreached = (s = i.slackIssueSlaBreached) !== null && s !== void 0 ? s : void 0, this.slackIssueSlaHighRisk = (A = i.slackIssueSlaHighRisk) !== null && A !== void 0 ? A : void 0, this.slackIssueStatusChangedAll = (l = i.slackIssueStatusChangedAll) !== null && l !== void 0 ? l : void 0, this.slackIssueStatusChangedDone = (m = i.slackIssueStatusChangedDone) !== null && m !== void 0 ? m : void 0, this.slackProjectUpdateCreated = (u = i.slackProjectUpdateCreated) !== null && u !== void 0 ? u : void 0, this.slackProjectUpdateCreatedToTeam = (c = i.slackProjectUpdateCreatedToTeam) !== null && c !== void 0 ? c : void 0, this.slackProjectUpdateCreatedToWorkspace = (k = i.slackProjectUpdateCreatedToWorkspace) !== null && k !== void 0 ? k : void 0, this.updatedAt = (g = C(i.updatedAt)) !== null && g !== void 0 ? g : /* @__PURE__ */ new Date(), this._project = (N = i.project) !== null && N !== void 0 ? N : void 0, this._team = (y = i.team) !== null && y !== void 0 ? y : void 0;
  }
  get project() {
    var e, i;
    return !((e = this._project) === null || e === void 0) && e.id ? new Me(this._request).fetch((i = this._project) === null || i === void 0 ? void 0 : i.id) : void 0;
  }
  get team() {
    var e, i;
    return !((e = this._team) === null || e === void 0) && e.id ? new xe(this._request).fetch((i = this._team) === null || i === void 0 ? void 0 : i.id) : void 0;
  }
  create(e) {
    return new S0(this._request).fetch(e);
  }
  update(e) {
    return new D0(this._request).fetch(this.id, e);
  }
}
class Xv extends p {
  constructor(e, i) {
    super(e), this.lastSyncId = i.lastSyncId, this.success = i.success, this._integrationsSettings = i.integrationsSettings;
  }
  get integrationsSettings() {
    return new Ld(this._request).fetch(this._integrationsSettings.id);
  }
}
class Dd extends p {
  constructor(e, i) {
    var a, t, d, r, o, s, A, l, m, u, c, k, g, N, y, h, E, S, b, I, D, B, q, v;
    super(e), this.archivedAt = (a = C(i.archivedAt)) !== null && a !== void 0 ? a : void 0, this.autoArchivedAt = (t = C(i.autoArchivedAt)) !== null && t !== void 0 ? t : void 0, this.autoClosedAt = (d = C(i.autoClosedAt)) !== null && d !== void 0 ? d : void 0, this.boardOrder = i.boardOrder, this.branchName = i.branchName, this.canceledAt = (r = C(i.canceledAt)) !== null && r !== void 0 ? r : void 0, this.completedAt = (o = C(i.completedAt)) !== null && o !== void 0 ? o : void 0, this.createdAt = (s = C(i.createdAt)) !== null && s !== void 0 ? s : /* @__PURE__ */ new Date(), this.customerTicketCount = i.customerTicketCount, this.description = (A = i.description) !== null && A !== void 0 ? A : void 0, this.dueDate = (l = i.dueDate) !== null && l !== void 0 ? l : void 0, this.estimate = (m = i.estimate) !== null && m !== void 0 ? m : void 0, this.id = i.id, this.identifier = i.identifier, this.number = i.number, this.previousIdentifiers = i.previousIdentifiers, this.priority = i.priority, this.priorityLabel = i.priorityLabel, this.snoozedUntilAt = (u = C(i.snoozedUntilAt)) !== null && u !== void 0 ? u : void 0, this.sortOrder = i.sortOrder, this.startedAt = (c = C(i.startedAt)) !== null && c !== void 0 ? c : void 0, this.startedTriageAt = (k = C(i.startedTriageAt)) !== null && k !== void 0 ? k : void 0, this.subIssueSortOrder = (g = i.subIssueSortOrder) !== null && g !== void 0 ? g : void 0, this.title = i.title, this.trashed = (N = i.trashed) !== null && N !== void 0 ? N : void 0, this.triagedAt = (y = C(i.triagedAt)) !== null && y !== void 0 ? y : void 0, this.updatedAt = (h = C(i.updatedAt)) !== null && h !== void 0 ? h : /* @__PURE__ */ new Date(), this.url = i.url, this._assignee = (E = i.assignee) !== null && E !== void 0 ? E : void 0, this._creator = (S = i.creator) !== null && S !== void 0 ? S : void 0, this._cycle = (b = i.cycle) !== null && b !== void 0 ? b : void 0, this._favorite = (I = i.favorite) !== null && I !== void 0 ? I : void 0, this._lastAppliedTemplate = (D = i.lastAppliedTemplate) !== null && D !== void 0 ? D : void 0, this._parent = (B = i.parent) !== null && B !== void 0 ? B : void 0, this._project = (q = i.project) !== null && q !== void 0 ? q : void 0, this._snoozedBy = (v = i.snoozedBy) !== null && v !== void 0 ? v : void 0, this._state = i.state, this._team = i.team;
  }
  get assignee() {
    var e, i;
    return !((e = this._assignee) === null || e === void 0) && e.id ? new le(this._request).fetch((i = this._assignee) === null || i === void 0 ? void 0 : i.id) : void 0;
  }
  get creator() {
    var e, i;
    return !((e = this._creator) === null || e === void 0) && e.id ? new le(this._request).fetch((i = this._creator) === null || i === void 0 ? void 0 : i.id) : void 0;
  }
  get cycle() {
    var e, i;
    return !((e = this._cycle) === null || e === void 0) && e.id ? new Vi(this._request).fetch((i = this._cycle) === null || i === void 0 ? void 0 : i.id) : void 0;
  }
  get favorite() {
    var e, i;
    return !((e = this._favorite) === null || e === void 0) && e.id ? new Rd(this._request).fetch((i = this._favorite) === null || i === void 0 ? void 0 : i.id) : void 0;
  }
  get lastAppliedTemplate() {
    var e, i;
    return !((e = this._lastAppliedTemplate) === null || e === void 0) && e.id ? new dn(this._request).fetch((i = this._lastAppliedTemplate) === null || i === void 0 ? void 0 : i.id) : void 0;
  }
  get parent() {
    var e, i;
    return !((e = this._parent) === null || e === void 0) && e.id ? new Ii(this._request).fetch((i = this._parent) === null || i === void 0 ? void 0 : i.id) : void 0;
  }
  get project() {
    var e, i;
    return !((e = this._project) === null || e === void 0) && e.id ? new Me(this._request).fetch((i = this._project) === null || i === void 0 ? void 0 : i.id) : void 0;
  }
  get snoozedBy() {
    var e, i;
    return !((e = this._snoozedBy) === null || e === void 0) && e.id ? new le(this._request).fetch((i = this._snoozedBy) === null || i === void 0 ? void 0 : i.id) : void 0;
  }
  get state() {
    return new Ui(this._request).fetch(this._state.id);
  }
  get team() {
    return new xe(this._request).fetch(this._team.id);
  }
  attachments(e) {
    return new BV(this._request, this.id, e).fetch(e);
  }
  children(e) {
    return new QV(this._request, this.id, e).fetch(e);
  }
  comments(e) {
    return new SV(this._request, this.id, e).fetch(e);
  }
  history(e) {
    return new DV(this._request, this.id, e).fetch(e);
  }
  inverseRelations(e) {
    return new wV(this._request, this.id, e).fetch(e);
  }
  labels(e) {
    return new FV(this._request, this.id, e).fetch(e);
  }
  relations(e) {
    return new VV(this._request, this.id, e).fetch(e);
  }
  subscribers(e) {
    return new TV(this._request, this.id, e).fetch(e);
  }
  archive(e) {
    return new w0(this._request).fetch(this.id, e);
  }
  create(e) {
    return new F0(this._request).fetch(e);
  }
  delete() {
    return new V0(this._request).fetch(this.id);
  }
  unarchive() {
    return new G0(this._request).fetch(this.id);
  }
  update(e) {
    return new M0(this._request).fetch(this.id, e);
  }
}
class AA extends p {
  constructor(e, i) {
    var a;
    super(e), this.lastSyncId = i.lastSyncId, this.success = i.success, this._entity = (a = i.entity) !== null && a !== void 0 ? a : void 0;
  }
  get entity() {
    var e, i;
    return !((e = this._entity) === null || e === void 0) && e.id ? new Ii(this._request).fetch((i = this._entity) === null || i === void 0 ? void 0 : i.id) : void 0;
  }
}
class L7 extends p {
  constructor(e, i) {
    super(e), this.lastSyncId = i.lastSyncId, this.success = i.success, this.issues = i.issues.map((a) => new Dd(e, a));
  }
}
class rn extends De {
  constructor(e, i, a) {
    super(e, i, a.nodes.map((t) => new Dd(e, t)), new ye(e, a.pageInfo));
  }
}
class q7 extends p {
  constructor(e, i) {
    var a;
    super(e), this.filter = (a = ri(i.filter)) !== null && a !== void 0 ? a : void 0;
  }
}
class P7 extends p {
  constructor(e, i) {
    var a, t, d, r, o, s, A, l, m, u, c, k, g, N, y, h, E, S, b, I, D, B, q, v, Q, _, M, se, U, G, H, $, W, w, j, R, F, V, P, O, Z, ie, ne, z, pe, Be, ve, qe;
    super(e), this.actorId = (a = i.actorId) !== null && a !== void 0 ? a : void 0, this.addedLabelIds = (t = i.addedLabelIds) !== null && t !== void 0 ? t : void 0, this.archived = (d = i.archived) !== null && d !== void 0 ? d : void 0, this.archivedAt = (r = C(i.archivedAt)) !== null && r !== void 0 ? r : void 0, this.attachmentId = (o = i.attachmentId) !== null && o !== void 0 ? o : void 0, this.autoArchived = (s = i.autoArchived) !== null && s !== void 0 ? s : void 0, this.autoClosed = (A = i.autoClosed) !== null && A !== void 0 ? A : void 0, this.createdAt = (l = C(i.createdAt)) !== null && l !== void 0 ? l : /* @__PURE__ */ new Date(), this.fromAssigneeId = (m = i.fromAssigneeId) !== null && m !== void 0 ? m : void 0, this.fromCycleId = (u = i.fromCycleId) !== null && u !== void 0 ? u : void 0, this.fromDueDate = (c = i.fromDueDate) !== null && c !== void 0 ? c : void 0, this.fromEstimate = (k = i.fromEstimate) !== null && k !== void 0 ? k : void 0, this.fromParentId = (g = i.fromParentId) !== null && g !== void 0 ? g : void 0, this.fromPriority = (N = i.fromPriority) !== null && N !== void 0 ? N : void 0, this.fromProjectId = (y = i.fromProjectId) !== null && y !== void 0 ? y : void 0, this.fromStateId = (h = i.fromStateId) !== null && h !== void 0 ? h : void 0, this.fromTeamId = (E = i.fromTeamId) !== null && E !== void 0 ? E : void 0, this.fromTitle = (S = i.fromTitle) !== null && S !== void 0 ? S : void 0, this.id = i.id, this.removedLabelIds = (b = i.removedLabelIds) !== null && b !== void 0 ? b : void 0, this.toAssigneeId = (I = i.toAssigneeId) !== null && I !== void 0 ? I : void 0, this.toConvertedProjectId = (D = i.toConvertedProjectId) !== null && D !== void 0 ? D : void 0, this.toCycleId = (B = i.toCycleId) !== null && B !== void 0 ? B : void 0, this.toDueDate = (q = i.toDueDate) !== null && q !== void 0 ? q : void 0, this.toEstimate = (v = i.toEstimate) !== null && v !== void 0 ? v : void 0, this.toParentId = (Q = i.toParentId) !== null && Q !== void 0 ? Q : void 0, this.toPriority = (_ = i.toPriority) !== null && _ !== void 0 ? _ : void 0, this.toProjectId = (M = i.toProjectId) !== null && M !== void 0 ? M : void 0, this.toStateId = (se = i.toStateId) !== null && se !== void 0 ? se : void 0, this.toTeamId = (U = i.toTeamId) !== null && U !== void 0 ? U : void 0, this.toTitle = (G = i.toTitle) !== null && G !== void 0 ? G : void 0, this.trashed = (H = i.trashed) !== null && H !== void 0 ? H : void 0, this.updatedAt = ($ = C(i.updatedAt)) !== null && $ !== void 0 ? $ : /* @__PURE__ */ new Date(), this.updatedDescription = (W = i.updatedDescription) !== null && W !== void 0 ? W : void 0, this.botActor = i.botActor ? new Lt(e, i.botActor) : void 0, this.issueImport = i.issueImport ? new mA(e, i.issueImport) : void 0, this.addedLabels = i.addedLabels ? i.addedLabels.map((Qe) => new Dr(e, Qe)) : void 0, this.relationChanges = i.relationChanges ? i.relationChanges.map((Qe) => new Y7(e, Qe)) : void 0, this.removedLabels = i.removedLabels ? i.removedLabels.map((Qe) => new Dr(e, Qe)) : void 0, this._actor = (w = i.actor) !== null && w !== void 0 ? w : void 0, this._attachment = (j = i.attachment) !== null && j !== void 0 ? j : void 0, this._fromAssignee = (R = i.fromAssignee) !== null && R !== void 0 ? R : void 0, this._fromCycle = (F = i.fromCycle) !== null && F !== void 0 ? F : void 0, this._fromParent = (V = i.fromParent) !== null && V !== void 0 ? V : void 0, this._fromProject = (P = i.fromProject) !== null && P !== void 0 ? P : void 0, this._fromState = (O = i.fromState) !== null && O !== void 0 ? O : void 0, this._fromTeam = (Z = i.fromTeam) !== null && Z !== void 0 ? Z : void 0, this._issue = i.issue, this._toAssignee = (ie = i.toAssignee) !== null && ie !== void 0 ? ie : void 0, this._toConvertedProject = (ne = i.toConvertedProject) !== null && ne !== void 0 ? ne : void 0, this._toCycle = (z = i.toCycle) !== null && z !== void 0 ? z : void 0, this._toParent = (pe = i.toParent) !== null && pe !== void 0 ? pe : void 0, this._toProject = (Be = i.toProject) !== null && Be !== void 0 ? Be : void 0, this._toState = (ve = i.toState) !== null && ve !== void 0 ? ve : void 0, this._toTeam = (qe = i.toTeam) !== null && qe !== void 0 ? qe : void 0;
  }
  get actor() {
    var e, i;
    return !((e = this._actor) === null || e === void 0) && e.id ? new le(this._request).fetch((i = this._actor) === null || i === void 0 ? void 0 : i.id) : void 0;
  }
  get attachment() {
    var e, i;
    return !((e = this._attachment) === null || e === void 0) && e.id ? new is(this._request).fetch((i = this._attachment) === null || i === void 0 ? void 0 : i.id) : void 0;
  }
  get fromAssignee() {
    var e, i;
    return !((e = this._fromAssignee) === null || e === void 0) && e.id ? new le(this._request).fetch((i = this._fromAssignee) === null || i === void 0 ? void 0 : i.id) : void 0;
  }
  get fromCycle() {
    var e, i;
    return !((e = this._fromCycle) === null || e === void 0) && e.id ? new Vi(this._request).fetch((i = this._fromCycle) === null || i === void 0 ? void 0 : i.id) : void 0;
  }
  get fromParent() {
    var e, i;
    return !((e = this._fromParent) === null || e === void 0) && e.id ? new Ii(this._request).fetch((i = this._fromParent) === null || i === void 0 ? void 0 : i.id) : void 0;
  }
  get fromProject() {
    var e, i;
    return !((e = this._fromProject) === null || e === void 0) && e.id ? new Me(this._request).fetch((i = this._fromProject) === null || i === void 0 ? void 0 : i.id) : void 0;
  }
  get fromState() {
    var e, i;
    return !((e = this._fromState) === null || e === void 0) && e.id ? new Ui(this._request).fetch((i = this._fromState) === null || i === void 0 ? void 0 : i.id) : void 0;
  }
  get fromTeam() {
    var e, i;
    return !((e = this._fromTeam) === null || e === void 0) && e.id ? new xe(this._request).fetch((i = this._fromTeam) === null || i === void 0 ? void 0 : i.id) : void 0;
  }
  get issue() {
    return new Ii(this._request).fetch(this._issue.id);
  }
  get toAssignee() {
    var e, i;
    return !((e = this._toAssignee) === null || e === void 0) && e.id ? new le(this._request).fetch((i = this._toAssignee) === null || i === void 0 ? void 0 : i.id) : void 0;
  }
  get toConvertedProject() {
    var e, i;
    return !((e = this._toConvertedProject) === null || e === void 0) && e.id ? new Me(this._request).fetch((i = this._toConvertedProject) === null || i === void 0 ? void 0 : i.id) : void 0;
  }
  get toCycle() {
    var e, i;
    return !((e = this._toCycle) === null || e === void 0) && e.id ? new Vi(this._request).fetch((i = this._toCycle) === null || i === void 0 ? void 0 : i.id) : void 0;
  }
  get toParent() {
    var e, i;
    return !((e = this._toParent) === null || e === void 0) && e.id ? new Ii(this._request).fetch((i = this._toParent) === null || i === void 0 ? void 0 : i.id) : void 0;
  }
  get toProject() {
    var e, i;
    return !((e = this._toProject) === null || e === void 0) && e.id ? new Me(this._request).fetch((i = this._toProject) === null || i === void 0 ? void 0 : i.id) : void 0;
  }
  get toState() {
    var e, i;
    return !((e = this._toState) === null || e === void 0) && e.id ? new Ui(this._request).fetch((i = this._toState) === null || i === void 0 ? void 0 : i.id) : void 0;
  }
  get toTeam() {
    var e, i;
    return !((e = this._toTeam) === null || e === void 0) && e.id ? new xe(this._request).fetch((i = this._toTeam) === null || i === void 0 ? void 0 : i.id) : void 0;
  }
}
class O7 extends De {
  constructor(e, i, a) {
    super(e, i, a.nodes.map((t) => new P7(e, t)), new ye(e, a.pageInfo));
  }
}
class mA extends p {
  constructor(e, i) {
    var a, t, d, r, o, s, A, l, m;
    super(e), this.archivedAt = (a = C(i.archivedAt)) !== null && a !== void 0 ? a : void 0, this.createdAt = (t = C(i.createdAt)) !== null && t !== void 0 ? t : /* @__PURE__ */ new Date(), this.creatorId = i.creatorId, this.csvFileUrl = (d = i.csvFileUrl) !== null && d !== void 0 ? d : void 0, this.error = (r = i.error) !== null && r !== void 0 ? r : void 0, this.errorMetadata = (o = ri(i.errorMetadata)) !== null && o !== void 0 ? o : void 0, this.id = i.id, this.mapping = (s = ri(i.mapping)) !== null && s !== void 0 ? s : void 0, this.progress = (A = i.progress) !== null && A !== void 0 ? A : void 0, this.service = i.service, this.status = i.status, this.teamName = (l = i.teamName) !== null && l !== void 0 ? l : void 0, this.updatedAt = (m = C(i.updatedAt)) !== null && m !== void 0 ? m : /* @__PURE__ */ new Date();
  }
  delete(e) {
    return new T0(this._request).fetch(e);
  }
  update(e) {
    return new _0(this._request).fetch(this.id, e);
  }
}
class G7 extends p {
  constructor(e, i) {
    super(e), this.success = i.success;
  }
}
class M7 extends p {
  constructor(e, i) {
    super(e), this.lastSyncId = i.lastSyncId, this.success = i.success, this.issueImport = i.issueImport ? new mA(e, i.issueImport) : void 0;
  }
}
class Za extends p {
  constructor(e, i) {
    super(e), this.lastSyncId = i.lastSyncId, this.success = i.success, this.issueImport = i.issueImport ? new mA(e, i.issueImport) : void 0;
  }
}
class Dr extends p {
  constructor(e, i) {
    var a, t, d, r, o, s, A;
    super(e), this.archivedAt = (a = C(i.archivedAt)) !== null && a !== void 0 ? a : void 0, this.color = i.color, this.createdAt = (t = C(i.createdAt)) !== null && t !== void 0 ? t : /* @__PURE__ */ new Date(), this.description = (d = i.description) !== null && d !== void 0 ? d : void 0, this.id = i.id, this.isGroup = i.isGroup, this.name = i.name, this.updatedAt = (r = C(i.updatedAt)) !== null && r !== void 0 ? r : /* @__PURE__ */ new Date(), this._creator = (o = i.creator) !== null && o !== void 0 ? o : void 0, this._parent = (s = i.parent) !== null && s !== void 0 ? s : void 0, this._team = (A = i.team) !== null && A !== void 0 ? A : void 0;
  }
  get creator() {
    var e, i;
    return !((e = this._creator) === null || e === void 0) && e.id ? new le(this._request).fetch((i = this._creator) === null || i === void 0 ? void 0 : i.id) : void 0;
  }
  get organization() {
    return new Zi(this._request).fetch();
  }
  get parent() {
    var e, i;
    return !((e = this._parent) === null || e === void 0) && e.id ? new Nn(this._request).fetch((i = this._parent) === null || i === void 0 ? void 0 : i.id) : void 0;
  }
  get team() {
    var e, i;
    return !((e = this._team) === null || e === void 0) && e.id ? new xe(this._request).fetch((i = this._team) === null || i === void 0 ? void 0 : i.id) : void 0;
  }
  children(e) {
    return new _V(this._request, this.id, e).fetch(e);
  }
  issues(e) {
    return new RV(this._request, this.id, e).fetch(e);
  }
  create(e, i) {
    return new R0(this._request).fetch(e, i);
  }
  delete() {
    return new U0(this._request).fetch(this.id);
  }
  update(e) {
    return new L0(this._request).fetch(this.id, e);
  }
}
class wd extends De {
  constructor(e, i, a) {
    super(e, i, a.nodes.map((t) => new Dr(e, t)), new ye(e, a.pageInfo));
  }
}
class $v extends p {
  constructor(e, i) {
    super(e), this.lastSyncId = i.lastSyncId, this.success = i.success, this._issueLabel = i.issueLabel;
  }
  get issueLabel() {
    return new Nn(this._request).fetch(this._issueLabel.id);
  }
}
class eg extends p {
  constructor(e, i) {
    var a, t, d, r, o, s, A, l, m, u;
    super(e), this.archivedAt = (a = C(i.archivedAt)) !== null && a !== void 0 ? a : void 0, this.createdAt = (t = C(i.createdAt)) !== null && t !== void 0 ? t : /* @__PURE__ */ new Date(), this.emailedAt = (d = C(i.emailedAt)) !== null && d !== void 0 ? d : void 0, this.id = i.id, this.reactionEmoji = (r = i.reactionEmoji) !== null && r !== void 0 ? r : void 0, this.readAt = (o = C(i.readAt)) !== null && o !== void 0 ? o : void 0, this.snoozedUntilAt = (s = C(i.snoozedUntilAt)) !== null && s !== void 0 ? s : void 0, this.type = i.type, this.unsnoozedAt = (A = C(i.unsnoozedAt)) !== null && A !== void 0 ? A : void 0, this.updatedAt = (l = C(i.updatedAt)) !== null && l !== void 0 ? l : /* @__PURE__ */ new Date(), this.botActor = i.botActor ? new Lt(e, i.botActor) : void 0, this.subscriptions = i.subscriptions ? i.subscriptions.map((c) => new cA(e, c)) : void 0, this._actor = (m = i.actor) !== null && m !== void 0 ? m : void 0, this._comment = (u = i.comment) !== null && u !== void 0 ? u : void 0, this._issue = i.issue, this._team = i.team, this._user = i.user;
  }
  get actor() {
    var e, i;
    return !((e = this._actor) === null || e === void 0) && e.id ? new le(this._request).fetch((i = this._actor) === null || i === void 0 ? void 0 : i.id) : void 0;
  }
  get comment() {
    var e, i;
    return !((e = this._comment) === null || e === void 0) && e.id ? new pd(this._request).fetch((i = this._comment) === null || i === void 0 ? void 0 : i.id) : void 0;
  }
  get issue() {
    return new Ii(this._request).fetch(this._issue.id);
  }
  get team() {
    return new xe(this._request).fetch(this._team.id);
  }
  get user() {
    return new le(this._request).fetch(this._user.id);
  }
}
class Ka extends p {
  constructor(e, i) {
    var a;
    super(e), this.lastSyncId = i.lastSyncId, this.success = i.success, this._issue = (a = i.issue) !== null && a !== void 0 ? a : void 0;
  }
  get issue() {
    var e, i;
    return !((e = this._issue) === null || e === void 0) && e.id ? new Ii(this._request).fetch((i = this._issue) === null || i === void 0 ? void 0 : i.id) : void 0;
  }
}
class x7 extends p {
  constructor(e, i) {
    super(e), this.label = i.label, this.priority = i.priority;
  }
}
class ig extends p {
  constructor(e, i) {
    var a, t, d;
    super(e), this.archivedAt = (a = C(i.archivedAt)) !== null && a !== void 0 ? a : void 0, this.createdAt = (t = C(i.createdAt)) !== null && t !== void 0 ? t : /* @__PURE__ */ new Date(), this.id = i.id, this.type = i.type, this.updatedAt = (d = C(i.updatedAt)) !== null && d !== void 0 ? d : /* @__PURE__ */ new Date(), this._issue = i.issue, this._relatedIssue = i.relatedIssue;
  }
  get issue() {
    return new Ii(this._request).fetch(this._issue.id);
  }
  get relatedIssue() {
    return new Ii(this._request).fetch(this._relatedIssue.id);
  }
  create(e) {
    return new q0(this._request).fetch(e);
  }
  delete() {
    return new P0(this._request).fetch(this.id);
  }
  update(e) {
    return new O0(this._request).fetch(this.id, e);
  }
}
class uA extends De {
  constructor(e, i, a) {
    super(e, i, a.nodes.map((t) => new ig(e, t)), new ye(e, a.pageInfo));
  }
}
class Y7 extends p {
  constructor(e, i) {
    super(e), this.identifier = i.identifier, this.type = i.type;
  }
}
class ng extends p {
  constructor(e, i) {
    super(e), this.lastSyncId = i.lastSyncId, this.success = i.success, this._issueRelation = i.issueRelation;
  }
  get issueRelation() {
    return new Wg(this._request).fetch(this._issueRelation.id);
  }
}
class J7 extends p {
  constructor(e, i) {
    super(e), this.totalCount = i.totalCount, this.archivePayload = new rA(e, i.archivePayload), this.pageInfo = new ye(e, i.pageInfo), this.nodes = i.nodes.map((a) => new H7(e, a));
  }
}
class H7 extends p {
  constructor(e, i) {
    var a, t, d, r, o, s, A, l, m, u, c, k, g, N, y, h, E, S, b, I, D, B, q, v, Q;
    super(e), this.archivedAt = (a = C(i.archivedAt)) !== null && a !== void 0 ? a : void 0, this.autoArchivedAt = (t = C(i.autoArchivedAt)) !== null && t !== void 0 ? t : void 0, this.autoClosedAt = (d = C(i.autoClosedAt)) !== null && d !== void 0 ? d : void 0, this.boardOrder = i.boardOrder, this.branchName = i.branchName, this.canceledAt = (r = C(i.canceledAt)) !== null && r !== void 0 ? r : void 0, this.completedAt = (o = C(i.completedAt)) !== null && o !== void 0 ? o : void 0, this.createdAt = (s = C(i.createdAt)) !== null && s !== void 0 ? s : /* @__PURE__ */ new Date(), this.customerTicketCount = i.customerTicketCount, this.description = (A = i.description) !== null && A !== void 0 ? A : void 0, this.dueDate = (l = i.dueDate) !== null && l !== void 0 ? l : void 0, this.estimate = (m = i.estimate) !== null && m !== void 0 ? m : void 0, this.id = i.id, this.identifier = i.identifier, this.metadata = (u = ri(i.metadata)) !== null && u !== void 0 ? u : {}, this.number = i.number, this.previousIdentifiers = i.previousIdentifiers, this.priority = i.priority, this.priorityLabel = i.priorityLabel, this.snoozedUntilAt = (c = C(i.snoozedUntilAt)) !== null && c !== void 0 ? c : void 0, this.sortOrder = i.sortOrder, this.startedAt = (k = C(i.startedAt)) !== null && k !== void 0 ? k : void 0, this.startedTriageAt = (g = C(i.startedTriageAt)) !== null && g !== void 0 ? g : void 0, this.subIssueSortOrder = (N = i.subIssueSortOrder) !== null && N !== void 0 ? N : void 0, this.title = i.title, this.trashed = (y = i.trashed) !== null && y !== void 0 ? y : void 0, this.triagedAt = (h = C(i.triagedAt)) !== null && h !== void 0 ? h : void 0, this.updatedAt = (E = C(i.updatedAt)) !== null && E !== void 0 ? E : /* @__PURE__ */ new Date(), this.url = i.url, this._assignee = (S = i.assignee) !== null && S !== void 0 ? S : void 0, this._creator = (b = i.creator) !== null && b !== void 0 ? b : void 0, this._cycle = (I = i.cycle) !== null && I !== void 0 ? I : void 0, this._favorite = (D = i.favorite) !== null && D !== void 0 ? D : void 0, this._lastAppliedTemplate = (B = i.lastAppliedTemplate) !== null && B !== void 0 ? B : void 0, this._parent = (q = i.parent) !== null && q !== void 0 ? q : void 0, this._project = (v = i.project) !== null && v !== void 0 ? v : void 0, this._snoozedBy = (Q = i.snoozedBy) !== null && Q !== void 0 ? Q : void 0, this._state = i.state, this._team = i.team;
  }
  get assignee() {
    var e, i;
    return !((e = this._assignee) === null || e === void 0) && e.id ? new le(this._request).fetch((i = this._assignee) === null || i === void 0 ? void 0 : i.id) : void 0;
  }
  get creator() {
    var e, i;
    return !((e = this._creator) === null || e === void 0) && e.id ? new le(this._request).fetch((i = this._creator) === null || i === void 0 ? void 0 : i.id) : void 0;
  }
  get cycle() {
    var e, i;
    return !((e = this._cycle) === null || e === void 0) && e.id ? new Vi(this._request).fetch((i = this._cycle) === null || i === void 0 ? void 0 : i.id) : void 0;
  }
  get favorite() {
    var e, i;
    return !((e = this._favorite) === null || e === void 0) && e.id ? new Rd(this._request).fetch((i = this._favorite) === null || i === void 0 ? void 0 : i.id) : void 0;
  }
  get lastAppliedTemplate() {
    var e, i;
    return !((e = this._lastAppliedTemplate) === null || e === void 0) && e.id ? new dn(this._request).fetch((i = this._lastAppliedTemplate) === null || i === void 0 ? void 0 : i.id) : void 0;
  }
  get parent() {
    var e, i;
    return !((e = this._parent) === null || e === void 0) && e.id ? new Ii(this._request).fetch((i = this._parent) === null || i === void 0 ? void 0 : i.id) : void 0;
  }
  get project() {
    var e, i;
    return !((e = this._project) === null || e === void 0) && e.id ? new Me(this._request).fetch((i = this._project) === null || i === void 0 ? void 0 : i.id) : void 0;
  }
  get snoozedBy() {
    var e, i;
    return !((e = this._snoozedBy) === null || e === void 0) && e.id ? new le(this._request).fetch((i = this._snoozedBy) === null || i === void 0 ? void 0 : i.id) : void 0;
  }
  get state() {
    return new Ui(this._request).fetch(this._state.id);
  }
  get team() {
    return new xe(this._request).fetch(this._team.id);
  }
}
class ag extends p {
  constructor(e, i) {
    var a, t, d, r, o, s, A, l;
    super(e), this.active = i.active, this.archivedAt = (a = C(i.archivedAt)) !== null && a !== void 0 ? a : void 0, this.createdAt = (t = C(i.createdAt)) !== null && t !== void 0 ? t : /* @__PURE__ */ new Date(), this.id = i.id, this.notificationSubscriptionTypes = i.notificationSubscriptionTypes, this.updatedAt = (d = C(i.updatedAt)) !== null && d !== void 0 ? d : /* @__PURE__ */ new Date(), this._customView = (r = i.customView) !== null && r !== void 0 ? r : void 0, this._cycle = (o = i.cycle) !== null && o !== void 0 ? o : void 0, this._label = i.label, this._project = (s = i.project) !== null && s !== void 0 ? s : void 0, this._subscriber = i.subscriber, this._team = (A = i.team) !== null && A !== void 0 ? A : void 0, this._user = (l = i.user) !== null && l !== void 0 ? l : void 0;
  }
  get customView() {
    var e, i;
    return !((e = this._customView) === null || e === void 0) && e.id ? new Ln(this._request).fetch((i = this._customView) === null || i === void 0 ? void 0 : i.id) : void 0;
  }
  get cycle() {
    var e, i;
    return !((e = this._cycle) === null || e === void 0) && e.id ? new Vi(this._request).fetch((i = this._cycle) === null || i === void 0 ? void 0 : i.id) : void 0;
  }
  get label() {
    return new Nn(this._request).fetch(this._label.id);
  }
  get project() {
    var e, i;
    return !((e = this._project) === null || e === void 0) && e.id ? new Me(this._request).fetch((i = this._project) === null || i === void 0 ? void 0 : i.id) : void 0;
  }
  get subscriber() {
    return new le(this._request).fetch(this._subscriber.id);
  }
  get team() {
    var e, i;
    return !((e = this._team) === null || e === void 0) && e.id ? new xe(this._request).fetch((i = this._team) === null || i === void 0 ? void 0 : i.id) : void 0;
  }
  get user() {
    var e, i;
    return !((e = this._user) === null || e === void 0) && e.id ? new le(this._request).fetch((i = this._user) === null || i === void 0 ? void 0 : i.id) : void 0;
  }
}
class es extends p {
  constructor(e, i) {
    super(e), this.success = i.success;
  }
}
class pA extends p {
  constructor(e, i) {
    var a, t, d, r, o, s, A, l;
    super(e), this.archivedAt = (a = C(i.archivedAt)) !== null && a !== void 0 ? a : void 0, this.createdAt = (t = C(i.createdAt)) !== null && t !== void 0 ? t : /* @__PURE__ */ new Date(), this.emailedAt = (d = C(i.emailedAt)) !== null && d !== void 0 ? d : void 0, this.id = i.id, this.readAt = (r = C(i.readAt)) !== null && r !== void 0 ? r : void 0, this.snoozedUntilAt = (o = C(i.snoozedUntilAt)) !== null && o !== void 0 ? o : void 0, this.type = i.type, this.unsnoozedAt = (s = C(i.unsnoozedAt)) !== null && s !== void 0 ? s : void 0, this.updatedAt = (A = C(i.updatedAt)) !== null && A !== void 0 ? A : /* @__PURE__ */ new Date(), this.botActor = i.botActor ? new Lt(e, i.botActor) : void 0, this._actor = (l = i.actor) !== null && l !== void 0 ? l : void 0, this._user = i.user;
  }
  get actor() {
    var e, i;
    return !((e = this._actor) === null || e === void 0) && e.id ? new le(this._request).fetch((i = this._actor) === null || i === void 0 ? void 0 : i.id) : void 0;
  }
  get user() {
    return new le(this._request).fetch(this._user.id);
  }
  archive() {
    return new x0(this._request).fetch(this.id);
  }
  unarchive() {
    return new j0(this._request).fetch(this.id);
  }
  update(e) {
    return new W0(this._request).fetch(this.id, e);
  }
}
class tg extends p {
  constructor(e, i) {
    super(e), this.lastSyncId = i.lastSyncId, this.success = i.success;
  }
}
class Fd extends p {
  constructor(e, i) {
    super(e), this.lastSyncId = i.lastSyncId, this.success = i.success, this.notifications = i.notifications.map((a) => new pA(e, a));
  }
}
class j7 extends De {
  constructor(e, i, a) {
    super(e, i, a.nodes.map((t) => {
      switch (t.__typename) {
        case "IssueNotification":
          return new eg(e, t);
        case "OauthClientApprovalNotification":
          return new rg(e, t);
        case "ProjectNotification":
          return new gg(e, t);
        default:
          return new pA(e, t);
      }
    }), new ye(e, a.pageInfo));
  }
}
class W7 extends p {
  constructor(e, i) {
    super(e), this.lastSyncId = i.lastSyncId, this.success = i.success;
  }
}
class cA extends p {
  constructor(e, i) {
    var a, t, d, r, o, s, A, l, m;
    super(e), this.active = i.active, this.archivedAt = (a = C(i.archivedAt)) !== null && a !== void 0 ? a : void 0, this.createdAt = (t = C(i.createdAt)) !== null && t !== void 0 ? t : /* @__PURE__ */ new Date(), this.id = i.id, this.updatedAt = (d = C(i.updatedAt)) !== null && d !== void 0 ? d : /* @__PURE__ */ new Date(), this._customView = (r = i.customView) !== null && r !== void 0 ? r : void 0, this._cycle = (o = i.cycle) !== null && o !== void 0 ? o : void 0, this._label = (s = i.label) !== null && s !== void 0 ? s : void 0, this._project = (A = i.project) !== null && A !== void 0 ? A : void 0, this._subscriber = i.subscriber, this._team = (l = i.team) !== null && l !== void 0 ? l : void 0, this._user = (m = i.user) !== null && m !== void 0 ? m : void 0;
  }
  get customView() {
    var e, i;
    return !((e = this._customView) === null || e === void 0) && e.id ? new Ln(this._request).fetch((i = this._customView) === null || i === void 0 ? void 0 : i.id) : void 0;
  }
  get cycle() {
    var e, i;
    return !((e = this._cycle) === null || e === void 0) && e.id ? new Vi(this._request).fetch((i = this._cycle) === null || i === void 0 ? void 0 : i.id) : void 0;
  }
  get label() {
    var e, i;
    return !((e = this._label) === null || e === void 0) && e.id ? new Nn(this._request).fetch((i = this._label) === null || i === void 0 ? void 0 : i.id) : void 0;
  }
  get project() {
    var e, i;
    return !((e = this._project) === null || e === void 0) && e.id ? new Me(this._request).fetch((i = this._project) === null || i === void 0 ? void 0 : i.id) : void 0;
  }
  get subscriber() {
    return new le(this._request).fetch(this._subscriber.id);
  }
  get team() {
    var e, i;
    return !((e = this._team) === null || e === void 0) && e.id ? new xe(this._request).fetch((i = this._team) === null || i === void 0 ? void 0 : i.id) : void 0;
  }
  get user() {
    var e, i;
    return !((e = this._user) === null || e === void 0) && e.id ? new le(this._request).fetch((i = this._user) === null || i === void 0 ? void 0 : i.id) : void 0;
  }
  create(e) {
    return new Y0(this._request).fetch(e);
  }
  delete() {
    return new J0(this._request).fetch(this.id);
  }
  update(e) {
    return new H0(this._request).fetch(this.id, e);
  }
}
class z7 extends De {
  constructor(e, i, a) {
    super(e, i, a.nodes.map((t) => {
      switch (t.__typename) {
        case "CustomViewNotificationSubscription":
          return new Uv(e, t);
        case "CycleNotificationSubscription":
          return new Ov(e, t);
        case "LabelNotificationSubscription":
          return new ag(e, t);
        case "ProjectNotificationSubscription":
          return new hg(e, t);
        case "TeamNotificationSubscription":
          return new Tg(e, t);
        case "UserNotificationSubscription":
          return new Lg(e, t);
        default:
          return new cA(e, t);
      }
    }), new ye(e, a.pageInfo));
  }
}
class dg extends p {
  constructor(e, i) {
    super(e), this.lastSyncId = i.lastSyncId, this.success = i.success;
  }
}
class Z7 extends p {
  constructor(e, i) {
    var a, t, d, r, o, s;
    super(e), this.archivedAt = (a = C(i.archivedAt)) !== null && a !== void 0 ? a : void 0, this.createdAt = (t = C(i.createdAt)) !== null && t !== void 0 ? t : /* @__PURE__ */ new Date(), this.denyReason = (d = i.denyReason) !== null && d !== void 0 ? d : void 0, this.id = i.id, this.oauthClientId = i.oauthClientId, this.requestReason = (r = i.requestReason) !== null && r !== void 0 ? r : void 0, this.requesterId = i.requesterId, this.responderId = (o = i.responderId) !== null && o !== void 0 ? o : void 0, this.scopes = i.scopes, this.updatedAt = (s = C(i.updatedAt)) !== null && s !== void 0 ? s : /* @__PURE__ */ new Date();
  }
}
class rg extends p {
  constructor(e, i) {
    var a, t, d, r, o, s, A, l;
    super(e), this.archivedAt = (a = C(i.archivedAt)) !== null && a !== void 0 ? a : void 0, this.createdAt = (t = C(i.createdAt)) !== null && t !== void 0 ? t : /* @__PURE__ */ new Date(), this.emailedAt = (d = C(i.emailedAt)) !== null && d !== void 0 ? d : void 0, this.id = i.id, this.readAt = (r = C(i.readAt)) !== null && r !== void 0 ? r : void 0, this.snoozedUntilAt = (o = C(i.snoozedUntilAt)) !== null && o !== void 0 ? o : void 0, this.type = i.type, this.unsnoozedAt = (s = C(i.unsnoozedAt)) !== null && s !== void 0 ? s : void 0, this.updatedAt = (A = C(i.updatedAt)) !== null && A !== void 0 ? A : /* @__PURE__ */ new Date(), this.botActor = i.botActor ? new Lt(e, i.botActor) : void 0, this.oauthClientApproval = new Z7(e, i.oauthClientApproval), this._actor = (l = i.actor) !== null && l !== void 0 ? l : void 0, this._user = i.user;
  }
  get actor() {
    var e, i;
    return !((e = this._actor) === null || e === void 0) && e.id ? new le(this._request).fetch((i = this._actor) === null || i === void 0 ? void 0 : i.id) : void 0;
  }
  get user() {
    return new le(this._request).fetch(this._user.id);
  }
}
class K7 extends p {
  constructor(e, i) {
    var a, t, d, r, o, s, A, l;
    super(e), this.allowMembersToInvite = (a = i.allowMembersToInvite) !== null && a !== void 0 ? a : void 0, this.allowedAuthServices = i.allowedAuthServices, this.archivedAt = (t = C(i.archivedAt)) !== null && t !== void 0 ? t : void 0, this.createdAt = (d = C(i.createdAt)) !== null && d !== void 0 ? d : /* @__PURE__ */ new Date(), this.createdIssueCount = i.createdIssueCount, this.deletionRequestedAt = (r = C(i.deletionRequestedAt)) !== null && r !== void 0 ? r : void 0, this.gitBranchFormat = (o = i.gitBranchFormat) !== null && o !== void 0 ? o : void 0, this.gitLinkbackMessagesEnabled = i.gitLinkbackMessagesEnabled, this.gitPublicLinkbackMessagesEnabled = i.gitPublicLinkbackMessagesEnabled, this.id = i.id, this.logoUrl = (s = i.logoUrl) !== null && s !== void 0 ? s : void 0, this.name = i.name, this.periodUploadVolume = i.periodUploadVolume, this.previousUrlKeys = i.previousUrlKeys, this.projectUpdateRemindersHour = i.projectUpdateRemindersHour, this.roadmapEnabled = i.roadmapEnabled, this.samlEnabled = i.samlEnabled, this.scimEnabled = i.scimEnabled, this.trialEndsAt = (A = C(i.trialEndsAt)) !== null && A !== void 0 ? A : void 0, this.updatedAt = (l = C(i.updatedAt)) !== null && l !== void 0 ? l : /* @__PURE__ */ new Date(), this.urlKey = i.urlKey, this.userCount = i.userCount, this.subscription = i.subscription ? new aD(e, i.subscription) : void 0;
  }
  integrations(e) {
    return new UV(this._request, e).fetch(e);
  }
  labels(e) {
    return new LV(this._request, e).fetch(e);
  }
  teams(e) {
    return new qV(this._request, e).fetch(e);
  }
  templates(e) {
    return new PV(this._request, e).fetch(e);
  }
  users(e) {
    return new OV(this._request, e).fetch(e);
  }
  delete(e) {
    return new z0(this._request).fetch(e);
  }
  update(e) {
    return new $0(this._request).fetch(e);
  }
}
class X7 extends p {
  constructor(e, i) {
    super(e), this.success = i.success;
  }
}
class sg extends p {
  constructor(e, i) {
    super(e), this.success = i.success;
  }
}
class $7 extends p {
  constructor(e, i) {
    super(e), this.exists = i.exists, this.success = i.success;
  }
}
class og extends p {
  constructor(e, i) {
    var a, t, d, r, o, s, A;
    super(e), this.acceptedAt = (a = C(i.acceptedAt)) !== null && a !== void 0 ? a : void 0, this.archivedAt = (t = C(i.archivedAt)) !== null && t !== void 0 ? t : void 0, this.createdAt = (d = C(i.createdAt)) !== null && d !== void 0 ? d : /* @__PURE__ */ new Date(), this.email = i.email, this.expiresAt = (r = C(i.expiresAt)) !== null && r !== void 0 ? r : void 0, this.external = i.external, this.id = i.id, this.metadata = (o = ri(i.metadata)) !== null && o !== void 0 ? o : {}, this.updatedAt = (s = C(i.updatedAt)) !== null && s !== void 0 ? s : /* @__PURE__ */ new Date(), this._invitee = (A = i.invitee) !== null && A !== void 0 ? A : void 0, this._inviter = i.inviter;
  }
  get invitee() {
    var e, i;
    return !((e = this._invitee) === null || e === void 0) && e.id ? new le(this._request).fetch((i = this._invitee) === null || i === void 0 ? void 0 : i.id) : void 0;
  }
  get inviter() {
    return new le(this._request).fetch(this._inviter.id);
  }
  get organization() {
    return new Zi(this._request).fetch();
  }
  create(e) {
    return new Z0(this._request).fetch(e);
  }
  delete() {
    return new K0(this._request).fetch(this.id);
  }
  update(e) {
    return new X0(this._request).fetch(this.id, e);
  }
}
class eD extends De {
  constructor(e, i, a) {
    super(e, i, a.nodes.map((t) => new og(e, t)), new ye(e, a.pageInfo));
  }
}
class lg extends p {
  constructor(e, i) {
    super(e), this.lastSyncId = i.lastSyncId, this.success = i.success, this._organizationInvite = i.organizationInvite;
  }
  get organizationInvite() {
    return new zg(this._request).fetch(this._organizationInvite.id);
  }
}
class iD extends p {
  constructor(e, i) {
    super(e), this.lastSyncId = i.lastSyncId, this.success = i.success;
  }
  get organization() {
    return new Zi(this._request).fetch();
  }
}
class nD extends p {
  constructor(e, i) {
    super(e), this.success = i.success;
  }
}
class ye extends p {
  constructor(e, i) {
    var a, t;
    super(e), this.endCursor = (a = i.endCursor) !== null && a !== void 0 ? a : void 0, this.hasNextPage = i.hasNextPage, this.hasPreviousPage = i.hasPreviousPage, this.startCursor = (t = i.startCursor) !== null && t !== void 0 ? t : void 0;
  }
}
class aD extends p {
  constructor(e, i) {
    var a, t, d, r, o, s, A, l, m, u;
    super(e), this.archivedAt = (a = C(i.archivedAt)) !== null && a !== void 0 ? a : void 0, this.canceledAt = (t = C(i.canceledAt)) !== null && t !== void 0 ? t : void 0, this.collectionMethod = (d = i.collectionMethod) !== null && d !== void 0 ? d : void 0, this.createdAt = (r = C(i.createdAt)) !== null && r !== void 0 ? r : /* @__PURE__ */ new Date(), this.id = i.id, this.nextBillingAt = (o = C(i.nextBillingAt)) !== null && o !== void 0 ? o : void 0, this.pendingChangeType = (s = i.pendingChangeType) !== null && s !== void 0 ? s : void 0, this.seats = i.seats, this.seatsMaximum = (A = i.seatsMaximum) !== null && A !== void 0 ? A : void 0, this.seatsMinimum = (l = i.seatsMinimum) !== null && l !== void 0 ? l : void 0, this.type = i.type, this.updatedAt = (m = C(i.updatedAt)) !== null && m !== void 0 ? m : /* @__PURE__ */ new Date(), this._creator = (u = i.creator) !== null && u !== void 0 ? u : void 0;
  }
  get creator() {
    var e, i;
    return !((e = this._creator) === null || e === void 0) && e.id ? new le(this._request).fetch((i = this._creator) === null || i === void 0 ? void 0 : i.id) : void 0;
  }
  get organization() {
    return new Zi(this._request).fetch();
  }
}
class Ag extends p {
  constructor(e, i) {
    var a, t, d, r, o, s, A, l, m, u, c, k, g, N, y, h, E;
    super(e), this.archivedAt = (a = C(i.archivedAt)) !== null && a !== void 0 ? a : void 0, this.autoArchivedAt = (t = C(i.autoArchivedAt)) !== null && t !== void 0 ? t : void 0, this.canceledAt = (d = C(i.canceledAt)) !== null && d !== void 0 ? d : void 0, this.color = i.color, this.completedAt = (r = C(i.completedAt)) !== null && r !== void 0 ? r : void 0, this.completedIssueCountHistory = i.completedIssueCountHistory, this.completedScopeHistory = i.completedScopeHistory, this.content = (o = i.content) !== null && o !== void 0 ? o : void 0, this.createdAt = (s = C(i.createdAt)) !== null && s !== void 0 ? s : /* @__PURE__ */ new Date(), this.description = i.description, this.icon = (A = i.icon) !== null && A !== void 0 ? A : void 0, this.id = i.id, this.inProgressScopeHistory = i.inProgressScopeHistory, this.issueCountHistory = i.issueCountHistory, this.name = i.name, this.progress = i.progress, this.projectUpdateRemindersPausedUntilAt = (l = C(i.projectUpdateRemindersPausedUntilAt)) !== null && l !== void 0 ? l : void 0, this.scope = i.scope, this.scopeHistory = i.scopeHistory, this.slackIssueComments = i.slackIssueComments, this.slackIssueStatuses = i.slackIssueStatuses, this.slackNewIssue = i.slackNewIssue, this.slugId = i.slugId, this.sortOrder = i.sortOrder, this.startDate = (m = i.startDate) !== null && m !== void 0 ? m : void 0, this.startedAt = (u = C(i.startedAt)) !== null && u !== void 0 ? u : void 0, this.state = i.state, this.targetDate = (c = i.targetDate) !== null && c !== void 0 ? c : void 0, this.trashed = (k = i.trashed) !== null && k !== void 0 ? k : void 0, this.updatedAt = (g = C(i.updatedAt)) !== null && g !== void 0 ? g : /* @__PURE__ */ new Date(), this.url = i.url, this._convertedFromIssue = (N = i.convertedFromIssue) !== null && N !== void 0 ? N : void 0, this._creator = i.creator, this._integrationsSettings = (y = i.integrationsSettings) !== null && y !== void 0 ? y : void 0, this._lastAppliedTemplate = (h = i.lastAppliedTemplate) !== null && h !== void 0 ? h : void 0, this._lead = (E = i.lead) !== null && E !== void 0 ? E : void 0;
  }
  get convertedFromIssue() {
    var e, i;
    return !((e = this._convertedFromIssue) === null || e === void 0) && e.id ? new Ii(this._request).fetch((i = this._convertedFromIssue) === null || i === void 0 ? void 0 : i.id) : void 0;
  }
  get creator() {
    return new le(this._request).fetch(this._creator.id);
  }
  get integrationsSettings() {
    var e, i;
    return !((e = this._integrationsSettings) === null || e === void 0) && e.id ? new Ld(this._request).fetch((i = this._integrationsSettings) === null || i === void 0 ? void 0 : i.id) : void 0;
  }
  get lastAppliedTemplate() {
    var e, i;
    return !((e = this._lastAppliedTemplate) === null || e === void 0) && e.id ? new dn(this._request).fetch((i = this._lastAppliedTemplate) === null || i === void 0 ? void 0 : i.id) : void 0;
  }
  get lead() {
    var e, i;
    return !((e = this._lead) === null || e === void 0) && e.id ? new le(this._request).fetch((i = this._lead) === null || i === void 0 ? void 0 : i.id) : void 0;
  }
  documents(e) {
    return new GV(this._request, this.id, e).fetch(e);
  }
  issues(e) {
    return new MV(this._request, this.id, e).fetch(e);
  }
  links(e) {
    return new xV(this._request, this.id, e).fetch(e);
  }
  members(e) {
    return new YV(this._request, this.id, e).fetch(e);
  }
  projectMilestones(e) {
    return new JV(this._request, this.id, e).fetch(e);
  }
  projectUpdates(e) {
    return new HV(this._request, this.id, e).fetch(e);
  }
  teams(e) {
    return new jV(this._request, this.id, e).fetch(e);
  }
  archive(e) {
    return new eh(this._request).fetch(this.id, e);
  }
  create(e) {
    return new ih(this._request).fetch(e);
  }
  delete() {
    return new nh(this._request).fetch(this.id);
  }
  unarchive() {
    return new lh(this._request).fetch(this.id);
  }
  update() {
    return new Pt(this._request).fetch(this.id);
  }
}
class kA extends p {
  constructor(e, i) {
    var a;
    super(e), this.lastSyncId = i.lastSyncId, this.success = i.success, this._entity = (a = i.entity) !== null && a !== void 0 ? a : void 0;
  }
  get entity() {
    var e, i;
    return !((e = this._entity) === null || e === void 0) && e.id ? new Me(this._request).fetch((i = this._entity) === null || i === void 0 ? void 0 : i.id) : void 0;
  }
}
class vA extends De {
  constructor(e, i, a) {
    super(e, i, a.nodes.map((t) => new Ag(e, t)), new ye(e, a.pageInfo));
  }
}
class tD extends p {
  constructor(e, i) {
    var a;
    super(e), this.filter = (a = ri(i.filter)) !== null && a !== void 0 ? a : void 0;
  }
}
class mg extends p {
  constructor(e, i) {
    var a, t, d;
    super(e), this.archivedAt = (a = C(i.archivedAt)) !== null && a !== void 0 ? a : void 0, this.createdAt = (t = C(i.createdAt)) !== null && t !== void 0 ? t : /* @__PURE__ */ new Date(), this.id = i.id, this.label = i.label, this.updatedAt = (d = C(i.updatedAt)) !== null && d !== void 0 ? d : /* @__PURE__ */ new Date(), this.url = i.url, this._creator = i.creator, this._project = i.project;
  }
  get creator() {
    return new le(this._request).fetch(this._creator.id);
  }
  get project() {
    return new Me(this._request).fetch(this._project.id);
  }
  create(e) {
    return new ah(this._request).fetch(e);
  }
  delete() {
    return new th(this._request).fetch(this.id);
  }
  update(e) {
    return new dh(this._request).fetch(this.id, e);
  }
}
class ug extends De {
  constructor(e, i, a) {
    super(e, i, a.nodes.map((t) => new mg(e, t)), new ye(e, a.pageInfo));
  }
}
class pg extends p {
  constructor(e, i) {
    super(e), this.lastSyncId = i.lastSyncId, this.success = i.success, this._projectLink = i.projectLink;
  }
  get projectLink() {
    return new Zg(this._request).fetch(this._projectLink.id);
  }
}
class cg extends p {
  constructor(e, i) {
    var a, t, d, r, o;
    super(e), this.archivedAt = (a = C(i.archivedAt)) !== null && a !== void 0 ? a : void 0, this.createdAt = (t = C(i.createdAt)) !== null && t !== void 0 ? t : /* @__PURE__ */ new Date(), this.description = (d = i.description) !== null && d !== void 0 ? d : void 0, this.id = i.id, this.name = i.name, this.sortOrder = i.sortOrder, this.targetDate = (r = i.targetDate) !== null && r !== void 0 ? r : void 0, this.updatedAt = (o = C(i.updatedAt)) !== null && o !== void 0 ? o : /* @__PURE__ */ new Date(), this._project = i.project;
  }
  get project() {
    return new Me(this._request).fetch(this._project.id);
  }
  create(e) {
    return new rh(this._request).fetch(e);
  }
  delete() {
    return new sh(this._request).fetch(this.id);
  }
  update(e) {
    return new oh(this._request).fetch(this.id, e);
  }
}
class kg extends De {
  constructor(e, i, a) {
    super(e, i, a.nodes.map((t) => new cg(e, t)), new ye(e, a.pageInfo));
  }
}
class vg extends p {
  constructor(e, i) {
    super(e), this.lastSyncId = i.lastSyncId, this.success = i.success;
  }
}
class gg extends p {
  constructor(e, i) {
    var a, t, d, r, o, s, A, l, m;
    super(e), this.archivedAt = (a = C(i.archivedAt)) !== null && a !== void 0 ? a : void 0, this.createdAt = (t = C(i.createdAt)) !== null && t !== void 0 ? t : /* @__PURE__ */ new Date(), this.emailedAt = (d = C(i.emailedAt)) !== null && d !== void 0 ? d : void 0, this.id = i.id, this.readAt = (r = C(i.readAt)) !== null && r !== void 0 ? r : void 0, this.snoozedUntilAt = (o = C(i.snoozedUntilAt)) !== null && o !== void 0 ? o : void 0, this.type = i.type, this.unsnoozedAt = (s = C(i.unsnoozedAt)) !== null && s !== void 0 ? s : void 0, this.updatedAt = (A = C(i.updatedAt)) !== null && A !== void 0 ? A : /* @__PURE__ */ new Date(), this.botActor = i.botActor ? new Lt(e, i.botActor) : void 0, this._actor = (l = i.actor) !== null && l !== void 0 ? l : void 0, this._project = i.project, this._projectUpdate = (m = i.projectUpdate) !== null && m !== void 0 ? m : void 0, this._user = i.user;
  }
  get actor() {
    var e, i;
    return !((e = this._actor) === null || e === void 0) && e.id ? new le(this._request).fetch((i = this._actor) === null || i === void 0 ? void 0 : i.id) : void 0;
  }
  get project() {
    return new Me(this._request).fetch(this._project.id);
  }
  get projectUpdate() {
    var e, i;
    return !((e = this._projectUpdate) === null || e === void 0) && e.id ? new Pt(this._request).fetch((i = this._projectUpdate) === null || i === void 0 ? void 0 : i.id) : void 0;
  }
  get user() {
    return new le(this._request).fetch(this._user.id);
  }
}
class hg extends p {
  constructor(e, i) {
    var a, t, d, r, o, s, A, l;
    super(e), this.active = i.active, this.archivedAt = (a = C(i.archivedAt)) !== null && a !== void 0 ? a : void 0, this.createdAt = (t = C(i.createdAt)) !== null && t !== void 0 ? t : /* @__PURE__ */ new Date(), this.id = i.id, this.notificationSubscriptionTypes = i.notificationSubscriptionTypes, this.updatedAt = (d = C(i.updatedAt)) !== null && d !== void 0 ? d : /* @__PURE__ */ new Date(), this._customView = (r = i.customView) !== null && r !== void 0 ? r : void 0, this._cycle = (o = i.cycle) !== null && o !== void 0 ? o : void 0, this._label = (s = i.label) !== null && s !== void 0 ? s : void 0, this._project = i.project, this._subscriber = i.subscriber, this._team = (A = i.team) !== null && A !== void 0 ? A : void 0, this._user = (l = i.user) !== null && l !== void 0 ? l : void 0;
  }
  get customView() {
    var e, i;
    return !((e = this._customView) === null || e === void 0) && e.id ? new Ln(this._request).fetch((i = this._customView) === null || i === void 0 ? void 0 : i.id) : void 0;
  }
  get cycle() {
    var e, i;
    return !((e = this._cycle) === null || e === void 0) && e.id ? new Vi(this._request).fetch((i = this._cycle) === null || i === void 0 ? void 0 : i.id) : void 0;
  }
  get label() {
    var e, i;
    return !((e = this._label) === null || e === void 0) && e.id ? new Nn(this._request).fetch((i = this._label) === null || i === void 0 ? void 0 : i.id) : void 0;
  }
  get project() {
    return new Me(this._request).fetch(this._project.id);
  }
  get subscriber() {
    return new le(this._request).fetch(this._subscriber.id);
  }
  get team() {
    var e, i;
    return !((e = this._team) === null || e === void 0) && e.id ? new xe(this._request).fetch((i = this._team) === null || i === void 0 ? void 0 : i.id) : void 0;
  }
  get user() {
    var e, i;
    return !((e = this._user) === null || e === void 0) && e.id ? new le(this._request).fetch((i = this._user) === null || i === void 0 ? void 0 : i.id) : void 0;
  }
}
class fg extends p {
  constructor(e, i) {
    var a;
    super(e), this.lastSyncId = i.lastSyncId, this.success = i.success, this._project = (a = i.project) !== null && a !== void 0 ? a : void 0;
  }
  get project() {
    var e, i;
    return !((e = this._project) === null || e === void 0) && e.id ? new Me(this._request).fetch((i = this._project) === null || i === void 0 ? void 0 : i.id) : void 0;
  }
}
class dD extends p {
  constructor(e, i) {
    super(e), this.totalCount = i.totalCount, this.archivePayload = new rA(e, i.archivePayload), this.pageInfo = new ye(e, i.pageInfo), this.nodes = i.nodes.map((a) => new rD(e, a));
  }
}
class rD extends p {
  constructor(e, i) {
    var a, t, d, r, o, s, A, l, m, u, c, k, g, N, y, h, E, S;
    super(e), this.archivedAt = (a = C(i.archivedAt)) !== null && a !== void 0 ? a : void 0, this.autoArchivedAt = (t = C(i.autoArchivedAt)) !== null && t !== void 0 ? t : void 0, this.canceledAt = (d = C(i.canceledAt)) !== null && d !== void 0 ? d : void 0, this.color = i.color, this.completedAt = (r = C(i.completedAt)) !== null && r !== void 0 ? r : void 0, this.completedIssueCountHistory = i.completedIssueCountHistory, this.completedScopeHistory = i.completedScopeHistory, this.content = (o = i.content) !== null && o !== void 0 ? o : void 0, this.createdAt = (s = C(i.createdAt)) !== null && s !== void 0 ? s : /* @__PURE__ */ new Date(), this.description = i.description, this.icon = (A = i.icon) !== null && A !== void 0 ? A : void 0, this.id = i.id, this.inProgressScopeHistory = i.inProgressScopeHistory, this.issueCountHistory = i.issueCountHistory, this.metadata = (l = ri(i.metadata)) !== null && l !== void 0 ? l : {}, this.name = i.name, this.progress = i.progress, this.projectUpdateRemindersPausedUntilAt = (m = C(i.projectUpdateRemindersPausedUntilAt)) !== null && m !== void 0 ? m : void 0, this.scope = i.scope, this.scopeHistory = i.scopeHistory, this.slackIssueComments = i.slackIssueComments, this.slackIssueStatuses = i.slackIssueStatuses, this.slackNewIssue = i.slackNewIssue, this.slugId = i.slugId, this.sortOrder = i.sortOrder, this.startDate = (u = i.startDate) !== null && u !== void 0 ? u : void 0, this.startedAt = (c = C(i.startedAt)) !== null && c !== void 0 ? c : void 0, this.state = i.state, this.targetDate = (k = i.targetDate) !== null && k !== void 0 ? k : void 0, this.trashed = (g = i.trashed) !== null && g !== void 0 ? g : void 0, this.updatedAt = (N = C(i.updatedAt)) !== null && N !== void 0 ? N : /* @__PURE__ */ new Date(), this.url = i.url, this._convertedFromIssue = (y = i.convertedFromIssue) !== null && y !== void 0 ? y : void 0, this._creator = i.creator, this._integrationsSettings = (h = i.integrationsSettings) !== null && h !== void 0 ? h : void 0, this._lastAppliedTemplate = (E = i.lastAppliedTemplate) !== null && E !== void 0 ? E : void 0, this._lead = (S = i.lead) !== null && S !== void 0 ? S : void 0;
  }
  get convertedFromIssue() {
    var e, i;
    return !((e = this._convertedFromIssue) === null || e === void 0) && e.id ? new Ii(this._request).fetch((i = this._convertedFromIssue) === null || i === void 0 ? void 0 : i.id) : void 0;
  }
  get creator() {
    return new le(this._request).fetch(this._creator.id);
  }
  get integrationsSettings() {
    var e, i;
    return !((e = this._integrationsSettings) === null || e === void 0) && e.id ? new Ld(this._request).fetch((i = this._integrationsSettings) === null || i === void 0 ? void 0 : i.id) : void 0;
  }
  get lastAppliedTemplate() {
    var e, i;
    return !((e = this._lastAppliedTemplate) === null || e === void 0) && e.id ? new dn(this._request).fetch((i = this._lastAppliedTemplate) === null || i === void 0 ? void 0 : i.id) : void 0;
  }
  get lead() {
    var e, i;
    return !((e = this._lead) === null || e === void 0) && e.id ? new le(this._request).fetch((i = this._lead) === null || i === void 0 ? void 0 : i.id) : void 0;
  }
}
class Ng extends p {
  constructor(e, i) {
    var a, t, d, r, o, s;
    super(e), this.archivedAt = (a = C(i.archivedAt)) !== null && a !== void 0 ? a : void 0, this.body = i.body, this.createdAt = (t = C(i.createdAt)) !== null && t !== void 0 ? t : /* @__PURE__ */ new Date(), this.diff = (d = ri(i.diff)) !== null && d !== void 0 ? d : void 0, this.diffMarkdown = (r = i.diffMarkdown) !== null && r !== void 0 ? r : void 0, this.editedAt = (o = C(i.editedAt)) !== null && o !== void 0 ? o : void 0, this.id = i.id, this.updatedAt = (s = C(i.updatedAt)) !== null && s !== void 0 ? s : /* @__PURE__ */ new Date(), this.url = i.url, this._project = i.project, this._user = i.user;
  }
  get project() {
    return new Me(this._request).fetch(this._project.id);
  }
  get user() {
    return new le(this._request).fetch(this._user.id);
  }
  create(e) {
    return new Ah(this._request).fetch(e);
  }
  delete() {
    return new mh(this._request).fetch(this.id);
  }
  update(e) {
    return new ph(this._request).fetch(this.id, e);
  }
}
class Eg extends De {
  constructor(e, i, a) {
    super(e, i, a.nodes.map((t) => new Ng(e, t)), new ye(e, a.pageInfo));
  }
}
class yg extends p {
  constructor(e, i) {
    var a, t, d, r;
    super(e), this.archivedAt = (a = C(i.archivedAt)) !== null && a !== void 0 ? a : void 0, this.createdAt = (t = C(i.createdAt)) !== null && t !== void 0 ? t : /* @__PURE__ */ new Date(), this.id = i.id, this.readAt = (d = C(i.readAt)) !== null && d !== void 0 ? d : /* @__PURE__ */ new Date(), this.updatedAt = (r = C(i.updatedAt)) !== null && r !== void 0 ? r : /* @__PURE__ */ new Date(), this._projectUpdate = i.projectUpdate, this._user = i.user;
  }
  get projectUpdate() {
    return new Pt(this._request).fetch(this._projectUpdate.id);
  }
  get user() {
    return new le(this._request).fetch(this._user.id);
  }
  create(e) {
    return new uh(this._request).fetch(e);
  }
}
class sD extends De {
  constructor(e, i, a) {
    super(e, i, a.nodes.map((t) => new yg(e, t)), new ye(e, a.pageInfo));
  }
}
class oD extends p {
  constructor(e, i) {
    super(e), this.lastSyncId = i.lastSyncId, this.success = i.success, this._projectUpdateInteraction = i.projectUpdateInteraction;
  }
  get projectUpdateInteraction() {
    return new EA(this._request).fetch(this._projectUpdateInteraction.id);
  }
}
class bg extends p {
  constructor(e, i) {
    super(e), this.lastSyncId = i.lastSyncId, this.success = i.success, this._projectUpdate = i.projectUpdate;
  }
  get projectUpdate() {
    return new Pt(this._request).fetch(this._projectUpdate.id);
  }
}
class lD extends p {
  constructor(e, i) {
    super(e), this.lastSyncId = i.lastSyncId, this.success = i.success;
  }
}
class AD extends p {
  constructor(e, i) {
    super(e), this.lastSyncId = i.lastSyncId, this.success = i.success, this._interaction = i.interaction, this._projectUpdate = i.projectUpdate;
  }
  get interaction() {
    return new EA(this._request).fetch(this._interaction.id);
  }
  get projectUpdate() {
    return new Pt(this._request).fetch(this._projectUpdate.id);
  }
}
class mD extends p {
  constructor(e, i) {
    var a, t, d;
    super(e), this.archivedAt = (a = C(i.archivedAt)) !== null && a !== void 0 ? a : void 0, this.createdAt = (t = C(i.createdAt)) !== null && t !== void 0 ? t : /* @__PURE__ */ new Date(), this.id = i.id, this.updatedAt = (d = C(i.updatedAt)) !== null && d !== void 0 ? d : /* @__PURE__ */ new Date();
  }
  create(e) {
    return new ch(this._request).fetch(e);
  }
  delete() {
    return new kh(this._request).fetch(this.id);
  }
}
class Ig extends p {
  constructor(e, i) {
    super(e), this.lastSyncId = i.lastSyncId, this.success = i.success, this.entity = new mD(e, i.entity);
  }
}
class uD extends p {
  constructor(e, i) {
    super(e), this.success = i.success;
  }
}
class pD extends p {
  constructor(e, i) {
    var a;
    super(e), this.identifier = (a = i.identifier) !== null && a !== void 0 ? a : void 0, this.kind = i.kind, this.limits = i.limits.map((t) => new cD(e, t));
  }
}
class cD extends p {
  constructor(e, i) {
    super(e), this.allowedAmount = i.allowedAmount, this.period = i.period, this.remainingAmount = i.remainingAmount, this.requestedAmount = i.requestedAmount, this.reset = i.reset, this.type = i.type;
  }
}
class kD extends p {
  constructor(e, i) {
    var a, t, d, r;
    super(e), this.archivedAt = (a = C(i.archivedAt)) !== null && a !== void 0 ? a : void 0, this.createdAt = (t = C(i.createdAt)) !== null && t !== void 0 ? t : /* @__PURE__ */ new Date(), this.emoji = i.emoji, this.id = i.id, this.updatedAt = (d = C(i.updatedAt)) !== null && d !== void 0 ? d : /* @__PURE__ */ new Date(), this._user = (r = i.user) !== null && r !== void 0 ? r : void 0;
  }
  get user() {
    var e, i;
    return !((e = this._user) === null || e === void 0) && e.id ? new le(this._request).fetch((i = this._user) === null || i === void 0 ? void 0 : i.id) : void 0;
  }
  create(e) {
    return new vh(this._request).fetch(e);
  }
  delete() {
    return new gh(this._request).fetch(this.id);
  }
}
class vD extends p {
  constructor(e, i) {
    super(e), this.lastSyncId = i.lastSyncId, this.success = i.success, this.reaction = new kD(e, i.reaction);
  }
}
class Cg extends p {
  constructor(e, i) {
    var a, t, d, r, o;
    super(e), this.archivedAt = (a = C(i.archivedAt)) !== null && a !== void 0 ? a : void 0, this.color = (t = i.color) !== null && t !== void 0 ? t : void 0, this.createdAt = (d = C(i.createdAt)) !== null && d !== void 0 ? d : /* @__PURE__ */ new Date(), this.description = (r = i.description) !== null && r !== void 0 ? r : void 0, this.id = i.id, this.name = i.name, this.slugId = i.slugId, this.sortOrder = i.sortOrder, this.updatedAt = (o = C(i.updatedAt)) !== null && o !== void 0 ? o : /* @__PURE__ */ new Date(), this._creator = i.creator, this._owner = i.owner;
  }
  get creator() {
    return new le(this._request).fetch(this._creator.id);
  }
  get organization() {
    return new Zi(this._request).fetch();
  }
  get owner() {
    return new le(this._request).fetch(this._owner.id);
  }
  projects(e) {
    return new WV(this._request, this.id, e).fetch(e);
  }
  archive() {
    return new hh(this._request).fetch(this.id);
  }
  create(e) {
    return new fh(this._request).fetch(e);
  }
  delete() {
    return new Nh(this._request).fetch(this.id);
  }
  unarchive() {
    return new Ih(this._request).fetch(this.id);
  }
  update(e) {
    return new Ch(this._request).fetch(this.id, e);
  }
}
class Bg extends p {
  constructor(e, i) {
    var a;
    super(e), this.lastSyncId = i.lastSyncId, this.success = i.success, this._entity = (a = i.entity) !== null && a !== void 0 ? a : void 0;
  }
  get entity() {
    var e, i;
    return !((e = this._entity) === null || e === void 0) && e.id ? new qd(this._request).fetch((i = this._entity) === null || i === void 0 ? void 0 : i.id) : void 0;
  }
}
class gD extends De {
  constructor(e, i, a) {
    super(e, i, a.nodes.map((t) => new Cg(e, t)), new ye(e, a.pageInfo));
  }
}
class Qg extends p {
  constructor(e, i) {
    super(e), this.lastSyncId = i.lastSyncId, this.success = i.success, this._roadmap = i.roadmap;
  }
  get roadmap() {
    return new qd(this._request).fetch(this._roadmap.id);
  }
}
class Sg extends p {
  constructor(e, i) {
    var a, t, d;
    super(e), this.archivedAt = (a = C(i.archivedAt)) !== null && a !== void 0 ? a : void 0, this.createdAt = (t = C(i.createdAt)) !== null && t !== void 0 ? t : /* @__PURE__ */ new Date(), this.id = i.id, this.sortOrder = i.sortOrder, this.updatedAt = (d = C(i.updatedAt)) !== null && d !== void 0 ? d : /* @__PURE__ */ new Date(), this._project = i.project, this._roadmap = i.roadmap;
  }
  get project() {
    return new Me(this._request).fetch(this._project.id);
  }
  get roadmap() {
    return new qd(this._request).fetch(this._roadmap.id);
  }
  create(e) {
    return new Eh(this._request).fetch(e);
  }
  delete() {
    return new yh(this._request).fetch(this.id);
  }
  update(e) {
    return new bh(this._request).fetch(this.id, e);
  }
}
class hD extends De {
  constructor(e, i, a) {
    super(e, i, a.nodes.map((t) => new Sg(e, t)), new ye(e, a.pageInfo));
  }
}
class Dg extends p {
  constructor(e, i) {
    super(e), this.lastSyncId = i.lastSyncId, this.success = i.success, this._roadmapToProject = i.roadmapToProject;
  }
  get roadmapToProject() {
    return new Kg(this._request).fetch(this._roadmapToProject.id);
  }
}
class fD extends p {
  constructor(e, i) {
    super(e), this.hasDefaultAsk = i.hasDefaultAsk, this.id = i.id;
  }
}
class ND extends p {
  constructor(e, i) {
    var a, t, d, r, o, s;
    super(e), this.autoCreateOnBotMention = (a = i.autoCreateOnBotMention) !== null && a !== void 0 ? a : void 0, this.autoCreateOnEmoji = (t = i.autoCreateOnEmoji) !== null && t !== void 0 ? t : void 0, this.autoCreateOnMessage = (d = i.autoCreateOnMessage) !== null && d !== void 0 ? d : void 0, this.botAdded = (r = i.botAdded) !== null && r !== void 0 ? r : void 0, this.id = i.id, this.isPrivate = (o = i.isPrivate) !== null && o !== void 0 ? o : void 0, this.isShared = (s = i.isShared) !== null && s !== void 0 ? s : void 0, this.name = i.name, this.teams = i.teams.map((A) => new fD(e, A));
  }
}
class ED extends p {
  constructor(e, i) {
    super(e), this.samlSsoUrl = i.samlSsoUrl, this.success = i.success;
  }
}
class wg extends p {
  constructor(e, i) {
    var a, t, d, r, o, s, A, l, m, u, c, k, g, N, y, h, E, S, b, I, D, B, q;
    super(e), this.archivedAt = (a = C(i.archivedAt)) !== null && a !== void 0 ? a : void 0, this.autoArchivePeriod = i.autoArchivePeriod, this.autoClosePeriod = (t = i.autoClosePeriod) !== null && t !== void 0 ? t : void 0, this.autoCloseStateId = (d = i.autoCloseStateId) !== null && d !== void 0 ? d : void 0, this.color = (r = i.color) !== null && r !== void 0 ? r : void 0, this.createdAt = (o = C(i.createdAt)) !== null && o !== void 0 ? o : /* @__PURE__ */ new Date(), this.cycleCalenderUrl = i.cycleCalenderUrl, this.cycleCooldownTime = i.cycleCooldownTime, this.cycleDuration = i.cycleDuration, this.cycleIssueAutoAssignCompleted = i.cycleIssueAutoAssignCompleted, this.cycleIssueAutoAssignStarted = i.cycleIssueAutoAssignStarted, this.cycleLockToActive = i.cycleLockToActive, this.cycleStartDay = i.cycleStartDay, this.cyclesEnabled = i.cyclesEnabled, this.defaultIssueEstimate = i.defaultIssueEstimate, this.defaultTemplateForMembersId = (s = i.defaultTemplateForMembersId) !== null && s !== void 0 ? s : void 0, this.defaultTemplateForNonMembersId = (A = i.defaultTemplateForNonMembersId) !== null && A !== void 0 ? A : void 0, this.description = (l = i.description) !== null && l !== void 0 ? l : void 0, this.groupIssueHistory = i.groupIssueHistory, this.icon = (m = i.icon) !== null && m !== void 0 ? m : void 0, this.id = i.id, this.inviteHash = i.inviteHash, this.issueCount = i.issueCount, this.issueEstimationAllowZero = i.issueEstimationAllowZero, this.issueEstimationExtended = i.issueEstimationExtended, this.issueEstimationType = i.issueEstimationType, this.issueOrderingNoPriorityFirst = i.issueOrderingNoPriorityFirst, this.issueSortOrderDefaultToBottom = i.issueSortOrderDefaultToBottom, this.key = i.key, this.name = i.name, this.private = i.private, this.requirePriorityToLeaveTriage = i.requirePriorityToLeaveTriage, this.slackIssueComments = i.slackIssueComments, this.slackIssueStatuses = i.slackIssueStatuses, this.slackNewIssue = i.slackNewIssue, this.timezone = i.timezone, this.triageEnabled = i.triageEnabled, this.upcomingCycleCount = i.upcomingCycleCount, this.updatedAt = (u = C(i.updatedAt)) !== null && u !== void 0 ? u : /* @__PURE__ */ new Date(), this._activeCycle = (c = i.activeCycle) !== null && c !== void 0 ? c : void 0, this._defaultIssueState = (k = i.defaultIssueState) !== null && k !== void 0 ? k : void 0, this._defaultProjectTemplate = (g = i.defaultProjectTemplate) !== null && g !== void 0 ? g : void 0, this._defaultTemplateForMembers = (N = i.defaultTemplateForMembers) !== null && N !== void 0 ? N : void 0, this._defaultTemplateForNonMembers = (y = i.defaultTemplateForNonMembers) !== null && y !== void 0 ? y : void 0, this._draftWorkflowState = (h = i.draftWorkflowState) !== null && h !== void 0 ? h : void 0, this._integrationsSettings = (E = i.integrationsSettings) !== null && E !== void 0 ? E : void 0, this._markedAsDuplicateWorkflowState = (S = i.markedAsDuplicateWorkflowState) !== null && S !== void 0 ? S : void 0, this._mergeWorkflowState = (b = i.mergeWorkflowState) !== null && b !== void 0 ? b : void 0, this._mergeableWorkflowState = (I = i.mergeableWorkflowState) !== null && I !== void 0 ? I : void 0, this._reviewWorkflowState = (D = i.reviewWorkflowState) !== null && D !== void 0 ? D : void 0, this._startWorkflowState = (B = i.startWorkflowState) !== null && B !== void 0 ? B : void 0, this._triageIssueState = (q = i.triageIssueState) !== null && q !== void 0 ? q : void 0;
  }
  get activeCycle() {
    var e, i;
    return !((e = this._activeCycle) === null || e === void 0) && e.id ? new Vi(this._request).fetch((i = this._activeCycle) === null || i === void 0 ? void 0 : i.id) : void 0;
  }
  get defaultIssueState() {
    var e, i;
    return !((e = this._defaultIssueState) === null || e === void 0) && e.id ? new Ui(this._request).fetch((i = this._defaultIssueState) === null || i === void 0 ? void 0 : i.id) : void 0;
  }
  get defaultProjectTemplate() {
    var e, i;
    return !((e = this._defaultProjectTemplate) === null || e === void 0) && e.id ? new dn(this._request).fetch((i = this._defaultProjectTemplate) === null || i === void 0 ? void 0 : i.id) : void 0;
  }
  get defaultTemplateForMembers() {
    var e, i;
    return !((e = this._defaultTemplateForMembers) === null || e === void 0) && e.id ? new dn(this._request).fetch((i = this._defaultTemplateForMembers) === null || i === void 0 ? void 0 : i.id) : void 0;
  }
  get defaultTemplateForNonMembers() {
    var e, i;
    return !((e = this._defaultTemplateForNonMembers) === null || e === void 0) && e.id ? new dn(this._request).fetch((i = this._defaultTemplateForNonMembers) === null || i === void 0 ? void 0 : i.id) : void 0;
  }
  get draftWorkflowState() {
    var e, i;
    return !((e = this._draftWorkflowState) === null || e === void 0) && e.id ? new Ui(this._request).fetch((i = this._draftWorkflowState) === null || i === void 0 ? void 0 : i.id) : void 0;
  }
  get integrationsSettings() {
    var e, i;
    return !((e = this._integrationsSettings) === null || e === void 0) && e.id ? new Ld(this._request).fetch((i = this._integrationsSettings) === null || i === void 0 ? void 0 : i.id) : void 0;
  }
  get markedAsDuplicateWorkflowState() {
    var e, i;
    return !((e = this._markedAsDuplicateWorkflowState) === null || e === void 0) && e.id ? new Ui(this._request).fetch((i = this._markedAsDuplicateWorkflowState) === null || i === void 0 ? void 0 : i.id) : void 0;
  }
  get mergeWorkflowState() {
    var e, i;
    return !((e = this._mergeWorkflowState) === null || e === void 0) && e.id ? new Ui(this._request).fetch((i = this._mergeWorkflowState) === null || i === void 0 ? void 0 : i.id) : void 0;
  }
  get mergeableWorkflowState() {
    var e, i;
    return !((e = this._mergeableWorkflowState) === null || e === void 0) && e.id ? new Ui(this._request).fetch((i = this._mergeableWorkflowState) === null || i === void 0 ? void 0 : i.id) : void 0;
  }
  get organization() {
    return new Zi(this._request).fetch();
  }
  get reviewWorkflowState() {
    var e, i;
    return !((e = this._reviewWorkflowState) === null || e === void 0) && e.id ? new Ui(this._request).fetch((i = this._reviewWorkflowState) === null || i === void 0 ? void 0 : i.id) : void 0;
  }
  get startWorkflowState() {
    var e, i;
    return !((e = this._startWorkflowState) === null || e === void 0) && e.id ? new Ui(this._request).fetch((i = this._startWorkflowState) === null || i === void 0 ? void 0 : i.id) : void 0;
  }
  get triageIssueState() {
    var e, i;
    return !((e = this._triageIssueState) === null || e === void 0) && e.id ? new Ui(this._request).fetch((i = this._triageIssueState) === null || i === void 0 ? void 0 : i.id) : void 0;
  }
  cycles(e) {
    return new zV(this._request, this.id, e).fetch(e);
  }
  issues(e) {
    return new ZV(this._request, this.id, e).fetch(e);
  }
  labels(e) {
    return new KV(this._request, this.id, e).fetch(e);
  }
  members(e) {
    return new XV(this._request, this.id, e).fetch(e);
  }
  memberships(e) {
    return new $V(this._request, this.id, e).fetch(e);
  }
  projects(e) {
    return new eT(this._request, this.id, e).fetch(e);
  }
  states(e) {
    return new iT(this._request, this.id, e).fetch(e);
  }
  templates(e) {
    return new nT(this._request, this.id, e).fetch(e);
  }
  webhooks(e) {
    return new aT(this._request, this.id, e).fetch(e);
  }
  create(e, i) {
    return new Bh(this._request).fetch(e, i);
  }
  delete() {
    return new Qh(this._request).fetch(this.id);
  }
  update(e) {
    return new Fh(this._request).fetch(this.id, e);
  }
}
class Vd extends De {
  constructor(e, i, a) {
    super(e, i, a.nodes.map((t) => new wg(e, t)), new ye(e, a.pageInfo));
  }
}
class Fg extends p {
  constructor(e, i) {
    var a, t, d, r;
    super(e), this.archivedAt = (a = C(i.archivedAt)) !== null && a !== void 0 ? a : void 0, this.createdAt = (t = C(i.createdAt)) !== null && t !== void 0 ? t : /* @__PURE__ */ new Date(), this.id = i.id, this.owner = (d = i.owner) !== null && d !== void 0 ? d : void 0, this.sortOrder = i.sortOrder, this.updatedAt = (r = C(i.updatedAt)) !== null && r !== void 0 ? r : /* @__PURE__ */ new Date(), this._team = i.team, this._user = i.user;
  }
  get team() {
    return new xe(this._request).fetch(this._team.id);
  }
  get user() {
    return new le(this._request).fetch(this._user.id);
  }
  create(e) {
    return new Sh(this._request).fetch(e);
  }
  delete() {
    return new Dh(this._request).fetch(this.id);
  }
  update(e) {
    return new wh(this._request).fetch(this.id, e);
  }
}
class gA extends De {
  constructor(e, i, a) {
    super(e, i, a.nodes.map((t) => new Fg(e, t)), new ye(e, a.pageInfo));
  }
}
class Vg extends p {
  constructor(e, i) {
    var a;
    super(e), this.lastSyncId = i.lastSyncId, this.success = i.success, this._teamMembership = (a = i.teamMembership) !== null && a !== void 0 ? a : void 0;
  }
  get teamMembership() {
    var e, i;
    return !((e = this._teamMembership) === null || e === void 0) && e.id ? new Xg(this._request).fetch((i = this._teamMembership) === null || i === void 0 ? void 0 : i.id) : void 0;
  }
}
class Tg extends p {
  constructor(e, i) {
    var a, t, d, r, o, s, A, l;
    super(e), this.active = i.active, this.archivedAt = (a = C(i.archivedAt)) !== null && a !== void 0 ? a : void 0, this.createdAt = (t = C(i.createdAt)) !== null && t !== void 0 ? t : /* @__PURE__ */ new Date(), this.id = i.id, this.notificationSubscriptionTypes = i.notificationSubscriptionTypes, this.updatedAt = (d = C(i.updatedAt)) !== null && d !== void 0 ? d : /* @__PURE__ */ new Date(), this._customView = (r = i.customView) !== null && r !== void 0 ? r : void 0, this._cycle = (o = i.cycle) !== null && o !== void 0 ? o : void 0, this._label = (s = i.label) !== null && s !== void 0 ? s : void 0, this._project = (A = i.project) !== null && A !== void 0 ? A : void 0, this._subscriber = i.subscriber, this._team = i.team, this._user = (l = i.user) !== null && l !== void 0 ? l : void 0;
  }
  get customView() {
    var e, i;
    return !((e = this._customView) === null || e === void 0) && e.id ? new Ln(this._request).fetch((i = this._customView) === null || i === void 0 ? void 0 : i.id) : void 0;
  }
  get cycle() {
    var e, i;
    return !((e = this._cycle) === null || e === void 0) && e.id ? new Vi(this._request).fetch((i = this._cycle) === null || i === void 0 ? void 0 : i.id) : void 0;
  }
  get label() {
    var e, i;
    return !((e = this._label) === null || e === void 0) && e.id ? new Nn(this._request).fetch((i = this._label) === null || i === void 0 ? void 0 : i.id) : void 0;
  }
  get project() {
    var e, i;
    return !((e = this._project) === null || e === void 0) && e.id ? new Me(this._request).fetch((i = this._project) === null || i === void 0 ? void 0 : i.id) : void 0;
  }
  get subscriber() {
    return new le(this._request).fetch(this._subscriber.id);
  }
  get team() {
    return new xe(this._request).fetch(this._team.id);
  }
  get user() {
    var e, i;
    return !((e = this._user) === null || e === void 0) && e.id ? new le(this._request).fetch((i = this._user) === null || i === void 0 ? void 0 : i.id) : void 0;
  }
}
class hA extends p {
  constructor(e, i) {
    var a;
    super(e), this.lastSyncId = i.lastSyncId, this.success = i.success, this._team = (a = i.team) !== null && a !== void 0 ? a : void 0;
  }
  get team() {
    var e, i;
    return !((e = this._team) === null || e === void 0) && e.id ? new xe(this._request).fetch((i = this._team) === null || i === void 0 ? void 0 : i.id) : void 0;
  }
}
class fA extends p {
  constructor(e, i) {
    var a, t, d, r, o, s, A, l;
    super(e), this.archivedAt = (a = C(i.archivedAt)) !== null && a !== void 0 ? a : void 0, this.createdAt = (t = C(i.createdAt)) !== null && t !== void 0 ? t : /* @__PURE__ */ new Date(), this.description = (d = i.description) !== null && d !== void 0 ? d : void 0, this.id = i.id, this.name = i.name, this.templateData = (r = ri(i.templateData)) !== null && r !== void 0 ? r : {}, this.type = i.type, this.updatedAt = (o = C(i.updatedAt)) !== null && o !== void 0 ? o : /* @__PURE__ */ new Date(), this._creator = (s = i.creator) !== null && s !== void 0 ? s : void 0, this._lastUpdatedBy = (A = i.lastUpdatedBy) !== null && A !== void 0 ? A : void 0, this._team = (l = i.team) !== null && l !== void 0 ? l : void 0;
  }
  get creator() {
    var e, i;
    return !((e = this._creator) === null || e === void 0) && e.id ? new le(this._request).fetch((i = this._creator) === null || i === void 0 ? void 0 : i.id) : void 0;
  }
  get lastUpdatedBy() {
    var e, i;
    return !((e = this._lastUpdatedBy) === null || e === void 0) && e.id ? new le(this._request).fetch((i = this._lastUpdatedBy) === null || i === void 0 ? void 0 : i.id) : void 0;
  }
  get organization() {
    return new Zi(this._request).fetch();
  }
  get team() {
    var e, i;
    return !((e = this._team) === null || e === void 0) && e.id ? new xe(this._request).fetch((i = this._team) === null || i === void 0 ? void 0 : i.id) : void 0;
  }
  create(e) {
    return new Vh(this._request).fetch(e);
  }
  delete() {
    return new Th(this._request).fetch(this.id);
  }
  update(e) {
    return new _h(this._request).fetch(this.id, e);
  }
}
class _g extends p {
  constructor(e, i) {
    super(e), this.pageInfo = new ye(e, i.pageInfo);
  }
  get nodes() {
    return new $g(this._request).fetch();
  }
}
class Rg extends p {
  constructor(e, i) {
    super(e), this.lastSyncId = i.lastSyncId, this.success = i.success, this._template = i.template;
  }
  get template() {
    return new dn(this._request).fetch(this._template.id);
  }
}
class yD extends p {
  constructor(e, i) {
    var a;
    super(e), this.assetUrl = i.assetUrl, this.contentType = i.contentType, this.filename = i.filename, this.metaData = (a = ri(i.metaData)) !== null && a !== void 0 ? a : void 0, this.size = i.size, this.uploadUrl = i.uploadUrl, this.headers = i.headers.map((t) => new bD(e, t));
  }
}
class bD extends p {
  constructor(e, i) {
    super(e), this.key = i.key, this.value = i.value;
  }
}
class Ug extends p {
  constructor(e, i) {
    super(e), this.lastSyncId = i.lastSyncId, this.success = i.success, this.uploadFile = i.uploadFile ? new yD(e, i.uploadFile) : void 0;
  }
}
class NA extends p {
  constructor(e, i) {
    var a, t, d, r, o, s, A, l, m, u, c, k;
    super(e), this.active = i.active, this.admin = i.admin, this.archivedAt = (a = C(i.archivedAt)) !== null && a !== void 0 ? a : void 0, this.avatarUrl = (t = i.avatarUrl) !== null && t !== void 0 ? t : void 0, this.calendarHash = (d = i.calendarHash) !== null && d !== void 0 ? d : void 0, this.createdAt = (r = C(i.createdAt)) !== null && r !== void 0 ? r : /* @__PURE__ */ new Date(), this.createdIssueCount = i.createdIssueCount, this.description = (o = i.description) !== null && o !== void 0 ? o : void 0, this.disableReason = (s = i.disableReason) !== null && s !== void 0 ? s : void 0, this.displayName = i.displayName, this.email = i.email, this.guest = i.guest, this.id = i.id, this.inviteHash = i.inviteHash, this.isMe = i.isMe, this.lastSeen = (A = C(i.lastSeen)) !== null && A !== void 0 ? A : void 0, this.name = i.name, this.statusEmoji = (l = i.statusEmoji) !== null && l !== void 0 ? l : void 0, this.statusLabel = (m = i.statusLabel) !== null && m !== void 0 ? m : void 0, this.statusUntilAt = (u = C(i.statusUntilAt)) !== null && u !== void 0 ? u : void 0, this.timezone = (c = i.timezone) !== null && c !== void 0 ? c : void 0, this.updatedAt = (k = C(i.updatedAt)) !== null && k !== void 0 ? k : /* @__PURE__ */ new Date(), this.url = i.url;
  }
  get organization() {
    return new Zi(this._request).fetch();
  }
  assignedIssues(e) {
    return new tT(this._request, this.id, e).fetch(e);
  }
  createdIssues(e) {
    return new dT(this._request, this.id, e).fetch(e);
  }
  teamMemberships(e) {
    return new rT(this._request, this.id, e).fetch(e);
  }
  teams(e) {
    return new sT(this._request, this.id, e).fetch(e);
  }
  suspend() {
    return new Uh(this._request).fetch(this.id);
  }
  unsuspend() {
    return new Lh(this._request).fetch(this.id);
  }
  update(e) {
    return new qh(this._request).fetch(this.id, e);
  }
}
class qt extends p {
  constructor(e, i) {
    super(e), this.success = i.success;
  }
}
class ID extends p {
  constructor(e, i) {
    var a, t, d;
    super(e), this.approvalErrorCode = (a = i.approvalErrorCode) !== null && a !== void 0 ? a : void 0, this.clientId = i.clientId, this.createdByLinear = i.createdByLinear, this.description = (t = i.description) !== null && t !== void 0 ? t : void 0, this.developer = i.developer, this.developerUrl = i.developerUrl, this.id = i.id, this.imageUrl = (d = i.imageUrl) !== null && d !== void 0 ? d : void 0, this.isAuthorized = i.isAuthorized, this.name = i.name, this.webhooksEnabled = i.webhooksEnabled;
  }
}
class Td extends De {
  constructor(e, i, a) {
    super(e, i, a.nodes.map((t) => new NA(e, t)), new ye(e, a.pageInfo));
  }
}
class Lg extends p {
  constructor(e, i) {
    var a, t, d, r, o, s, A, l;
    super(e), this.active = i.active, this.archivedAt = (a = C(i.archivedAt)) !== null && a !== void 0 ? a : void 0, this.createdAt = (t = C(i.createdAt)) !== null && t !== void 0 ? t : /* @__PURE__ */ new Date(), this.id = i.id, this.notificationSubscriptionTypes = i.notificationSubscriptionTypes, this.updatedAt = (d = C(i.updatedAt)) !== null && d !== void 0 ? d : /* @__PURE__ */ new Date(), this._customView = (r = i.customView) !== null && r !== void 0 ? r : void 0, this._cycle = (o = i.cycle) !== null && o !== void 0 ? o : void 0, this._label = (s = i.label) !== null && s !== void 0 ? s : void 0, this._project = (A = i.project) !== null && A !== void 0 ? A : void 0, this._subscriber = i.subscriber, this._team = (l = i.team) !== null && l !== void 0 ? l : void 0, this._user = i.user;
  }
  get customView() {
    var e, i;
    return !((e = this._customView) === null || e === void 0) && e.id ? new Ln(this._request).fetch((i = this._customView) === null || i === void 0 ? void 0 : i.id) : void 0;
  }
  get cycle() {
    var e, i;
    return !((e = this._cycle) === null || e === void 0) && e.id ? new Vi(this._request).fetch((i = this._cycle) === null || i === void 0 ? void 0 : i.id) : void 0;
  }
  get label() {
    var e, i;
    return !((e = this._label) === null || e === void 0) && e.id ? new Nn(this._request).fetch((i = this._label) === null || i === void 0 ? void 0 : i.id) : void 0;
  }
  get project() {
    var e, i;
    return !((e = this._project) === null || e === void 0) && e.id ? new Me(this._request).fetch((i = this._project) === null || i === void 0 ? void 0 : i.id) : void 0;
  }
  get subscriber() {
    return new le(this._request).fetch(this._subscriber.id);
  }
  get team() {
    var e, i;
    return !((e = this._team) === null || e === void 0) && e.id ? new xe(this._request).fetch((i = this._team) === null || i === void 0 ? void 0 : i.id) : void 0;
  }
  get user() {
    return new le(this._request).fetch(this._user.id);
  }
}
class _d extends p {
  constructor(e, i) {
    var a;
    super(e), this.lastSyncId = i.lastSyncId, this.success = i.success, this._user = (a = i.user) !== null && a !== void 0 ? a : void 0;
  }
  get user() {
    var e, i;
    return !((e = this._user) === null || e === void 0) && e.id ? new le(this._request).fetch((i = this._user) === null || i === void 0 ? void 0 : i.id) : void 0;
  }
}
class CD extends p {
  constructor(e, i) {
    var a, t, d, r, o;
    super(e), this.archivedAt = (a = C(i.archivedAt)) !== null && a !== void 0 ? a : void 0, this.calendarHash = (t = i.calendarHash) !== null && t !== void 0 ? t : void 0, this.createdAt = (d = C(i.createdAt)) !== null && d !== void 0 ? d : /* @__PURE__ */ new Date(), this.id = i.id, this.notificationPreferences = (r = ri(i.notificationPreferences)) !== null && r !== void 0 ? r : {}, this.showFullUserNames = i.showFullUserNames, this.unsubscribedFrom = i.unsubscribedFrom, this.updatedAt = (o = C(i.updatedAt)) !== null && o !== void 0 ? o : /* @__PURE__ */ new Date(), this._user = i.user;
  }
  get user() {
    return new le(this._request).fetch(this._user.id);
  }
  update(e) {
    return new Rh(this._request).fetch(this.id, e);
  }
}
class qg extends p {
  constructor(e, i) {
    super(e), this.flag = i.flag, this.lastSyncId = i.lastSyncId, this.success = i.success, this.value = i.value;
  }
}
class BD extends p {
  constructor(e, i) {
    super(e), this.lastSyncId = i.lastSyncId, this.success = i.success;
  }
}
class QD extends p {
  constructor(e, i) {
    super(e), this.lastSyncId = i.lastSyncId, this.success = i.success;
  }
  get userSettings() {
    return new e0(this._request).fetch();
  }
}
class SD extends p {
  constructor(e, i) {
    var a, t, d;
    super(e), this.archivedAt = (a = C(i.archivedAt)) !== null && a !== void 0 ? a : void 0, this.createdAt = (t = C(i.createdAt)) !== null && t !== void 0 ? t : /* @__PURE__ */ new Date(), this.id = i.id, this.type = i.type, this.updatedAt = (d = C(i.updatedAt)) !== null && d !== void 0 ? d : /* @__PURE__ */ new Date(), this.viewType = i.viewType;
  }
  create(e) {
    return new Ph(this._request).fetch(e);
  }
  delete() {
    return new Oh(this._request).fetch(this.id);
  }
  update(e) {
    return new Gh(this._request).fetch(this.id, e);
  }
}
class Pg extends p {
  constructor(e, i) {
    super(e), this.lastSyncId = i.lastSyncId, this.success = i.success, this.viewPreferences = new SD(e, i.viewPreferences);
  }
}
class Og extends p {
  constructor(e, i) {
    var a, t, d, r, o, s, A, l;
    super(e), this.allPublicTeams = i.allPublicTeams, this.archivedAt = (a = C(i.archivedAt)) !== null && a !== void 0 ? a : void 0, this.createdAt = (t = C(i.createdAt)) !== null && t !== void 0 ? t : /* @__PURE__ */ new Date(), this.enabled = i.enabled, this.id = i.id, this.label = (d = i.label) !== null && d !== void 0 ? d : void 0, this.resourceTypes = i.resourceTypes, this.secret = (r = i.secret) !== null && r !== void 0 ? r : void 0, this.updatedAt = (o = C(i.updatedAt)) !== null && o !== void 0 ? o : /* @__PURE__ */ new Date(), this.url = (s = i.url) !== null && s !== void 0 ? s : void 0, this._creator = (A = i.creator) !== null && A !== void 0 ? A : void 0, this._team = (l = i.team) !== null && l !== void 0 ? l : void 0;
  }
  get creator() {
    var e, i;
    return !((e = this._creator) === null || e === void 0) && e.id ? new le(this._request).fetch((i = this._creator) === null || i === void 0 ? void 0 : i.id) : void 0;
  }
  get team() {
    var e, i;
    return !((e = this._team) === null || e === void 0) && e.id ? new xe(this._request).fetch((i = this._team) === null || i === void 0 ? void 0 : i.id) : void 0;
  }
  create(e) {
    return new Mh(this._request).fetch(e);
  }
  delete() {
    return new xh(this._request).fetch(this.id);
  }
  update(e) {
    return new Yh(this._request).fetch(this.id, e);
  }
}
class Gg extends De {
  constructor(e, i, a) {
    super(e, i, a.nodes.map((t) => new Og(e, t)), new ye(e, a.pageInfo));
  }
}
class Mg extends p {
  constructor(e, i) {
    super(e), this.lastSyncId = i.lastSyncId, this.success = i.success, this._webhook = i.webhook;
  }
  get webhook() {
    return new i0(this._request).fetch(this._webhook.id);
  }
}
class xg extends p {
  constructor(e, i) {
    var a, t, d, r;
    super(e), this.archivedAt = (a = C(i.archivedAt)) !== null && a !== void 0 ? a : void 0, this.color = i.color, this.createdAt = (t = C(i.createdAt)) !== null && t !== void 0 ? t : /* @__PURE__ */ new Date(), this.description = (d = i.description) !== null && d !== void 0 ? d : void 0, this.id = i.id, this.name = i.name, this.position = i.position, this.type = i.type, this.updatedAt = (r = C(i.updatedAt)) !== null && r !== void 0 ? r : /* @__PURE__ */ new Date(), this._team = i.team;
  }
  get team() {
    return new xe(this._request).fetch(this._team.id);
  }
  issues(e) {
    return new oT(this._request, this.id, e).fetch(e);
  }
  archive() {
    return new Jh(this._request).fetch(this.id);
  }
  create(e) {
    return new Hh(this._request).fetch(e);
  }
  update(e) {
    return new jh(this._request).fetch(this.id, e);
  }
}
class DD extends p {
  constructor(e, i) {
    var a;
    super(e), this.lastSyncId = i.lastSyncId, this.success = i.success, this._entity = (a = i.entity) !== null && a !== void 0 ? a : void 0;
  }
  get entity() {
    var e, i;
    return !((e = this._entity) === null || e === void 0) && e.id ? new Ui(this._request).fetch((i = this._entity) === null || i === void 0 ? void 0 : i.id) : void 0;
  }
}
class Yg extends De {
  constructor(e, i, a) {
    super(e, i, a.nodes.map((t) => new xg(e, t)), new ye(e, a.pageInfo));
  }
}
class Jg extends p {
  constructor(e, i) {
    super(e), this.lastSyncId = i.lastSyncId, this.success = i.success, this._workflowState = i.workflowState;
  }
  get workflowState() {
    return new Ui(this._request).fetch(this._workflowState.id);
  }
}
class wD extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(aB, e)).administrableTeams;
      return new Vd(this._request, (a) => this.fetch(de(Object.assign(Object.assign({}, e), a))), i);
    });
  }
}
class FD extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(tB, e)).apiKeys;
      return new t7(this._request, (a) => this.fetch(de(Object.assign(Object.assign({}, e), a))), i);
    });
  }
}
class VD extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(dB, { clientId: e })).applicationInfo;
      return new r7(this._request, i);
    });
  }
}
class TD extends p {
  constructor(e) {
    super(e);
  }
  fetch(e, i, a) {
    return f(this, void 0, void 0, function* () {
      const t = (yield this._request(rB, Object.assign({ clientId: e, scope: i }, a))).applicationWithAuthorization;
      return new ID(this._request, t);
    });
  }
}
class is extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(sB, { id: e })).attachment;
      return new Vv(this._request, i);
    });
  }
}
class _D extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(oB, { id: e })).attachmentIssue;
      return new Dd(this._request, i);
    });
  }
}
class RD extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(lB, e)).attachments;
      return new sA(this._request, (a) => this.fetch(de(Object.assign(Object.assign({}, e), a))), i);
    });
  }
}
class UD extends p {
  constructor(e) {
    super(e);
  }
  fetch(e, i) {
    return f(this, void 0, void 0, function* () {
      const a = (yield this._request(AB, Object.assign({ url: e }, i))).attachmentsForURL;
      return new sA(this._request, (t) => this.fetch(e, de(Object.assign(Object.assign({}, i), t))), a);
    });
  }
}
class LD extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(mB, e)).auditEntries;
      return new A7(this._request, (a) => this.fetch(de(Object.assign(Object.assign({}, e), a))), i);
    });
  }
}
class qD extends p {
  constructor(e) {
    super(e);
  }
  fetch() {
    return f(this, void 0, void 0, function* () {
      return (yield this._request(uB, {})).auditEntryTypes.map((e) => new m7(this._request, e));
    });
  }
}
class PD extends p {
  constructor(e) {
    super(e);
  }
  fetch() {
    return f(this, void 0, void 0, function* () {
      return (yield this._request(pB, {})).authenticationSessions.map((e) => new u7(this._request, e));
    });
  }
}
class OD extends p {
  constructor(e) {
    super(e);
  }
  fetch() {
    return f(this, void 0, void 0, function* () {
      const e = (yield this._request(cB, {})).availableUsers;
      return new Xr(this._request, e);
    });
  }
}
class pd extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(kB, { id: e })).comment;
      return new _v(this._request, i);
    });
  }
}
class GD extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(gB, e)).comments;
      return new oA(this._request, (a) => this.fetch(de(Object.assign(Object.assign({}, e), a))), i);
    });
  }
}
class Ln extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(hB, { id: e })).customView;
      return new Rv(this._request, i);
    });
  }
}
class MD extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(fB, { id: e })).customViewHasSubscribers;
      return new v7(this._request, i);
    });
  }
}
class xD extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(NB, e)).customViews;
      return new k7(this._request, (a) => this.fetch(de(Object.assign(Object.assign({}, e), a))), i);
    });
  }
}
class Vi extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(EB, { id: e })).cycle;
      return new qv(this._request, i);
    });
  }
}
class YD extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(IB, e)).cycles;
      return new Pv(this._request, (a) => this.fetch(de(Object.assign(Object.assign({}, e), a))), i);
    });
  }
}
class ns extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(CB, { id: e })).document;
      return new Mv(this._request, i);
    });
  }
}
class JD extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(BB, { id: e })).documentContentHistory;
      return new f7(this._request, i);
    });
  }
}
class HD extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(QB, e)).documents;
      return new xv(this._request, (a) => this.fetch(de(Object.assign(Object.assign({}, e), a))), i);
    });
  }
}
class Hg extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(SB, { id: e })).emoji;
      return new Jv(this._request, i);
    });
  }
}
class jD extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(DB, e)).emojis;
      return new C7(this._request, (a) => this.fetch(de(Object.assign(Object.assign({}, e), a))), i);
    });
  }
}
class Rd extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(wB, { id: e })).favorite;
      return new Hv(this._request, i);
    });
  }
}
class WD extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(VB, e)).favorites;
      return new jv(this._request, (a) => this.fetch(de(Object.assign(Object.assign({}, e), a))), i);
    });
  }
}
class Ud extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(TB, { id: e })).integration;
      return new zv(this._request, i);
    });
  }
}
class jg extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(_B, { id: e })).integrationTemplate;
      return new Kv(this._request, i);
    });
  }
}
class zD extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(RB, e)).integrationTemplates;
      return new _7(this._request, (a) => this.fetch(de(Object.assign(Object.assign({}, e), a))), i);
    });
  }
}
class ZD extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(UB, e)).integrations;
      return new Zv(this._request, (a) => this.fetch(de(Object.assign(Object.assign({}, e), a))), i);
    });
  }
}
class Ld extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(LB, { id: e })).integrationsSettings;
      return new U7(this._request, i);
    });
  }
}
class Ii extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(qB, { id: e })).issue;
      return new Dd(this._request, i);
    });
  }
}
class KD extends p {
  constructor(e) {
    super(e);
  }
  fetch(e, i) {
    return f(this, void 0, void 0, function* () {
      const a = (yield this._request(jB, Object.assign({ fileKey: e }, i))).issueFigmaFileKeySearch;
      return new rn(this._request, (t) => this.fetch(e, de(Object.assign(Object.assign({}, i), t))), a);
    });
  }
}
class XD extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(WB, { prompt: e })).issueFilterSuggestion;
      return new q7(this._request, i);
    });
  }
}
class $D extends p {
  constructor(e) {
    super(e);
  }
  fetch(e, i) {
    return f(this, void 0, void 0, function* () {
      const a = (yield this._request(zB, { csvUrl: e, service: i })).issueImportCheckCSV;
      return new G7(this._request, a);
    });
  }
}
class ew extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(ZB, { code: e })).issueImportFinishGithubOAuth;
      return new D7(this._request, i);
    });
  }
}
class Nn extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(KB, { id: e })).issueLabel;
      return new Dr(this._request, i);
    });
  }
}
class iw extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(e3, e)).issueLabels;
      return new wd(this._request, (a) => this.fetch(de(Object.assign(Object.assign({}, e), a))), i);
    });
  }
}
class nw extends p {
  constructor(e) {
    super(e);
  }
  fetch() {
    return f(this, void 0, void 0, function* () {
      return (yield this._request(i3, {})).issuePriorityValues.map((e) => new x7(this._request, e));
    });
  }
}
class Wg extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(n3, { id: e })).issueRelation;
      return new ig(this._request, i);
    });
  }
}
class aw extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(a3, e)).issueRelations;
      return new uA(this._request, (a) => this.fetch(de(Object.assign(Object.assign({}, e), a))), i);
    });
  }
}
class tw extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(t3, e)).issueSearch;
      return new rn(this._request, (a) => this.fetch(de(Object.assign(Object.assign({}, e), a))), i);
    });
  }
}
class dw extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(d3, { branchName: e })).issueVcsBranchSearch;
      return i ? new Dd(this._request, i) : void 0;
    });
  }
}
class rw extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(r3, e)).issues;
      return new rn(this._request, (a) => this.fetch(de(Object.assign(Object.assign({}, e), a))), i);
    });
  }
}
class sw extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(s3, { id: e })).notification;
      switch (i.__typename) {
        case "IssueNotification":
          return new eg(this._request, i);
        case "OauthClientApprovalNotification":
          return new rg(this._request, i);
        case "ProjectNotification":
          return new gg(this._request, i);
        default:
          return new pA(this._request, i);
      }
    });
  }
}
class ow extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(o3, { id: e })).notificationSubscription;
      switch (i.__typename) {
        case "CustomViewNotificationSubscription":
          return new Uv(this._request, i);
        case "CycleNotificationSubscription":
          return new Ov(this._request, i);
        case "LabelNotificationSubscription":
          return new ag(this._request, i);
        case "ProjectNotificationSubscription":
          return new hg(this._request, i);
        case "TeamNotificationSubscription":
          return new Tg(this._request, i);
        case "UserNotificationSubscription":
          return new Lg(this._request, i);
        default:
          return new cA(this._request, i);
      }
    });
  }
}
class lw extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(l3, e)).notificationSubscriptions;
      return new z7(this._request, (a) => this.fetch(de(Object.assign(Object.assign({}, e), a))), i);
    });
  }
}
class Aw extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(A3, e)).notifications;
      return new j7(this._request, (a) => this.fetch(de(Object.assign(Object.assign({}, e), a))), i);
    });
  }
}
class Zi extends p {
  constructor(e) {
    super(e);
  }
  fetch() {
    return f(this, void 0, void 0, function* () {
      const e = (yield this._request(m3, {})).organization;
      return new K7(this._request, e);
    });
  }
}
class mw extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(g3, { urlKey: e })).organizationExists;
      return new $7(this._request, i);
    });
  }
}
class zg extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(h3, { id: e })).organizationInvite;
      return new og(this._request, i);
    });
  }
}
class uw extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(f3, e)).organizationInvites;
      return new eD(this._request, (a) => this.fetch(de(Object.assign(Object.assign({}, e), a))), i);
    });
  }
}
class Me extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(N3, { id: e })).project;
      return new Ag(this._request, i);
    });
  }
}
class pw extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(S3, { prompt: e })).projectFilterSuggestion;
      return new tD(this._request, i);
    });
  }
}
class Zg extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(D3, { id: e })).projectLink;
      return new mg(this._request, i);
    });
  }
}
class cw extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(w3, e)).projectLinks;
      return new ug(this._request, (a) => this.fetch(de(Object.assign(Object.assign({}, e), a))), i);
    });
  }
}
class kw extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(F3, { id: e })).projectMilestone;
      return new cg(this._request, i);
    });
  }
}
class vw extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(V3, e)).projectMilestones;
      return new kg(this._request, (a) => this.fetch(de(Object.assign(Object.assign({}, e), a))), i);
    });
  }
}
class Pt extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(T3, { id: e })).projectUpdate;
      return new Ng(this._request, i);
    });
  }
}
class EA extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(_3, { id: e })).projectUpdateInteraction;
      return new yg(this._request, i);
    });
  }
}
class gw extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(R3, e)).projectUpdateInteractions;
      return new sD(this._request, (a) => this.fetch(de(Object.assign(Object.assign({}, e), a))), i);
    });
  }
}
class hw extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(U3, e)).projectUpdates;
      return new Eg(this._request, (a) => this.fetch(de(Object.assign(Object.assign({}, e), a))), i);
    });
  }
}
class fw extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(L3, e)).projects;
      return new vA(this._request, (a) => this.fetch(de(Object.assign(Object.assign({}, e), a))), i);
    });
  }
}
class Nw extends p {
  constructor(e) {
    super(e);
  }
  fetch() {
    return f(this, void 0, void 0, function* () {
      const e = (yield this._request(q3, {})).pushSubscriptionTest;
      return new uD(this._request, e);
    });
  }
}
class Ew extends p {
  constructor(e) {
    super(e);
  }
  fetch() {
    return f(this, void 0, void 0, function* () {
      const e = (yield this._request(P3, {})).rateLimitStatus;
      return new pD(this._request, e);
    });
  }
}
class qd extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(O3, { id: e })).roadmap;
      return new Cg(this._request, i);
    });
  }
}
class Kg extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(M3, { id: e })).roadmapToProject;
      return new Sg(this._request, i);
    });
  }
}
class yw extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(x3, e)).roadmapToProjects;
      return new hD(this._request, (a) => this.fetch(de(Object.assign(Object.assign({}, e), a))), i);
    });
  }
}
class bw extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(Y3, e)).roadmaps;
      return new gD(this._request, (a) => this.fetch(de(Object.assign(Object.assign({}, e), a))), i);
    });
  }
}
class Iw extends p {
  constructor(e) {
    super(e);
  }
  fetch(e, i) {
    return f(this, void 0, void 0, function* () {
      const a = (yield this._request(J3, Object.assign({ term: e }, i))).searchDocuments;
      return new E7(this._request, a);
    });
  }
}
class Cw extends p {
  constructor(e) {
    super(e);
  }
  fetch(e, i) {
    return f(this, void 0, void 0, function* () {
      const a = (yield this._request(H3, Object.assign({ term: e }, i))).searchIssues;
      return new J7(this._request, a);
    });
  }
}
class Bw extends p {
  constructor(e) {
    super(e);
  }
  fetch(e, i) {
    return f(this, void 0, void 0, function* () {
      const a = (yield this._request(j3, Object.assign({ term: e }, i))).searchProjects;
      return new dD(this._request, a);
    });
  }
}
class Qw extends p {
  constructor(e) {
    super(e);
  }
  fetch(e, i) {
    return f(this, void 0, void 0, function* () {
      const a = (yield this._request(W3, Object.assign({ email: e }, i))).ssoUrlFromEmail;
      return new ED(this._request, a);
    });
  }
}
class xe extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(z3, { id: e })).team;
      return new wg(this._request, i);
    });
  }
}
class Xg extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(dQ, { id: e })).teamMembership;
      return new Fg(this._request, i);
    });
  }
}
class Sw extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(rQ, e)).teamMemberships;
      return new gA(this._request, (a) => this.fetch(de(Object.assign(Object.assign({}, e), a))), i);
    });
  }
}
class Dw extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(sQ, e)).teams;
      return new Vd(this._request, (a) => this.fetch(de(Object.assign(Object.assign({}, e), a))), i);
    });
  }
}
class dn extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(oQ, { id: e })).template;
      return new fA(this._request, i);
    });
  }
}
class $g extends p {
  constructor(e) {
    super(e);
  }
  fetch() {
    return f(this, void 0, void 0, function* () {
      return (yield this._request(lQ, {})).templates.map((e) => new fA(this._request, e));
    });
  }
}
class ww extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      return (yield this._request(AQ, { integrationType: e })).templatesForIntegration.map((i) => new fA(this._request, i));
    });
  }
}
class le extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(mQ, { id: e })).user;
      return new NA(this._request, i);
    });
  }
}
class e0 extends p {
  constructor(e) {
    super(e);
  }
  fetch() {
    return f(this, void 0, void 0, function* () {
      const e = (yield this._request(vQ, {})).userSettings;
      return new CD(this._request, e);
    });
  }
}
class Fw extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(gQ, e)).users;
      return new Td(this._request, (a) => this.fetch(de(Object.assign(Object.assign({}, e), a))), i);
    });
  }
}
class Vw extends p {
  constructor(e) {
    super(e);
  }
  fetch() {
    return f(this, void 0, void 0, function* () {
      const e = (yield this._request(hQ, {})).viewer;
      return new NA(this._request, e);
    });
  }
}
class i0 extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(fQ, { id: e })).webhook;
      return new Og(this._request, i);
    });
  }
}
class Tw extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(NQ, e)).webhooks;
      return new Gg(this._request, (a) => this.fetch(de(Object.assign(Object.assign({}, e), a))), i);
    });
  }
}
class Ui extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(EQ, { id: e })).workflowState;
      return new xg(this._request, i);
    });
  }
}
class _w extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(bQ, e)).workflowStates;
      return new Yg(this._request, (a) => this.fetch(de(Object.assign(Object.assign({}, e), a))), i);
    });
  }
}
class Rw extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(IQ, { input: e })).airbyteIntegrationConnect;
      return new He(this._request, i);
    });
  }
}
class n0 extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(CQ, { input: e })).apiKeyCreate;
      return new d7(this._request, i);
    });
  }
}
class a0 extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(BQ, { id: e })).apiKeyDelete;
      return new _e(this._request, i);
    });
  }
}
class t0 extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(QQ, { id: e })).attachmentArchive;
      return new o7(this._request, i);
    });
  }
}
class d0 extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(SQ, { input: e })).attachmentCreate;
      return new fn(this._request, i);
    });
  }
}
class r0 extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(DQ, { id: e })).attachmentDelete;
      return new _e(this._request, i);
    });
  }
}
class Uw extends p {
  constructor(e) {
    super(e);
  }
  fetch(e, i, a, t, d) {
    return f(this, void 0, void 0, function* () {
      const r = (yield this._request(wQ, Object.assign({ channelId: e, issueId: i, messageId: a, url: t }, d))).attachmentLinkDiscord;
      return new fn(this._request, r);
    });
  }
}
class Lw extends p {
  constructor(e) {
    super(e);
  }
  fetch(e, i, a) {
    return f(this, void 0, void 0, function* () {
      const t = (yield this._request(FQ, Object.assign({ conversationId: e, issueId: i }, a))).attachmentLinkFront;
      return new Q7(this._request, t);
    });
  }
}
class qw extends p {
  constructor(e) {
    super(e);
  }
  fetch(e, i, a, t, d, r) {
    return f(this, void 0, void 0, function* () {
      const o = (yield this._request(VQ, Object.assign({ issueId: e, number: i, owner: a, repo: t, url: d }, r))).attachmentLinkGitHubPR;
      return new fn(this._request, o);
    });
  }
}
class Pw extends p {
  constructor(e) {
    super(e);
  }
  fetch(e, i, a, t, d) {
    return f(this, void 0, void 0, function* () {
      const r = (yield this._request(TQ, Object.assign({ issueId: e, number: i, projectPathWithNamespace: a, url: t }, d))).attachmentLinkGitLabMR;
      return new fn(this._request, r);
    });
  }
}
class Ow extends p {
  constructor(e) {
    super(e);
  }
  fetch(e, i, a) {
    return f(this, void 0, void 0, function* () {
      const t = (yield this._request(_Q, Object.assign({ conversationId: e, issueId: i }, a))).attachmentLinkIntercom;
      return new fn(this._request, t);
    });
  }
}
class Gw extends p {
  constructor(e) {
    super(e);
  }
  fetch(e, i) {
    return f(this, void 0, void 0, function* () {
      const a = (yield this._request(RQ, { issueId: e, jiraIssueId: i })).attachmentLinkJiraIssue;
      return new fn(this._request, a);
    });
  }
}
class Mw extends p {
  constructor(e) {
    super(e);
  }
  fetch(e, i, a, t, d) {
    return f(this, void 0, void 0, function* () {
      const r = (yield this._request(UQ, Object.assign({ channel: e, issueId: i, latest: a, url: t }, d))).attachmentLinkSlack;
      return new fn(this._request, r);
    });
  }
}
class xw extends p {
  constructor(e) {
    super(e);
  }
  fetch(e, i, a) {
    return f(this, void 0, void 0, function* () {
      const t = (yield this._request(LQ, Object.assign({ issueId: e, url: i }, a))).attachmentLinkURL;
      return new fn(this._request, t);
    });
  }
}
class Yw extends p {
  constructor(e) {
    super(e);
  }
  fetch(e, i, a) {
    return f(this, void 0, void 0, function* () {
      const t = (yield this._request(qQ, Object.assign({ issueId: e, ticketId: i }, a))).attachmentLinkZendesk;
      return new fn(this._request, t);
    });
  }
}
class Jw extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(PQ, { id: e })).attachmentUnsyncSlack;
      return new fn(this._request, i);
    });
  }
}
class s0 extends p {
  constructor(e) {
    super(e);
  }
  fetch(e, i) {
    return f(this, void 0, void 0, function* () {
      const a = (yield this._request(OQ, { id: e, input: i })).attachmentUpdate;
      return new fn(this._request, a);
    });
  }
}
class o0 extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(GQ, { input: e })).commentCreate;
      return new $r(this._request, i);
    });
  }
}
class l0 extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(MQ, { id: e })).commentDelete;
      return new _e(this._request, i);
    });
  }
}
class Hw extends p {
  constructor(e) {
    super(e);
  }
  fetch(e, i) {
    return f(this, void 0, void 0, function* () {
      const a = (yield this._request(xQ, Object.assign({ id: e }, i))).commentResolve;
      return new $r(this._request, a);
    });
  }
}
class jw extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(YQ, { id: e })).commentUnresolve;
      return new $r(this._request, i);
    });
  }
}
class A0 extends p {
  constructor(e) {
    super(e);
  }
  fetch(e, i) {
    return f(this, void 0, void 0, function* () {
      const a = (yield this._request(JQ, { id: e, input: i })).commentUpdate;
      return new $r(this._request, a);
    });
  }
}
class Ww extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(HQ, { input: e })).contactCreate;
      return new p7(this._request, i);
    });
  }
}
class zw extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(jQ, e)).createCsvExportReport;
      return new c7(this._request, i);
    });
  }
}
class Zw extends p {
  constructor(e) {
    super(e);
  }
  fetch(e, i) {
    return f(this, void 0, void 0, function* () {
      const a = (yield this._request(WQ, Object.assign({ input: e }, i))).createOrganizationFromOnboarding;
      return new lA(this._request, a);
    });
  }
}
class Kw extends p {
  constructor(e) {
    super(e);
  }
  fetch(e, i) {
    return f(this, void 0, void 0, function* () {
      const a = (yield this._request(zQ, Object.assign({ projectId: e }, i))).createProjectUpdateReminder;
      return new lD(this._request, a);
    });
  }
}
class m0 extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(ZQ, { input: e })).customViewCreate;
      return new Lv(this._request, i);
    });
  }
}
class u0 extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(KQ, { id: e })).customViewDelete;
      return new _e(this._request, i);
    });
  }
}
class p0 extends p {
  constructor(e) {
    super(e);
  }
  fetch(e, i) {
    return f(this, void 0, void 0, function* () {
      const a = (yield this._request(XQ, { id: e, input: i })).customViewUpdate;
      return new Lv(this._request, a);
    });
  }
}
class c0 extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request($Q, { id: e })).cycleArchive;
      return new g7(this._request, i);
    });
  }
}
class k0 extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(e5, { input: e })).cycleCreate;
      return new Gv(this._request, i);
    });
  }
}
class v0 extends p {
  constructor(e) {
    super(e);
  }
  fetch(e, i) {
    return f(this, void 0, void 0, function* () {
      const a = (yield this._request(i5, { id: e, input: i })).cycleUpdate;
      return new Gv(this._request, a);
    });
  }
}
class g0 extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(n5, { input: e })).documentCreate;
      return new Yv(this._request, i);
    });
  }
}
class h0 extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(a5, { id: e })).documentDelete;
      return new _e(this._request, i);
    });
  }
}
class f0 extends p {
  constructor(e) {
    super(e);
  }
  fetch(e, i) {
    return f(this, void 0, void 0, function* () {
      const a = (yield this._request(t5, { id: e, input: i })).documentUpdate;
      return new Yv(this._request, a);
    });
  }
}
class Xw extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(d5, { input: e })).emailTokenUserAccountAuth;
      return new Xr(this._request, i);
    });
  }
}
class $w extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(r5, { input: e })).emailUnsubscribe;
      return new b7(this._request, i);
    });
  }
}
class eF extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(s5, { input: e })).emailUserAccountAuthChallenge;
      return new I7(this._request, i);
    });
  }
}
class N0 extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(o5, { input: e })).emojiCreate;
      return new B7(this._request, i);
    });
  }
}
class E0 extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(l5, { id: e })).emojiDelete;
      return new _e(this._request, i);
    });
  }
}
class y0 extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(A5, { input: e })).favoriteCreate;
      return new Wv(this._request, i);
    });
  }
}
class b0 extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(m5, { id: e })).favoriteDelete;
      return new _e(this._request, i);
    });
  }
}
class I0 extends p {
  constructor(e) {
    super(e);
  }
  fetch(e, i) {
    return f(this, void 0, void 0, function* () {
      const a = (yield this._request(u5, { id: e, input: i })).favoriteUpdate;
      return new Wv(this._request, a);
    });
  }
}
class iF extends p {
  constructor(e) {
    super(e);
  }
  fetch(e, i, a, t) {
    return f(this, void 0, void 0, function* () {
      const d = (yield this._request(p5, Object.assign({ contentType: e, filename: i, size: a }, t))).fileUpload;
      return new Ug(this._request, d);
    });
  }
}
class nF extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(c5, { input: e })).googleUserAccountAuth;
      return new Xr(this._request, i);
    });
  }
}
class aF extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(k5, { url: e })).imageUploadFromUrl;
      return new V7(this._request, i);
    });
  }
}
class tF extends p {
  constructor(e) {
    super(e);
  }
  fetch(e, i, a, t) {
    return f(this, void 0, void 0, function* () {
      const d = (yield this._request(v5, Object.assign({ contentType: e, filename: i, size: a }, t))).importFileUpload;
      return new Ug(this._request, d);
    });
  }
}
class dF extends p {
  constructor(e) {
    super(e);
  }
  fetch(e, i) {
    return f(this, void 0, void 0, function* () {
      const a = (yield this._request(g5, { code: e, redirectUri: i })).integrationAsksConnectChannel;
      return new s7(this._request, a);
    });
  }
}
class C0 extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(h5, { id: e })).integrationDelete;
      return new _e(this._request, i);
    });
  }
}
class rF extends p {
  constructor(e) {
    super(e);
  }
  fetch(e, i) {
    return f(this, void 0, void 0, function* () {
      const a = (yield this._request(f5, { code: e, redirectUri: i })).integrationDiscord;
      return new He(this._request, a);
    });
  }
}
class sF extends p {
  constructor(e) {
    super(e);
  }
  fetch(e, i) {
    return f(this, void 0, void 0, function* () {
      const a = (yield this._request(N5, { code: e, redirectUri: i })).integrationFigma;
      return new He(this._request, a);
    });
  }
}
class oF extends p {
  constructor(e) {
    super(e);
  }
  fetch(e, i) {
    return f(this, void 0, void 0, function* () {
      const a = (yield this._request(E5, { code: e, redirectUri: i })).integrationFront;
      return new He(this._request, a);
    });
  }
}
class lF extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(y5, { code: e })).integrationGitHubPersonal;
      return new He(this._request, i);
    });
  }
}
class AF extends p {
  constructor(e) {
    super(e);
  }
  fetch() {
    return f(this, void 0, void 0, function* () {
      const e = (yield this._request(b5, {})).integrationGithubCommitCreate;
      return new S7(this._request, e);
    });
  }
}
class mF extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(I5, { installationId: e })).integrationGithubConnect;
      return new He(this._request, i);
    });
  }
}
class uF extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(C5, { installationId: e })).integrationGithubSyncConnect;
      return new He(this._request, i);
    });
  }
}
class pF extends p {
  constructor(e) {
    super(e);
  }
  fetch(e, i) {
    return f(this, void 0, void 0, function* () {
      const a = (yield this._request(B5, { accessToken: e, gitlabUrl: i })).integrationGitlabConnect;
      return new He(this._request, a);
    });
  }
}
class cF extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(Q5, { code: e })).integrationGoogleSheets;
      return new He(this._request, i);
    });
  }
}
class kF extends p {
  constructor(e) {
    super(e);
  }
  fetch(e, i, a) {
    return f(this, void 0, void 0, function* () {
      const t = (yield this._request(S5, Object.assign({ code: e, redirectUri: i }, a))).integrationIntercom;
      return new He(this._request, t);
    });
  }
}
class vF extends p {
  constructor(e) {
    super(e);
  }
  fetch() {
    return f(this, void 0, void 0, function* () {
      const e = (yield this._request(D5, {})).integrationIntercomDelete;
      return new He(this._request, e);
    });
  }
}
class gF extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(w5, { input: e })).integrationIntercomSettingsUpdate;
      return new He(this._request, i);
    });
  }
}
class hF extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(F5, { code: e })).integrationJiraPersonal;
      return new He(this._request, i);
    });
  }
}
class fF extends p {
  constructor(e) {
    super(e);
  }
  fetch() {
    return f(this, void 0, void 0, function* () {
      const e = (yield this._request(V5, {})).integrationLoom;
      return new He(this._request, e);
    });
  }
}
class NF extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(T5, { input: e })).integrationRequest;
      return new T7(this._request, i);
    });
  }
}
class EF extends p {
  constructor(e) {
    super(e);
  }
  fetch(e, i, a) {
    return f(this, void 0, void 0, function* () {
      const t = (yield this._request(_5, { code: e, installationId: i, organizationSlug: a })).integrationSentryConnect;
      return new He(this._request, t);
    });
  }
}
class yF extends p {
  constructor(e) {
    super(e);
  }
  fetch(e, i, a) {
    return f(this, void 0, void 0, function* () {
      const t = (yield this._request(R5, Object.assign({ code: e, redirectUri: i }, a))).integrationSlack;
      return new He(this._request, t);
    });
  }
}
class bF extends p {
  constructor(e) {
    super(e);
  }
  fetch(e, i) {
    return f(this, void 0, void 0, function* () {
      const a = (yield this._request(U5, { code: e, redirectUri: i })).integrationSlackAsks;
      return new He(this._request, a);
    });
  }
}
class IF extends p {
  constructor(e) {
    super(e);
  }
  fetch(e, i) {
    return f(this, void 0, void 0, function* () {
      const a = (yield this._request(L5, { code: e, redirectUri: i })).integrationSlackImportEmojis;
      return new He(this._request, a);
    });
  }
}
class CF extends p {
  constructor(e) {
    super(e);
  }
  fetch(e, i) {
    return f(this, void 0, void 0, function* () {
      const a = (yield this._request(q5, { code: e, redirectUri: i })).integrationSlackOrgProjectUpdatesPost;
      return new He(this._request, a);
    });
  }
}
class BF extends p {
  constructor(e) {
    super(e);
  }
  fetch(e, i) {
    return f(this, void 0, void 0, function* () {
      const a = (yield this._request(P5, { code: e, redirectUri: i })).integrationSlackPersonal;
      return new He(this._request, a);
    });
  }
}
class QF extends p {
  constructor(e) {
    super(e);
  }
  fetch(e, i, a, t) {
    return f(this, void 0, void 0, function* () {
      const d = (yield this._request(O5, Object.assign({ code: e, redirectUri: i, teamId: a }, t))).integrationSlackPost;
      return new He(this._request, d);
    });
  }
}
class SF extends p {
  constructor(e) {
    super(e);
  }
  fetch(e, i, a, t) {
    return f(this, void 0, void 0, function* () {
      const d = (yield this._request(G5, { code: e, projectId: i, redirectUri: a, service: t })).integrationSlackProjectPost;
      return new He(this._request, d);
    });
  }
}
class B0 extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(M5, { input: e })).integrationTemplateCreate;
      return new R7(this._request, i);
    });
  }
}
class Q0 extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(x5, { id: e })).integrationTemplateDelete;
      return new _e(this._request, i);
    });
  }
}
class DF extends p {
  constructor(e) {
    super(e);
  }
  fetch(e, i) {
    return f(this, void 0, void 0, function* () {
      const a = (yield this._request(Y5, { code: e, redirectUri: i })).integrationUpdateSlack;
      return new He(this._request, a);
    });
  }
}
class wF extends p {
  constructor(e) {
    super(e);
  }
  fetch(e, i, a, t) {
    return f(this, void 0, void 0, function* () {
      const d = (yield this._request(J5, { code: e, redirectUri: i, scope: a, subdomain: t })).integrationZendesk;
      return new He(this._request, d);
    });
  }
}
class S0 extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(H5, { input: e })).integrationsSettingsCreate;
      return new Xv(this._request, i);
    });
  }
}
class D0 extends p {
  constructor(e) {
    super(e);
  }
  fetch(e, i) {
    return f(this, void 0, void 0, function* () {
      const a = (yield this._request(j5, { id: e, input: i })).integrationsSettingsUpdate;
      return new Xv(this._request, a);
    });
  }
}
class FF extends p {
  constructor(e) {
    super(e);
  }
  fetch(e, i) {
    return f(this, void 0, void 0, function* () {
      const a = (yield this._request(W5, { id: e, labelId: i })).issueAddLabel;
      return new Ka(this._request, a);
    });
  }
}
class w0 extends p {
  constructor(e) {
    super(e);
  }
  fetch(e, i) {
    return f(this, void 0, void 0, function* () {
      const a = (yield this._request(z5, Object.assign({ id: e }, i))).issueArchive;
      return new AA(this._request, a);
    });
  }
}
class VF extends p {
  constructor(e) {
    super(e);
  }
  fetch(e, i) {
    return f(this, void 0, void 0, function* () {
      const a = (yield this._request(Z5, { ids: e, input: i })).issueBatchUpdate;
      return new L7(this._request, a);
    });
  }
}
class F0 extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(K5, { input: e })).issueCreate;
      return new Ka(this._request, i);
    });
  }
}
class V0 extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(X5, { id: e })).issueDelete;
      return new AA(this._request, i);
    });
  }
}
class TF extends p {
  constructor(e) {
    super(e);
  }
  fetch(e, i, a) {
    return f(this, void 0, void 0, function* () {
      const t = (yield this._request($5, Object.assign({ asanaTeamName: e, asanaToken: i }, a))).issueImportCreateAsana;
      return new Za(this._request, t);
    });
  }
}
class _F extends p {
  constructor(e) {
    super(e);
  }
  fetch(e, i) {
    return f(this, void 0, void 0, function* () {
      const a = (yield this._request(e8, Object.assign({ csvUrl: e }, i))).issueImportCreateCSVJira;
      return new Za(this._request, a);
    });
  }
}
class RF extends p {
  constructor(e) {
    super(e);
  }
  fetch(e, i, a) {
    return f(this, void 0, void 0, function* () {
      const t = (yield this._request(i8, Object.assign({ clubhouseGroupName: e, clubhouseToken: i }, a))).issueImportCreateClubhouse;
      return new Za(this._request, t);
    });
  }
}
class UF extends p {
  constructor(e) {
    super(e);
  }
  fetch(e, i, a, t) {
    return f(this, void 0, void 0, function* () {
      const d = (yield this._request(n8, Object.assign({ githubRepoName: e, githubRepoOwner: i, githubToken: a }, t))).issueImportCreateGithub;
      return new Za(this._request, d);
    });
  }
}
class LF extends p {
  constructor(e) {
    super(e);
  }
  fetch(e, i, a, t, d) {
    return f(this, void 0, void 0, function* () {
      const r = (yield this._request(a8, Object.assign({ jiraEmail: e, jiraHostname: i, jiraProject: a, jiraToken: t }, d))).issueImportCreateJira;
      return new Za(this._request, r);
    });
  }
}
class T0 extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(t8, { issueImportId: e })).issueImportDelete;
      return new M7(this._request, i);
    });
  }
}
class qF extends p {
  constructor(e) {
    super(e);
  }
  fetch(e, i) {
    return f(this, void 0, void 0, function* () {
      const a = (yield this._request(d8, { issueImportId: e, mapping: i })).issueImportProcess;
      return new Za(this._request, a);
    });
  }
}
class _0 extends p {
  constructor(e) {
    super(e);
  }
  fetch(e, i) {
    return f(this, void 0, void 0, function* () {
      const a = (yield this._request(r8, { id: e, input: i })).issueImportUpdate;
      return new Za(this._request, a);
    });
  }
}
class R0 extends p {
  constructor(e) {
    super(e);
  }
  fetch(e, i) {
    return f(this, void 0, void 0, function* () {
      const a = (yield this._request(s8, Object.assign({ input: e }, i))).issueLabelCreate;
      return new $v(this._request, a);
    });
  }
}
class U0 extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(o8, { id: e })).issueLabelDelete;
      return new _e(this._request, i);
    });
  }
}
class L0 extends p {
  constructor(e) {
    super(e);
  }
  fetch(e, i) {
    return f(this, void 0, void 0, function* () {
      const a = (yield this._request(l8, { id: e, input: i })).issueLabelUpdate;
      return new $v(this._request, a);
    });
  }
}
class q0 extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(A8, { input: e })).issueRelationCreate;
      return new ng(this._request, i);
    });
  }
}
class P0 extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(m8, { id: e })).issueRelationDelete;
      return new _e(this._request, i);
    });
  }
}
class O0 extends p {
  constructor(e) {
    super(e);
  }
  fetch(e, i) {
    return f(this, void 0, void 0, function* () {
      const a = (yield this._request(u8, { id: e, input: i })).issueRelationUpdate;
      return new ng(this._request, a);
    });
  }
}
class PF extends p {
  constructor(e) {
    super(e);
  }
  fetch(e, i) {
    return f(this, void 0, void 0, function* () {
      const a = (yield this._request(p8, { id: e, reminderAt: i })).issueReminder;
      return new Ka(this._request, a);
    });
  }
}
class OF extends p {
  constructor(e) {
    super(e);
  }
  fetch(e, i) {
    return f(this, void 0, void 0, function* () {
      const a = (yield this._request(c8, { id: e, labelId: i })).issueRemoveLabel;
      return new Ka(this._request, a);
    });
  }
}
class GF extends p {
  constructor(e) {
    super(e);
  }
  fetch(e, i) {
    return f(this, void 0, void 0, function* () {
      const a = (yield this._request(k8, Object.assign({ id: e }, i))).issueSubscribe;
      return new Ka(this._request, a);
    });
  }
}
class G0 extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(v8, { id: e })).issueUnarchive;
      return new AA(this._request, i);
    });
  }
}
class MF extends p {
  constructor(e) {
    super(e);
  }
  fetch(e, i) {
    return f(this, void 0, void 0, function* () {
      const a = (yield this._request(g8, Object.assign({ id: e }, i))).issueUnsubscribe;
      return new Ka(this._request, a);
    });
  }
}
class M0 extends p {
  constructor(e) {
    super(e);
  }
  fetch(e, i) {
    return f(this, void 0, void 0, function* () {
      const a = (yield this._request(h8, { id: e, input: i })).issueUpdate;
      return new Ka(this._request, a);
    });
  }
}
class xF extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(f8, { input: e })).joinOrganizationFromOnboarding;
      return new lA(this._request, i);
    });
  }
}
class YF extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(N8, { organizationId: e })).leaveOrganization;
      return new lA(this._request, i);
    });
  }
}
class JF extends p {
  constructor(e) {
    super(e);
  }
  fetch() {
    return f(this, void 0, void 0, function* () {
      const e = (yield this._request(E8, {})).logout;
      return new es(this._request, e);
    });
  }
}
class HF extends p {
  constructor(e) {
    super(e);
  }
  fetch() {
    return f(this, void 0, void 0, function* () {
      const e = (yield this._request(y8, {})).logoutAllSessions;
      return new es(this._request, e);
    });
  }
}
class jF extends p {
  constructor(e) {
    super(e);
  }
  fetch() {
    return f(this, void 0, void 0, function* () {
      const e = (yield this._request(b8, {})).logoutOtherSessions;
      return new es(this._request, e);
    });
  }
}
class WF extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(I8, { sessionId: e })).logoutSession;
      return new es(this._request, i);
    });
  }
}
class x0 extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(C8, { id: e })).notificationArchive;
      return new tg(this._request, i);
    });
  }
}
class zF extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(B8, { input: e })).notificationArchiveAll;
      return new Fd(this._request, i);
    });
  }
}
class ZF extends p {
  constructor(e) {
    super(e);
  }
  fetch(e, i) {
    return f(this, void 0, void 0, function* () {
      const a = (yield this._request(Q8, { input: e, readAt: i })).notificationMarkReadAll;
      return new Fd(this._request, a);
    });
  }
}
class KF extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(S8, { input: e })).notificationMarkUnreadAll;
      return new Fd(this._request, i);
    });
  }
}
class XF extends p {
  constructor(e) {
    super(e);
  }
  fetch(e, i) {
    return f(this, void 0, void 0, function* () {
      const a = (yield this._request(D8, { input: e, snoozedUntilAt: i })).notificationSnoozeAll;
      return new Fd(this._request, a);
    });
  }
}
class Y0 extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(w8, { input: e })).notificationSubscriptionCreate;
      return new dg(this._request, i);
    });
  }
}
class J0 extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(F8, { id: e })).notificationSubscriptionDelete;
      return new _e(this._request, i);
    });
  }
}
class H0 extends p {
  constructor(e) {
    super(e);
  }
  fetch(e, i) {
    return f(this, void 0, void 0, function* () {
      const a = (yield this._request(V8, { id: e, input: i })).notificationSubscriptionUpdate;
      return new dg(this._request, a);
    });
  }
}
class j0 extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(T8, { id: e })).notificationUnarchive;
      return new tg(this._request, i);
    });
  }
}
class $F extends p {
  constructor(e) {
    super(e);
  }
  fetch(e, i) {
    return f(this, void 0, void 0, function* () {
      const a = (yield this._request(_8, { input: e, unsnoozedAt: i })).notificationUnsnoozeAll;
      return new Fd(this._request, a);
    });
  }
}
class W0 extends p {
  constructor(e) {
    super(e);
  }
  fetch(e, i) {
    return f(this, void 0, void 0, function* () {
      const a = (yield this._request(R8, { id: e, input: i })).notificationUpdate;
      return new W7(this._request, a);
    });
  }
}
class eV extends p {
  constructor(e) {
    super(e);
  }
  fetch() {
    return f(this, void 0, void 0, function* () {
      const e = (yield this._request(U8, {})).organizationCancelDelete;
      return new X7(this._request, e);
    });
  }
}
class z0 extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(L8, { input: e })).organizationDelete;
      return new sg(this._request, i);
    });
  }
}
class iV extends p {
  constructor(e) {
    super(e);
  }
  fetch() {
    return f(this, void 0, void 0, function* () {
      const e = (yield this._request(q8, {})).organizationDeleteChallenge;
      return new sg(this._request, e);
    });
  }
}
class nV extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(P8, { id: e })).organizationDomainDelete;
      return new _e(this._request, i);
    });
  }
}
class Z0 extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(O8, { input: e })).organizationInviteCreate;
      return new lg(this._request, i);
    });
  }
}
class K0 extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(G8, { id: e })).organizationInviteDelete;
      return new _e(this._request, i);
    });
  }
}
class X0 extends p {
  constructor(e) {
    super(e);
  }
  fetch(e, i) {
    return f(this, void 0, void 0, function* () {
      const a = (yield this._request(M8, { id: e, input: i })).organizationInviteUpdate;
      return new lg(this._request, a);
    });
  }
}
class aV extends p {
  constructor(e) {
    super(e);
  }
  fetch() {
    return f(this, void 0, void 0, function* () {
      const e = (yield this._request(x8, {})).organizationStartPlusTrial;
      return new nD(this._request, e);
    });
  }
}
class $0 extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(Y8, { input: e })).organizationUpdate;
      return new iD(this._request, i);
    });
  }
}
class eh extends p {
  constructor(e) {
    super(e);
  }
  fetch(e, i) {
    return f(this, void 0, void 0, function* () {
      const a = (yield this._request(J8, Object.assign({ id: e }, i))).projectArchive;
      return new kA(this._request, a);
    });
  }
}
class ih extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(H8, { input: e })).projectCreate;
      return new fg(this._request, i);
    });
  }
}
class nh extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(j8, { id: e })).projectDelete;
      return new kA(this._request, i);
    });
  }
}
class ah extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(W8, { input: e })).projectLinkCreate;
      return new pg(this._request, i);
    });
  }
}
class th extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(z8, { id: e })).projectLinkDelete;
      return new _e(this._request, i);
    });
  }
}
class dh extends p {
  constructor(e) {
    super(e);
  }
  fetch(e, i) {
    return f(this, void 0, void 0, function* () {
      const a = (yield this._request(Z8, { id: e, input: i })).projectLinkUpdate;
      return new pg(this._request, a);
    });
  }
}
class rh extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(K8, { input: e })).projectMilestoneCreate;
      return new vg(this._request, i);
    });
  }
}
class sh extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(X8, { id: e })).projectMilestoneDelete;
      return new _e(this._request, i);
    });
  }
}
class oh extends p {
  constructor(e) {
    super(e);
  }
  fetch(e, i) {
    return f(this, void 0, void 0, function* () {
      const a = (yield this._request($8, { id: e, input: i })).projectMilestoneUpdate;
      return new vg(this._request, a);
    });
  }
}
class lh extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(eS, { id: e })).projectUnarchive;
      return new kA(this._request, i);
    });
  }
}
class tV extends p {
  constructor(e) {
    super(e);
  }
  fetch(e, i) {
    return f(this, void 0, void 0, function* () {
      const a = (yield this._request(iS, { id: e, input: i })).projectUpdate;
      return new fg(this._request, a);
    });
  }
}
class Ah extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(nS, { input: e })).projectUpdateCreate;
      return new bg(this._request, i);
    });
  }
}
class mh extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(aS, { id: e })).projectUpdateDelete;
      return new _e(this._request, i);
    });
  }
}
class uh extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(tS, { input: e })).projectUpdateInteractionCreate;
      return new oD(this._request, i);
    });
  }
}
class dV extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(dS, { id: e })).projectUpdateMarkAsRead;
      return new AD(this._request, i);
    });
  }
}
class ph extends p {
  constructor(e) {
    super(e);
  }
  fetch(e, i) {
    return f(this, void 0, void 0, function* () {
      const a = (yield this._request(rS, { id: e, input: i })).projectUpdateUpdate;
      return new bg(this._request, a);
    });
  }
}
class ch extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(sS, { input: e })).pushSubscriptionCreate;
      return new Ig(this._request, i);
    });
  }
}
class kh extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(oS, { id: e })).pushSubscriptionDelete;
      return new Ig(this._request, i);
    });
  }
}
class vh extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(lS, { input: e })).reactionCreate;
      return new vD(this._request, i);
    });
  }
}
class gh extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(AS, { id: e })).reactionDelete;
      return new _e(this._request, i);
    });
  }
}
class rV extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(mS, { id: e })).refreshGoogleSheetsData;
      return new He(this._request, i);
    });
  }
}
class sV extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(uS, { id: e })).resendOrganizationInvite;
      return new _e(this._request, i);
    });
  }
}
class hh extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(pS, { id: e })).roadmapArchive;
      return new Bg(this._request, i);
    });
  }
}
class fh extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(cS, { input: e })).roadmapCreate;
      return new Qg(this._request, i);
    });
  }
}
class Nh extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(kS, { id: e })).roadmapDelete;
      return new _e(this._request, i);
    });
  }
}
class Eh extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(vS, { input: e })).roadmapToProjectCreate;
      return new Dg(this._request, i);
    });
  }
}
class yh extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(gS, { id: e })).roadmapToProjectDelete;
      return new _e(this._request, i);
    });
  }
}
class bh extends p {
  constructor(e) {
    super(e);
  }
  fetch(e, i) {
    return f(this, void 0, void 0, function* () {
      const a = (yield this._request(hS, { id: e, input: i })).roadmapToProjectUpdate;
      return new Dg(this._request, a);
    });
  }
}
class Ih extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(fS, { id: e })).roadmapUnarchive;
      return new Bg(this._request, i);
    });
  }
}
class Ch extends p {
  constructor(e) {
    super(e);
  }
  fetch(e, i) {
    return f(this, void 0, void 0, function* () {
      const a = (yield this._request(NS, { id: e, input: i })).roadmapUpdate;
      return new Qg(this._request, a);
    });
  }
}
class oV extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(ES, { input: e })).samlTokenUserAccountAuth;
      return new Xr(this._request, i);
    });
  }
}
class Bh extends p {
  constructor(e) {
    super(e);
  }
  fetch(e, i) {
    return f(this, void 0, void 0, function* () {
      const a = (yield this._request(yS, Object.assign({ input: e }, i))).teamCreate;
      return new hA(this._request, a);
    });
  }
}
class lV extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(bS, { id: e })).teamCyclesDelete;
      return new hA(this._request, i);
    });
  }
}
class Qh extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(IS, { id: e })).teamDelete;
      return new _e(this._request, i);
    });
  }
}
class AV extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(CS, { id: e })).teamKeyDelete;
      return new _e(this._request, i);
    });
  }
}
class Sh extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(BS, { input: e })).teamMembershipCreate;
      return new Vg(this._request, i);
    });
  }
}
class Dh extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(QS, { id: e })).teamMembershipDelete;
      return new _e(this._request, i);
    });
  }
}
class wh extends p {
  constructor(e) {
    super(e);
  }
  fetch(e, i) {
    return f(this, void 0, void 0, function* () {
      const a = (yield this._request(SS, { id: e, input: i })).teamMembershipUpdate;
      return new Vg(this._request, a);
    });
  }
}
class Fh extends p {
  constructor(e) {
    super(e);
  }
  fetch(e, i) {
    return f(this, void 0, void 0, function* () {
      const a = (yield this._request(DS, { id: e, input: i })).teamUpdate;
      return new hA(this._request, a);
    });
  }
}
class Vh extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(wS, { input: e })).templateCreate;
      return new Rg(this._request, i);
    });
  }
}
class Th extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(FS, { id: e })).templateDelete;
      return new _e(this._request, i);
    });
  }
}
class _h extends p {
  constructor(e) {
    super(e);
  }
  fetch(e, i) {
    return f(this, void 0, void 0, function* () {
      const a = (yield this._request(VS, { id: e, input: i })).templateUpdate;
      return new Rg(this._request, a);
    });
  }
}
class mV extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(TS, { id: e })).userDemoteAdmin;
      return new qt(this._request, i);
    });
  }
}
class uV extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(_S, { id: e })).userDemoteMember;
      return new qt(this._request, i);
    });
  }
}
class pV extends p {
  constructor(e) {
    super(e);
  }
  fetch(e, i) {
    return f(this, void 0, void 0, function* () {
      const a = (yield this._request(RS, { code: e, redirectUri: i })).userDiscordConnect;
      return new _d(this._request, a);
    });
  }
}
class cV extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(US, { service: e })).userExternalUserDisconnect;
      return new _d(this._request, i);
    });
  }
}
class kV extends p {
  constructor(e) {
    super(e);
  }
  fetch(e, i) {
    return f(this, void 0, void 0, function* () {
      const a = (yield this._request(LS, { flag: e, operation: i })).userFlagUpdate;
      return new qg(this._request, a);
    });
  }
}
class vV extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(qS, { code: e })).userGitHubConnect;
      return new _d(this._request, i);
    });
  }
}
class gV extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(PS, { code: e })).userJiraConnect;
      return new _d(this._request, i);
    });
  }
}
class hV extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(OS, { id: e })).userPromoteAdmin;
      return new qt(this._request, i);
    });
  }
}
class fV extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(GS, { id: e })).userPromoteMember;
      return new qt(this._request, i);
    });
  }
}
class NV extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(MS, { flag: e })).userSettingsFlagIncrement;
      return new qg(this._request, i);
    });
  }
}
class EV extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(xS, e)).userSettingsFlagsReset;
      return new BD(this._request, i);
    });
  }
}
class Rh extends p {
  constructor(e) {
    super(e);
  }
  fetch(e, i) {
    return f(this, void 0, void 0, function* () {
      const a = (yield this._request(YS, { id: e, input: i })).userSettingsUpdate;
      return new QD(this._request, a);
    });
  }
}
class Uh extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(JS, { id: e })).userSuspend;
      return new qt(this._request, i);
    });
  }
}
class Lh extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(HS, { id: e })).userUnsuspend;
      return new qt(this._request, i);
    });
  }
}
class qh extends p {
  constructor(e) {
    super(e);
  }
  fetch(e, i) {
    return f(this, void 0, void 0, function* () {
      const a = (yield this._request(jS, { id: e, input: i })).userUpdate;
      return new _d(this._request, a);
    });
  }
}
class Ph extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(WS, { input: e })).viewPreferencesCreate;
      return new Pg(this._request, i);
    });
  }
}
class Oh extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(zS, { id: e })).viewPreferencesDelete;
      return new _e(this._request, i);
    });
  }
}
class Gh extends p {
  constructor(e) {
    super(e);
  }
  fetch(e, i) {
    return f(this, void 0, void 0, function* () {
      const a = (yield this._request(ZS, { id: e, input: i })).viewPreferencesUpdate;
      return new Pg(this._request, a);
    });
  }
}
class Mh extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(KS, { input: e })).webhookCreate;
      return new Mg(this._request, i);
    });
  }
}
class xh extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(XS, { id: e })).webhookDelete;
      return new _e(this._request, i);
    });
  }
}
class Yh extends p {
  constructor(e) {
    super(e);
  }
  fetch(e, i) {
    return f(this, void 0, void 0, function* () {
      const a = (yield this._request($S, { id: e, input: i })).webhookUpdate;
      return new Mg(this._request, a);
    });
  }
}
class Jh extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(e7, { id: e })).workflowStateArchive;
      return new DD(this._request, i);
    });
  }
}
class Hh extends p {
  constructor(e) {
    super(e);
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(i7, { input: e })).workflowStateCreate;
      return new Jg(this._request, i);
    });
  }
}
class jh extends p {
  constructor(e) {
    super(e);
  }
  fetch(e, i) {
    return f(this, void 0, void 0, function* () {
      const a = (yield this._request(n7, { id: e, input: i })).workflowStateUpdate;
      return new Jg(this._request, a);
    });
  }
}
class yV extends p {
  constructor(e, i, a) {
    super(e), this._id = i, this._variables = a;
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(vB, Object.assign(Object.assign({ id: this._id }, this._variables), e))).comment.children;
      return new oA(this._request, (a) => this.fetch(de(Object.assign(Object.assign(Object.assign({}, this._variables), e), a))), i);
    });
  }
}
class bV extends p {
  constructor(e, i, a) {
    super(e), this._id = i, this._variables = a;
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(yB, Object.assign(Object.assign({ id: this._id }, this._variables), e))).cycle.issues;
      return new rn(this._request, (a) => this.fetch(de(Object.assign(Object.assign(Object.assign({}, this._variables), e), a))), i);
    });
  }
}
class IV extends p {
  constructor(e, i, a) {
    super(e), this._id = i, this._variables = a;
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(bB, Object.assign(Object.assign({ id: this._id }, this._variables), e))).cycle.uncompletedIssuesUponClose;
      return new rn(this._request, (a) => this.fetch(de(Object.assign(Object.assign(Object.assign({}, this._variables), e), a))), i);
    });
  }
}
class CV extends p {
  constructor(e, i, a) {
    super(e), this._id = i, this._variables = a;
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(FB, Object.assign(Object.assign({ id: this._id }, this._variables), e))).favorite.children;
      return new jv(this._request, (a) => this.fetch(de(Object.assign(Object.assign(Object.assign({}, this._variables), e), a))), i);
    });
  }
}
class BV extends p {
  constructor(e, i, a) {
    super(e), this._id = i, this._variables = a;
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(PB, Object.assign(Object.assign({ id: this._id }, this._variables), e))).issue.attachments;
      return new sA(this._request, (a) => this.fetch(de(Object.assign(Object.assign(Object.assign({}, this._variables), e), a))), i);
    });
  }
}
class QV extends p {
  constructor(e, i, a) {
    super(e), this._id = i, this._variables = a;
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(OB, Object.assign(Object.assign({ id: this._id }, this._variables), e))).issue.children;
      return new rn(this._request, (a) => this.fetch(de(Object.assign(Object.assign(Object.assign({}, this._variables), e), a))), i);
    });
  }
}
class SV extends p {
  constructor(e, i, a) {
    super(e), this._id = i, this._variables = a;
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(GB, Object.assign(Object.assign({ id: this._id }, this._variables), e))).issue.comments;
      return new oA(this._request, (a) => this.fetch(de(Object.assign(Object.assign(Object.assign({}, this._variables), e), a))), i);
    });
  }
}
class DV extends p {
  constructor(e, i, a) {
    super(e), this._id = i, this._variables = a;
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(MB, Object.assign(Object.assign({ id: this._id }, this._variables), e))).issue.history;
      return new O7(this._request, (a) => this.fetch(de(Object.assign(Object.assign(Object.assign({}, this._variables), e), a))), i);
    });
  }
}
class wV extends p {
  constructor(e, i, a) {
    super(e), this._id = i, this._variables = a;
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(xB, Object.assign(Object.assign({ id: this._id }, this._variables), e))).issue.inverseRelations;
      return new uA(this._request, (a) => this.fetch(de(Object.assign(Object.assign(Object.assign({}, this._variables), e), a))), i);
    });
  }
}
class FV extends p {
  constructor(e, i, a) {
    super(e), this._id = i, this._variables = a;
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(YB, Object.assign(Object.assign({ id: this._id }, this._variables), e))).issue.labels;
      return new wd(this._request, (a) => this.fetch(de(Object.assign(Object.assign(Object.assign({}, this._variables), e), a))), i);
    });
  }
}
class VV extends p {
  constructor(e, i, a) {
    super(e), this._id = i, this._variables = a;
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(JB, Object.assign(Object.assign({ id: this._id }, this._variables), e))).issue.relations;
      return new uA(this._request, (a) => this.fetch(de(Object.assign(Object.assign(Object.assign({}, this._variables), e), a))), i);
    });
  }
}
class TV extends p {
  constructor(e, i, a) {
    super(e), this._id = i, this._variables = a;
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(HB, Object.assign(Object.assign({ id: this._id }, this._variables), e))).issue.subscribers;
      return new Td(this._request, (a) => this.fetch(de(Object.assign(Object.assign(Object.assign({}, this._variables), e), a))), i);
    });
  }
}
class _V extends p {
  constructor(e, i, a) {
    super(e), this._id = i, this._variables = a;
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(XB, Object.assign(Object.assign({ id: this._id }, this._variables), e))).issueLabel.children;
      return new wd(this._request, (a) => this.fetch(de(Object.assign(Object.assign(Object.assign({}, this._variables), e), a))), i);
    });
  }
}
class RV extends p {
  constructor(e, i, a) {
    super(e), this._id = i, this._variables = a;
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request($B, Object.assign(Object.assign({ id: this._id }, this._variables), e))).issueLabel.issues;
      return new rn(this._request, (a) => this.fetch(de(Object.assign(Object.assign(Object.assign({}, this._variables), e), a))), i);
    });
  }
}
class UV extends p {
  constructor(e, i) {
    super(e), this._variables = i;
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(u3, e)).organization.integrations;
      return new Zv(this._request, (a) => this.fetch(de(Object.assign(Object.assign(Object.assign({}, this._variables), e), a))), i);
    });
  }
}
class LV extends p {
  constructor(e, i) {
    super(e), this._variables = i;
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(p3, e)).organization.labels;
      return new wd(this._request, (a) => this.fetch(de(Object.assign(Object.assign(Object.assign({}, this._variables), e), a))), i);
    });
  }
}
class qV extends p {
  constructor(e, i) {
    super(e), this._variables = i;
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(c3, e)).organization.teams;
      return new Vd(this._request, (a) => this.fetch(de(Object.assign(Object.assign(Object.assign({}, this._variables), e), a))), i);
    });
  }
}
class PV extends p {
  constructor(e, i) {
    super(e), this._variables = i;
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(k3, e)).organization.templates;
      return new _g(this._request, i);
    });
  }
}
class OV extends p {
  constructor(e, i) {
    super(e), this._variables = i;
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(v3, e)).organization.users;
      return new Td(this._request, (a) => this.fetch(de(Object.assign(Object.assign(Object.assign({}, this._variables), e), a))), i);
    });
  }
}
class GV extends p {
  constructor(e, i, a) {
    super(e), this._id = i, this._variables = a;
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(E3, Object.assign(Object.assign({ id: this._id }, this._variables), e))).project.documents;
      return new xv(this._request, (a) => this.fetch(de(Object.assign(Object.assign(Object.assign({}, this._variables), e), a))), i);
    });
  }
}
class MV extends p {
  constructor(e, i, a) {
    super(e), this._id = i, this._variables = a;
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(y3, Object.assign(Object.assign({ id: this._id }, this._variables), e))).project.issues;
      return new rn(this._request, (a) => this.fetch(de(Object.assign(Object.assign(Object.assign({}, this._variables), e), a))), i);
    });
  }
}
class xV extends p {
  constructor(e, i, a) {
    super(e), this._id = i, this._variables = a;
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(b3, Object.assign(Object.assign({ id: this._id }, this._variables), e))).project.links;
      return new ug(this._request, (a) => this.fetch(de(Object.assign(Object.assign(Object.assign({}, this._variables), e), a))), i);
    });
  }
}
class YV extends p {
  constructor(e, i, a) {
    super(e), this._id = i, this._variables = a;
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(I3, Object.assign(Object.assign({ id: this._id }, this._variables), e))).project.members;
      return new Td(this._request, (a) => this.fetch(de(Object.assign(Object.assign(Object.assign({}, this._variables), e), a))), i);
    });
  }
}
class JV extends p {
  constructor(e, i, a) {
    super(e), this._id = i, this._variables = a;
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(C3, Object.assign(Object.assign({ id: this._id }, this._variables), e))).project.projectMilestones;
      return new kg(this._request, (a) => this.fetch(de(Object.assign(Object.assign(Object.assign({}, this._variables), e), a))), i);
    });
  }
}
class HV extends p {
  constructor(e, i, a) {
    super(e), this._id = i, this._variables = a;
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(B3, Object.assign(Object.assign({ id: this._id }, this._variables), e))).project.projectUpdates;
      return new Eg(this._request, (a) => this.fetch(de(Object.assign(Object.assign(Object.assign({}, this._variables), e), a))), i);
    });
  }
}
class jV extends p {
  constructor(e, i, a) {
    super(e), this._id = i, this._variables = a;
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(Q3, Object.assign(Object.assign({ id: this._id }, this._variables), e))).project.teams;
      return new Vd(this._request, (a) => this.fetch(de(Object.assign(Object.assign(Object.assign({}, this._variables), e), a))), i);
    });
  }
}
class WV extends p {
  constructor(e, i, a) {
    super(e), this._id = i, this._variables = a;
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(G3, Object.assign(Object.assign({ id: this._id }, this._variables), e))).roadmap.projects;
      return new vA(this._request, (a) => this.fetch(de(Object.assign(Object.assign(Object.assign({}, this._variables), e), a))), i);
    });
  }
}
class zV extends p {
  constructor(e, i, a) {
    super(e), this._id = i, this._variables = a;
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(Z3, Object.assign(Object.assign({ id: this._id }, this._variables), e))).team.cycles;
      return new Pv(this._request, (a) => this.fetch(de(Object.assign(Object.assign(Object.assign({}, this._variables), e), a))), i);
    });
  }
}
class ZV extends p {
  constructor(e, i, a) {
    super(e), this._id = i, this._variables = a;
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(K3, Object.assign(Object.assign({ id: this._id }, this._variables), e))).team.issues;
      return new rn(this._request, (a) => this.fetch(de(Object.assign(Object.assign(Object.assign({}, this._variables), e), a))), i);
    });
  }
}
class KV extends p {
  constructor(e, i, a) {
    super(e), this._id = i, this._variables = a;
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(X3, Object.assign(Object.assign({ id: this._id }, this._variables), e))).team.labels;
      return new wd(this._request, (a) => this.fetch(de(Object.assign(Object.assign(Object.assign({}, this._variables), e), a))), i);
    });
  }
}
class XV extends p {
  constructor(e, i, a) {
    super(e), this._id = i, this._variables = a;
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request($3, Object.assign(Object.assign({ id: this._id }, this._variables), e))).team.members;
      return new Td(this._request, (a) => this.fetch(de(Object.assign(Object.assign(Object.assign({}, this._variables), e), a))), i);
    });
  }
}
class $V extends p {
  constructor(e, i, a) {
    super(e), this._id = i, this._variables = a;
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(eQ, Object.assign(Object.assign({ id: this._id }, this._variables), e))).team.memberships;
      return new gA(this._request, (a) => this.fetch(de(Object.assign(Object.assign(Object.assign({}, this._variables), e), a))), i);
    });
  }
}
class eT extends p {
  constructor(e, i, a) {
    super(e), this._id = i, this._variables = a;
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(iQ, Object.assign(Object.assign({ id: this._id }, this._variables), e))).team.projects;
      return new vA(this._request, (a) => this.fetch(de(Object.assign(Object.assign(Object.assign({}, this._variables), e), a))), i);
    });
  }
}
class iT extends p {
  constructor(e, i, a) {
    super(e), this._id = i, this._variables = a;
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(nQ, Object.assign(Object.assign({ id: this._id }, this._variables), e))).team.states;
      return new Yg(this._request, (a) => this.fetch(de(Object.assign(Object.assign(Object.assign({}, this._variables), e), a))), i);
    });
  }
}
class nT extends p {
  constructor(e, i, a) {
    super(e), this._id = i, this._variables = a;
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(aQ, Object.assign(Object.assign({ id: this._id }, this._variables), e))).team.templates;
      return new _g(this._request, i);
    });
  }
}
class aT extends p {
  constructor(e, i, a) {
    super(e), this._id = i, this._variables = a;
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(tQ, Object.assign(Object.assign({ id: this._id }, this._variables), e))).team.webhooks;
      return new Gg(this._request, (a) => this.fetch(de(Object.assign(Object.assign(Object.assign({}, this._variables), e), a))), i);
    });
  }
}
class tT extends p {
  constructor(e, i, a) {
    super(e), this._id = i, this._variables = a;
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(uQ, Object.assign(Object.assign({ id: this._id }, this._variables), e))).user.assignedIssues;
      return new rn(this._request, (a) => this.fetch(de(Object.assign(Object.assign(Object.assign({}, this._variables), e), a))), i);
    });
  }
}
class dT extends p {
  constructor(e, i, a) {
    super(e), this._id = i, this._variables = a;
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(pQ, Object.assign(Object.assign({ id: this._id }, this._variables), e))).user.createdIssues;
      return new rn(this._request, (a) => this.fetch(de(Object.assign(Object.assign(Object.assign({}, this._variables), e), a))), i);
    });
  }
}
class rT extends p {
  constructor(e, i, a) {
    super(e), this._id = i, this._variables = a;
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(cQ, Object.assign(Object.assign({ id: this._id }, this._variables), e))).user.teamMemberships;
      return new gA(this._request, (a) => this.fetch(de(Object.assign(Object.assign(Object.assign({}, this._variables), e), a))), i);
    });
  }
}
class sT extends p {
  constructor(e, i, a) {
    super(e), this._id = i, this._variables = a;
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(kQ, Object.assign(Object.assign({ id: this._id }, this._variables), e))).user.teams;
      return new Vd(this._request, (a) => this.fetch(de(Object.assign(Object.assign(Object.assign({}, this._variables), e), a))), i);
    });
  }
}
class oT extends p {
  constructor(e, i, a) {
    super(e), this._id = i, this._variables = a;
  }
  fetch(e) {
    return f(this, void 0, void 0, function* () {
      const i = (yield this._request(yQ, Object.assign(Object.assign({ id: this._id }, this._variables), e))).workflowState.issues;
      return new rn(this._request, (a) => this.fetch(de(Object.assign(Object.assign(Object.assign({}, this._variables), e), a))), i);
    });
  }
}
class lT extends p {
  constructor(e) {
    super(e);
  }
  administrableTeams(e) {
    return new wD(this._request).fetch(e);
  }
  apiKeys(e) {
    return new FD(this._request).fetch(e);
  }
  applicationInfo(e) {
    return new VD(this._request).fetch(e);
  }
  applicationWithAuthorization(e, i, a) {
    return new TD(this._request).fetch(e, i, a);
  }
  attachment(e) {
    return new is(this._request).fetch(e);
  }
  attachmentIssue(e) {
    return new _D(this._request).fetch(e);
  }
  attachments(e) {
    return new RD(this._request).fetch(e);
  }
  attachmentsForURL(e, i) {
    return new UD(this._request).fetch(e, i);
  }
  auditEntries(e) {
    return new LD(this._request).fetch(e);
  }
  get auditEntryTypes() {
    return new qD(this._request).fetch();
  }
  get authenticationSessions() {
    return new PD(this._request).fetch();
  }
  get availableUsers() {
    return new OD(this._request).fetch();
  }
  comment(e) {
    return new pd(this._request).fetch(e);
  }
  comments(e) {
    return new GD(this._request).fetch(e);
  }
  customView(e) {
    return new Ln(this._request).fetch(e);
  }
  customViewHasSubscribers(e) {
    return new MD(this._request).fetch(e);
  }
  customViews(e) {
    return new xD(this._request).fetch(e);
  }
  cycle(e) {
    return new Vi(this._request).fetch(e);
  }
  cycles(e) {
    return new YD(this._request).fetch(e);
  }
  document(e) {
    return new ns(this._request).fetch(e);
  }
  documentContentHistory(e) {
    return new JD(this._request).fetch(e);
  }
  documents(e) {
    return new HD(this._request).fetch(e);
  }
  emoji(e) {
    return new Hg(this._request).fetch(e);
  }
  emojis(e) {
    return new jD(this._request).fetch(e);
  }
  favorite(e) {
    return new Rd(this._request).fetch(e);
  }
  favorites(e) {
    return new WD(this._request).fetch(e);
  }
  integration(e) {
    return new Ud(this._request).fetch(e);
  }
  integrationTemplate(e) {
    return new jg(this._request).fetch(e);
  }
  integrationTemplates(e) {
    return new zD(this._request).fetch(e);
  }
  integrations(e) {
    return new ZD(this._request).fetch(e);
  }
  integrationsSettings(e) {
    return new Ld(this._request).fetch(e);
  }
  issue(e) {
    return new Ii(this._request).fetch(e);
  }
  issueFigmaFileKeySearch(e, i) {
    return new KD(this._request).fetch(e, i);
  }
  issueFilterSuggestion(e) {
    return new XD(this._request).fetch(e);
  }
  issueImportCheckCSV(e, i) {
    return new $D(this._request).fetch(e, i);
  }
  issueImportFinishGithubOAuth(e) {
    return new ew(this._request).fetch(e);
  }
  issueLabel(e) {
    return new Nn(this._request).fetch(e);
  }
  issueLabels(e) {
    return new iw(this._request).fetch(e);
  }
  get issuePriorityValues() {
    return new nw(this._request).fetch();
  }
  issueRelation(e) {
    return new Wg(this._request).fetch(e);
  }
  issueRelations(e) {
    return new aw(this._request).fetch(e);
  }
  issueSearch(e) {
    return new tw(this._request).fetch(e);
  }
  issueVcsBranchSearch(e) {
    return new dw(this._request).fetch(e);
  }
  issues(e) {
    return new rw(this._request).fetch(e);
  }
  notification(e) {
    return new sw(this._request).fetch(e);
  }
  notificationSubscription(e) {
    return new ow(this._request).fetch(e);
  }
  notificationSubscriptions(e) {
    return new lw(this._request).fetch(e);
  }
  notifications(e) {
    return new Aw(this._request).fetch(e);
  }
  get organization() {
    return new Zi(this._request).fetch();
  }
  organizationExists(e) {
    return new mw(this._request).fetch(e);
  }
  organizationInvite(e) {
    return new zg(this._request).fetch(e);
  }
  organizationInvites(e) {
    return new uw(this._request).fetch(e);
  }
  project(e) {
    return new Me(this._request).fetch(e);
  }
  projectFilterSuggestion(e) {
    return new pw(this._request).fetch(e);
  }
  projectLink(e) {
    return new Zg(this._request).fetch(e);
  }
  projectLinks(e) {
    return new cw(this._request).fetch(e);
  }
  projectMilestone(e) {
    return new kw(this._request).fetch(e);
  }
  projectMilestones(e) {
    return new vw(this._request).fetch(e);
  }
  projectUpdate(e) {
    return new Pt(this._request).fetch(e);
  }
  projectUpdateInteraction(e) {
    return new EA(this._request).fetch(e);
  }
  projectUpdateInteractions(e) {
    return new gw(this._request).fetch(e);
  }
  projectUpdates(e) {
    return new hw(this._request).fetch(e);
  }
  projects(e) {
    return new fw(this._request).fetch(e);
  }
  get pushSubscriptionTest() {
    return new Nw(this._request).fetch();
  }
  get rateLimitStatus() {
    return new Ew(this._request).fetch();
  }
  roadmap(e) {
    return new qd(this._request).fetch(e);
  }
  roadmapToProject(e) {
    return new Kg(this._request).fetch(e);
  }
  roadmapToProjects(e) {
    return new yw(this._request).fetch(e);
  }
  roadmaps(e) {
    return new bw(this._request).fetch(e);
  }
  searchDocuments(e, i) {
    return new Iw(this._request).fetch(e, i);
  }
  searchIssues(e, i) {
    return new Cw(this._request).fetch(e, i);
  }
  searchProjects(e, i) {
    return new Bw(this._request).fetch(e, i);
  }
  ssoUrlFromEmail(e, i) {
    return new Qw(this._request).fetch(e, i);
  }
  team(e) {
    return new xe(this._request).fetch(e);
  }
  teamMembership(e) {
    return new Xg(this._request).fetch(e);
  }
  teamMemberships(e) {
    return new Sw(this._request).fetch(e);
  }
  teams(e) {
    return new Dw(this._request).fetch(e);
  }
  template(e) {
    return new dn(this._request).fetch(e);
  }
  get templates() {
    return new $g(this._request).fetch();
  }
  templatesForIntegration(e) {
    return new ww(this._request).fetch(e);
  }
  user(e) {
    return new le(this._request).fetch(e);
  }
  get userSettings() {
    return new e0(this._request).fetch();
  }
  users(e) {
    return new Fw(this._request).fetch(e);
  }
  get viewer() {
    return new Vw(this._request).fetch();
  }
  webhook(e) {
    return new i0(this._request).fetch(e);
  }
  webhooks(e) {
    return new Tw(this._request).fetch(e);
  }
  workflowState(e) {
    return new Ui(this._request).fetch(e);
  }
  workflowStates(e) {
    return new _w(this._request).fetch(e);
  }
  airbyteIntegrationConnect(e) {
    return new Rw(this._request).fetch(e);
  }
  createApiKey(e) {
    return new n0(this._request).fetch(e);
  }
  deleteApiKey(e) {
    return new a0(this._request).fetch(e);
  }
  archiveAttachment(e) {
    return new t0(this._request).fetch(e);
  }
  createAttachment(e) {
    return new d0(this._request).fetch(e);
  }
  deleteAttachment(e) {
    return new r0(this._request).fetch(e);
  }
  attachmentLinkDiscord(e, i, a, t, d) {
    return new Uw(this._request).fetch(e, i, a, t, d);
  }
  attachmentLinkFront(e, i, a) {
    return new Lw(this._request).fetch(e, i, a);
  }
  attachmentLinkGitHubPR(e, i, a, t, d, r) {
    return new qw(this._request).fetch(e, i, a, t, d, r);
  }
  attachmentLinkGitLabMR(e, i, a, t, d) {
    return new Pw(this._request).fetch(e, i, a, t, d);
  }
  attachmentLinkIntercom(e, i, a) {
    return new Ow(this._request).fetch(e, i, a);
  }
  attachmentLinkJiraIssue(e, i) {
    return new Gw(this._request).fetch(e, i);
  }
  attachmentLinkSlack(e, i, a, t, d) {
    return new Mw(this._request).fetch(e, i, a, t, d);
  }
  attachmentLinkURL(e, i, a) {
    return new xw(this._request).fetch(e, i, a);
  }
  attachmentLinkZendesk(e, i, a) {
    return new Yw(this._request).fetch(e, i, a);
  }
  attachmentUnsyncSlack(e) {
    return new Jw(this._request).fetch(e);
  }
  updateAttachment(e, i) {
    return new s0(this._request).fetch(e, i);
  }
  createComment(e) {
    return new o0(this._request).fetch(e);
  }
  deleteComment(e) {
    return new l0(this._request).fetch(e);
  }
  commentResolve(e, i) {
    return new Hw(this._request).fetch(e, i);
  }
  commentUnresolve(e) {
    return new jw(this._request).fetch(e);
  }
  updateComment(e, i) {
    return new A0(this._request).fetch(e, i);
  }
  createContact(e) {
    return new Ww(this._request).fetch(e);
  }
  createCsvExportReport(e) {
    return new zw(this._request).fetch(e);
  }
  createOrganizationFromOnboarding(e, i) {
    return new Zw(this._request).fetch(e, i);
  }
  createProjectUpdateReminder(e, i) {
    return new Kw(this._request).fetch(e, i);
  }
  createCustomView(e) {
    return new m0(this._request).fetch(e);
  }
  deleteCustomView(e) {
    return new u0(this._request).fetch(e);
  }
  updateCustomView(e, i) {
    return new p0(this._request).fetch(e, i);
  }
  archiveCycle(e) {
    return new c0(this._request).fetch(e);
  }
  createCycle(e) {
    return new k0(this._request).fetch(e);
  }
  updateCycle(e, i) {
    return new v0(this._request).fetch(e, i);
  }
  createDocument(e) {
    return new g0(this._request).fetch(e);
  }
  deleteDocument(e) {
    return new h0(this._request).fetch(e);
  }
  updateDocument(e, i) {
    return new f0(this._request).fetch(e, i);
  }
  emailTokenUserAccountAuth(e) {
    return new Xw(this._request).fetch(e);
  }
  emailUnsubscribe(e) {
    return new $w(this._request).fetch(e);
  }
  emailUserAccountAuthChallenge(e) {
    return new eF(this._request).fetch(e);
  }
  createEmoji(e) {
    return new N0(this._request).fetch(e);
  }
  deleteEmoji(e) {
    return new E0(this._request).fetch(e);
  }
  createFavorite(e) {
    return new y0(this._request).fetch(e);
  }
  deleteFavorite(e) {
    return new b0(this._request).fetch(e);
  }
  updateFavorite(e, i) {
    return new I0(this._request).fetch(e, i);
  }
  fileUpload(e, i, a, t) {
    return new iF(this._request).fetch(e, i, a, t);
  }
  googleUserAccountAuth(e) {
    return new nF(this._request).fetch(e);
  }
  imageUploadFromUrl(e) {
    return new aF(this._request).fetch(e);
  }
  importFileUpload(e, i, a, t) {
    return new tF(this._request).fetch(e, i, a, t);
  }
  integrationAsksConnectChannel(e, i) {
    return new dF(this._request).fetch(e, i);
  }
  deleteIntegration(e) {
    return new C0(this._request).fetch(e);
  }
  integrationDiscord(e, i) {
    return new rF(this._request).fetch(e, i);
  }
  integrationFigma(e, i) {
    return new sF(this._request).fetch(e, i);
  }
  integrationFront(e, i) {
    return new oF(this._request).fetch(e, i);
  }
  integrationGitHubPersonal(e) {
    return new lF(this._request).fetch(e);
  }
  get createIntegrationGithubCommit() {
    return new AF(this._request).fetch();
  }
  integrationGithubConnect(e) {
    return new mF(this._request).fetch(e);
  }
  integrationGithubSyncConnect(e) {
    return new uF(this._request).fetch(e);
  }
  integrationGitlabConnect(e, i) {
    return new pF(this._request).fetch(e, i);
  }
  integrationGoogleSheets(e) {
    return new cF(this._request).fetch(e);
  }
  integrationIntercom(e, i, a) {
    return new kF(this._request).fetch(e, i, a);
  }
  get deleteIntegrationIntercom() {
    return new vF(this._request).fetch();
  }
  updateIntegrationIntercomSettings(e) {
    return new gF(this._request).fetch(e);
  }
  integrationJiraPersonal(e) {
    return new hF(this._request).fetch(e);
  }
  get integrationLoom() {
    return new fF(this._request).fetch();
  }
  integrationRequest(e) {
    return new NF(this._request).fetch(e);
  }
  integrationSentryConnect(e, i, a) {
    return new EF(this._request).fetch(e, i, a);
  }
  integrationSlack(e, i, a) {
    return new yF(this._request).fetch(e, i, a);
  }
  integrationSlackAsks(e, i) {
    return new bF(this._request).fetch(e, i);
  }
  integrationSlackImportEmojis(e, i) {
    return new IF(this._request).fetch(e, i);
  }
  integrationSlackOrgProjectUpdatesPost(e, i) {
    return new CF(this._request).fetch(e, i);
  }
  integrationSlackPersonal(e, i) {
    return new BF(this._request).fetch(e, i);
  }
  integrationSlackPost(e, i, a, t) {
    return new QF(this._request).fetch(e, i, a, t);
  }
  integrationSlackProjectPost(e, i, a, t) {
    return new SF(this._request).fetch(e, i, a, t);
  }
  createIntegrationTemplate(e) {
    return new B0(this._request).fetch(e);
  }
  deleteIntegrationTemplate(e) {
    return new Q0(this._request).fetch(e);
  }
  integrationUpdateSlack(e, i) {
    return new DF(this._request).fetch(e, i);
  }
  integrationZendesk(e, i, a, t) {
    return new wF(this._request).fetch(e, i, a, t);
  }
  createIntegrationsSettings(e) {
    return new S0(this._request).fetch(e);
  }
  updateIntegrationsSettings(e, i) {
    return new D0(this._request).fetch(e, i);
  }
  issueAddLabel(e, i) {
    return new FF(this._request).fetch(e, i);
  }
  archiveIssue(e, i) {
    return new w0(this._request).fetch(e, i);
  }
  updateIssueBatch(e, i) {
    return new VF(this._request).fetch(e, i);
  }
  createIssue(e) {
    return new F0(this._request).fetch(e);
  }
  deleteIssue(e) {
    return new V0(this._request).fetch(e);
  }
  issueImportCreateAsana(e, i, a) {
    return new TF(this._request).fetch(e, i, a);
  }
  issueImportCreateCSVJira(e, i) {
    return new _F(this._request).fetch(e, i);
  }
  issueImportCreateClubhouse(e, i, a) {
    return new RF(this._request).fetch(e, i, a);
  }
  issueImportCreateGithub(e, i, a, t) {
    return new UF(this._request).fetch(e, i, a, t);
  }
  issueImportCreateJira(e, i, a, t, d) {
    return new LF(this._request).fetch(e, i, a, t, d);
  }
  deleteIssueImport(e) {
    return new T0(this._request).fetch(e);
  }
  issueImportProcess(e, i) {
    return new qF(this._request).fetch(e, i);
  }
  updateIssueImport(e, i) {
    return new _0(this._request).fetch(e, i);
  }
  createIssueLabel(e, i) {
    return new R0(this._request).fetch(e, i);
  }
  deleteIssueLabel(e) {
    return new U0(this._request).fetch(e);
  }
  updateIssueLabel(e, i) {
    return new L0(this._request).fetch(e, i);
  }
  createIssueRelation(e) {
    return new q0(this._request).fetch(e);
  }
  deleteIssueRelation(e) {
    return new P0(this._request).fetch(e);
  }
  updateIssueRelation(e, i) {
    return new O0(this._request).fetch(e, i);
  }
  issueReminder(e, i) {
    return new PF(this._request).fetch(e, i);
  }
  issueRemoveLabel(e, i) {
    return new OF(this._request).fetch(e, i);
  }
  issueSubscribe(e, i) {
    return new GF(this._request).fetch(e, i);
  }
  unarchiveIssue(e) {
    return new G0(this._request).fetch(e);
  }
  issueUnsubscribe(e, i) {
    return new MF(this._request).fetch(e, i);
  }
  updateIssue(e, i) {
    return new M0(this._request).fetch(e, i);
  }
  joinOrganizationFromOnboarding(e) {
    return new xF(this._request).fetch(e);
  }
  leaveOrganization(e) {
    return new YF(this._request).fetch(e);
  }
  get logout() {
    return new JF(this._request).fetch();
  }
  get logoutAllSessions() {
    return new HF(this._request).fetch();
  }
  get logoutOtherSessions() {
    return new jF(this._request).fetch();
  }
  logoutSession(e) {
    return new WF(this._request).fetch(e);
  }
  archiveNotification(e) {
    return new x0(this._request).fetch(e);
  }
  notificationArchiveAll(e) {
    return new zF(this._request).fetch(e);
  }
  notificationMarkReadAll(e, i) {
    return new ZF(this._request).fetch(e, i);
  }
  notificationMarkUnreadAll(e) {
    return new KF(this._request).fetch(e);
  }
  notificationSnoozeAll(e, i) {
    return new XF(this._request).fetch(e, i);
  }
  createNotificationSubscription(e) {
    return new Y0(this._request).fetch(e);
  }
  deleteNotificationSubscription(e) {
    return new J0(this._request).fetch(e);
  }
  updateNotificationSubscription(e, i) {
    return new H0(this._request).fetch(e, i);
  }
  unarchiveNotification(e) {
    return new j0(this._request).fetch(e);
  }
  notificationUnsnoozeAll(e, i) {
    return new $F(this._request).fetch(e, i);
  }
  updateNotification(e, i) {
    return new W0(this._request).fetch(e, i);
  }
  get deleteOrganizationCancel() {
    return new eV(this._request).fetch();
  }
  deleteOrganization(e) {
    return new z0(this._request).fetch(e);
  }
  get organizationDeleteChallenge() {
    return new iV(this._request).fetch();
  }
  deleteOrganizationDomain(e) {
    return new nV(this._request).fetch(e);
  }
  createOrganizationInvite(e) {
    return new Z0(this._request).fetch(e);
  }
  deleteOrganizationInvite(e) {
    return new K0(this._request).fetch(e);
  }
  updateOrganizationInvite(e, i) {
    return new X0(this._request).fetch(e, i);
  }
  get organizationStartPlusTrial() {
    return new aV(this._request).fetch();
  }
  updateOrganization(e) {
    return new $0(this._request).fetch(e);
  }
  archiveProject(e, i) {
    return new eh(this._request).fetch(e, i);
  }
  createProject(e) {
    return new ih(this._request).fetch(e);
  }
  deleteProject(e) {
    return new nh(this._request).fetch(e);
  }
  createProjectLink(e) {
    return new ah(this._request).fetch(e);
  }
  deleteProjectLink(e) {
    return new th(this._request).fetch(e);
  }
  updateProjectLink(e, i) {
    return new dh(this._request).fetch(e, i);
  }
  createProjectMilestone(e) {
    return new rh(this._request).fetch(e);
  }
  deleteProjectMilestone(e) {
    return new sh(this._request).fetch(e);
  }
  updateProjectMilestone(e, i) {
    return new oh(this._request).fetch(e, i);
  }
  unarchiveProject(e) {
    return new lh(this._request).fetch(e);
  }
  updateProject(e, i) {
    return new tV(this._request).fetch(e, i);
  }
  createProjectUpdate(e) {
    return new Ah(this._request).fetch(e);
  }
  deleteProjectUpdate(e) {
    return new mh(this._request).fetch(e);
  }
  createProjectUpdateInteraction(e) {
    return new uh(this._request).fetch(e);
  }
  projectUpdateMarkAsRead(e) {
    return new dV(this._request).fetch(e);
  }
  updateProjectUpdate(e, i) {
    return new ph(this._request).fetch(e, i);
  }
  createPushSubscription(e) {
    return new ch(this._request).fetch(e);
  }
  deletePushSubscription(e) {
    return new kh(this._request).fetch(e);
  }
  createReaction(e) {
    return new vh(this._request).fetch(e);
  }
  deleteReaction(e) {
    return new gh(this._request).fetch(e);
  }
  refreshGoogleSheetsData(e) {
    return new rV(this._request).fetch(e);
  }
  resendOrganizationInvite(e) {
    return new sV(this._request).fetch(e);
  }
  archiveRoadmap(e) {
    return new hh(this._request).fetch(e);
  }
  createRoadmap(e) {
    return new fh(this._request).fetch(e);
  }
  deleteRoadmap(e) {
    return new Nh(this._request).fetch(e);
  }
  createRoadmapToProject(e) {
    return new Eh(this._request).fetch(e);
  }
  deleteRoadmapToProject(e) {
    return new yh(this._request).fetch(e);
  }
  updateRoadmapToProject(e, i) {
    return new bh(this._request).fetch(e, i);
  }
  unarchiveRoadmap(e) {
    return new Ih(this._request).fetch(e);
  }
  updateRoadmap(e, i) {
    return new Ch(this._request).fetch(e, i);
  }
  samlTokenUserAccountAuth(e) {
    return new oV(this._request).fetch(e);
  }
  createTeam(e, i) {
    return new Bh(this._request).fetch(e, i);
  }
  deleteTeamCycles(e) {
    return new lV(this._request).fetch(e);
  }
  deleteTeam(e) {
    return new Qh(this._request).fetch(e);
  }
  deleteTeamKey(e) {
    return new AV(this._request).fetch(e);
  }
  createTeamMembership(e) {
    return new Sh(this._request).fetch(e);
  }
  deleteTeamMembership(e) {
    return new Dh(this._request).fetch(e);
  }
  updateTeamMembership(e, i) {
    return new wh(this._request).fetch(e, i);
  }
  updateTeam(e, i) {
    return new Fh(this._request).fetch(e, i);
  }
  createTemplate(e) {
    return new Vh(this._request).fetch(e);
  }
  deleteTemplate(e) {
    return new Th(this._request).fetch(e);
  }
  updateTemplate(e, i) {
    return new _h(this._request).fetch(e, i);
  }
  userDemoteAdmin(e) {
    return new mV(this._request).fetch(e);
  }
  userDemoteMember(e) {
    return new uV(this._request).fetch(e);
  }
  userDiscordConnect(e, i) {
    return new pV(this._request).fetch(e, i);
  }
  userExternalUserDisconnect(e) {
    return new cV(this._request).fetch(e);
  }
  updateUserFlag(e, i) {
    return new kV(this._request).fetch(e, i);
  }
  userGitHubConnect(e) {
    return new vV(this._request).fetch(e);
  }
  userJiraConnect(e) {
    return new gV(this._request).fetch(e);
  }
  userPromoteAdmin(e) {
    return new hV(this._request).fetch(e);
  }
  userPromoteMember(e) {
    return new fV(this._request).fetch(e);
  }
  userSettingsFlagIncrement(e) {
    return new NV(this._request).fetch(e);
  }
  userSettingsFlagsReset(e) {
    return new EV(this._request).fetch(e);
  }
  updateUserSettings(e, i) {
    return new Rh(this._request).fetch(e, i);
  }
  suspendUser(e) {
    return new Uh(this._request).fetch(e);
  }
  unsuspendUser(e) {
    return new Lh(this._request).fetch(e);
  }
  updateUser(e, i) {
    return new qh(this._request).fetch(e, i);
  }
  createViewPreferences(e) {
    return new Ph(this._request).fetch(e);
  }
  deleteViewPreferences(e) {
    return new Oh(this._request).fetch(e);
  }
  updateViewPreferences(e, i) {
    return new Gh(this._request).fetch(e, i);
  }
  createWebhook(e) {
    return new Mh(this._request).fetch(e);
  }
  deleteWebhook(e) {
    return new xh(this._request).fetch(e);
  }
  updateWebhook(e, i) {
    return new Yh(this._request).fetch(e, i);
  }
  archiveWorkflowState(e) {
    return new Jh(this._request).fetch(e);
  }
  createWorkflowState(e) {
    return new Hh(this._request).fetch(e);
  }
  updateWorkflowState(e, i) {
    return new jh(this._request).fetch(e, i);
  }
}
class AT extends lT {
  constructor(e) {
    const i = function(t) {
      var d, r, o, { apiKey: s, accessToken: A, apiUrl: l, headers: m } = t, u = ul(t, ["apiKey", "accessToken", "apiUrl", "headers"]);
      if (!A && !s)
        throw new Error("No accessToken or apiKey provided to the LinearClient - create one here: https://linear.app/settings/api");
      return Object.assign({ headers: Object.assign(Object.assign({ Authorization: A ? A.startsWith("Bearer ") ? A : `Bearer ${A}` : s ?? "" }, m), { "User-Agent": (o = { [(d = process.env.npm_package_name) !== null && d !== void 0 ? d : "@linear/sdk"]: (r = process.env.npm_package_version) !== null && r !== void 0 ? r : "unknown" }, Object.entries(o).reduce((c, [k, g]) => {
        const N = `${k}@${encodeURIComponent(g)}`;
        return c ? `${c} ${N}` : N;
      }, "")) }), apiUrl: l ?? "https://api.linear.app/graphql" }, u);
    }(e), a = new OC(i.apiUrl, i);
    super((t, d) => this.client.request(t, d).catch((r) => {
      throw I1(r);
    })), this.options = i, this.client = a;
  }
}
const mT = async () => {
  var r, o, s, A, l, m, u;
  debugger;
  if (pn.eventName !== "pull_request") {
    Mn.debug("Not a pull request, skipping");
    return;
  }
  const n = (o = (r = pn == null ? void 0 : pn.ref) == null ? void 0 : r.match(/refs\/pull\/(\d+)\/merge/)) == null ? void 0 : o[1], e = Mn.getInput("linear-api-key"), i = new AT({ apiKey: e }), a = Mn.getInput("netlify-site-id"), t = Mn.getInput("netlify-domain");
  if (!n) {
    Mn.debug("Could not find PR number");
    return;
  }
  if (!((A = (s = pn == null ? void 0 : pn.payload.repository) == null ? void 0 : s.owner) != null && A.name) || !((l = pn == null ? void 0 : pn.payload.repository) != null && l.name)) {
    Mn.debug("Could not find repository owner or name");
    return;
  }
  Mn.debug(`PR number: ${n}`), Mn.debug("attaching link to linear issue");
  const d = await i.issues({
    filter: {
      number: { eq: Number(n) }
    }
  });
  if (!((u = (m = d == null ? void 0 : d.nodes) == null ? void 0 : m[0]) != null && u.id)) {
    Mn.debug("Could not find linear issue");
    return;
  }
  i.createAttachment({
    issueId: d.nodes[0].id,
    title: "Netlify deploy preview",
    url: `https://deploy-preview-${n}--${a}.${t}/`,
    iconUrl: "https://cdn.worldvectorlogo.com/logos/netlify.svg"
  });
};
mT();
